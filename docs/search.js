window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = {"version": "0.9.5", "fields": ["qualname", "fullname", "annotation", "default_value", "signature", "bases", "doc"], "ref": "fullname", "documentStore": {"docs": {"sain": {"fullname": "sain", "modulename": "sain", "type": "module", "doc": "<p>Rust types implementations for Python.</p>\n\n<h6 id=\"equavilant-types\">Equavilant types</h6>\n\n<ul>\n<li><code>Option&lt;T&gt;</code> -> <code>sain.Some[T]</code></li>\n<li><code>Result&lt;T, E&gt;</code> -> <code>sain.Result[T, E</code>. Not implemented yet.</li>\n<li>Default<T> -> <code>sain.Default[T]</code></li>\n<li>AsRef<T> -> <code>sain.Ref[T]</code>. kinda...</li>\n<li>Iter<Item> -> `sain.</li>\n</ul>\n\n<h6 id=\"equavilant-macros\">Equavilant macros</h6>\n\n<ul>\n<li><code>cfg!()</code> -> <code>sain.cfg</code>.</li>\n<li><code>#[cfg_attr]</code> -> <code>sain.cfg_attr</code>.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">sain</span>\n\n<span class=\"c1\"># If a non windows machine runs this function, it will raise an error.</span>\n<span class=\"nd\">@sain</span><span class=\"o\">.</span><span class=\"n\">cfg_attr</span><span class=\"p\">(</span><span class=\"n\">target_os</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;win32&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">windows_only</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">Some</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]:</span>\n    <span class=\"k\">return</span> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@sain</span><span class=\"o\">.</span><span class=\"n\">cfg_attr</span><span class=\"p\">(</span><span class=\"n\">requires_modules</span><span class=\"o\">=</span><span class=\"s2\">&quot;uvloop&quot;</span><span class=\"p\">,</span> <span class=\"n\">target_os</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;unix&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">run_uvloop</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n    <span class=\"n\">windows_only</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s2\">&quot;Never.)  # RuntimeError(&quot;</span><span class=\"n\">Never</span><span class=\"s2\">&quot;)</span>\n\n    <span class=\"kn\">import</span> <span class=\"nn\">uvloop</span>\n    <span class=\"n\">uvloop</span><span class=\"o\">.</span><span class=\"n\">install</span><span class=\"p\">()</span>\n\n<span class=\"nd\">@sain</span><span class=\"o\">.</span><span class=\"n\">cfg_attr</span><span class=\"p\">(</span><span class=\"n\">python_version</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n<span class=\"k\">class</span> <span class=\"nc\">Foo</span><span class=\"p\">:</span>\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"nd\">@sain</span><span class=\"o\">.</span><span class=\"n\">cfg_attr</span><span class=\"p\">(</span><span class=\"n\">requires_modules</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s2\">&quot;numpy&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;pandas&quot;</span><span class=\"p\">))</span>\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">bar</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"kn\">import</span> <span class=\"nn\">numpy</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">))</span>\n</code></pre></div>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>Target OS must be one of the following:</p>\n\n<ul>\n<li><code>linux</code></li>\n<li><code>win32</code></li>\n<li><code>darwin</code></li>\n<li><code>unix</code>, which is assumed to be either linux or darwin.</li>\n</ul>\n\n<p>Target architecture must be one of the following:</p>\n\n<ul>\n<li><code>x86</code></li>\n<li><code>x64</code></li>\n<li><code>arm</code></li>\n<li><code>arm64</code></li>\n</ul>\n\n<p>Target Python implementation must be one of the following:</p>\n\n<ul>\n<li><code>CPython</code></li>\n<li><code>PyPy</code></li>\n<li><code>IronPython</code></li>\n<li><code>Jython</code></li>\n</ul>\n"}, "sain.cfg": {"fullname": "sain.cfg", "modulename": "sain.cfg", "type": "module", "doc": "<p>Runtime attr confuguration.</p>\n"}, "sain.cfg_attr": {"fullname": "sain.cfg_attr", "modulename": "sain", "qualname": "cfg_attr", "type": "function", "doc": "<p>Configure a class, method or function to be checked for the given attributes.</p>\n\n<p>If one of the attributes returns False, An exception will be raised.</p>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">sain</span>\n\n<span class=\"nd\">@sain</span><span class=\"o\">.</span><span class=\"n\">cfg_attr</span><span class=\"p\">(</span><span class=\"n\">target_os</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;win32&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">windows_only</span><span class=\"p\">():</span>\n    <span class=\"c1\"># Do stuff with Windows&#39;s API.</span>\n    <span class=\"o\">...</span>\n\n<span class=\"nd\">@sain</span><span class=\"o\">.</span><span class=\"n\">cfg_attr</span><span class=\"p\">(</span><span class=\"n\">python_version</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;3.10.0&quot;</span><span class=\"p\">,</span> <span class=\"n\">impl</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;PyPy&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">MyClass</span><span class=\"p\">:</span>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"nd\">@sain</span><span class=\"o\">.</span><span class=\"n\">cfg_attr</span><span class=\"p\">(</span><span class=\"n\">requires_modules</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s2\">&quot;numpy&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;pandas&quot;</span><span class=\"p\">))</span>\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">with_match</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"kn\">import</span> <span class=\"nn\">numpy</span>\n        <span class=\"k\">match</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">):</span>\n            <span class=\"k\">case</span> <span class=\"o\">...</span><span class=\"p\">:</span>\n                <span class=\"o\">...</span>\n</code></pre></div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>requires_modules</strong> (<code>str | Sequence[str] | None</code>):\nA string or sequence of the required modules for the object to be ran.</li>\n<li><strong>target_os</strong> (<code>str | None</code>):\nThe targeted operating system thats required for the object to be ran.</li>\n<li><p><strong>python_version</strong> (<code>tuple[int, int, int] | None</code>):\nThe targeted Python version thats required for the object to be ran.</p>\n\n<p>Format must be <code>(3, 9, 5)</code>.</p></li>\n<li><strong>target_arch</strong> (<code>str | None</code>):\nThe CPU targeted architecture thats required for the object to be ran.</li>\n<li><strong>impl</strong> (<code>str | None</code>):\nThe Python implementation thats required for the object to be ran.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong><code>RuntimeError</code></strong>: This fails if any of the attributes returns <code>False</code>. <code>required_modules</code> is not included.</li>\n<li><strong><code>ModuleNotFoundError</code></strong>: If the module check fails.</li>\n<li><strong><code>ValueError</code></strong>: If the passed Python implementation is unknown.</li>\n</ul>\n", "signature": "(\n    *,\n    requires_modules: Union[str, Sequence[str], NoneType] = None,\n    target_os: Optional[Literal['linux', 'win32', 'darwin', 'unix']] = None,\n    python_version: Optional[Tuple[int, int, int]] = None,\n    target_arch: Optional[Literal['x86', 'x64', 'arm', 'arm64']] = None,\n    impl: Optional[Literal['CPython', 'PyPy', 'IronPython', 'Jython']] = None\n) -> Callable[[~Signature], ~Signature]", "funcdef": "def"}, "sain.Default": {"fullname": "sain.Default", "modulename": "sain", "qualname": "Default", "type": "class", "doc": "<p>An object that has a default value.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">sain</span> <span class=\"kn\">import</span> <span class=\"n\">Default</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Cache</span><span class=\"p\">(</span><span class=\"n\">Default</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]):</span>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">default</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]:</span>\n        <span class=\"k\">return</span> <span class=\"p\">{}</span>\n\n<span class=\"n\">cache</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"n\">Cache</span><span class=\"p\">())</span>\n<span class=\"n\">default</span> <span class=\"o\">=</span> <span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">default</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"p\">,</span> <span class=\"n\">Default</span><span class=\"p\">)</span>\n<span class=\"c1\"># {}</span>\n</code></pre></div>\n", "bases": "typing.Protocol[+_T_co]"}, "sain.Default.__init__": {"fullname": "sain.Default.__init__", "modulename": "sain", "qualname": "Default.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, *args, **kwargs)", "funcdef": "def"}, "sain.Default.default": {"fullname": "sain.Default.default", "modulename": "sain", "qualname": "Default.default", "type": "function", "doc": "<p>Return the default value of the object.</p>\n", "signature": "() -> +_T_co", "funcdef": "def"}, "sain.Ref": {"fullname": "sain.Ref", "modulename": "sain", "qualname": "Ref", "type": "class", "doc": "<p>Represents a reference to an object.</p>\n", "bases": "typing.Generic[+_T_co]"}, "sain.Ref.__init__": {"fullname": "sain.Ref.__init__", "modulename": "sain", "qualname": "Ref.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, object: +_T_co)", "funcdef": "def"}, "sain.Ref.object": {"fullname": "sain.Ref.object", "modulename": "sain", "qualname": "Ref.object", "type": "variable", "doc": "<p>The object that is being referenced.</p>\n", "annotation": ": +_T_co"}, "sain.Ref.clone": {"fullname": "sain.Ref.clone", "modulename": "sain", "qualname": "Ref.clone", "type": "function", "doc": "<p>Make a copy of the referenced object.</p>\n", "signature": "(self) -> +_T_co", "funcdef": "def"}, "sain.Some": {"fullname": "sain.Some", "modulename": "sain", "qualname": "Some", "type": "class", "doc": "<p>The <code>Some</code> object. A typesafe object is used for values that might be <code>T</code> or <code>None</code>.</p>\n\n<p>It is similar to <code>typing.Optional[T]</code>, But has proper methods to handle the contined value.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"s2\">&quot;Hello&quot;</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n<span class=\"c1\"># Some(&quot;Hello&quot;)</span>\n\n<span class=\"c1\"># This will unwrap the contained value as long as it is not `None` otherwise this will raise an error.</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">unwrap</span><span class=\"p\">())</span>\n<span class=\"c1\"># &quot;Hello&quot;</span>\n\n<span class=\"n\">none_value</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"k\">while</span> <span class=\"n\">none_value</span><span class=\"o\">.</span><span class=\"n\">unwrap</span><span class=\"p\">():</span>\n    <span class=\"c1\"># Never unreachable!</span>\n\n<span class=\"c1\"># Solving it with `unwrap_or` method to unwrap the value or return a default value.</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">none_value</span><span class=\"o\">.</span><span class=\"n\">unwrap_or</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">))</span>\n<span class=\"c1\"># 10</span>\n</code></pre></div>\n", "bases": "typing.Generic[~ValueT], sain.deafult.Default[NoneType]"}, "sain.Some.__init__": {"fullname": "sain.Some.__init__", "modulename": "sain", "qualname": "Some.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, value: Optional[~ValueT])", "funcdef": "def"}, "sain.Some.default": {"fullname": "sain.Some.default", "modulename": "sain", "qualname": "Some.default", "type": "function", "doc": "<p>Return the default value for <code>Some</code>. This always returns <code>None</code>.</p>\n", "signature": "() -> None", "funcdef": "def"}, "sain.Some.read": {"fullname": "sain.Some.read", "modulename": "sain", "qualname": "Some.read", "type": "variable", "doc": "<p>Read the contained value.</p>\n", "annotation": ": Optional[~ValueT]"}, "sain.Some.unwrap": {"fullname": "sain.Some.unwrap", "modulename": "sain", "qualname": "Some.unwrap", "type": "function", "doc": "<p>Unwrap the inner value either returning if its not <code>None</code> or raising a <code>RuntimeError</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">unwrap</span><span class=\"p\">())</span>\n<span class=\"c1\"># 5</span>\n\n<span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">unwrap</span><span class=\"p\">())</span>\n<span class=\"c1\"># RuntimeError: ...</span>\n</code></pre></div>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong><code>RuntimeError</code></strong>: If the inner value is <code>None</code>.</li>\n</ul>\n", "signature": "(self) -> ~ValueT", "funcdef": "def"}, "sain.Some.unwrap_or": {"fullname": "sain.Some.unwrap_or", "modulename": "sain", "qualname": "Some.unwrap_or", "type": "function", "doc": "<p>Unwrap the inner value either returning if its not <code>None</code> or returning <code>default</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">unwrap_or</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">))</span>\n<span class=\"c1\"># 5</span>\n\n<span class=\"c1\"># Type hint is required here.</span>\n\n<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Some</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">unwrap_or</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">))</span>\n<span class=\"c1\"># 10</span>\n</code></pre></div>\n", "signature": "(self, default: ~ValueT, /) -> ~ValueT", "funcdef": "def"}, "sain.Some.unwrap_or_else": {"fullname": "sain.Some.unwrap_or_else", "modulename": "sain", "qualname": "Some.unwrap_or_else", "type": "function", "doc": "<p>Unwrap the inner value either returning if its not <code>None</code> or calling <code>f</code> to get a default value.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">unwrap_or_else</span><span class=\"p\">(</span><span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">))</span>\n<span class=\"c1\"># 5</span>\n\n<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Some</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">unwrap_or_else</span><span class=\"p\">(</span><span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">))</span>\n<span class=\"c1\"># True</span>\n</code></pre></div>\n", "signature": "(self, f: Callable[[], ~ValueT]) -> ~ValueT", "funcdef": "def"}, "sain.Some.map": {"fullname": "sain.Some.map", "modulename": "sain", "qualname": "Some.map", "type": "function", "doc": "<p>Map the inner value to a new value.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"mf\">5.0</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"mf\">2.0</span><span class=\"p\">))</span>\n<span class=\"c1\"># Some(10.0)</span>\n</code></pre></div>\n", "signature": "(\n    self,\n    f: Callable[[~ValueT], ~T]\n) -> sain.option.Some[typing.Optional[~T]]", "funcdef": "def"}, "sain.Some.map_or": {"fullname": "sain.Some.map_or", "modulename": "sain", "qualname": "Some.map_or", "type": "function", "doc": "<p>Map the inner value to a new value or return <code>default</code> if its <code>None</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"mf\">5.0</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Since the value is not `None` this will get mapped.</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">map_or</span><span class=\"p\">(</span><span class=\"mf\">10.0</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"mf\">1.0</span><span class=\"p\">))</span>\n<span class=\"c1\"># 6.0</span>\n\n<span class=\"c1\"># This is `None`, so the default value will be returned.</span>\n<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Some</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">map_or</span><span class=\"p\">(</span><span class=\"s2\">&quot;5&quot;</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)))</span>\n<span class=\"c1\"># &quot;5&quot;</span>\n</code></pre></div>\n", "signature": "(self, default: ~T, f: Callable[[~ValueT], ~T]) -> ~T", "funcdef": "def"}, "sain.Some.map_or_else": {"fullname": "sain.Some.map_or_else", "modulename": "sain", "qualname": "Some.map_or_else", "type": "function", "doc": "<p></p>\n", "signature": "(self, default: Callable[[], ~T], f: Callable[[~ValueT], ~T]) -> ~T", "funcdef": "def"}, "sain.Some.filter": {"fullname": "sain.Some.filter", "modulename": "sain", "qualname": "Some.filter", "type": "function", "doc": "<p>Returns <code>Some[None]</code> if the contained value is <code>None</code>,</p>\n\n<p>otherwise calls the predicate and returns <code>Some[ValueT]</code> if the predicate returns <code>True</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"c1\"># Some([1, 2, 3])</span>\n\n<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Some</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">&gt;</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"c1\"># None</span>\n</code></pre></div>\n", "signature": "(\n    self,\n    predicate: Callable[[~ValueT], bool]\n) -> sain.option.Some[~ValueT]", "funcdef": "def"}, "sain.Some.take": {"fullname": "sain.Some.take", "modulename": "sain", "qualname": "Some.take", "type": "function", "doc": "<p>Take the value from the <code>Some</code> object setting it to <code>None</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"s2\">&quot;Hi&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n<span class=\"c1\"># None</span>\n</code></pre></div>\n", "signature": "(self) -> None", "funcdef": "def"}, "sain.Some.replace": {"fullname": "sain.Some.replace", "modulename": "sain", "qualname": "Some.replace", "type": "function", "doc": "<p>Replace the contained value with another value.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"s2\">&quot;Hi&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">&quot;Hello&quot;</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n<span class=\"c1\"># Some(&quot;Hello&quot;)</span>\n</code></pre></div>\n", "signature": "(self, value: ~ValueT) -> sain.option.Some[~ValueT]", "funcdef": "def"}, "sain.Some.expect": {"fullname": "sain.Some.expect", "modulename": "sain", "qualname": "Some.expect", "type": "function", "doc": "<p>Returns <code>ValueT</code> if the contained value is not <code>None</code> otherwise raises a <code>RuntimeError</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"s2\">&quot;Hello&quot;</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s2\">&quot;Value is None&quot;</span><span class=\"p\">))</span>\n<span class=\"c1\"># &quot;Hello&quot;</span>\n\n<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Some</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s2\">&quot;Value is None&quot;</span><span class=\"p\">))</span>\n<span class=\"c1\"># RuntimeError: ...</span>\n</code></pre></div>\n", "signature": "(self, message: str, /) -> ~ValueT", "funcdef": "def"}, "sain.Some.and_ok": {"fullname": "sain.Some.and_ok", "modulename": "sain", "qualname": "Some.and_ok", "type": "function", "doc": "<p>Returns <code>Some[None]</code> if the contained value is <code>None</code>,</p>\n\n<p>otherwise calls the optb and returns <code>Some[T]</code> if the predicate returns <code>True</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">and_ok</span><span class=\"p\">(</span><span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)))</span>\n<span class=\"c1\"># Some(10)</span>\n\n<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Some</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">and_ok</span><span class=\"p\">(</span><span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)))</span>\n<span class=\"c1\"># None</span>\n</code></pre></div>\n", "signature": "(\n    self,\n    optb: sain.option.Some[typing.Optional[~T]]\n) -> sain.option.Some[typing.Optional[~T]]", "funcdef": "def"}, "sain.Some.and_then": {"fullname": "sain.Some.and_then", "modulename": "sain", "qualname": "Some.and_then", "type": "function", "doc": "<p>Returns <code>Some[None]</code> if the contained value is <code>None</code>, otherwise call <code>f</code> on <code>ValueT</code> and return the result.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">and_then</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"mi\">2</span><span class=\"p\">)))</span>\n<span class=\"c1\"># Some(10)</span>\n\n<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Some</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">and_then</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"mi\">2</span><span class=\"p\">)))</span>\n<span class=\"c1\"># Some(None)</span>\n</code></pre></div>\n", "signature": "(\n    self,\n    f: Callable[[~ValueT], sain.option.Some[Optional[~T]]]\n) -> sain.option.Some[typing.Optional[~T]]", "funcdef": "def"}, "sain.Some.as_ref": {"fullname": "sain.Some.as_ref", "modulename": "sain", "qualname": "Some.as_ref", "type": "function", "doc": "<p>Returns <code>Some[Ref[ValueT]]</code> if the contained value is not <code>None</code>, otherwise returns <code>None</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">as_ref</span><span class=\"p\">())</span>\n<span class=\"c1\"># Some(Ref(5))</span>\n\n<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Some</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">as_ref</span><span class=\"p\">())</span>\n<span class=\"c1\"># None</span>\n</code></pre></div>\n", "signature": "(self) -> sain.option.Some[sain.ref.Ref[~ValueT]]", "funcdef": "def"}, "sain.Some.is_some": {"fullname": "sain.Some.is_some", "modulename": "sain", "qualname": "Some.is_some", "type": "function", "doc": "<p></p>\n", "signature": "(self) -> bool", "funcdef": "def"}, "sain.Some.is_some_and": {"fullname": "sain.Some.is_some_and", "modulename": "sain", "qualname": "Some.is_some_and", "type": "function", "doc": "<p></p>\n", "signature": "(self, predicate: Callable[[~ValueT], bool]) -> bool", "funcdef": "def"}, "sain.Some.is_none": {"fullname": "sain.Some.is_none", "modulename": "sain", "qualname": "Some.is_none", "type": "function", "doc": "<p></p>\n", "signature": "(self) -> bool", "funcdef": "def"}, "sain.Some.is_none_and": {"fullname": "sain.Some.is_none_and", "modulename": "sain", "qualname": "Some.is_none_and", "type": "function", "doc": "<p></p>\n", "signature": "(self, predicate: Callable[[NoneType], bool]) -> bool", "funcdef": "def"}, "sain.into_iter": {"fullname": "sain.into_iter", "modulename": "sain", "qualname": "into_iter", "type": "function", "doc": "<p>Convert an iterable into <code>Iter</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"n\">sequence</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">into_iter</span><span class=\"p\">(</span><span class=\"n\">sequence</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">reversed</span><span class=\"p\">():</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n<span class=\"c1\"># 3</span>\n<span class=\"c1\"># 2</span>\n<span class=\"c1\"># 1</span>\n</code></pre></div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>iterable</strong> (<code>typing.Iterable[Item]</code>):\nThe iterable to convert.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong><code>StopIteration</code></strong>: If no elements are left in the iterator.</li>\n</ul>\n", "signature": "(iterable: Iterable[~Item]) -> sain.iter.Iter[~Item]", "funcdef": "def"}, "sain.Iter": {"fullname": "sain.Iter", "modulename": "sain", "qualname": "Iter", "type": "class", "doc": "<p>Lazy, In-Memory iterator for sequence types with some functional methods.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"c1\"># Limit the results to 2.</span>\n<span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n<span class=\"c1\"># 1</span>\n<span class=\"c1\"># 2</span>\n\n<span class=\"c1\"># Filter the results.</span>\n<span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"n\">item</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">())</span>\n<span class=\"c1\"># 2</span>\n<span class=\"c1\"># 3</span>\n<span class=\"c1\"># 3</span>\n\n<span class=\"c1\"># Indexing is supported.</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">iterator</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"c1\"># 1</span>\n</code></pre></div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>items</strong> (<code>typing.Iterable[Item]</code>):\nThe items to iterate over. This must be an iterable.</li>\n</ul>\n", "bases": "typing.Iterator[~Item], typing.Generic[~Item], sain.deafult.Default[typing.Iterable[~Item]]"}, "sain.Iter.__init__": {"fullname": "sain.Iter.__init__", "modulename": "sain", "qualname": "Iter.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, items: Iterable[~Item])", "funcdef": "def"}, "sain.Iter.default": {"fullname": "sain.Iter.default", "modulename": "sain", "qualname": "Iter.default", "type": "function", "doc": "<p>Returns the default value for the iterator. An empty list is returned.</p>\n", "signature": "() -> Iterable[~Item]", "funcdef": "def"}, "sain.Iter.collect": {"fullname": "sain.Iter.collect", "modulename": "sain", "qualname": "Iter.collect", "type": "function", "doc": "<p>Collects all items in the iterator into a list.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"go\">[1, 2, 3]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">)</span>\n<span class=\"go\">[&#39;1&#39;, &#39;2&#39;, &#39;3&#39;]</span>\n</code></pre></div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>casting</strong> (<code>T | None</code>):\nAn optional type to cast the items into.\nIf not provided the items will be returned as a normal list.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong><code>StopIteration</code></strong>: If no elements are left in the iterator.</li>\n</ul>\n", "signature": "(\n    self,\n    casting: 'typing.Optional[_B]' = None,\n    /\n) -> 'typing.Union[typing.List[Item], list[_B]]'", "funcdef": "def"}, "sain.Iter.next": {"fullname": "sain.Iter.next", "modulename": "sain", "qualname": "Iter.next", "type": "function", "doc": "<p>Returns the next item in the iterator.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]([</span><span class=\"s2\">&quot;1&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;2&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;3&quot;</span><span class=\"p\">])</span>\n<span class=\"go\">item = iterator.next()</span>\n<span class=\"go\">assert item == &quot;1&quot;</span>\n<span class=\"go\">item = iterator.next()</span>\n<span class=\"go\">assert item == &quot;2&quot;</span>\n</code></pre></div>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong><code>StopIteration</code></strong>: If no elements are left in the iterator.</li>\n</ul>\n", "signature": "(self) -> ~Item", "funcdef": "def"}, "sain.Iter.map": {"fullname": "sain.Iter.map", "modulename": "sain", "qualname": "Iter.map", "type": "function", "doc": "<p>Maps each item in the iterator to its predicated value.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]([</span><span class=\"s2\">&quot;1&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;2&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;3&quot;</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">))</span>\n<span class=\"go\">&lt;Iter([1, 2, 3])&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">iterator</span><span class=\"p\">:</span>\n<span class=\"go\">        assert isinstance(item, int)</span>\n</code></pre></div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>predicate</strong> (<code>typing.Callable[[Item], Item]</code>):\nThe function to map each item in the iterator to its predicated value.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong><code>StopIteration</code></strong>: If no elements are left in the iterator.</li>\n</ul>\n", "signature": "(\n    self,\n    predicate: 'typing.Callable[[Item], OtherItem]'\n) -> 'Iter[OtherItem]'", "funcdef": "def"}, "sain.Iter.take": {"fullname": "sain.Iter.take", "modulename": "sain", "qualname": "Iter.take", "type": "function", "doc": "<p>Take the first number of items until the number of items are yielded or\nthe end of the iterator is reached.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"n\">RAID</span><span class=\"p\">,</span> <span class=\"n\">STRIKE</span><span class=\"p\">,</span> <span class=\"n\">GAMBIT</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">for</span> <span class=\"n\">mode</span> <span class=\"ow\">in</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">):</span>\n<span class=\"go\">        assert mode in [RAID, STRIKE]</span>\n<span class=\"go\">&lt;Iter([RAID, STRIKE])&gt;</span>\n</code></pre></div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>n</strong> (<code>int</code>):\nThe number of items to take.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong><code>StopIteration</code></strong>: If no elements are left in the iterator.</li>\n</ul>\n", "signature": "(self, n: int) -> sain.iter.Iter[~Item]", "funcdef": "def"}, "sain.Iter.take_while": {"fullname": "sain.Iter.take_while", "modulename": "sain", "qualname": "Iter.take_while", "type": "function", "doc": "<p>Yields items from the iterator while predicate returns <code>True</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"s1\">&#39;VIP&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Regular&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Guard&#39;</span><span class=\"p\">])</span>\n<span class=\"k\">for</span> <span class=\"n\">membership</span> <span class=\"ow\">in</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">take_while</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">m</span><span class=\"p\">:</span> <span class=\"n\">m</span> <span class=\"ow\">is</span> <span class=\"s1\">&#39;VIP&#39;</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">membership</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># VIP</span>\n</code></pre></div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>predicate</strong> (<code>typing.Callable[[Item], bool]</code>):\nThe function to predicate each item in the iterator.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong><code>StopIteration</code></strong>: If no elements are left in the iterator.</li>\n</ul>\n", "signature": "(self, predicate: Callable[[~Item], bool]) -> sain.iter.Iter[~Item]", "funcdef": "def"}, "sain.Iter.drop_while": {"fullname": "sain.Iter.drop_while", "modulename": "sain", "qualname": "Iter.drop_while", "type": "function", "doc": "<p>Yields items from the iterator while predicate returns <code>False</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"s1\">&#39;VIP&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Regular&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Guard&#39;</span><span class=\"p\">])</span>\n<span class=\"k\">for</span> <span class=\"n\">membership</span> <span class=\"ow\">in</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">drop_while</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">m</span><span class=\"p\">:</span> <span class=\"n\">m</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"s1\">&#39;VIP&#39;</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">membership</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Regular</span>\n<span class=\"c1\"># Guard</span>\n</code></pre></div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>predicate</strong> (<code>typing.Callable[[Item], bool]</code>):\nThe function to predicate each item in the iterator.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong><code>StopIteration</code></strong>: If no elements are left in the iterator.</li>\n</ul>\n", "signature": "(self, predicate: Callable[[~Item], bool]) -> sain.iter.Iter[~Item]", "funcdef": "def"}, "sain.Iter.filter": {"fullname": "sain.Iter.filter", "modulename": "sain", "qualname": "Iter.filter", "type": "function", "doc": "<p>Filters the iterator to only yield items that match the predicate.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"n\">places</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"s1\">&#39;London&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Paris&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Los Angeles&#39;</span><span class=\"p\">])</span>\n<span class=\"k\">for</span> <span class=\"n\">place</span> <span class=\"ow\">in</span> <span class=\"n\">places</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">place</span><span class=\"p\">:</span> <span class=\"n\">place</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s1\">&#39;L&#39;</span><span class=\"p\">)):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">place</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># London</span>\n<span class=\"c1\"># Los Angeles</span>\n</code></pre></div>\n", "signature": "(self, predicate: Callable[[~Item], bool]) -> sain.iter.Iter[~Item]", "funcdef": "def"}, "sain.Iter.skip": {"fullname": "sain.Iter.skip", "modulename": "sain", "qualname": "Iter.skip", "type": "function", "doc": "<p>Skips the first number of items in the iterator.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<p>```py\niterator = Iter([MembershipType.STEAM, MembershipType.XBOX, MembershipType.STADIA])\nfor platform in iterator.skip(1):\n        print(platform)</p>\n\n<h1 id=\"skip-the-first-item-in-the-iterator\">Skip the first item in the iterator.</h1>\n\n<h1 id=\"itermembershiptypexbox-membershiptypestadia\"><Iter([MembershipType.XBOX, MembershipType.STADIA])&gt;</h1>\n", "signature": "(self, n: int) -> sain.iter.Iter[~Item]", "funcdef": "def"}, "sain.Iter.discard": {"fullname": "sain.Iter.discard", "modulename": "sain", "qualname": "Iter.discard", "type": "function", "doc": "<p>Discards all elements in the iterator for which the predicate function returns true.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"n\">MembershipType</span><span class=\"o\">.</span><span class=\"n\">STEAM</span><span class=\"p\">,</span> <span class=\"n\">MembershipType</span><span class=\"o\">.</span><span class=\"n\">XBOX</span><span class=\"p\">,</span> <span class=\"n\">MembershipType</span><span class=\"o\">.</span><span class=\"n\">STADIA</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">discard</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">platform</span><span class=\"p\">:</span> <span class=\"n\">platform</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"n\">MembershipType</span><span class=\"o\">.</span><span class=\"n\">STEAM</span><span class=\"p\">):</span>\n<span class=\"go\">        # Drops all memberships that are not steam.</span>\n<span class=\"go\">        print(iterator)</span>\n<span class=\"go\">&lt;Iter([MembershipType.XBOX, MembershipType.STADIA])&gt;</span>\n</code></pre></div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>predicate</strong> (<code>typing.Callable[[Item], bool]</code>):\nThe function to test each item in the iterator.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong><code>StopIteration</code></strong>: If no elements are left in the iterator.</li>\n</ul>\n", "signature": "(self, predicate: Callable[[~Item], bool]) -> sain.iter.Iter[~Item]", "funcdef": "def"}, "sain.Iter.zip": {"fullname": "sain.Iter.zip", "modulename": "sain", "qualname": "Iter.zip", "type": "function", "doc": "<p>Zips the iterator with another iterable.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">other</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">for</span> <span class=\"n\">item</span><span class=\"p\">,</span> <span class=\"n\">other_item</span> <span class=\"ow\">in</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">zip</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">):</span>\n<span class=\"go\">        assert item == other_item</span>\n<span class=\"go\">&lt;Iter([(1, 4), (2, 5), (3, 6)])&gt;</span>\n</code></pre></div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>other</strong> (<code>Iter[OtherItem]</code>):\nThe iterable to zip with.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong><code>Iter[tuple[Item, OtherItem]]</code></strong>: The zipped iterator.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong><code>StopIteration</code></strong>: If no elements are left in the iterator.</li>\n</ul>\n", "signature": "(\n    self,\n    other: 'Iter[OtherItem]'\n) -> 'Iter[typing.Tuple[Item, OtherItem]]'", "funcdef": "def"}, "sain.Iter.all": {"fullname": "sain.Iter.all", "modulename": "sain", "qualname": "Iter.all", "type": "function", "doc": "<p>Return <code>True</code> if all items in the iterator match the predicate.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">while</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">)):</span>\n<span class=\"go\">        print(&quot;Still all integers&quot;)</span>\n<span class=\"go\">        continue</span>\n<span class=\"go\">    # Still all integers</span>\n</code></pre></div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>predicate</strong> (<code>typing.Callable[[Item], bool]</code>):\nThe function to test each item in the iterator.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong><code>StopIteration</code></strong>: If no elements are left in the iterator.</li>\n</ul>\n", "signature": "(self, predicate: Callable[[~Item], bool]) -> bool", "funcdef": "def"}, "sain.Iter.any": {"fullname": "sain.Iter.any", "modulename": "sain", "qualname": "Iter.any", "type": "function", "doc": "<p><code>True</code> if any items in the iterator match the predicate.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">if</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">any</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">)):</span>\n<span class=\"go\">        print(&quot;At least one item is an int.&quot;)</span>\n<span class=\"go\">&lt;h1 id=&quot;at-least-one-item-is-an-int&quot;&gt;At least one item is an int.&lt;/h1&gt;</span>\n</code></pre></div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>predicate</strong> (<code>typing.Callable[[Item], bool]</code>):\nThe function to test each item in the iterator.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong><code>StopIteration</code></strong>: If no elements are left in the iterator.</li>\n</ul>\n", "signature": "(self, predicate: Callable[[~Item], bool]) -> bool", "funcdef": "def"}, "sain.Iter.sort": {"fullname": "sain.Iter.sort", "modulename": "sain", "qualname": "Iter.sort", "type": "function", "doc": "<p>Sorts the iterator.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">sort</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"n\">item</span> <span class=\"o\">&lt;</span> <span class=\"mi\">3</span><span class=\"p\">):</span>\n<span class=\"go\">        print(item)</span>\n<span class=\"go\">&lt;h1 id=&quot;1&quot;&gt;1&lt;/h1&gt;</span>\n</code></pre></div>\n\n<h1 id=\"3\">3</h1>\n\n<h1 id=\"6\">6</h1>\n\n<h1 id=\"7\">7</h1>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>key</strong> (<code>typing.Callable[[Item], Any]</code>):\nThe function to sort by.</li>\n<li><strong>reverse</strong> (<code>bool</code>):\nWhether to reverse the sort.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong><code>StopIteration</code></strong>: If no elements are left in the iterator.</li>\n</ul>\n", "signature": "(\n    self,\n    *,\n    key: 'typing.Callable[[Item], typeshed.SupportsRichComparison]',\n    reverse: bool = False\n) -> sain.iter.Iter[~Item]", "funcdef": "def"}, "sain.Iter.first": {"fullname": "sain.Iter.first", "modulename": "sain", "qualname": "Iter.first", "type": "function", "doc": "<p>Returns the first item in the iterator.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">first</span><span class=\"p\">()</span>\n<span class=\"go\">3</span>\n</code></pre></div>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong><code>StopIteration</code></strong>: If no elements are left in the iterator.</li>\n</ul>\n", "signature": "(self) -> ~Item", "funcdef": "def"}, "sain.Iter.reversed": {"fullname": "sain.Iter.reversed", "modulename": "sain", "qualname": "Iter.reversed", "type": "function", "doc": "<p>Returns a new iterator that yields the items in the iterator in reverse order.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">reversed</span><span class=\"p\">():</span>\n<span class=\"go\">        print(item)</span>\n<span class=\"go\">&lt;h1 id=&quot;7&quot;&gt;7&lt;/h1&gt;</span>\n</code></pre></div>\n\n<h1 id=\"6\">6</h1>\n\n<h1 id=\"1\">1</h1>\n\n<h1 id=\"3\">3</h1>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong><code>StopIteration</code></strong>: If no elements are left in the iterator.</li>\n</ul>\n", "signature": "(self) -> sain.iter.Iter[~Item]", "funcdef": "def"}, "sain.Iter.count": {"fullname": "sain.Iter.count", "modulename": "sain", "qualname": "Iter.count", "type": "function", "doc": "<p></p>\n", "signature": "(self) -> int", "funcdef": "def"}, "sain.Iter.union": {"fullname": "sain.Iter.union", "modulename": "sain", "qualname": "Iter.union", "type": "function", "doc": "<p>Returns a new iterator that yields all items from both iterators.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">other</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">union</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">):</span>\n<span class=\"go\">        print(item)</span>\n<span class=\"go\">&lt;h1 id=&quot;1&quot;&gt;1&lt;/h1&gt;</span>\n</code></pre></div>\n\n<h1 id=\"2\">2</h1>\n\n<h1 id=\"3\">3</h1>\n\n<h1 id=\"4\">4</h1>\n\n<h1 id=\"5\">5</h1>\n\n<h1 id=\"6\">6</h1>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>other</strong> (<code>Iter[Item]</code>):\nThe iterable to union with.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong><code>StopIteration</code></strong>: If no elements are left in the iterator.</li>\n</ul>\n", "signature": "(self, other: sain.iter.Iter[~Item]) -> sain.iter.Iter[~Item]", "funcdef": "def"}, "sain.Iter.for_each": {"fullname": "sain.Iter.for_each", "modulename": "sain", "qualname": "Iter.for_each", "type": "function", "doc": "<p>Calls <code>func</code> on each item in the iterator.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">for_each</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">))</span>\n<span class=\"go\">&lt;h1 id=&quot;1&quot;&gt;1&lt;/h1&gt;</span>\n</code></pre></div>\n\n<h1 id=\"2\">2</h1>\n\n<h1 id=\"3\">3</h1>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>func</strong> (<code>typing.Callable[[Item], typing.Any]</code>):\nThe function to call on each item in the iterator.</li>\n</ul>\n", "signature": "(self, func: Callable[[~Item], Any]) -> None", "funcdef": "def"}, "sain.Iter.enumerate": {"fullname": "sain.Iter.enumerate", "modulename": "sain", "qualname": "Iter.enumerate", "type": "function", "doc": "<p>Returns a new iterator that yields tuples of the index and item.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">for</span> <span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">enumerate</span><span class=\"p\">():</span>\n<span class=\"go\">        print(index, item)</span>\n<span class=\"go\">&lt;h1 id=&quot;0-1&quot;&gt;0, 1&lt;/h1&gt;</span>\n</code></pre></div>\n\n<h1 id=\"1-2\">1, 2</h1>\n\n<h1 id=\"2-3\">2, 3</h1>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong><code>StopIteration</code></strong>: If no elements are left in the iterator.</li>\n</ul>\n", "signature": "(self, *, start: int = 0) -> sain.iter.Iter[typing.Tuple[int, ~Item]]", "funcdef": "def"}, "sain.cfg.cfg_attr": {"fullname": "sain.cfg.cfg_attr", "modulename": "sain.cfg", "qualname": "cfg_attr", "type": "function", "doc": "<p>Configure a class, method or function to be checked for the given attributes.</p>\n\n<p>If one of the attributes returns False, An exception will be raised.</p>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">sain</span>\n\n<span class=\"nd\">@sain</span><span class=\"o\">.</span><span class=\"n\">cfg_attr</span><span class=\"p\">(</span><span class=\"n\">target_os</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;win32&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">windows_only</span><span class=\"p\">():</span>\n    <span class=\"c1\"># Do stuff with Windows&#39;s API.</span>\n    <span class=\"o\">...</span>\n\n<span class=\"nd\">@sain</span><span class=\"o\">.</span><span class=\"n\">cfg_attr</span><span class=\"p\">(</span><span class=\"n\">python_version</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;3.10.0&quot;</span><span class=\"p\">,</span> <span class=\"n\">impl</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;PyPy&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">MyClass</span><span class=\"p\">:</span>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"nd\">@sain</span><span class=\"o\">.</span><span class=\"n\">cfg_attr</span><span class=\"p\">(</span><span class=\"n\">requires_modules</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s2\">&quot;numpy&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;pandas&quot;</span><span class=\"p\">))</span>\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">with_match</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"kn\">import</span> <span class=\"nn\">numpy</span>\n        <span class=\"k\">match</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">):</span>\n            <span class=\"k\">case</span> <span class=\"o\">...</span><span class=\"p\">:</span>\n                <span class=\"o\">...</span>\n</code></pre></div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>requires_modules</strong> (<code>str | Sequence[str] | None</code>):\nA string or sequence of the required modules for the object to be ran.</li>\n<li><strong>target_os</strong> (<code>str | None</code>):\nThe targeted operating system thats required for the object to be ran.</li>\n<li><p><strong>python_version</strong> (<code>tuple[int, int, int] | None</code>):\nThe targeted Python version thats required for the object to be ran.</p>\n\n<p>Format must be <code>(3, 9, 5)</code>.</p></li>\n<li><strong>target_arch</strong> (<code>str | None</code>):\nThe CPU targeted architecture thats required for the object to be ran.</li>\n<li><strong>impl</strong> (<code>str | None</code>):\nThe Python implementation thats required for the object to be ran.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong><code>RuntimeError</code></strong>: This fails if any of the attributes returns <code>False</code>. <code>required_modules</code> is not included.</li>\n<li><strong><code>ModuleNotFoundError</code></strong>: If the module check fails.</li>\n<li><strong><code>ValueError</code></strong>: If the passed Python implementation is unknown.</li>\n</ul>\n", "signature": "(\n    *,\n    requires_modules: Union[str, Sequence[str], NoneType] = None,\n    target_os: Optional[Literal['linux', 'win32', 'darwin', 'unix']] = None,\n    python_version: Optional[Tuple[int, int, int]] = None,\n    target_arch: Optional[Literal['x86', 'x64', 'arm', 'arm64']] = None,\n    impl: Optional[Literal['CPython', 'PyPy', 'IronPython', 'Jython']] = None\n) -> Callable[[~Signature], ~Signature]", "funcdef": "def"}, "sain.cfg.cfg": {"fullname": "sain.cfg.cfg", "modulename": "sain.cfg", "qualname": "cfg", "type": "function", "doc": "<p>A function that will run the code only if all predicate attributes returns <code>True</code>.</p>\n\n<p>The difference between this function and <code>cfg_attr</code> is that this function will not raise an exception.\nInstead it will return <code>False</code> if any of the attributes fails.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">sain</span>\n\n<span class=\"k\">if</span> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">cfg</span><span class=\"p\">(</span><span class=\"n\">target_os</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;win32&quot;</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Windows&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">elif</span> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">cfg</span><span class=\"p\">(</span><span class=\"n\">target_os</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;linux&quot;</span><span class=\"p\">,</span> <span class=\"n\">python_verion</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Linux&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;MacOS&quot;</span><span class=\"p\">)</span>\n\n<span class=\"k\">while</span> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">cfg</span><span class=\"p\">(</span><span class=\"n\">requires_modules</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s2\">&quot;hikari&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;hikari-tanjun&quot;</span><span class=\"p\">),</span> <span class=\"n\">python_version</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)):</span>\n    <span class=\"o\">...</span>\n</code></pre></div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>requires_modules</strong> (<code>str | Sequence[str] | None</code>):\nA string or sequence of the required module names for the object to be ran.</li>\n<li><strong>target_os</strong> (<code>str | None</code>):\nThe targeted operating system thats required for the object to be ran.</li>\n<li><p><strong>python_version</strong> (<code>tuple[int, int, int] | None</code>):\nThe targeted Python version thats required for the object to be ran.</p>\n\n<p>Format must be <code>(3, 9, 5)</code>.</p></li>\n<li><strong>target_arch</strong> (<code>str | None</code>):\nThe CPU targeted architecture thats required for the object to be ran.</li>\n<li><strong>impl</strong> (<code>str | None</code>):\nThe Python implementation thats required for the object to be ran.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong><code>bool</code></strong>: The condition that was checked.</li>\n</ul>\n", "signature": "(\n    target_os: Optional[Literal['linux', 'win32', 'darwin', 'unix']] = None,\n    requires_modules: Union[str, Sequence[str], NoneType] = None,\n    python_version: Optional[Tuple[int, int, int]] = None,\n    target_arch: Optional[Literal['x86', 'x64', 'arm', 'arm64']] = None,\n    impl: Optional[Literal['CPython', 'PyPy', 'IronPython', 'Jython']] = None\n) -> bool", "funcdef": "def"}}, "docInfo": {"sain": {"qualname": 0, "fullname": 1, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 596}, "sain.cfg": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 6}, "sain.cfg_attr": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 43, "bases": 0, "doc": 482}, "sain.Default": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 4, "doc": 171}, "sain.Default.__init__": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 5, "bases": 0, "doc": 3}, "sain.Default.default": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 5, "bases": 0, "doc": 10}, "sain.Ref": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 4, "doc": 9}, "sain.Ref.__init__": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 7, "bases": 0, "doc": 3}, "sain.Ref.object": {"qualname": 2, "fullname": 3, "annotation": 4, "default_value": 0, "signature": 0, "bases": 0, "doc": 9}, "sain.Ref.clone": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 6, "bases": 0, "doc": 10}, "sain.Some": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 5, "doc": 229}, "sain.Some.__init__": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 5, "bases": 0, "doc": 3}, "sain.Some.default": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 3, "bases": 0, "doc": 17}, "sain.Some.read": {"qualname": 2, "fullname": 3, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 7}, "sain.Some.unwrap": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 4, "bases": 0, "doc": 133}, "sain.Some.unwrap_or": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 7, "bases": 0, "doc": 140}, "sain.Some.unwrap_or_else": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 7, "bases": 0, "doc": 148}, "sain.Some.map": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 10, "bases": 0, "doc": 85}, "sain.Some.map_or": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 9, "bases": 0, "doc": 210}, "sain.Some.map_or_else": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 10, "bases": 0, "doc": 3}, "sain.Some.filter": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 9, "bases": 0, "doc": 199}, "sain.Some.take": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 4, "bases": 0, "doc": 85}, "sain.Some.replace": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 8, "bases": 0, "doc": 90}, "sain.Some.expect": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 7, "bases": 0, "doc": 151}, "sain.Some.and_ok": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 12, "bases": 0, "doc": 157}, "sain.Some.and_then": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 12, "bases": 0, "doc": 181}, "sain.Some.as_ref": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 8, "bases": 0, "doc": 125}, "sain.Some.is_some": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 4, "bases": 0, "doc": 3}, "sain.Some.is_some_and": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 7, "bases": 0, "doc": 3}, "sain.Some.is_none": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 4, "bases": 0, "doc": 3}, "sain.Some.is_none_and": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 7, "bases": 0, "doc": 3}, "sain.into_iter": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 7, "bases": 0, "doc": 148}, "sain.Iter": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 8, "doc": 250}, "sain.Iter.__init__": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 5, "bases": 0, "doc": 3}, "sain.Iter.default": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 3, "bases": 0, "doc": 15}, "sain.Iter.collect": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 15, "bases": 0, "doc": 179}, "sain.Iter.next": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 4, "bases": 0, "doc": 125}, "sain.Iter.map": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 9, "bases": 0, "doc": 196}, "sain.Iter.take": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 8, "bases": 0, "doc": 166}, "sain.Iter.take_while": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 9, "bases": 0, "doc": 178}, "sain.Iter.drop_while": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 9, "bases": 0, "doc": 185}, "sain.Iter.filter": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 9, "bases": 0, "doc": 136}, "sain.Iter.skip": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 8, "bases": 0, "doc": 49}, "sain.Iter.discard": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 9, "bases": 0, "doc": 213}, "sain.Iter.zip": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 9, "bases": 0, "doc": 217}, "sain.Iter.all": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 7, "bases": 0, "doc": 180}, "sain.Iter.any": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 7, "bases": 0, "doc": 199}, "sain.Iter.sort": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 15, "bases": 0, "doc": 204}, "sain.Iter.first": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 4, "bases": 0, "doc": 107}, "sain.Iter.reversed": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 6, "bases": 0, "doc": 150}, "sain.Iter.count": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 4, "bases": 0, "doc": 3}, "sain.Iter.union": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 10, "bases": 0, "doc": 210}, "sain.Iter.for_each": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 7, "bases": 0, "doc": 148}, "sain.Iter.enumerate": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 12, "bases": 0, "doc": 150}, "sain.cfg.cfg_attr": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 43, "bases": 0, "doc": 482}, "sain.cfg.cfg": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 41, "bases": 0, "doc": 461}}, "length": 56, "save": true}, "index": {"qualname": {"root": {"docs": {"sain.Default.__init__": {"tf": 1}, "sain.Ref.__init__": {"tf": 1}, "sain.Some.__init__": {"tf": 1}, "sain.Iter.__init__": {"tf": 1}}, "df": 4, "c": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "g": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 4}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"sain.Ref.clone": {"tf": 1}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"sain.Iter.collect": {"tf": 1}}, "df": 1}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"sain.Iter.count": {"tf": 1}}, "df": 1}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {"sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}}, "df": 2}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {"sain.Some.and_ok": {"tf": 1}, "sain.Some.and_then": {"tf": 1}, "sain.Some.is_some_and": {"tf": 1}, "sain.Some.is_none_and": {"tf": 1}}, "df": 4}, "y": {"docs": {"sain.Iter.any": {"tf": 1}}, "df": 1}}, "s": {"docs": {"sain.Some.as_ref": {"tf": 1}}, "df": 1}, "l": {"docs": {}, "df": 0, "l": {"docs": {"sain.Iter.all": {"tf": 1}}, "df": 1}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"sain.Default": {"tf": 1}, "sain.Default.__init__": {"tf": 1}, "sain.Default.default": {"tf": 1.4142135623730951}, "sain.Some.default": {"tf": 1}, "sain.Iter.default": {"tf": 1}}, "df": 5}}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {"sain.Iter.drop_while": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"sain.Iter.discard": {"tf": 1}}, "df": 1}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"sain.Default.__init__": {"tf": 1}, "sain.Ref.__init__": {"tf": 1}, "sain.Some.__init__": {"tf": 1}, "sain.Iter.__init__": {"tf": 1}}, "df": 4}}, "t": {"docs": {}, "df": 0, "o": {"docs": {"sain.into_iter": {"tf": 1}}, "df": 1}}}, "s": {"docs": {"sain.Some.is_some": {"tf": 1}, "sain.Some.is_some_and": {"tf": 1}, "sain.Some.is_none": {"tf": 1}, "sain.Some.is_none_and": {"tf": 1}}, "df": 4}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sain.into_iter": {"tf": 1}, "sain.Iter": {"tf": 1}, "sain.Iter.__init__": {"tf": 1}, "sain.Iter.default": {"tf": 1}, "sain.Iter.collect": {"tf": 1}, "sain.Iter.next": {"tf": 1}, "sain.Iter.map": {"tf": 1}, "sain.Iter.take": {"tf": 1}, "sain.Iter.take_while": {"tf": 1}, "sain.Iter.drop_while": {"tf": 1}, "sain.Iter.filter": {"tf": 1}, "sain.Iter.skip": {"tf": 1}, "sain.Iter.discard": {"tf": 1}, "sain.Iter.zip": {"tf": 1}, "sain.Iter.all": {"tf": 1}, "sain.Iter.any": {"tf": 1}, "sain.Iter.sort": {"tf": 1}, "sain.Iter.first": {"tf": 1}, "sain.Iter.reversed": {"tf": 1}, "sain.Iter.count": {"tf": 1}, "sain.Iter.union": {"tf": 1}, "sain.Iter.for_each": {"tf": 1}, "sain.Iter.enumerate": {"tf": 1}}, "df": 23}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {"sain.Ref": {"tf": 1}, "sain.Ref.__init__": {"tf": 1}, "sain.Ref.object": {"tf": 1}, "sain.Ref.clone": {"tf": 1}, "sain.Some.as_ref": {"tf": 1}}, "df": 5}, "a": {"docs": {}, "df": 0, "d": {"docs": {"sain.Some.read": {"tf": 1}}, "df": 1}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sain.Some.replace": {"tf": 1}}, "df": 1}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.Iter.reversed": {"tf": 1}}, "df": 1}}}}}}}}, "o": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "j": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"sain.Ref.object": {"tf": 1}}, "df": 1}}}}}, "r": {"docs": {"sain.Some.unwrap_or": {"tf": 1}, "sain.Some.unwrap_or_else": {"tf": 1}, "sain.Some.map_or": {"tf": 1}, "sain.Some.map_or_else": {"tf": 1}}, "df": 4}, "k": {"docs": {"sain.Some.and_ok": {"tf": 1}}, "df": 1}}, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"sain.Some": {"tf": 1}, "sain.Some.__init__": {"tf": 1}, "sain.Some.default": {"tf": 1}, "sain.Some.read": {"tf": 1}, "sain.Some.unwrap": {"tf": 1}, "sain.Some.unwrap_or": {"tf": 1}, "sain.Some.unwrap_or_else": {"tf": 1}, "sain.Some.map": {"tf": 1}, "sain.Some.map_or": {"tf": 1}, "sain.Some.map_or_else": {"tf": 1}, "sain.Some.filter": {"tf": 1}, "sain.Some.take": {"tf": 1}, "sain.Some.replace": {"tf": 1}, "sain.Some.expect": {"tf": 1}, "sain.Some.and_ok": {"tf": 1}, "sain.Some.and_then": {"tf": 1}, "sain.Some.as_ref": {"tf": 1}, "sain.Some.is_some": {"tf": 1.4142135623730951}, "sain.Some.is_some_and": {"tf": 1.4142135623730951}, "sain.Some.is_none": {"tf": 1}, "sain.Some.is_none_and": {"tf": 1}}, "df": 21}}, "r": {"docs": {}, "df": 0, "t": {"docs": {"sain.Iter.sort": {"tf": 1}}, "df": 1}}}, "k": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {"sain.Iter.skip": {"tf": 1}}, "df": 1}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {"sain.Some.unwrap": {"tf": 1}, "sain.Some.unwrap_or": {"tf": 1}, "sain.Some.unwrap_or_else": {"tf": 1}}, "df": 3}}}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.Iter.union": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"sain.Some.unwrap_or_else": {"tf": 1}, "sain.Some.map_or_else": {"tf": 1}}, "df": 2}}}, "x": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"sain.Some.expect": {"tf": 1}}, "df": 1}}}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"sain.Iter.for_each": {"tf": 1}}, "df": 1}}}, "n": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"sain.Iter.enumerate": {"tf": 1}}, "df": 1}}}}}}}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {"sain.Some.map": {"tf": 1}, "sain.Some.map_or": {"tf": 1}, "sain.Some.map_or_else": {"tf": 1}, "sain.Iter.map": {"tf": 1}}, "df": 4}}}, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sain.Some.filter": {"tf": 1}, "sain.Iter.filter": {"tf": 1}}, "df": 2}}}}, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"sain.Iter.first": {"tf": 1}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {"sain.Iter.for_each": {"tf": 1}}, "df": 1}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {"sain.Some.take": {"tf": 1}, "sain.Iter.take": {"tf": 1}, "sain.Iter.take_while": {"tf": 1}}, "df": 3}}}, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"sain.Some.and_then": {"tf": 1}}, "df": 1}}}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"sain.Some.is_none": {"tf": 1}, "sain.Some.is_none_and": {"tf": 1}}, "df": 2}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "t": {"docs": {"sain.Iter.next": {"tf": 1}}, "df": 1}}}}, "w": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sain.Iter.take_while": {"tf": 1}, "sain.Iter.drop_while": {"tf": 1}}, "df": 2}}}}}, "z": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {"sain.Iter.zip": {"tf": 1}}, "df": 1}}}}}, "fullname": {"root": {"docs": {"sain.Default.__init__": {"tf": 1}, "sain.Ref.__init__": {"tf": 1}, "sain.Some.__init__": {"tf": 1}, "sain.Iter.__init__": {"tf": 1}}, "df": 4, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"sain": {"tf": 1}, "sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.Default": {"tf": 1}, "sain.Default.__init__": {"tf": 1}, "sain.Default.default": {"tf": 1}, "sain.Ref": {"tf": 1}, "sain.Ref.__init__": {"tf": 1}, "sain.Ref.object": {"tf": 1}, "sain.Ref.clone": {"tf": 1}, "sain.Some": {"tf": 1}, "sain.Some.__init__": {"tf": 1}, "sain.Some.default": {"tf": 1}, "sain.Some.read": {"tf": 1}, "sain.Some.unwrap": {"tf": 1}, "sain.Some.unwrap_or": {"tf": 1}, "sain.Some.unwrap_or_else": {"tf": 1}, "sain.Some.map": {"tf": 1}, "sain.Some.map_or": {"tf": 1}, "sain.Some.map_or_else": {"tf": 1}, "sain.Some.filter": {"tf": 1}, "sain.Some.take": {"tf": 1}, "sain.Some.replace": {"tf": 1}, "sain.Some.expect": {"tf": 1}, "sain.Some.and_ok": {"tf": 1}, "sain.Some.and_then": {"tf": 1}, "sain.Some.as_ref": {"tf": 1}, "sain.Some.is_some": {"tf": 1}, "sain.Some.is_some_and": {"tf": 1}, "sain.Some.is_none": {"tf": 1}, "sain.Some.is_none_and": {"tf": 1}, "sain.into_iter": {"tf": 1}, "sain.Iter": {"tf": 1}, "sain.Iter.__init__": {"tf": 1}, "sain.Iter.default": {"tf": 1}, "sain.Iter.collect": {"tf": 1}, "sain.Iter.next": {"tf": 1}, "sain.Iter.map": {"tf": 1}, "sain.Iter.take": {"tf": 1}, "sain.Iter.take_while": {"tf": 1}, "sain.Iter.drop_while": {"tf": 1}, "sain.Iter.filter": {"tf": 1}, "sain.Iter.skip": {"tf": 1}, "sain.Iter.discard": {"tf": 1}, "sain.Iter.zip": {"tf": 1}, "sain.Iter.all": {"tf": 1}, "sain.Iter.any": {"tf": 1}, "sain.Iter.sort": {"tf": 1}, "sain.Iter.first": {"tf": 1}, "sain.Iter.reversed": {"tf": 1}, "sain.Iter.count": {"tf": 1}, "sain.Iter.union": {"tf": 1}, "sain.Iter.for_each": {"tf": 1}, "sain.Iter.enumerate": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 56}}}, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"sain.Some": {"tf": 1}, "sain.Some.__init__": {"tf": 1}, "sain.Some.default": {"tf": 1}, "sain.Some.read": {"tf": 1}, "sain.Some.unwrap": {"tf": 1}, "sain.Some.unwrap_or": {"tf": 1}, "sain.Some.unwrap_or_else": {"tf": 1}, "sain.Some.map": {"tf": 1}, "sain.Some.map_or": {"tf": 1}, "sain.Some.map_or_else": {"tf": 1}, "sain.Some.filter": {"tf": 1}, "sain.Some.take": {"tf": 1}, "sain.Some.replace": {"tf": 1}, "sain.Some.expect": {"tf": 1}, "sain.Some.and_ok": {"tf": 1}, "sain.Some.and_then": {"tf": 1}, "sain.Some.as_ref": {"tf": 1}, "sain.Some.is_some": {"tf": 1.4142135623730951}, "sain.Some.is_some_and": {"tf": 1.4142135623730951}, "sain.Some.is_none": {"tf": 1}, "sain.Some.is_none_and": {"tf": 1}}, "df": 21}}, "r": {"docs": {}, "df": 0, "t": {"docs": {"sain.Iter.sort": {"tf": 1}}, "df": 1}}}, "k": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {"sain.Iter.skip": {"tf": 1}}, "df": 1}}}}, "c": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "g": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1.4142135623730951}, "sain.cfg.cfg": {"tf": 1.4142135623730951}}, "df": 4}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"sain.Ref.clone": {"tf": 1}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"sain.Iter.collect": {"tf": 1}}, "df": 1}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"sain.Iter.count": {"tf": 1}}, "df": 1}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {"sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}}, "df": 2}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {"sain.Some.and_ok": {"tf": 1}, "sain.Some.and_then": {"tf": 1}, "sain.Some.is_some_and": {"tf": 1}, "sain.Some.is_none_and": {"tf": 1}}, "df": 4}, "y": {"docs": {"sain.Iter.any": {"tf": 1}}, "df": 1}}, "s": {"docs": {"sain.Some.as_ref": {"tf": 1}}, "df": 1}, "l": {"docs": {}, "df": 0, "l": {"docs": {"sain.Iter.all": {"tf": 1}}, "df": 1}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"sain.Default": {"tf": 1}, "sain.Default.__init__": {"tf": 1}, "sain.Default.default": {"tf": 1.4142135623730951}, "sain.Some.default": {"tf": 1}, "sain.Iter.default": {"tf": 1}}, "df": 5}}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {"sain.Iter.drop_while": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"sain.Iter.discard": {"tf": 1}}, "df": 1}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"sain.Default.__init__": {"tf": 1}, "sain.Ref.__init__": {"tf": 1}, "sain.Some.__init__": {"tf": 1}, "sain.Iter.__init__": {"tf": 1}}, "df": 4}}, "t": {"docs": {}, "df": 0, "o": {"docs": {"sain.into_iter": {"tf": 1}}, "df": 1}}}, "s": {"docs": {"sain.Some.is_some": {"tf": 1}, "sain.Some.is_some_and": {"tf": 1}, "sain.Some.is_none": {"tf": 1}, "sain.Some.is_none_and": {"tf": 1}}, "df": 4}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sain.into_iter": {"tf": 1}, "sain.Iter": {"tf": 1}, "sain.Iter.__init__": {"tf": 1}, "sain.Iter.default": {"tf": 1}, "sain.Iter.collect": {"tf": 1}, "sain.Iter.next": {"tf": 1}, "sain.Iter.map": {"tf": 1}, "sain.Iter.take": {"tf": 1}, "sain.Iter.take_while": {"tf": 1}, "sain.Iter.drop_while": {"tf": 1}, "sain.Iter.filter": {"tf": 1}, "sain.Iter.skip": {"tf": 1}, "sain.Iter.discard": {"tf": 1}, "sain.Iter.zip": {"tf": 1}, "sain.Iter.all": {"tf": 1}, "sain.Iter.any": {"tf": 1}, "sain.Iter.sort": {"tf": 1}, "sain.Iter.first": {"tf": 1}, "sain.Iter.reversed": {"tf": 1}, "sain.Iter.count": {"tf": 1}, "sain.Iter.union": {"tf": 1}, "sain.Iter.for_each": {"tf": 1}, "sain.Iter.enumerate": {"tf": 1}}, "df": 23}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {"sain.Ref": {"tf": 1}, "sain.Ref.__init__": {"tf": 1}, "sain.Ref.object": {"tf": 1}, "sain.Ref.clone": {"tf": 1}, "sain.Some.as_ref": {"tf": 1}}, "df": 5}, "a": {"docs": {}, "df": 0, "d": {"docs": {"sain.Some.read": {"tf": 1}}, "df": 1}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sain.Some.replace": {"tf": 1}}, "df": 1}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.Iter.reversed": {"tf": 1}}, "df": 1}}}}}}}}, "o": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "j": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"sain.Ref.object": {"tf": 1}}, "df": 1}}}}}, "r": {"docs": {"sain.Some.unwrap_or": {"tf": 1}, "sain.Some.unwrap_or_else": {"tf": 1}, "sain.Some.map_or": {"tf": 1}, "sain.Some.map_or_else": {"tf": 1}}, "df": 4}, "k": {"docs": {"sain.Some.and_ok": {"tf": 1}}, "df": 1}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {"sain.Some.unwrap": {"tf": 1}, "sain.Some.unwrap_or": {"tf": 1}, "sain.Some.unwrap_or_else": {"tf": 1}}, "df": 3}}}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.Iter.union": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"sain.Some.unwrap_or_else": {"tf": 1}, "sain.Some.map_or_else": {"tf": 1}}, "df": 2}}}, "x": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"sain.Some.expect": {"tf": 1}}, "df": 1}}}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"sain.Iter.for_each": {"tf": 1}}, "df": 1}}}, "n": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"sain.Iter.enumerate": {"tf": 1}}, "df": 1}}}}}}}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {"sain.Some.map": {"tf": 1}, "sain.Some.map_or": {"tf": 1}, "sain.Some.map_or_else": {"tf": 1}, "sain.Iter.map": {"tf": 1}}, "df": 4}}}, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sain.Some.filter": {"tf": 1}, "sain.Iter.filter": {"tf": 1}}, "df": 2}}}}, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"sain.Iter.first": {"tf": 1}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {"sain.Iter.for_each": {"tf": 1}}, "df": 1}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {"sain.Some.take": {"tf": 1}, "sain.Iter.take": {"tf": 1}, "sain.Iter.take_while": {"tf": 1}}, "df": 3}}}, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"sain.Some.and_then": {"tf": 1}}, "df": 1}}}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"sain.Some.is_none": {"tf": 1}, "sain.Some.is_none_and": {"tf": 1}}, "df": 2}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "t": {"docs": {"sain.Iter.next": {"tf": 1}}, "df": 1}}}}, "w": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sain.Iter.take_while": {"tf": 1}, "sain.Iter.drop_while": {"tf": 1}}, "df": 2}}}}}, "z": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {"sain.Iter.zip": {"tf": 1}}, "df": 1}}}}}, "annotation": {"root": {"docs": {"sain.Ref.object": {"tf": 1.4142135623730951}, "sain.Some.read": {"tf": 1}}, "df": 2, "t": {"docs": {"sain.Ref.object": {"tf": 1}}, "df": 1}, "c": {"docs": {}, "df": 0, "o": {"docs": {"sain.Ref.object": {"tf": 1}}, "df": 1}}, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "~": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"sain.Some.read": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}, "default_value": {"root": {"docs": {}, "df": 0}}, "signature": {"root": {"0": {"docs": {"sain.Iter.enumerate": {"tf": 1}}, "df": 1}, "docs": {"sain.cfg": {"tf": 2.23606797749979}, "sain.cfg_attr": {"tf": 2.449489742783178}, "sain.Default.__init__": {"tf": 1.4142135623730951}, "sain.Default.default": {"tf": 1.7320508075688772}, "sain.Ref.__init__": {"tf": 1.7320508075688772}, "sain.Ref.clone": {"tf": 1.7320508075688772}, "sain.Some.__init__": {"tf": 1.4142135623730951}, "sain.Some.default": {"tf": 1.4142135623730951}, "sain.Some.unwrap": {"tf": 1.4142135623730951}, "sain.Some.unwrap_or": {"tf": 1.7320508075688772}, "sain.Some.unwrap_or_else": {"tf": 1.4142135623730951}, "sain.Some.map": {"tf": 1.4142135623730951}, "sain.Some.map_or": {"tf": 1.4142135623730951}, "sain.Some.map_or_else": {"tf": 1.4142135623730951}, "sain.Some.filter": {"tf": 1.4142135623730951}, "sain.Some.take": {"tf": 1.4142135623730951}, "sain.Some.replace": {"tf": 1.4142135623730951}, "sain.Some.expect": {"tf": 1.7320508075688772}, "sain.Some.and_ok": {"tf": 1.4142135623730951}, "sain.Some.and_then": {"tf": 1.4142135623730951}, "sain.Some.as_ref": {"tf": 1.4142135623730951}, "sain.Some.is_some": {"tf": 1.4142135623730951}, "sain.Some.is_some_and": {"tf": 1.4142135623730951}, "sain.Some.is_none": {"tf": 1.4142135623730951}, "sain.Some.is_none_and": {"tf": 1.4142135623730951}, "sain.into_iter": {"tf": 1.4142135623730951}, "sain.Iter.__init__": {"tf": 1.4142135623730951}, "sain.Iter.default": {"tf": 1.4142135623730951}, "sain.Iter.collect": {"tf": 2}, "sain.Iter.next": {"tf": 1.4142135623730951}, "sain.Iter.map": {"tf": 1.7320508075688772}, "sain.Iter.take": {"tf": 1.4142135623730951}, "sain.Iter.take_while": {"tf": 1.4142135623730951}, "sain.Iter.drop_while": {"tf": 1.4142135623730951}, "sain.Iter.filter": {"tf": 1.4142135623730951}, "sain.Iter.skip": {"tf": 1.4142135623730951}, "sain.Iter.discard": {"tf": 1.4142135623730951}, "sain.Iter.zip": {"tf": 1.7320508075688772}, "sain.Iter.all": {"tf": 1.4142135623730951}, "sain.Iter.any": {"tf": 1.4142135623730951}, "sain.Iter.sort": {"tf": 1.7320508075688772}, "sain.Iter.first": {"tf": 1.4142135623730951}, "sain.Iter.reversed": {"tf": 1.4142135623730951}, "sain.Iter.count": {"tf": 1.4142135623730951}, "sain.Iter.union": {"tf": 1.4142135623730951}, "sain.Iter.for_each": {"tf": 1.4142135623730951}, "sain.Iter.enumerate": {"tf": 1.7320508075688772}, "sain.cfg.cfg_attr": {"tf": 2.449489742783178}, "sain.cfg.cfg": {"tf": 2.23606797749979}}, "df": 49, "t": {"docs": {"sain.Default.default": {"tf": 1}, "sain.Ref.__init__": {"tf": 1}, "sain.Ref.clone": {"tf": 1}, "sain.Some.map": {"tf": 1}, "sain.Some.map_or": {"tf": 1.7320508075688772}, "sain.Some.map_or_else": {"tf": 1.7320508075688772}}, "df": 6, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"sain.cfg": {"tf": 1.4142135623730951}, "sain.cfg_attr": {"tf": 1.4142135623730951}, "sain.cfg.cfg_attr": {"tf": 1.4142135623730951}, "sain.cfg.cfg": {"tf": 1.4142135623730951}}, "df": 4}}}}}, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.Iter.collect": {"tf": 1.4142135623730951}, "sain.Iter.map": {"tf": 1}, "sain.Iter.sort": {"tf": 1}}, "df": 3}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.Iter.sort": {"tf": 1}}, "df": 1}}}}}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {"sain.Iter.zip": {"tf": 1}}, "df": 1}}}, "n": {"docs": {}, "df": 0, "t": {"docs": {"sain.Iter.enumerate": {"tf": 1}}, "df": 1}}}}}}}}}, "o": {"docs": {}, "df": 0, "s": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 4}, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.Some.map": {"tf": 1}, "sain.Some.filter": {"tf": 1}, "sain.Some.replace": {"tf": 1}, "sain.Some.and_ok": {"tf": 1.4142135623730951}, "sain.Some.and_then": {"tf": 1.4142135623730951}, "sain.Some.as_ref": {"tf": 1}}, "df": 6, "a": {"docs": {}, "df": 0, "l": {"docs": {"sain.Iter.collect": {"tf": 1}}, "df": 1, "[": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"sain.cfg": {"tf": 1.7320508075688772}, "sain.cfg_attr": {"tf": 1.7320508075688772}, "sain.cfg.cfg_attr": {"tf": 1.7320508075688772}, "sain.cfg.cfg": {"tf": 1.7320508075688772}}, "df": 4}}}}}}}, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 4}}}}}}}}}, "~": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"sain.Some.__init__": {"tf": 1}}, "df": 1}}}}}}, "t": {"docs": {"sain.Some.map": {"tf": 1}, "sain.Some.and_ok": {"tf": 1.4142135623730951}, "sain.Some.and_then": {"tf": 1}}, "df": 3}}}}}}}}, "b": {"docs": {"sain.Some.and_ok": {"tf": 1}}, "df": 1}}}, "b": {"docs": {}, "df": 0, "j": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"sain.Ref.__init__": {"tf": 1}}, "df": 1}}}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sain.Iter.zip": {"tf": 1}, "sain.Iter.union": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {"sain.Iter.map": {"tf": 1}, "sain.Iter.zip": {"tf": 1}}, "df": 2}}}}}}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "x": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 4}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"sain.Iter.collect": {"tf": 1}}, "df": 1, "[": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {"sain.Iter.collect": {"tf": 1}}, "df": 1}}}}}}}}}, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"3": {"2": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 4}, "docs": {}, "df": 0}, "docs": {}, "df": 0}}}, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 4}}}}}, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"sain.Some.unwrap_or": {"tf": 1}, "sain.Some.map_or": {"tf": 1}, "sain.Some.map_or_else": {"tf": 1}}, "df": 3}}}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "x": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 4}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 4}}}, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.Iter.collect": {"tf": 1}}, "df": 1}}}}}}}}}}}}, "n": {"docs": {"sain.Iter.take": {"tf": 1}, "sain.Iter.skip": {"tf": 1}}, "df": 2, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"sain.cfg": {"tf": 2.23606797749979}, "sain.cfg_attr": {"tf": 2.23606797749979}, "sain.Some.default": {"tf": 1}, "sain.Some.take": {"tf": 1}, "sain.Iter.collect": {"tf": 1}, "sain.Iter.for_each": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 2.23606797749979}, "sain.cfg.cfg": {"tf": 2.23606797749979}}, "df": 8, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 4}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 4}}}}}}, "f": {"docs": {"sain.Some.as_ref": {"tf": 1}}, "df": 1, "[": {"docs": {}, "df": 0, "~": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"sain.Some.as_ref": {"tf": 1}}, "df": 1}}}}}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"sain.Iter.sort": {"tf": 1}}, "df": 1}}}}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 4}}}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"sain.Some.expect": {"tf": 1}}, "df": 1}}}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 4}}}}}}}}}}, "l": {"docs": {}, "df": 0, "f": {"docs": {"sain.Default.__init__": {"tf": 1}, "sain.Ref.__init__": {"tf": 1}, "sain.Ref.clone": {"tf": 1}, "sain.Some.__init__": {"tf": 1}, "sain.Some.unwrap": {"tf": 1}, "sain.Some.unwrap_or": {"tf": 1}, "sain.Some.unwrap_or_else": {"tf": 1}, "sain.Some.map": {"tf": 1}, "sain.Some.map_or": {"tf": 1}, "sain.Some.map_or_else": {"tf": 1}, "sain.Some.filter": {"tf": 1}, "sain.Some.take": {"tf": 1}, "sain.Some.replace": {"tf": 1}, "sain.Some.expect": {"tf": 1}, "sain.Some.and_ok": {"tf": 1}, "sain.Some.and_then": {"tf": 1}, "sain.Some.as_ref": {"tf": 1}, "sain.Some.is_some": {"tf": 1}, "sain.Some.is_some_and": {"tf": 1}, "sain.Some.is_none": {"tf": 1}, "sain.Some.is_none_and": {"tf": 1}, "sain.Iter.__init__": {"tf": 1}, "sain.Iter.collect": {"tf": 1}, "sain.Iter.next": {"tf": 1}, "sain.Iter.map": {"tf": 1}, "sain.Iter.take": {"tf": 1}, "sain.Iter.take_while": {"tf": 1}, "sain.Iter.drop_while": {"tf": 1}, "sain.Iter.filter": {"tf": 1}, "sain.Iter.skip": {"tf": 1}, "sain.Iter.discard": {"tf": 1}, "sain.Iter.zip": {"tf": 1}, "sain.Iter.all": {"tf": 1}, "sain.Iter.any": {"tf": 1}, "sain.Iter.sort": {"tf": 1}, "sain.Iter.first": {"tf": 1}, "sain.Iter.reversed": {"tf": 1}, "sain.Iter.count": {"tf": 1}, "sain.Iter.union": {"tf": 1}, "sain.Iter.for_each": {"tf": 1}, "sain.Iter.enumerate": {"tf": 1}}, "df": 41}}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}}, "df": 2}}}}}}}}, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"sain.Some.map": {"tf": 1}, "sain.Some.filter": {"tf": 1}, "sain.Some.replace": {"tf": 1}, "sain.Some.and_ok": {"tf": 1.4142135623730951}, "sain.Some.and_then": {"tf": 1.4142135623730951}, "sain.Some.as_ref": {"tf": 1}, "sain.into_iter": {"tf": 1}, "sain.Iter.take": {"tf": 1}, "sain.Iter.take_while": {"tf": 1}, "sain.Iter.drop_while": {"tf": 1}, "sain.Iter.filter": {"tf": 1}, "sain.Iter.skip": {"tf": 1}, "sain.Iter.discard": {"tf": 1}, "sain.Iter.sort": {"tf": 1}, "sain.Iter.reversed": {"tf": 1}, "sain.Iter.union": {"tf": 1.4142135623730951}, "sain.Iter.enumerate": {"tf": 1}}, "df": 17}}}, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.Some.map": {"tf": 1}, "sain.Some.and_ok": {"tf": 1.4142135623730951}, "sain.Some.and_then": {"tf": 1}}, "df": 3}}}}}}, "~": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"sain.Some.filter": {"tf": 1}, "sain.Some.replace": {"tf": 1}}, "df": 2}}}}}}}, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "~": {"docs": {}, "df": 0, "t": {"docs": {"sain.Some.and_then": {"tf": 1}}, "df": 1}}}}}}}}}}}, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"sain.Some.as_ref": {"tf": 1}}, "df": 1}}}}}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {"sain.Some.expect": {"tf": 1}}, "df": 1}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"sain.Iter.enumerate": {"tf": 1}}, "df": 1}}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.Iter.sort": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}}}}}, "p": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 4}}}}, "p": {"docs": {}, "df": 0, "y": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 4}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"sain.Some.filter": {"tf": 1}, "sain.Some.is_some_and": {"tf": 1}, "sain.Some.is_none_and": {"tf": 1}, "sain.Iter.map": {"tf": 1}, "sain.Iter.take_while": {"tf": 1}, "sain.Iter.drop_while": {"tf": 1}, "sain.Iter.filter": {"tf": 1}, "sain.Iter.discard": {"tf": 1}, "sain.Iter.all": {"tf": 1}, "sain.Iter.any": {"tf": 1}}, "df": 10}}}}}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 4}}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"sain.Some.__init__": {"tf": 1}, "sain.Some.replace": {"tf": 1}}, "df": 2, "t": {"docs": {"sain.Some.unwrap": {"tf": 1}, "sain.Some.unwrap_or": {"tf": 1.4142135623730951}, "sain.Some.unwrap_or_else": {"tf": 1.4142135623730951}, "sain.Some.replace": {"tf": 1}, "sain.Some.expect": {"tf": 1}}, "df": 5}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"sain.cfg": {"tf": 1.4142135623730951}, "sain.cfg_attr": {"tf": 1.4142135623730951}, "sain.Iter.take": {"tf": 1}, "sain.Iter.skip": {"tf": 1}, "sain.Iter.count": {"tf": 1}, "sain.Iter.enumerate": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1.4142135623730951}, "sain.cfg.cfg": {"tf": 1.4142135623730951}}, "df": 8}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 4}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 4}}}}}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sain.into_iter": {"tf": 1}, "sain.Iter.take": {"tf": 1}, "sain.Iter.take_while": {"tf": 1}, "sain.Iter.drop_while": {"tf": 1}, "sain.Iter.filter": {"tf": 1}, "sain.Iter.skip": {"tf": 1}, "sain.Iter.discard": {"tf": 1}, "sain.Iter.sort": {"tf": 1}, "sain.Iter.reversed": {"tf": 1}, "sain.Iter.union": {"tf": 1.4142135623730951}, "sain.Iter.enumerate": {"tf": 1}}, "df": 11, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sain.into_iter": {"tf": 1}}, "df": 1, "[": {"docs": {}, "df": 0, "~": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {"sain.into_iter": {"tf": 1}, "sain.Iter.__init__": {"tf": 1}, "sain.Iter.default": {"tf": 1}}, "df": 3}}}}}}}}}}, "[": {"docs": {}, "df": 0, "~": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {"sain.into_iter": {"tf": 1}, "sain.Iter.take": {"tf": 1}, "sain.Iter.take_while": {"tf": 1}, "sain.Iter.drop_while": {"tf": 1}, "sain.Iter.filter": {"tf": 1}, "sain.Iter.skip": {"tf": 1}, "sain.Iter.discard": {"tf": 1}, "sain.Iter.sort": {"tf": 1}, "sain.Iter.reversed": {"tf": 1}, "sain.Iter.union": {"tf": 1.4142135623730951}}, "df": 10}}}}}, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {"sain.Iter.map": {"tf": 1}, "sain.Iter.zip": {"tf": 1}}, "df": 2}}}}}}}}}, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.Iter.zip": {"tf": 1}, "sain.Iter.enumerate": {"tf": 1}}, "df": 2}}}}}}}}, "m": {"docs": {"sain.Iter.next": {"tf": 1}, "sain.Iter.first": {"tf": 1}, "sain.Iter.enumerate": {"tf": 1}}, "df": 3, "s": {"docs": {"sain.Iter.__init__": {"tf": 1}}, "df": 1}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 4}}, "m": {"6": {"4": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 4}, "docs": {}, "df": 0}, "docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 4}, "g": {"docs": {}, "df": 0, "s": {"docs": {"sain.Default.__init__": {"tf": 1}}, "df": 1}}}, "n": {"docs": {}, "df": 0, "y": {"docs": {"sain.Iter.for_each": {"tf": 1}}, "df": 1}}}, "x": {"6": {"4": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 4}, "docs": {}, "df": 0}, "8": {"6": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 4}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "c": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 4}}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sain.Some.unwrap_or_else": {"tf": 1}, "sain.Some.map_or_else": {"tf": 1}}, "df": 2, "[": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "~": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}}, "df": 2}}}}}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"sain.Some.map": {"tf": 1}, "sain.Some.map_or": {"tf": 1}, "sain.Some.map_or_else": {"tf": 1}, "sain.Some.filter": {"tf": 1}, "sain.Some.and_then": {"tf": 1}, "sain.Some.is_some_and": {"tf": 1}}, "df": 6}}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {"sain.Iter.take_while": {"tf": 1}, "sain.Iter.drop_while": {"tf": 1}, "sain.Iter.filter": {"tf": 1}, "sain.Iter.discard": {"tf": 1}, "sain.Iter.all": {"tf": 1}, "sain.Iter.any": {"tf": 1}, "sain.Iter.for_each": {"tf": 1}}, "df": 7}}}}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"sain.Some.is_none_and": {"tf": 1}}, "df": 1}}}}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {"sain.Iter.map": {"tf": 1}, "sain.Iter.sort": {"tf": 1}}, "df": 2}}}}}}}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.Iter.collect": {"tf": 1}}, "df": 1}}}}}}, "o": {"docs": {"sain.Default.default": {"tf": 1}, "sain.Ref.__init__": {"tf": 1}, "sain.Ref.clone": {"tf": 1}}, "df": 3}}, "j": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 4}}}}}}, "b": {"docs": {"sain.Iter.collect": {"tf": 1.4142135623730951}}, "df": 1, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"sain.cfg": {"tf": 1}, "sain.Some.filter": {"tf": 1}, "sain.Some.is_some": {"tf": 1}, "sain.Some.is_some_and": {"tf": 1.4142135623730951}, "sain.Some.is_none": {"tf": 1}, "sain.Some.is_none_and": {"tf": 1.4142135623730951}, "sain.Iter.take_while": {"tf": 1}, "sain.Iter.drop_while": {"tf": 1}, "sain.Iter.filter": {"tf": 1}, "sain.Iter.discard": {"tf": 1}, "sain.Iter.all": {"tf": 1.4142135623730951}, "sain.Iter.any": {"tf": 1.4142135623730951}, "sain.Iter.sort": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 14}}}}, "k": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "s": {"docs": {"sain.Default.__init__": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "y": {"docs": {"sain.Iter.sort": {"tf": 1}}, "df": 1}}}, "f": {"docs": {"sain.Some.unwrap_or_else": {"tf": 1}, "sain.Some.map": {"tf": 1}, "sain.Some.map_or": {"tf": 1}, "sain.Some.map_or_else": {"tf": 1}, "sain.Some.and_then": {"tf": 1}}, "df": 5, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"sain.Iter.sort": {"tf": 1}}, "df": 1}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {"sain.Iter.for_each": {"tf": 1}}, "df": 1}}}}}}, "bases": {"root": {"docs": {}, "df": 0, "t": {"docs": {"sain.Default": {"tf": 1}, "sain.Ref": {"tf": 1}}, "df": 2, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.Default": {"tf": 1}, "sain.Ref": {"tf": 1}, "sain.Some": {"tf": 1}, "sain.Iter": {"tf": 1.4142135623730951}}, "df": 4}}}}}}, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"sain.Default": {"tf": 1}}, "df": 1}}}}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {"sain.Default": {"tf": 1}, "sain.Ref": {"tf": 1}}, "df": 2}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"sain.Ref": {"tf": 1}}, "df": 1, "[": {"docs": {}, "df": 0, "~": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"sain.Some": {"tf": 1}}, "df": 1}}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {"sain.Iter": {"tf": 1}}, "df": 1}}}}}}}}}}}}}, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"sain.Some": {"tf": 1}, "sain.Iter": {"tf": 1}}, "df": 2}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"sain.Some": {"tf": 1}, "sain.Iter": {"tf": 1}}, "df": 2}}}}}, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"sain.Some": {"tf": 1}}, "df": 1}}}}}}}}, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.Iter": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "~": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {"sain.Iter": {"tf": 1}}, "df": 1}}}}}}}}}, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "~": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {"sain.Iter": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}, "doc": {"root": {"0": {"docs": {"sain": {"tf": 1}, "sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.Some.map": {"tf": 1.7320508075688772}, "sain.Some.map_or": {"tf": 2}, "sain.Iter": {"tf": 1}, "sain.Iter.enumerate": {"tf": 1.4142135623730951}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 9}, "1": {"0": {"docs": {"sain": {"tf": 1}, "sain.cfg_attr": {"tf": 1.4142135623730951}, "sain.Some": {"tf": 1.4142135623730951}, "sain.Some.unwrap_or": {"tf": 1.7320508075688772}, "sain.Some.unwrap_or_else": {"tf": 1}, "sain.Some.map": {"tf": 1}, "sain.Some.map_or": {"tf": 1}, "sain.Some.and_ok": {"tf": 1.7320508075688772}, "sain.Some.and_then": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1.4142135623730951}}, "df": 10}, "docs": {"sain": {"tf": 1}, "sain.Some.map_or": {"tf": 1}, "sain.Some.filter": {"tf": 1.4142135623730951}, "sain.into_iter": {"tf": 1.4142135623730951}, "sain.Iter": {"tf": 2}, "sain.Iter.collect": {"tf": 1.7320508075688772}, "sain.Iter.next": {"tf": 1.4142135623730951}, "sain.Iter.map": {"tf": 1.4142135623730951}, "sain.Iter.skip": {"tf": 1}, "sain.Iter.zip": {"tf": 1.4142135623730951}, "sain.Iter.all": {"tf": 1}, "sain.Iter.any": {"tf": 1}, "sain.Iter.sort": {"tf": 1.7320508075688772}, "sain.Iter.first": {"tf": 1}, "sain.Iter.reversed": {"tf": 1.4142135623730951}, "sain.Iter.union": {"tf": 1.7320508075688772}, "sain.Iter.for_each": {"tf": 1.7320508075688772}, "sain.Iter.enumerate": {"tf": 2}}, "df": 18}, "2": {"docs": {"sain.Some.map": {"tf": 1}, "sain.Some.filter": {"tf": 1.7320508075688772}, "sain.Some.and_then": {"tf": 1.4142135623730951}, "sain.into_iter": {"tf": 1.4142135623730951}, "sain.Iter": {"tf": 2.23606797749979}, "sain.Iter.collect": {"tf": 1.7320508075688772}, "sain.Iter.next": {"tf": 1.4142135623730951}, "sain.Iter.map": {"tf": 1.4142135623730951}, "sain.Iter.take": {"tf": 1}, "sain.Iter.zip": {"tf": 1.4142135623730951}, "sain.Iter.all": {"tf": 1}, "sain.Iter.any": {"tf": 1}, "sain.Iter.union": {"tf": 1.4142135623730951}, "sain.Iter.for_each": {"tf": 1.4142135623730951}, "sain.Iter.enumerate": {"tf": 1.7320508075688772}}, "df": 15}, "3": {"9": {"docs": {"sain.cfg_attr": {"tf": 1}, "sain.Iter.collect": {"tf": 2.449489742783178}, "sain.Iter.take_while": {"tf": 2.8284271247461903}, "sain.Iter.drop_while": {"tf": 2.8284271247461903}, "sain.Iter.filter": {"tf": 2.8284271247461903}, "sain.cfg.cfg_attr": {"tf": 1}}, "df": 6}, "docs": {"sain": {"tf": 1}, "sain.cfg": {"tf": 1.7320508075688772}, "sain.cfg_attr": {"tf": 1.4142135623730951}, "sain.Some.filter": {"tf": 1.7320508075688772}, "sain.into_iter": {"tf": 1.4142135623730951}, "sain.Iter": {"tf": 1.7320508075688772}, "sain.Iter.collect": {"tf": 1.7320508075688772}, "sain.Iter.next": {"tf": 1}, "sain.Iter.map": {"tf": 1.4142135623730951}, "sain.Iter.zip": {"tf": 1.4142135623730951}, "sain.Iter.all": {"tf": 1}, "sain.Iter.any": {"tf": 1}, "sain.Iter.sort": {"tf": 1.7320508075688772}, "sain.Iter.first": {"tf": 1.4142135623730951}, "sain.Iter.reversed": {"tf": 1.4142135623730951}, "sain.Iter.union": {"tf": 1.4142135623730951}, "sain.Iter.for_each": {"tf": 1.4142135623730951}, "sain.Iter.enumerate": {"tf": 1.4142135623730951}, "sain.cfg.cfg_attr": {"tf": 1.4142135623730951}, "sain.cfg.cfg": {"tf": 1.7320508075688772}}, "df": 20}, "4": {"docs": {"sain.Iter.zip": {"tf": 1.4142135623730951}, "sain.Iter.union": {"tf": 1.4142135623730951}}, "df": 2}, "5": {"docs": {"sain": {"tf": 1}, "sain.cfg": {"tf": 1.4142135623730951}, "sain.cfg_attr": {"tf": 1}, "sain.Some.unwrap": {"tf": 1.4142135623730951}, "sain.Some.unwrap_or": {"tf": 1.4142135623730951}, "sain.Some.unwrap_or_else": {"tf": 1.4142135623730951}, "sain.Some.map": {"tf": 1}, "sain.Some.map_or": {"tf": 1.7320508075688772}, "sain.Some.and_ok": {"tf": 1}, "sain.Some.and_then": {"tf": 1}, "sain.Some.as_ref": {"tf": 1.4142135623730951}, "sain.Iter.zip": {"tf": 1.4142135623730951}, "sain.Iter.union": {"tf": 1.4142135623730951}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1.4142135623730951}}, "df": 15}, "6": {"docs": {"sain.Some.map_or": {"tf": 1}, "sain.Iter.zip": {"tf": 1.4142135623730951}, "sain.Iter.sort": {"tf": 1.4142135623730951}, "sain.Iter.first": {"tf": 1}, "sain.Iter.reversed": {"tf": 1.4142135623730951}, "sain.Iter.union": {"tf": 1.4142135623730951}}, "df": 6}, "7": {"docs": {"sain.Iter.sort": {"tf": 1.4142135623730951}, "sain.Iter.first": {"tf": 1}, "sain.Iter.reversed": {"tf": 1.7320508075688772}}, "df": 3}, "8": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 2}, "9": {"docs": {"sain.cfg": {"tf": 1.4142135623730951}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1.4142135623730951}}, "df": 4}, "docs": {"sain": {"tf": 20.149441679609886}, "sain.cfg": {"tf": 1.7320508075688772}, "sain.cfg_attr": {"tf": 16.55294535724685}, "sain.Default": {"tf": 11.532562594670797}, "sain.Default.__init__": {"tf": 1.7320508075688772}, "sain.Default.default": {"tf": 1.7320508075688772}, "sain.Ref": {"tf": 1.7320508075688772}, "sain.Ref.__init__": {"tf": 1.7320508075688772}, "sain.Ref.object": {"tf": 1.7320508075688772}, "sain.Ref.clone": {"tf": 1.7320508075688772}, "sain.Some": {"tf": 11.357816691600547}, "sain.Some.__init__": {"tf": 1.7320508075688772}, "sain.Some.default": {"tf": 2.6457513110645907}, "sain.Some.read": {"tf": 1.7320508075688772}, "sain.Some.unwrap": {"tf": 9.797958971132712}, "sain.Some.unwrap_or": {"tf": 10.04987562112089}, "sain.Some.unwrap_or_else": {"tf": 10.246950765959598}, "sain.Some.map": {"tf": 7.810249675906654}, "sain.Some.map_or": {"tf": 11.789826122551595}, "sain.Some.map_or_else": {"tf": 1.7320508075688772}, "sain.Some.filter": {"tf": 12.083045973594572}, "sain.Some.take": {"tf": 7.874007874011811}, "sain.Some.replace": {"tf": 8.06225774829855}, "sain.Some.expect": {"tf": 10.344080432788601}, "sain.Some.and_ok": {"tf": 10.63014581273465}, "sain.Some.and_then": {"tf": 11.532562594670797}, "sain.Some.as_ref": {"tf": 9.591663046625438}, "sain.Some.is_some": {"tf": 1.7320508075688772}, "sain.Some.is_some_and": {"tf": 1.7320508075688772}, "sain.Some.is_none": {"tf": 1.7320508075688772}, "sain.Some.is_none_and": {"tf": 1.7320508075688772}, "sain.into_iter": {"tf": 10.344080432788601}, "sain.Iter": {"tf": 13.2664991614216}, "sain.Iter.__init__": {"tf": 1.7320508075688772}, "sain.Iter.default": {"tf": 1.7320508075688772}, "sain.Iter.collect": {"tf": 10.198039027185569}, "sain.Iter.next": {"tf": 8.717797887081348}, "sain.Iter.map": {"tf": 10.954451150103322}, "sain.Iter.take": {"tf": 9.899494936611665}, "sain.Iter.take_while": {"tf": 10.816653826391969}, "sain.Iter.drop_while": {"tf": 11.045361017187261}, "sain.Iter.filter": {"tf": 9.746794344808963}, "sain.Iter.skip": {"tf": 3.872983346207417}, "sain.Iter.discard": {"tf": 11.575836902790225}, "sain.Iter.zip": {"tf": 12.083045973594572}, "sain.Iter.all": {"tf": 10.723805294763608}, "sain.Iter.any": {"tf": 10.583005244258363}, "sain.Iter.sort": {"tf": 11.575836902790225}, "sain.Iter.first": {"tf": 8.602325267042627}, "sain.Iter.reversed": {"tf": 9.591663046625438}, "sain.Iter.count": {"tf": 1.7320508075688772}, "sain.Iter.union": {"tf": 11.704699910719626}, "sain.Iter.for_each": {"tf": 9.591663046625438}, "sain.Iter.enumerate": {"tf": 9.486832980505138}, "sain.cfg.cfg_attr": {"tf": 16.55294535724685}, "sain.cfg.cfg": {"tf": 16.34013463836819}}, "df": 56, "r": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"sain": {"tf": 1}}, "df": 1}}, "n": {"docs": {"sain": {"tf": 1}, "sain.cfg": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 3, "s": {"docs": {"sain": {"tf": 1}}, "df": 1}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"sain.cfg": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"sain": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.Some.unwrap": {"tf": 1.7320508075688772}, "sain.Some.expect": {"tf": 1.4142135623730951}, "sain.cfg.cfg_attr": {"tf": 1}}, "df": 5}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"sain": {"tf": 1}, "sain.Some.and_then": {"tf": 1}}, "df": 2, "[": {"docs": {}, "df": 0, "t": {"docs": {"sain": {"tf": 1}}, "df": 1}}, "s": {"docs": {"sain.Iter": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "f": {"docs": {"sain.Some.as_ref": {"tf": 1.7320508075688772}}, "df": 1, "[": {"docs": {}, "df": 0, "t": {"docs": {"sain": {"tf": 1}}, "df": 1}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sain.Ref": {"tf": 1}}, "df": 1, "d": {"docs": {"sain.Ref.object": {"tf": 1}, "sain.Ref.clone": {"tf": 1}}, "df": 2}}}}}}}}, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {"sain": {"tf": 1}, "sain.cfg": {"tf": 1}, "sain.Default": {"tf": 1}, "sain.Default.default": {"tf": 1}, "sain.Some": {"tf": 1}, "sain.Some.default": {"tf": 1}, "sain.Some.map_or": {"tf": 1}, "sain.Some.and_then": {"tf": 1}, "sain.Iter.all": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 10, "s": {"docs": {"sain.cfg": {"tf": 1.4142135623730951}, "sain.cfg_attr": {"tf": 1.4142135623730951}, "sain.Some.default": {"tf": 1}, "sain.Some.filter": {"tf": 1.7320508075688772}, "sain.Some.expect": {"tf": 1}, "sain.Some.and_ok": {"tf": 1.7320508075688772}, "sain.Some.and_then": {"tf": 1}, "sain.Some.as_ref": {"tf": 1.4142135623730951}, "sain.Iter.default": {"tf": 1}, "sain.Iter.next": {"tf": 1}, "sain.Iter.take_while": {"tf": 1}, "sain.Iter.drop_while": {"tf": 1}, "sain.Iter.discard": {"tf": 1}, "sain.Iter.zip": {"tf": 1}, "sain.Iter.first": {"tf": 1}, "sain.Iter.reversed": {"tf": 1}, "sain.Iter.union": {"tf": 1}, "sain.Iter.enumerate": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1.4142135623730951}, "sain.cfg.cfg": {"tf": 1.4142135623730951}}, "df": 20}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.Some.unwrap": {"tf": 1}, "sain.Some.unwrap_or": {"tf": 1.4142135623730951}, "sain.Some.unwrap_or_else": {"tf": 1}}, "df": 3}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.Some.map_or": {"tf": 1}, "sain.Iter.default": {"tf": 1}, "sain.Iter.collect": {"tf": 1}}, "df": 3}}}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"sain": {"tf": 1.4142135623730951}, "sain.cfg": {"tf": 1.4142135623730951}, "sain.cfg_attr": {"tf": 1.4142135623730951}, "sain.cfg.cfg_attr": {"tf": 1.4142135623730951}, "sain.cfg.cfg": {"tf": 1.4142135623730951}}, "df": 5}, "d": {"docs": {"sain.cfg": {"tf": 2.23606797749979}, "sain.cfg_attr": {"tf": 2.449489742783178}, "sain.Some.unwrap_or": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 2.449489742783178}, "sain.cfg.cfg": {"tf": 2.23606797749979}}, "df": 5}}}}}}, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"sain.Ref": {"tf": 1}}, "df": 1}}}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sain.Some.replace": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "a": {"docs": {}, "df": 0, "d": {"docs": {"sain.Some.read": {"tf": 1}}, "df": 1}, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.Iter.take": {"tf": 1}}, "df": 1}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"sain.Iter.sort": {"tf": 1.4142135623730951}, "sain.Iter.reversed": {"tf": 1}}, "df": 2, "d": {"docs": {"sain.into_iter": {"tf": 1}, "sain.Iter.reversed": {"tf": 1}}, "df": 2}}}}}}, "g": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"sain.Iter.take_while": {"tf": 1}, "sain.Iter.drop_while": {"tf": 1.4142135623730951}}, "df": 2}}}}}}, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"sain": {"tf": 1}, "sain.cfg": {"tf": 1}, "sain.Some": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 4, "d": {"docs": {"sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}}, "df": 2}, "s": {"docs": {"sain.cfg_attr": {"tf": 1}, "sain.Some.unwrap": {"tf": 1}, "sain.Some.expect": {"tf": 1}, "sain.into_iter": {"tf": 1}, "sain.Iter.collect": {"tf": 1}, "sain.Iter.next": {"tf": 1}, "sain.Iter.map": {"tf": 1}, "sain.Iter.take": {"tf": 1}, "sain.Iter.take_while": {"tf": 1}, "sain.Iter.drop_while": {"tf": 1}, "sain.Iter.discard": {"tf": 1}, "sain.Iter.zip": {"tf": 1}, "sain.Iter.all": {"tf": 1}, "sain.Iter.any": {"tf": 1}, "sain.Iter.sort": {"tf": 1}, "sain.Iter.first": {"tf": 1}, "sain.Iter.reversed": {"tf": 1}, "sain.Iter.union": {"tf": 1}, "sain.Iter.enumerate": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}}, "df": 20}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.Some.unwrap": {"tf": 1}}, "df": 1}}}}, "d": {"docs": {"sain.Iter.take": {"tf": 1.7320508075688772}}, "df": 1}}, "n": {"docs": {"sain.cfg": {"tf": 2.23606797749979}, "sain.cfg_attr": {"tf": 2.23606797749979}, "sain.cfg.cfg_attr": {"tf": 2.23606797749979}, "sain.cfg.cfg": {"tf": 2.23606797749979}}, "df": 4, "d": {"docs": {"sain": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}}, "df": 3, "o": {"docs": {}, "df": 0, "m": {"docs": {"sain": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}}, "df": 3}}}}}}, "t": {"docs": {"sain": {"tf": 1.4142135623730951}, "sain.Some": {"tf": 1}, "sain.Iter.collect": {"tf": 1}}, "df": 3, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"sain.Some.unwrap_or": {"tf": 1}, "sain.Iter.collect": {"tf": 1}}, "df": 2, "s": {"docs": {"sain": {"tf": 1.4142135623730951}, "sain.Iter": {"tf": 1}}, "df": 2, "a": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "e": {"docs": {"sain.Some": {"tf": 1}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.Some": {"tf": 1}, "sain.into_iter": {"tf": 1}, "sain.Iter": {"tf": 1}, "sain.Iter.map": {"tf": 1}, "sain.Iter.take_while": {"tf": 1}, "sain.Iter.drop_while": {"tf": 1}, "sain.Iter.discard": {"tf": 1}, "sain.Iter.all": {"tf": 1}, "sain.Iter.any": {"tf": 1}, "sain.Iter.sort": {"tf": 1}, "sain.Iter.for_each": {"tf": 1.4142135623730951}}, "df": 11}}}}}, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {"sain": {"tf": 1}, "sain.cfg": {"tf": 1.4142135623730951}, "sain.cfg_attr": {"tf": 1}, "sain.Some": {"tf": 1.4142135623730951}, "sain.Some.default": {"tf": 1}, "sain.Some.map_or": {"tf": 1.4142135623730951}, "sain.Iter": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1.4142135623730951}}, "df": 9}}, "e": {"docs": {"sain": {"tf": 1.7320508075688772}, "sain.cfg": {"tf": 3.7416573867739413}, "sain.cfg_attr": {"tf": 3.872983346207417}, "sain.Default.default": {"tf": 1.4142135623730951}, "sain.Ref.object": {"tf": 1}, "sain.Ref.clone": {"tf": 1}, "sain.Some": {"tf": 2}, "sain.Some.default": {"tf": 1}, "sain.Some.read": {"tf": 1}, "sain.Some.unwrap": {"tf": 1.4142135623730951}, "sain.Some.unwrap_or": {"tf": 1}, "sain.Some.unwrap_or_else": {"tf": 1}, "sain.Some.map": {"tf": 1}, "sain.Some.map_or": {"tf": 1.7320508075688772}, "sain.Some.filter": {"tf": 1.7320508075688772}, "sain.Some.take": {"tf": 1.4142135623730951}, "sain.Some.replace": {"tf": 1}, "sain.Some.expect": {"tf": 1}, "sain.Some.and_ok": {"tf": 1.7320508075688772}, "sain.Some.and_then": {"tf": 1.4142135623730951}, "sain.Some.as_ref": {"tf": 1}, "sain.into_iter": {"tf": 1.4142135623730951}, "sain.Iter": {"tf": 1.7320508075688772}, "sain.Iter.default": {"tf": 1.4142135623730951}, "sain.Iter.collect": {"tf": 2}, "sain.Iter.next": {"tf": 1.7320508075688772}, "sain.Iter.map": {"tf": 2}, "sain.Iter.take": {"tf": 2.449489742783178}, "sain.Iter.take_while": {"tf": 2}, "sain.Iter.drop_while": {"tf": 2}, "sain.Iter.filter": {"tf": 1.4142135623730951}, "sain.Iter.skip": {"tf": 2}, "sain.Iter.discard": {"tf": 2.23606797749979}, "sain.Iter.zip": {"tf": 2}, "sain.Iter.all": {"tf": 2.23606797749979}, "sain.Iter.any": {"tf": 2.23606797749979}, "sain.Iter.sort": {"tf": 2}, "sain.Iter.first": {"tf": 1.7320508075688772}, "sain.Iter.reversed": {"tf": 1.7320508075688772}, "sain.Iter.union": {"tf": 1.4142135623730951}, "sain.Iter.for_each": {"tf": 1.7320508075688772}, "sain.Iter.enumerate": {"tf": 1.4142135623730951}, "sain.cfg.cfg_attr": {"tf": 3.872983346207417}, "sain.cfg.cfg": {"tf": 3.7416573867739413}}, "df": 44, "n": {"docs": {"sain.Some.and_then": {"tf": 1.4142135623730951}}, "df": 1}}, "a": {"docs": {}, "df": 0, "t": {"docs": {"sain.cfg": {"tf": 1.7320508075688772}, "sain.Default": {"tf": 1}, "sain.Ref.object": {"tf": 1}, "sain.Some": {"tf": 1}, "sain.Iter.filter": {"tf": 1}, "sain.Iter.discard": {"tf": 1}, "sain.Iter.reversed": {"tf": 1}, "sain.Iter.union": {"tf": 1}, "sain.Iter.enumerate": {"tf": 1}, "sain.cfg.cfg": {"tf": 1.7320508075688772}}, "df": 10, "s": {"docs": {"sain.cfg": {"tf": 2}, "sain.cfg_attr": {"tf": 2}, "sain.cfg.cfg_attr": {"tf": 2}, "sain.cfg.cfg": {"tf": 2}}, "df": 4}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"sain": {"tf": 2.23606797749979}, "sain.cfg": {"tf": 2}, "sain.cfg_attr": {"tf": 1.7320508075688772}, "sain.cfg.cfg_attr": {"tf": 1.7320508075688772}, "sain.cfg.cfg": {"tf": 2}}, "df": 5, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.cfg": {"tf": 1.7320508075688772}, "sain.cfg_attr": {"tf": 1.7320508075688772}, "sain.cfg.cfg_attr": {"tf": 1.7320508075688772}, "sain.cfg.cfg": {"tf": 1.7320508075688772}}, "df": 4}}}}}}, "n": {"docs": {}, "df": 0, "j": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 2}}}}, "k": {"docs": {}, "df": 0, "e": {"docs": {"sain.Some.take": {"tf": 1.4142135623730951}, "sain.Iter": {"tf": 1}, "sain.Iter.take": {"tf": 1.7320508075688772}, "sain.Iter.take_while": {"tf": 1}}, "df": 4}}}, "o": {"docs": {"sain": {"tf": 1}, "sain.cfg": {"tf": 2.23606797749979}, "sain.cfg_attr": {"tf": 2.449489742783178}, "sain.Ref": {"tf": 1}, "sain.Some": {"tf": 1.7320508075688772}, "sain.Some.unwrap_or_else": {"tf": 1}, "sain.Some.map": {"tf": 1}, "sain.Some.map_or": {"tf": 1}, "sain.Some.take": {"tf": 1}, "sain.into_iter": {"tf": 1}, "sain.Iter": {"tf": 1.4142135623730951}, "sain.Iter.collect": {"tf": 1}, "sain.Iter.map": {"tf": 1.7320508075688772}, "sain.Iter.take": {"tf": 1}, "sain.Iter.take_while": {"tf": 1}, "sain.Iter.drop_while": {"tf": 1}, "sain.Iter.filter": {"tf": 1}, "sain.Iter.discard": {"tf": 1}, "sain.Iter.zip": {"tf": 1}, "sain.Iter.all": {"tf": 1}, "sain.Iter.any": {"tf": 1}, "sain.Iter.sort": {"tf": 1.4142135623730951}, "sain.Iter.union": {"tf": 1}, "sain.Iter.for_each": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 2.449489742783178}, "sain.cfg.cfg": {"tf": 2.23606797749979}}, "df": 26}, "r": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"sain.cfg": {"tf": 1}, "sain.Some.unwrap_or_else": {"tf": 1.4142135623730951}, "sain.Some.filter": {"tf": 1}, "sain.Some.and_ok": {"tf": 1}, "sain.Iter.take_while": {"tf": 1}, "sain.Iter.discard": {"tf": 1}, "sain.Iter.all": {"tf": 1}, "sain.Iter.any": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 9}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 4}}}}, "s": {"docs": {"sain.Iter.enumerate": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"sain.Iter.discard": {"tf": 1}, "sain.Iter.all": {"tf": 1}, "sain.Iter.any": {"tf": 1}}, "df": 3}}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1.4142135623730951}, "sain.cfg.cfg_attr": {"tf": 1.4142135623730951}, "sain.cfg.cfg": {"tf": 1}}, "df": 4, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain": {"tf": 1}, "sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1.4142135623730951}, "sain.cfg.cfg_attr": {"tf": 1.4142135623730951}, "sain.cfg.cfg": {"tf": 1}}, "df": 5, "s": {"docs": {"sain": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain": {"tf": 1}}, "df": 1}}}}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"sain": {"tf": 1.7320508075688772}, "sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1.4142135623730951}, "sain.Default": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1.4142135623730951}, "sain.cfg.cfg": {"tf": 1}}, "df": 6}}}}}, "t": {"docs": {"sain": {"tf": 1}, "sain.cfg": {"tf": 1}, "sain.Some": {"tf": 1.7320508075688772}, "sain.Some.take": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 5, "e": {"docs": {}, "df": 0, "r": {"docs": {"sain": {"tf": 1}, "sain.into_iter": {"tf": 1.4142135623730951}, "sain.Iter": {"tf": 1}, "sain.Iter.collect": {"tf": 1}, "sain.Iter.next": {"tf": 1}, "sain.Iter.map": {"tf": 1.4142135623730951}, "sain.Iter.take": {"tf": 1.4142135623730951}, "sain.Iter.take_while": {"tf": 1}, "sain.Iter.drop_while": {"tf": 1}, "sain.Iter.filter": {"tf": 1}, "sain.Iter.skip": {"tf": 1}, "sain.Iter.discard": {"tf": 1.4142135623730951}, "sain.Iter.zip": {"tf": 1.7320508075688772}, "sain.Iter.all": {"tf": 1}, "sain.Iter.any": {"tf": 1}, "sain.Iter.sort": {"tf": 1}, "sain.Iter.first": {"tf": 1}, "sain.Iter.reversed": {"tf": 1}, "sain.Iter.union": {"tf": 1.4142135623730951}, "sain.Iter.for_each": {"tf": 1}, "sain.Iter.enumerate": {"tf": 1}}, "df": 21, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sain.into_iter": {"tf": 1.7320508075688772}, "sain.Iter": {"tf": 1}, "sain.Iter.zip": {"tf": 1.4142135623730951}, "sain.Iter.union": {"tf": 1}}, "df": 4, "[": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {"sain.into_iter": {"tf": 1}, "sain.Iter": {"tf": 1}}, "df": 2}}}}}}}}, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"sain.into_iter": {"tf": 1}, "sain.Iter": {"tf": 2.449489742783178}, "sain.Iter.default": {"tf": 1}, "sain.Iter.collect": {"tf": 2.23606797749979}, "sain.Iter.next": {"tf": 2.23606797749979}, "sain.Iter.map": {"tf": 2.23606797749979}, "sain.Iter.take": {"tf": 2}, "sain.Iter.take_while": {"tf": 2.23606797749979}, "sain.Iter.drop_while": {"tf": 2.23606797749979}, "sain.Iter.filter": {"tf": 1}, "sain.Iter.skip": {"tf": 2}, "sain.Iter.discard": {"tf": 2.449489742783178}, "sain.Iter.zip": {"tf": 2.23606797749979}, "sain.Iter.all": {"tf": 2.23606797749979}, "sain.Iter.any": {"tf": 2.23606797749979}, "sain.Iter.sort": {"tf": 2}, "sain.Iter.first": {"tf": 2}, "sain.Iter.reversed": {"tf": 2.23606797749979}, "sain.Iter.union": {"tf": 2}, "sain.Iter.for_each": {"tf": 2}, "sain.Iter.enumerate": {"tf": 2}}, "df": 21, "s": {"docs": {"sain.Iter.union": {"tf": 1}}, "df": 1}}}, "e": {"docs": {"sain.Iter": {"tf": 1}}, "df": 1}}}, "[": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {"sain.Iter.zip": {"tf": 1}}, "df": 1}}}}}}}}}, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {"sain.Iter.zip": {"tf": 1}}, "df": 1}}}}}}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {"sain.Iter.union": {"tf": 1}}, "df": 1}}}}}}, "m": {"docs": {"sain.into_iter": {"tf": 1.4142135623730951}, "sain.Iter": {"tf": 2.449489742783178}, "sain.Iter.next": {"tf": 2.23606797749979}, "sain.Iter.map": {"tf": 2.23606797749979}, "sain.Iter.take_while": {"tf": 1}, "sain.Iter.drop_while": {"tf": 1}, "sain.Iter.skip": {"tf": 1}, "sain.Iter.discard": {"tf": 1}, "sain.Iter.zip": {"tf": 2}, "sain.Iter.all": {"tf": 1.7320508075688772}, "sain.Iter.any": {"tf": 2.449489742783178}, "sain.Iter.sort": {"tf": 2}, "sain.Iter.first": {"tf": 1}, "sain.Iter.reversed": {"tf": 1.4142135623730951}, "sain.Iter.union": {"tf": 1.4142135623730951}, "sain.Iter.for_each": {"tf": 2}, "sain.Iter.enumerate": {"tf": 1.7320508075688772}}, "df": 17, "s": {"docs": {"sain.Iter": {"tf": 1.4142135623730951}, "sain.Iter.collect": {"tf": 1.7320508075688772}, "sain.Iter.take": {"tf": 1.7320508075688772}, "sain.Iter.take_while": {"tf": 1}, "sain.Iter.drop_while": {"tf": 1}, "sain.Iter.filter": {"tf": 1}, "sain.Iter.skip": {"tf": 1}, "sain.Iter.all": {"tf": 1}, "sain.Iter.any": {"tf": 1}, "sain.Iter.reversed": {"tf": 1}, "sain.Iter.union": {"tf": 1}}, "df": 11}}}, "s": {"docs": {"sain.Some.unwrap": {"tf": 1}, "sain.Some.unwrap_or": {"tf": 1}, "sain.Some.unwrap_or_else": {"tf": 1}, "sain.Some.map_or": {"tf": 1}, "sain.Iter.map": {"tf": 1.4142135623730951}}, "df": 5}}, "f": {"docs": {"sain": {"tf": 1}, "sain.cfg": {"tf": 1.7320508075688772}, "sain.cfg_attr": {"tf": 2}, "sain.Some.unwrap": {"tf": 1.4142135623730951}, "sain.Some.unwrap_or": {"tf": 1}, "sain.Some.unwrap_or_else": {"tf": 1}, "sain.Some.map_or": {"tf": 1}, "sain.Some.filter": {"tf": 1.4142135623730951}, "sain.Some.expect": {"tf": 1}, "sain.Some.and_ok": {"tf": 1.4142135623730951}, "sain.Some.and_then": {"tf": 1}, "sain.Some.as_ref": {"tf": 1}, "sain.into_iter": {"tf": 1}, "sain.Iter.collect": {"tf": 1.4142135623730951}, "sain.Iter.next": {"tf": 1}, "sain.Iter.map": {"tf": 1}, "sain.Iter.take": {"tf": 1}, "sain.Iter.take_while": {"tf": 1}, "sain.Iter.drop_while": {"tf": 1}, "sain.Iter.discard": {"tf": 1}, "sain.Iter.zip": {"tf": 1}, "sain.Iter.all": {"tf": 1.4142135623730951}, "sain.Iter.any": {"tf": 1.7320508075688772}, "sain.Iter.sort": {"tf": 1}, "sain.Iter.first": {"tf": 1}, "sain.Iter.reversed": {"tf": 1}, "sain.Iter.union": {"tf": 1}, "sain.Iter.enumerate": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 2}, "sain.cfg.cfg": {"tf": 1.7320508075688772}}, "df": 30}, "n": {"docs": {"sain.into_iter": {"tf": 1.4142135623730951}, "sain.Iter": {"tf": 1.7320508075688772}, "sain.Iter.collect": {"tf": 1.4142135623730951}, "sain.Iter.next": {"tf": 1.4142135623730951}, "sain.Iter.map": {"tf": 2}, "sain.Iter.take": {"tf": 1.7320508075688772}, "sain.Iter.take_while": {"tf": 1.7320508075688772}, "sain.Iter.drop_while": {"tf": 1.7320508075688772}, "sain.Iter.filter": {"tf": 1}, "sain.Iter.skip": {"tf": 1.7320508075688772}, "sain.Iter.discard": {"tf": 2}, "sain.Iter.zip": {"tf": 1.4142135623730951}, "sain.Iter.all": {"tf": 1.7320508075688772}, "sain.Iter.any": {"tf": 1.7320508075688772}, "sain.Iter.sort": {"tf": 1.4142135623730951}, "sain.Iter.first": {"tf": 1.4142135623730951}, "sain.Iter.reversed": {"tf": 2}, "sain.Iter.union": {"tf": 1.4142135623730951}, "sain.Iter.for_each": {"tf": 1.4142135623730951}, "sain.Iter.enumerate": {"tf": 1.4142135623730951}}, "df": 20, "t": {"docs": {"sain": {"tf": 1}, "sain.cfg": {"tf": 1.4142135623730951}, "sain.cfg_attr": {"tf": 1.4142135623730951}, "sain.Some.unwrap_or": {"tf": 1}, "sain.Some.filter": {"tf": 1}, "sain.Some.and_ok": {"tf": 1}, "sain.Some.and_then": {"tf": 1}, "sain.Some.as_ref": {"tf": 1}, "sain.Iter.map": {"tf": 1.4142135623730951}, "sain.Iter.take": {"tf": 1}, "sain.Iter.all": {"tf": 1}, "sain.Iter.any": {"tf": 2}, "sain.cfg.cfg_attr": {"tf": 1.4142135623730951}, "sain.cfg.cfg": {"tf": 1.4142135623730951}}, "df": 14, "o": {"docs": {"sain.into_iter": {"tf": 1.4142135623730951}, "sain.Iter.collect": {"tf": 1.4142135623730951}}, "df": 2}, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"sain.Iter.all": {"tf": 1.4142135623730951}}, "df": 1}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"sain": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 2}}}}}, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}}, "df": 2}}}}}}, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sain.Some.unwrap": {"tf": 1.4142135623730951}, "sain.Some.unwrap_or": {"tf": 1}, "sain.Some.unwrap_or_else": {"tf": 1}, "sain.Some.map": {"tf": 1}, "sain.Some.map_or": {"tf": 1}}, "df": 5}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {"sain.Iter.enumerate": {"tf": 1.7320508075688772}}, "df": 1, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.Iter": {"tf": 1}}, "df": 1}}}}}}}, "s": {"docs": {"sain": {"tf": 1}, "sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1.4142135623730951}, "sain.Ref.object": {"tf": 1}, "sain.Some": {"tf": 1.7320508075688772}, "sain.Some.unwrap": {"tf": 1}, "sain.Some.unwrap_or": {"tf": 1}, "sain.Some.map_or": {"tf": 1.4142135623730951}, "sain.Some.filter": {"tf": 1}, "sain.Some.expect": {"tf": 1.7320508075688772}, "sain.Some.and_ok": {"tf": 1}, "sain.Some.and_then": {"tf": 1}, "sain.Some.as_ref": {"tf": 1}, "sain.Iter": {"tf": 1}, "sain.Iter.default": {"tf": 1}, "sain.Iter.take": {"tf": 1}, "sain.Iter.take_while": {"tf": 1}, "sain.Iter.drop_while": {"tf": 1}, "sain.Iter.discard": {"tf": 1}, "sain.Iter.any": {"tf": 1.7320508075688772}, "sain.cfg.cfg_attr": {"tf": 1.4142135623730951}, "sain.cfg.cfg": {"tf": 1}}, "df": 22, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sain.Default": {"tf": 1}, "sain.Iter.map": {"tf": 1}, "sain.Iter.all": {"tf": 1}, "sain.Iter.any": {"tf": 1}}, "df": 4}}}}}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain": {"tf": 1}}, "df": 1}}}}}}}}}, "d": {"docs": {"sain.Iter.any": {"tf": 1}, "sain.Iter.sort": {"tf": 1}, "sain.Iter.reversed": {"tf": 1}, "sain.Iter.union": {"tf": 1}, "sain.Iter.for_each": {"tf": 1}, "sain.Iter.enumerate": {"tf": 1}}, "df": 6}}, "f": {"docs": {"sain.Some.unwrap_or_else": {"tf": 1}, "sain.Some.and_then": {"tf": 1}}, "df": 2, "o": {"docs": {}, "df": 0, "r": {"docs": {"sain": {"tf": 1}, "sain.cfg": {"tf": 2.23606797749979}, "sain.cfg_attr": {"tf": 2.449489742783178}, "sain.Some": {"tf": 1}, "sain.Some.default": {"tf": 1}, "sain.into_iter": {"tf": 1}, "sain.Iter": {"tf": 1.7320508075688772}, "sain.Iter.default": {"tf": 1}, "sain.Iter.map": {"tf": 1}, "sain.Iter.take": {"tf": 1}, "sain.Iter.take_while": {"tf": 1}, "sain.Iter.drop_while": {"tf": 1}, "sain.Iter.filter": {"tf": 1}, "sain.Iter.skip": {"tf": 1}, "sain.Iter.discard": {"tf": 1.4142135623730951}, "sain.Iter.zip": {"tf": 1}, "sain.Iter.sort": {"tf": 1}, "sain.Iter.reversed": {"tf": 1}, "sain.Iter.union": {"tf": 1}, "sain.Iter.for_each": {"tf": 1}, "sain.Iter.enumerate": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 2.449489742783178}, "sain.cfg.cfg": {"tf": 2.23606797749979}}, "df": 23, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 4}}}}, "o": {"docs": {"sain": {"tf": 1}}, "df": 1}, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain": {"tf": 1.7320508075688772}}, "df": 1}}}}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {"sain.Iter.for_each": {"tf": 1.4142135623730951}}, "df": 1, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain": {"tf": 1}, "sain.cfg": {"tf": 1.7320508075688772}, "sain.cfg_attr": {"tf": 1}, "sain.Iter.map": {"tf": 1}, "sain.Iter.take_while": {"tf": 1}, "sain.Iter.drop_while": {"tf": 1}, "sain.Iter.discard": {"tf": 1.4142135623730951}, "sain.Iter.all": {"tf": 1}, "sain.Iter.any": {"tf": 1}, "sain.Iter.sort": {"tf": 1}, "sain.Iter.for_each": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1.7320508075688772}}, "df": 13, "a": {"docs": {}, "df": 0, "l": {"docs": {"sain.Iter": {"tf": 1}}, "df": 1}}}}}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1.4142135623730951}, "sain.Iter.drop_while": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1.4142135623730951}, "sain.cfg.cfg": {"tf": 1}}, "df": 5}}}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1.4142135623730951}, "sain.cfg.cfg_attr": {"tf": 1.4142135623730951}, "sain.cfg.cfg": {"tf": 1}}, "df": 4}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"sain.Default": {"tf": 1}, "sain.Some.take": {"tf": 1}, "sain.Iter.take_while": {"tf": 1}, "sain.Iter.drop_while": {"tf": 1}, "sain.Iter.union": {"tf": 1}}, "df": 5}}}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sain.Some.filter": {"tf": 1.4142135623730951}, "sain.Iter": {"tf": 1.4142135623730951}, "sain.Iter.filter": {"tf": 1}}, "df": 3, "s": {"docs": {"sain.Iter.filter": {"tf": 1}}, "df": 1}}}}}, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"sain.Iter.take": {"tf": 1}, "sain.Iter.skip": {"tf": 1.4142135623730951}, "sain.Iter.first": {"tf": 1.4142135623730951}}, "df": 3}}}}}, "p": {"docs": {}, "df": 0, "y": {"docs": {"sain.Iter.skip": {"tf": 1}}, "df": 1, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain": {"tf": 1.7320508075688772}, "sain.cfg": {"tf": 2.23606797749979}, "sain.cfg_attr": {"tf": 2.23606797749979}, "sain.cfg.cfg_attr": {"tf": 2.23606797749979}, "sain.cfg.cfg": {"tf": 2.23606797749979}}, "df": 5}}}}, "p": {"docs": {}, "df": 0, "y": {"docs": {"sain": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}}, "df": 3}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {"sain": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}}, "df": 3}}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.into_iter": {"tf": 1}, "sain.Iter": {"tf": 1}, "sain.Iter.collect": {"tf": 1}, "sain.Iter.map": {"tf": 1}, "sain.Iter.take": {"tf": 1}, "sain.Iter.take_while": {"tf": 1}, "sain.Iter.drop_while": {"tf": 1}, "sain.Iter.discard": {"tf": 1}, "sain.Iter.zip": {"tf": 1}, "sain.Iter.all": {"tf": 1}, "sain.Iter.any": {"tf": 1}, "sain.Iter.sort": {"tf": 1}, "sain.Iter.union": {"tf": 1}, "sain.Iter.for_each": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 18}}}}}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {"sain.Iter.filter": {"tf": 1}}, "df": 1}}}, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}}, "df": 2}}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"sain": {"tf": 1}, "sain.cfg": {"tf": 1.7320508075688772}, "sain.Default": {"tf": 1}, "sain.Some": {"tf": 1.7320508075688772}, "sain.Some.unwrap": {"tf": 1.4142135623730951}, "sain.Some.unwrap_or": {"tf": 1.4142135623730951}, "sain.Some.unwrap_or_else": {"tf": 1.4142135623730951}, "sain.Some.map": {"tf": 1}, "sain.Some.map_or": {"tf": 1.4142135623730951}, "sain.Some.filter": {"tf": 1.4142135623730951}, "sain.Some.take": {"tf": 1}, "sain.Some.replace": {"tf": 1}, "sain.Some.expect": {"tf": 1.4142135623730951}, "sain.Some.and_ok": {"tf": 1.4142135623730951}, "sain.Some.and_then": {"tf": 1.4142135623730951}, "sain.Some.as_ref": {"tf": 1.4142135623730951}, "sain.into_iter": {"tf": 1}, "sain.Iter": {"tf": 2}, "sain.Iter.take_while": {"tf": 1}, "sain.Iter.drop_while": {"tf": 1}, "sain.Iter.filter": {"tf": 1}, "sain.Iter.skip": {"tf": 1}, "sain.Iter.discard": {"tf": 1}, "sain.Iter.all": {"tf": 1}, "sain.Iter.any": {"tf": 1}, "sain.Iter.sort": {"tf": 1}, "sain.Iter.reversed": {"tf": 1}, "sain.Iter.union": {"tf": 1}, "sain.Iter.for_each": {"tf": 1}, "sain.Iter.enumerate": {"tf": 1}, "sain.cfg.cfg": {"tf": 1.7320508075688772}}, "df": 31}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"sain.cfg": {"tf": 1}, "sain.Some.filter": {"tf": 1.4142135623730951}, "sain.Some.and_ok": {"tf": 1}, "sain.Iter.map": {"tf": 1}, "sain.Iter.take_while": {"tf": 1.7320508075688772}, "sain.Iter.drop_while": {"tf": 1.7320508075688772}, "sain.Iter.filter": {"tf": 1}, "sain.Iter.discard": {"tf": 1.4142135623730951}, "sain.Iter.all": {"tf": 1.4142135623730951}, "sain.Iter.any": {"tf": 1.4142135623730951}, "sain.cfg.cfg": {"tf": 1}}, "df": 11, "d": {"docs": {"sain.Iter.map": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sain.Some": {"tf": 1}}, "df": 1}}}, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.Iter.collect": {"tf": 1}}, "df": 1}}}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sain.Iter.filter": {"tf": 2}}, "df": 1, "s": {"docs": {"sain.Iter.filter": {"tf": 1.4142135623730951}}, "df": 1}}}, "t": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {"sain.Iter.skip": {"tf": 1.4142135623730951}, "sain.Iter.discard": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}}, "e": {"docs": {"sain": {"tf": 1.4142135623730951}}, "df": 1, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"sain": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}, "x": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sain.cfg": {"tf": 1}, "sain.Default": {"tf": 1}, "sain.Some": {"tf": 1}, "sain.Some.unwrap": {"tf": 1}, "sain.Some.unwrap_or": {"tf": 1}, "sain.Some.unwrap_or_else": {"tf": 1}, "sain.Some.map": {"tf": 1}, "sain.Some.map_or": {"tf": 1}, "sain.Some.filter": {"tf": 1}, "sain.Some.take": {"tf": 1}, "sain.Some.replace": {"tf": 1}, "sain.Some.expect": {"tf": 1}, "sain.Some.and_ok": {"tf": 1}, "sain.Some.and_then": {"tf": 1}, "sain.Some.as_ref": {"tf": 1}, "sain.into_iter": {"tf": 1}, "sain.Iter": {"tf": 1}, "sain.Iter.collect": {"tf": 1}, "sain.Iter.next": {"tf": 1}, "sain.Iter.map": {"tf": 1}, "sain.Iter.take": {"tf": 1}, "sain.Iter.take_while": {"tf": 1}, "sain.Iter.drop_while": {"tf": 1}, "sain.Iter.filter": {"tf": 1}, "sain.Iter.skip": {"tf": 1}, "sain.Iter.discard": {"tf": 1}, "sain.Iter.zip": {"tf": 1}, "sain.Iter.all": {"tf": 1}, "sain.Iter.any": {"tf": 1}, "sain.Iter.sort": {"tf": 1}, "sain.Iter.first": {"tf": 1}, "sain.Iter.reversed": {"tf": 1}, "sain.Iter.union": {"tf": 1}, "sain.Iter.for_each": {"tf": 1}, "sain.Iter.enumerate": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 36, "s": {"docs": {"sain": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}}, "df": 3}}}}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"sain": {"tf": 1}, "sain.Some.expect": {"tf": 1.4142135623730951}}, "df": 2}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 4}}}}}}}}, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"sain": {"tf": 1}, "sain.Some": {"tf": 1}}, "df": 2}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sain": {"tf": 1}, "sain.Some.unwrap": {"tf": 1}, "sain.Some.unwrap_or": {"tf": 1}, "sain.Some.unwrap_or_else": {"tf": 1}}, "df": 4}}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 2}}, "s": {"docs": {}, "df": 0, "e": {"docs": {"sain.cfg": {"tf": 1}, "sain.Some.unwrap_or_else": {"tf": 1.4142135623730951}, "sain.cfg.cfg": {"tf": 1}}, "df": 3}}, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"sain.into_iter": {"tf": 1}, "sain.Iter.collect": {"tf": 1}, "sain.Iter.next": {"tf": 1}, "sain.Iter.map": {"tf": 1}, "sain.Iter.take": {"tf": 1}, "sain.Iter.take_while": {"tf": 1}, "sain.Iter.drop_while": {"tf": 1}, "sain.Iter.discard": {"tf": 1.4142135623730951}, "sain.Iter.zip": {"tf": 1}, "sain.Iter.all": {"tf": 1}, "sain.Iter.any": {"tf": 1}, "sain.Iter.sort": {"tf": 1}, "sain.Iter.first": {"tf": 1}, "sain.Iter.reversed": {"tf": 1}, "sain.Iter.union": {"tf": 1}, "sain.Iter.enumerate": {"tf": 1}}, "df": 16}}}}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"sain.Iter.default": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"sain.Iter.map": {"tf": 1.4142135623730951}, "sain.Iter.take_while": {"tf": 1}, "sain.Iter.drop_while": {"tf": 1}, "sain.Iter.discard": {"tf": 1}, "sain.Iter.all": {"tf": 1}, "sain.Iter.any": {"tf": 1}, "sain.Iter.for_each": {"tf": 1.7320508075688772}}, "df": 7}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {"sain.Iter.take": {"tf": 1}}, "df": 1}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"sain.Iter.enumerate": {"tf": 1}}, "df": 1}}}}}}}}}, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain": {"tf": 1}}, "df": 1, "a": {"docs": {}, "df": 0, "l": {"docs": {"sain.Iter.collect": {"tf": 1}}, "df": 1, "[": {"docs": {}, "df": 0, "t": {"docs": {"sain.Some": {"tf": 1}}, "df": 1}}}}}}}, "b": {"docs": {"sain.Some.and_ok": {"tf": 1}}, "df": 1}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 4}}}}}}}}, "s": {"docs": {"sain": {"tf": 1.7320508075688772}, "sain.cfg": {"tf": 1.7320508075688772}, "sain.cfg_attr": {"tf": 1.4142135623730951}, "sain.cfg.cfg_attr": {"tf": 1.4142135623730951}, "sain.cfg.cfg": {"tf": 1.7320508075688772}}, "df": 5}, "n": {"docs": {"sain.Some.and_then": {"tf": 1}, "sain.Iter.for_each": {"tf": 1.4142135623730951}}, "df": 2, "l": {"docs": {}, "df": 0, "y": {"docs": {"sain": {"tf": 1.4142135623730951}, "sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.Iter.filter": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 6}}, "e": {"docs": {"sain": {"tf": 1.7320508075688772}, "sain.cfg_attr": {"tf": 1}, "sain.Iter.any": {"tf": 1.7320508075688772}, "sain.cfg.cfg_attr": {"tf": 1}}, "df": 4}}, "f": {"docs": {"sain": {"tf": 1.7320508075688772}, "sain.cfg": {"tf": 1.4142135623730951}, "sain.cfg_attr": {"tf": 1.7320508075688772}, "sain.Default.default": {"tf": 1}, "sain.Ref.clone": {"tf": 1}, "sain.Iter.take": {"tf": 2}, "sain.Iter.skip": {"tf": 1}, "sain.Iter.enumerate": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1.7320508075688772}, "sain.cfg.cfg": {"tf": 1.4142135623730951}}, "df": 10}, "r": {"docs": {"sain": {"tf": 1}, "sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1.4142135623730951}, "sain.Some": {"tf": 2}, "sain.Some.unwrap": {"tf": 1}, "sain.Some.unwrap_or": {"tf": 1.7320508075688772}, "sain.Some.unwrap_or_else": {"tf": 1.7320508075688772}, "sain.Some.map_or": {"tf": 1.7320508075688772}, "sain.Iter.take": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1.4142135623730951}, "sain.cfg.cfg": {"tf": 1}}, "df": 11, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sain.Iter.reversed": {"tf": 1}}, "df": 1}}}}, "b": {"docs": {}, "df": 0, "j": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"sain.cfg": {"tf": 2.23606797749979}, "sain.cfg_attr": {"tf": 2.23606797749979}, "sain.Default": {"tf": 1}, "sain.Default.default": {"tf": 1}, "sain.Ref": {"tf": 1}, "sain.Ref.object": {"tf": 1}, "sain.Ref.clone": {"tf": 1}, "sain.Some": {"tf": 1.4142135623730951}, "sain.Some.take": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 2.23606797749979}, "sain.cfg.cfg": {"tf": 2.23606797749979}}, "df": 11}}}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sain.Iter.zip": {"tf": 2.23606797749979}, "sain.Iter.union": {"tf": 1.7320508075688772}}, "df": 2, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"sain.Some": {"tf": 1}, "sain.Some.filter": {"tf": 1}, "sain.Some.expect": {"tf": 1}, "sain.Some.and_ok": {"tf": 1}, "sain.Some.and_then": {"tf": 1}, "sain.Some.as_ref": {"tf": 1}}, "df": 6}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {"sain.Iter.zip": {"tf": 1}}, "df": 1}}}}}}}}, "k": {"docs": {"sain.Some.and_ok": {"tf": 1.4142135623730951}}, "df": 1}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sain.Iter": {"tf": 1}}, "df": 1}}}}, "l": {"docs": {"sain.Iter.filter": {"tf": 1}}, "df": 1, "t": {"docs": {"sain": {"tf": 1.4142135623730951}, "sain.Iter.map": {"tf": 1}, "sain.Iter.take": {"tf": 1}, "sain.Iter.discard": {"tf": 1}, "sain.Iter.zip": {"tf": 1}, "sain.Iter.any": {"tf": 1.4142135623730951}, "sain.Iter.sort": {"tf": 1.7320508075688772}, "sain.Iter.reversed": {"tf": 1.4142135623730951}, "sain.Iter.union": {"tf": 1.4142135623730951}, "sain.Iter.for_each": {"tf": 1.4142135623730951}, "sain.Iter.enumerate": {"tf": 1.4142135623730951}}, "df": 11}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "x": {"docs": {"sain": {"tf": 1.4142135623730951}, "sain.cfg": {"tf": 1.4142135623730951}, "sain.cfg.cfg": {"tf": 1.4142135623730951}}, "df": 3}}}, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"sain.Iter": {"tf": 1}}, "df": 1}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"sain.Iter.default": {"tf": 1}, "sain.Iter.collect": {"tf": 1.4142135623730951}}, "df": 2}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.Some": {"tf": 1}}, "df": 1}, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.Iter.filter": {"tf": 1.4142135623730951}}, "df": 1}}}}, "s": {"docs": {"sain.Iter.filter": {"tf": 1.4142135623730951}}, "df": 1}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {"sain.Some.unwrap_or_else": {"tf": 1.4142135623730951}, "sain.Some.map": {"tf": 1}, "sain.Some.map_or": {"tf": 1.4142135623730951}, "sain.Some.filter": {"tf": 1.4142135623730951}, "sain.Some.and_then": {"tf": 1.4142135623730951}, "sain.Iter": {"tf": 1}, "sain.Iter.map": {"tf": 1}, "sain.Iter.take_while": {"tf": 1}, "sain.Iter.drop_while": {"tf": 1}, "sain.Iter.filter": {"tf": 1}, "sain.Iter.discard": {"tf": 1}, "sain.Iter.all": {"tf": 1}, "sain.Iter.any": {"tf": 1}, "sain.Iter.sort": {"tf": 1}, "sain.Iter.for_each": {"tf": 1}}, "df": 15}}}}, "z": {"docs": {}, "df": 0, "y": {"docs": {"sain.Iter": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {"sain.Some.filter": {"tf": 1}}, "df": 1}, "f": {"docs": {}, "df": 0, "t": {"docs": {"sain.into_iter": {"tf": 1}, "sain.Iter.collect": {"tf": 1}, "sain.Iter.next": {"tf": 1}, "sain.Iter.map": {"tf": 1}, "sain.Iter.take": {"tf": 1}, "sain.Iter.take_while": {"tf": 1}, "sain.Iter.drop_while": {"tf": 1}, "sain.Iter.discard": {"tf": 1}, "sain.Iter.zip": {"tf": 1}, "sain.Iter.all": {"tf": 1}, "sain.Iter.any": {"tf": 1}, "sain.Iter.sort": {"tf": 1}, "sain.Iter.first": {"tf": 1}, "sain.Iter.reversed": {"tf": 1}, "sain.Iter.union": {"tf": 1}, "sain.Iter.enumerate": {"tf": 1}}, "df": 16}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"sain.Iter.any": {"tf": 1.7320508075688772}}, "df": 1}}}}}, "g": {"docs": {}, "df": 0, "t": {"docs": {"sain": {"tf": 2.23606797749979}, "sain.cfg_attr": {"tf": 1}, "sain.Default": {"tf": 1}, "sain.Some.filter": {"tf": 1.4142135623730951}, "sain.Iter": {"tf": 1}, "sain.Iter.collect": {"tf": 3}, "sain.Iter.next": {"tf": 1.7320508075688772}, "sain.Iter.map": {"tf": 2.6457513110645907}, "sain.Iter.take": {"tf": 2.6457513110645907}, "sain.Iter.discard": {"tf": 2.6457513110645907}, "sain.Iter.zip": {"tf": 3.1622776601683795}, "sain.Iter.all": {"tf": 2.449489742783178}, "sain.Iter.any": {"tf": 2.8284271247461903}, "sain.Iter.sort": {"tf": 2.8284271247461903}, "sain.Iter.first": {"tf": 2.449489742783178}, "sain.Iter.reversed": {"tf": 2.8284271247461903}, "sain.Iter.union": {"tf": 3.3166247903554}, "sain.Iter.for_each": {"tf": 2.8284271247461903}, "sain.Iter.enumerate": {"tf": 2.8284271247461903}, "sain.cfg.cfg_attr": {"tf": 1}}, "df": 20}, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}}, "df": 2}}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {"sain.Some.unwrap_or_else": {"tf": 1}, "sain.Some.map_or": {"tf": 1}}, "df": 2}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"sain.Iter.take": {"tf": 1}}, "df": 1}}}}}, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"sain.Iter.take_while": {"tf": 1}, "sain.Iter.drop_while": {"tf": 1.4142135623730951}}, "df": 2}}}}}, "s": {"docs": {"sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}}, "df": 2, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"sain": {"tf": 3.7416573867739413}, "sain.cfg": {"tf": 2}, "sain.cfg_attr": {"tf": 2}, "sain.Default": {"tf": 1}, "sain.into_iter": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 2}, "sain.cfg.cfg": {"tf": 2}}, "df": 7}}}, "o": {"docs": {"sain.Some.map_or": {"tf": 1}}, "df": 1, "m": {"docs": {}, "df": 0, "e": {"docs": {"sain": {"tf": 1.4142135623730951}, "sain.Default": {"tf": 1}, "sain.Some": {"tf": 2}, "sain.Some.default": {"tf": 1}, "sain.Some.unwrap": {"tf": 1.4142135623730951}, "sain.Some.unwrap_or": {"tf": 1.7320508075688772}, "sain.Some.unwrap_or_else": {"tf": 1.7320508075688772}, "sain.Some.map": {"tf": 1.4142135623730951}, "sain.Some.map_or": {"tf": 1.7320508075688772}, "sain.Some.filter": {"tf": 2}, "sain.Some.take": {"tf": 1.4142135623730951}, "sain.Some.replace": {"tf": 1.4142135623730951}, "sain.Some.expect": {"tf": 1.7320508075688772}, "sain.Some.and_ok": {"tf": 2.449489742783178}, "sain.Some.and_then": {"tf": 2.6457513110645907}, "sain.Some.as_ref": {"tf": 2}, "sain.Iter": {"tf": 1}}, "df": 17, "[": {"docs": {}, "df": 0, "t": {"docs": {"sain": {"tf": 1}, "sain.Some.and_ok": {"tf": 1}}, "df": 2}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"sain.Some.filter": {"tf": 1}, "sain.Some.and_ok": {"tf": 1}, "sain.Some.and_then": {"tf": 1}}, "df": 3}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"sain.Some.filter": {"tf": 1}}, "df": 1}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"sain.Some.as_ref": {"tf": 1}}, "df": 1}}}}}}}}}}}}}, "l": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.Some": {"tf": 1}}, "df": 1}}}}}, "r": {"docs": {}, "df": 0, "t": {"docs": {"sain.Iter.sort": {"tf": 1.7320508075688772}}, "df": 1, "s": {"docs": {"sain.Iter.sort": {"tf": 1}}, "df": 1}}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {"sain": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.Default": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}}, "df": 4}}}}}}}}}, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"sain.Iter.filter": {"tf": 1}}, "df": 1}}}}}}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {"sain.Iter.skip": {"tf": 1}, "sain.Iter.discard": {"tf": 1.4142135623730951}}, "df": 2}}}}, "r": {"docs": {"sain.cfg": {"tf": 2}, "sain.cfg_attr": {"tf": 2}, "sain.Default": {"tf": 1.4142135623730951}, "sain.Some.map_or": {"tf": 1.4142135623730951}, "sain.Some.expect": {"tf": 1}, "sain.Iter.collect": {"tf": 1}, "sain.Iter.next": {"tf": 1}, "sain.Iter.map": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 2}, "sain.cfg.cfg": {"tf": 2}}, "df": 10, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 4}}, "k": {"docs": {}, "df": 0, "e": {"docs": {"sain.Iter.take": {"tf": 1.7320508075688772}}, "df": 1}}}}, "u": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "f": {"docs": {"sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}}, "df": 2}}}, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.into_iter": {"tf": 1}, "sain.Iter.collect": {"tf": 1}, "sain.Iter.next": {"tf": 1}, "sain.Iter.map": {"tf": 1}, "sain.Iter.take": {"tf": 1}, "sain.Iter.take_while": {"tf": 1}, "sain.Iter.drop_while": {"tf": 1}, "sain.Iter.discard": {"tf": 1}, "sain.Iter.zip": {"tf": 1}, "sain.Iter.all": {"tf": 1}, "sain.Iter.any": {"tf": 1}, "sain.Iter.sort": {"tf": 1}, "sain.Iter.first": {"tf": 1}, "sain.Iter.reversed": {"tf": 1}, "sain.Iter.union": {"tf": 1}, "sain.Iter.enumerate": {"tf": 1}}, "df": 16}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {"sain.Iter.skip": {"tf": 1}, "sain.Iter.discard": {"tf": 1.7320508075688772}}, "df": 2}}}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"sain.Iter.all": {"tf": 1.4142135623730951}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.into_iter": {"tf": 1.4142135623730951}, "sain.Iter": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 6, "[": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 4}}}}}}}}}}, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.Some.take": {"tf": 1}}, "df": 1}}}}}}, "y": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 4}}}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"sain.Some": {"tf": 1}}, "df": 1}}}}}, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sain.Some.map_or": {"tf": 1}}, "df": 1}}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.Iter": {"tf": 1}}, "df": 1}}}}}}}}, "k": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {"sain.Iter.skip": {"tf": 1.4142135623730951}}, "df": 1, "s": {"docs": {"sain.Iter.skip": {"tf": 1}}, "df": 1}}}}}, "n": {"docs": {"sain.Iter.take": {"tf": 1}}, "df": 1, "o": {"docs": {"sain.into_iter": {"tf": 1}, "sain.Iter.collect": {"tf": 1}, "sain.Iter.next": {"tf": 1}, "sain.Iter.map": {"tf": 1}, "sain.Iter.take": {"tf": 1}, "sain.Iter.take_while": {"tf": 1}, "sain.Iter.drop_while": {"tf": 1}, "sain.Iter.discard": {"tf": 1}, "sain.Iter.zip": {"tf": 1}, "sain.Iter.all": {"tf": 1}, "sain.Iter.any": {"tf": 1}, "sain.Iter.sort": {"tf": 1}, "sain.Iter.first": {"tf": 1}, "sain.Iter.reversed": {"tf": 1}, "sain.Iter.union": {"tf": 1}, "sain.Iter.enumerate": {"tf": 1}}, "df": 16, "t": {"docs": {"sain": {"tf": 1}, "sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.Some": {"tf": 1}, "sain.Some.unwrap": {"tf": 1}, "sain.Some.unwrap_or": {"tf": 1}, "sain.Some.unwrap_or_else": {"tf": 1}, "sain.Some.map_or": {"tf": 1}, "sain.Some.expect": {"tf": 1}, "sain.Some.as_ref": {"tf": 1}, "sain.Iter.collect": {"tf": 1}, "sain.Iter.drop_while": {"tf": 1}, "sain.Iter.discard": {"tf": 1.4142135623730951}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 15, "e": {"docs": {}, "df": 0, "s": {"docs": {"sain": {"tf": 1}}, "df": 1}}}, "n": {"docs": {"sain": {"tf": 1}}, "df": 1, "e": {"docs": {"sain": {"tf": 1.4142135623730951}, "sain.cfg": {"tf": 2.23606797749979}, "sain.cfg_attr": {"tf": 2.449489742783178}, "sain.Some": {"tf": 2.449489742783178}, "sain.Some.default": {"tf": 1}, "sain.Some.unwrap": {"tf": 1.7320508075688772}, "sain.Some.unwrap_or": {"tf": 1.4142135623730951}, "sain.Some.unwrap_or_else": {"tf": 1.4142135623730951}, "sain.Some.map_or": {"tf": 2}, "sain.Some.filter": {"tf": 1.7320508075688772}, "sain.Some.take": {"tf": 1.4142135623730951}, "sain.Some.expect": {"tf": 2}, "sain.Some.and_ok": {"tf": 1.7320508075688772}, "sain.Some.and_then": {"tf": 1.7320508075688772}, "sain.Some.as_ref": {"tf": 2}, "sain.Iter.collect": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 2.449489742783178}, "sain.cfg.cfg": {"tf": 2.23606797749979}}, "df": 18}}, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"sain.Iter.collect": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sain": {"tf": 1.4142135623730951}, "sain.Some": {"tf": 1}}, "df": 2}}}, "w": {"docs": {"sain.Some.map": {"tf": 1}, "sain.Some.map_or": {"tf": 1}, "sain.Iter.reversed": {"tf": 1}, "sain.Iter.union": {"tf": 1}, "sain.Iter.enumerate": {"tf": 1}}, "df": 5}, "x": {"docs": {}, "df": 0, "t": {"docs": {"sain.Iter.next": {"tf": 1.7320508075688772}}, "df": 1}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "y": {"docs": {"sain": {"tf": 1.7320508075688772}, "sain.cfg_attr": {"tf": 1.7320508075688772}, "sain.cfg.cfg_attr": {"tf": 1.7320508075688772}}, "df": 3}}, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sain.Iter.take": {"tf": 1.7320508075688772}, "sain.Iter.skip": {"tf": 1}}, "df": 2}}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 2}}}}}, "y": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"sain": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"sain.Iter.filter": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.Iter.take": {"tf": 1}}, "df": 1}}, "s": {"docs": {"sain.Iter.take_while": {"tf": 1}, "sain.Iter.drop_while": {"tf": 1}, "sain.Iter.reversed": {"tf": 1}, "sain.Iter.union": {"tf": 1}, "sain.Iter.enumerate": {"tf": 1}}, "df": 5}}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {"sain": {"tf": 1.7320508075688772}, "sain.cfg_attr": {"tf": 1.4142135623730951}, "sain.Default": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1.4142135623730951}}, "df": 4, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"sain": {"tf": 1}, "sain.Default": {"tf": 3}, "sain.Default.default": {"tf": 1}, "sain.Some": {"tf": 1}, "sain.Some.default": {"tf": 1}, "sain.Some.unwrap_or": {"tf": 1}, "sain.Some.unwrap_or_else": {"tf": 1}, "sain.Some.map_or": {"tf": 1.4142135623730951}, "sain.Iter.default": {"tf": 1}}, "df": 9, "[": {"docs": {}, "df": 0, "t": {"docs": {"sain": {"tf": 1}}, "df": 1}}}}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"sain": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 2}}}}}}}}, "c": {"docs": {}, "df": 0, "t": {"docs": {"sain.Default": {"tf": 1.4142135623730951}}, "df": 1}}, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"sain.Iter.discard": {"tf": 1}}, "df": 1, "s": {"docs": {"sain.Iter.discard": {"tf": 1}}, "df": 1}}}}}}}, "o": {"docs": {"sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}}, "df": 2}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {"sain.Iter.drop_while": {"tf": 1}}, "df": 1, "s": {"docs": {"sain.Iter.discard": {"tf": 1}}, "df": 1}}}}}, "a": {"docs": {"sain": {"tf": 1}, "sain.cfg": {"tf": 1.4142135623730951}, "sain.cfg_attr": {"tf": 1.4142135623730951}, "sain.Default": {"tf": 1}, "sain.Ref": {"tf": 1}, "sain.Ref.clone": {"tf": 1}, "sain.Some": {"tf": 1.4142135623730951}, "sain.Some.unwrap": {"tf": 1}, "sain.Some.unwrap_or_else": {"tf": 1}, "sain.Some.map": {"tf": 1}, "sain.Some.map_or": {"tf": 1}, "sain.Some.expect": {"tf": 1}, "sain.Iter.collect": {"tf": 1.4142135623730951}, "sain.Iter.reversed": {"tf": 1}, "sain.Iter.union": {"tf": 1}, "sain.Iter.enumerate": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1.4142135623730951}, "sain.cfg.cfg": {"tf": 1.4142135623730951}}, "df": 18, "s": {"docs": {"sain.Some": {"tf": 1.4142135623730951}, "sain.Some.as_ref": {"tf": 1.4142135623730951}, "sain.Iter.collect": {"tf": 1}}, "df": 3, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {"sain": {"tf": 1}}, "df": 1}}}, "y": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {"sain": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}}, "df": 3}}}, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"sain.Default": {"tf": 1}, "sain.Iter.next": {"tf": 1.4142135623730951}, "sain.Iter.map": {"tf": 1}, "sain.Iter.take": {"tf": 1}, "sain.Iter.zip": {"tf": 1}}, "df": 5}}}}}, "t": {"docs": {"sain.Iter.any": {"tf": 1.7320508075688772}}, "df": 1, "t": {"docs": {}, "df": 0, "r": {"docs": {"sain": {"tf": 2.449489742783178}, "sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1.7320508075688772}, "sain.cfg.cfg_attr": {"tf": 1.7320508075688772}, "sain.cfg.cfg": {"tf": 1}}, "df": 5, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"sain.cfg": {"tf": 1.4142135623730951}, "sain.cfg_attr": {"tf": 1.7320508075688772}, "sain.cfg.cfg_attr": {"tf": 1.7320508075688772}, "sain.cfg.cfg": {"tf": 1.4142135623730951}}, "df": 4}}}}}}}}}, "n": {"docs": {"sain": {"tf": 1}, "sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.Default": {"tf": 1}, "sain.Ref": {"tf": 1}, "sain.Some": {"tf": 1}, "sain.into_iter": {"tf": 1}, "sain.Iter": {"tf": 1}, "sain.Iter.default": {"tf": 1}, "sain.Iter.collect": {"tf": 1}, "sain.Iter.any": {"tf": 1.7320508075688772}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 13, "d": {"docs": {"sain.cfg": {"tf": 1}, "sain.Some.filter": {"tf": 1}, "sain.Some.and_ok": {"tf": 1.7320508075688772}, "sain.Some.and_then": {"tf": 1.7320508075688772}, "sain.Iter.enumerate": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 6}, "y": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.Default": {"tf": 1.4142135623730951}, "sain.Iter.any": {"tf": 1.4142135623730951}, "sain.Iter.sort": {"tf": 1}, "sain.Iter.for_each": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 8}, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sain.Some.replace": {"tf": 1}, "sain.Iter.zip": {"tf": 1}}, "df": 2}}}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"sain.Iter.filter": {"tf": 1.4142135623730951}}, "df": 1}}}}}}, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 4, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"sain": {"tf": 1}, "sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 5}}}}}}}}}}, "m": {"6": {"4": {"docs": {"sain": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {"sain": {"tf": 1}}, "df": 1}, "e": {"docs": {"sain.into_iter": {"tf": 1}, "sain.Iter.collect": {"tf": 1}, "sain.Iter.next": {"tf": 1}, "sain.Iter.map": {"tf": 1}, "sain.Iter.take": {"tf": 1.4142135623730951}, "sain.Iter.take_while": {"tf": 1}, "sain.Iter.drop_while": {"tf": 1}, "sain.Iter.discard": {"tf": 1.4142135623730951}, "sain.Iter.zip": {"tf": 1}, "sain.Iter.all": {"tf": 1}, "sain.Iter.any": {"tf": 1}, "sain.Iter.sort": {"tf": 1}, "sain.Iter.first": {"tf": 1}, "sain.Iter.reversed": {"tf": 1}, "sain.Iter.union": {"tf": 1}, "sain.Iter.enumerate": {"tf": 1}}, "df": 16}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"sain.cfg": {"tf": 1}, "sain.Iter.collect": {"tf": 1}, "sain.Iter.discard": {"tf": 1.4142135623730951}, "sain.Iter.all": {"tf": 2}, "sain.Iter.union": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 6}, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "s": {"docs": {"sain.Some.default": {"tf": 1}}, "df": 1}}}}}, "p": {"docs": {}, "df": 0, "i": {"docs": {"sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}}, "df": 2}}}, "k": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {"sain": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "y": {"docs": {"sain.Iter.sort": {"tf": 1.4142135623730951}}, "df": 1}}}, "m": {"docs": {"sain.Iter.take_while": {"tf": 1.4142135623730951}, "sain.Iter.drop_while": {"tf": 1.4142135623730951}}, "df": 2, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {"sain": {"tf": 1}}, "df": 1}}}, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"sain": {"tf": 1}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "s": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 2}}}, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"sain.cfg_attr": {"tf": 1.4142135623730951}, "sain.Iter.filter": {"tf": 1}, "sain.Iter.all": {"tf": 1}, "sain.Iter.any": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1.4142135623730951}}, "df": 5}}}, "k": {"docs": {}, "df": 0, "e": {"docs": {"sain.Ref.clone": {"tf": 1}}, "df": 1}}, "p": {"docs": {"sain.Some.map": {"tf": 1.4142135623730951}, "sain.Some.map_or": {"tf": 1.7320508075688772}, "sain.Iter.map": {"tf": 1.4142135623730951}}, "df": 3, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.Some.map_or": {"tf": 1}}, "df": 1}}}, "s": {"docs": {"sain.Iter.map": {"tf": 1}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 4, "s": {"docs": {"sain": {"tf": 1.4142135623730951}, "sain.cfg": {"tf": 1.4142135623730951}, "sain.cfg_attr": {"tf": 2}, "sain.cfg.cfg_attr": {"tf": 2}, "sain.cfg.cfg": {"tf": 1.4142135623730951}}, "df": 5}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}, "e": {"docs": {"sain.Iter.take": {"tf": 1.4142135623730951}}, "df": 1}}}, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"sain": {"tf": 1.7320508075688772}, "sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.Iter": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 6}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {"sain.cfg_attr": {"tf": 1}, "sain.Some": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}}, "df": 3, "s": {"docs": {"sain.Some": {"tf": 1}, "sain.Iter": {"tf": 1}}, "df": 2}}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"sain.Iter": {"tf": 1}}, "df": 1}}}, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {"sain.Iter.take_while": {"tf": 1.4142135623730951}, "sain.Iter.drop_while": {"tf": 1.4142135623730951}}, "df": 2, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"sain.Iter.skip": {"tf": 1.7320508075688772}, "sain.Iter.discard": {"tf": 2.449489742783178}}, "df": 2}}}}, "s": {"docs": {"sain.Iter.discard": {"tf": 1}}, "df": 1}}}}}}}}}}, "y": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}}, "df": 2}}}}}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {"sain.Some": {"tf": 1}}, "df": 1}}}}}, "c": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "g": {"docs": {"sain": {"tf": 2.8284271247461903}, "sain.cfg": {"tf": 2}, "sain.cfg_attr": {"tf": 1.7320508075688772}, "sain.cfg.cfg_attr": {"tf": 1.7320508075688772}, "sain.cfg.cfg": {"tf": 2}}, "df": 5}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"sain": {"tf": 1}, "sain.cfg_attr": {"tf": 1.4142135623730951}, "sain.Default": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1.4142135623730951}}, "df": 4}}}}, "p": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain": {"tf": 1}}, "df": 1}}}}}, "u": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 4}}, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 2}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 2}}}}}}, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}}, "df": 2}}}}}, "u": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.cfg": {"tf": 1}}, "df": 1}}}}}}}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.Some": {"tf": 1}}, "df": 1}}, "u": {"docs": {}, "df": 0, "e": {"docs": {"sain.Iter.all": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.Some": {"tf": 1}, "sain.Some.read": {"tf": 1}, "sain.Some.filter": {"tf": 1}, "sain.Some.replace": {"tf": 1}, "sain.Some.expect": {"tf": 1}, "sain.Some.and_ok": {"tf": 1}, "sain.Some.and_then": {"tf": 1}, "sain.Some.as_ref": {"tf": 1}}, "df": 8}}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"sain.into_iter": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "p": {"docs": {}, "df": 0, "y": {"docs": {"sain.Ref.clone": {"tf": 1}}, "df": 1}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"sain.Iter": {"tf": 1}}, "df": 1}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"sain.Iter.collect": {"tf": 1.4142135623730951}}, "df": 1, "s": {"docs": {"sain.Iter.collect": {"tf": 1}}, "df": 1}}}}}}}, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {"sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 4}}}}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}}, "df": 2}, "t": {"docs": {"sain.Iter.collect": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.Iter.collect": {"tf": 1}}, "df": 1}}}}}, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {"sain.Default": {"tf": 2}}, "df": 1}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"sain.Some.and_then": {"tf": 1}, "sain.Iter.for_each": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.Some.unwrap_or_else": {"tf": 1}}, "df": 1}}}, "s": {"docs": {"sain.Some.filter": {"tf": 1}, "sain.Some.and_ok": {"tf": 1}, "sain.Iter.for_each": {"tf": 1}}, "df": 3}, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {"sain.Iter.map": {"tf": 1}, "sain.Iter.take_while": {"tf": 1}, "sain.Iter.drop_while": {"tf": 1}, "sain.Iter.discard": {"tf": 1}, "sain.Iter.all": {"tf": 1}, "sain.Iter.any": {"tf": 1}, "sain.Iter.sort": {"tf": 1}, "sain.Iter.for_each": {"tf": 1}}, "df": 8}}}}}}}}}}}}}}, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"3": {"2": {"docs": {"sain": {"tf": 1.4142135623730951}, "sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 5}, "docs": {}, "df": 0}, "docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "s": {"docs": {"sain": {"tf": 1.7320508075688772}, "sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1.4142135623730951}, "sain.cfg.cfg_attr": {"tf": 1.4142135623730951}, "sain.cfg.cfg": {"tf": 1}}, "df": 5}}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"sain": {"tf": 1}, "sain.cfg": {"tf": 1.7320508075688772}, "sain.cfg_attr": {"tf": 1}, "sain.Some": {"tf": 1.4142135623730951}, "sain.Some.map_or": {"tf": 1.4142135623730951}, "sain.Iter.collect": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1.7320508075688772}}, "df": 8}}, "t": {"docs": {}, "df": 0, "h": {"docs": {"sain.cfg_attr": {"tf": 1.4142135623730951}, "sain.Some": {"tf": 1}, "sain.Some.replace": {"tf": 1}, "sain.Iter": {"tf": 1}, "sain.Iter.zip": {"tf": 1.4142135623730951}, "sain.Iter.union": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1.4142135623730951}}, "df": 7}}}, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"sain": {"tf": 1}, "sain.Iter.discard": {"tf": 1}}, "df": 2}}, "l": {"docs": {}, "df": 0, "e": {"docs": {"sain.cfg": {"tf": 1}, "sain.Some": {"tf": 1}, "sain.Iter.take_while": {"tf": 1.4142135623730951}, "sain.Iter.drop_while": {"tf": 1.4142135623730951}, "sain.Iter.all": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 6}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sain.Iter.sort": {"tf": 1}}, "df": 1}}}}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 2}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {"sain": {"tf": 3.605551275463989}, "sain.cfg": {"tf": 3.7416573867739413}, "sain.cfg_attr": {"tf": 3.1622776601683795}, "sain.Some": {"tf": 2.449489742783178}, "sain.Some.map_or": {"tf": 2}, "sain.Some.take": {"tf": 1.4142135623730951}, "sain.Some.replace": {"tf": 2.449489742783178}, "sain.Some.expect": {"tf": 2.8284271247461903}, "sain.Iter.next": {"tf": 3.1622776601683795}, "sain.Iter.map": {"tf": 2.449489742783178}, "sain.Iter.all": {"tf": 1.4142135623730951}, "sain.Iter.any": {"tf": 2}, "sain.Iter.sort": {"tf": 1.4142135623730951}, "sain.Iter.reversed": {"tf": 1.4142135623730951}, "sain.Iter.union": {"tf": 1.4142135623730951}, "sain.Iter.for_each": {"tf": 1.4142135623730951}, "sain.Iter.enumerate": {"tf": 1.4142135623730951}, "sain.cfg.cfg_attr": {"tf": 3.1622776601683795}, "sain.cfg.cfg": {"tf": 3.7416573867739413}}, "df": 19}}}}, "u": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {"sain": {"tf": 2}}, "df": 1}}}}}, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "x": {"docs": {"sain": {"tf": 1.4142135623730951}}, "df": 1}, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.Iter.union": {"tf": 1.4142135623730951}}, "df": 1}}}, "k": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "n": {"docs": {"sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}}, "df": 2}}}}}, "w": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {"sain.Some": {"tf": 2.449489742783178}, "sain.Some.unwrap": {"tf": 1.7320508075688772}, "sain.Some.unwrap_or": {"tf": 1.7320508075688772}, "sain.Some.unwrap_or_else": {"tf": 1.7320508075688772}}, "df": 4}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sain.Some": {"tf": 1}}, "df": 1}}}}}}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {"sain.Iter.take": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.Some": {"tf": 1}}, "df": 1}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain": {"tf": 1}, "sain.cfg": {"tf": 1.7320508075688772}, "sain.cfg_attr": {"tf": 1.7320508075688772}, "sain.cfg.cfg_attr": {"tf": 1.7320508075688772}, "sain.cfg.cfg": {"tf": 1.7320508075688772}}, "df": 5}}}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 2}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"sain.Default": {"tf": 1}, "sain.Default.default": {"tf": 1}, "sain.Some": {"tf": 3.1622776601683795}, "sain.Some.default": {"tf": 1}, "sain.Some.read": {"tf": 1}, "sain.Some.unwrap": {"tf": 2.449489742783178}, "sain.Some.unwrap_or": {"tf": 2.23606797749979}, "sain.Some.unwrap_or_else": {"tf": 2.449489742783178}, "sain.Some.map": {"tf": 2}, "sain.Some.map_or": {"tf": 2.8284271247461903}, "sain.Some.filter": {"tf": 2.23606797749979}, "sain.Some.take": {"tf": 2.23606797749979}, "sain.Some.replace": {"tf": 2.449489742783178}, "sain.Some.expect": {"tf": 2.6457513110645907}, "sain.Some.and_ok": {"tf": 2.23606797749979}, "sain.Some.and_then": {"tf": 2.23606797749979}, "sain.Some.as_ref": {"tf": 2.23606797749979}, "sain.Iter.default": {"tf": 1}, "sain.Iter.map": {"tf": 2}}, "df": 19, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}}, "df": 2}}}}}, "s": {"docs": {"sain.Some": {"tf": 1}}, "df": 1}, "t": {"docs": {"sain.Some.expect": {"tf": 1}, "sain.Some.and_then": {"tf": 1}}, "df": 2}}}}}, "i": {"docs": {}, "df": 0, "p": {"docs": {"sain.Iter.take_while": {"tf": 1.7320508075688772}, "sain.Iter.drop_while": {"tf": 1.4142135623730951}}, "df": 2}}}, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"sain": {"tf": 1}}, "df": 1}}, "e": {"docs": {"sain": {"tf": 2}, "sain.cfg": {"tf": 2.449489742783178}, "sain.cfg_attr": {"tf": 2.8284271247461903}, "sain.Some": {"tf": 1}, "sain.Some.map_or": {"tf": 1}, "sain.Iter": {"tf": 1}, "sain.Iter.collect": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 2.8284271247461903}, "sain.cfg.cfg": {"tf": 2.449489742783178}}, "df": 9, "t": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 2}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.Ref.object": {"tf": 1}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"sain.cfg": {"tf": 1}, "sain.Some.unwrap_or_else": {"tf": 1}, "sain.Iter.take_while": {"tf": 1}, "sain.Iter.drop_while": {"tf": 1}, "sain.Iter.discard": {"tf": 1}, "sain.Iter.all": {"tf": 1}, "sain.Iter.any": {"tf": 1}, "sain.Iter.sort": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 9}}, "t": {"docs": {}, "df": 0, "h": {"docs": {"sain.Iter.union": {"tf": 1}}, "df": 1}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {"sain.Some": {"tf": 1}}, "df": 1}}, "y": {"docs": {"sain.Iter.sort": {"tf": 1}}, "df": 1}}, "x": {"6": {"4": {"docs": {"sain": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "8": {"6": {"docs": {"sain": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {"sain.Some.map": {"tf": 1.4142135623730951}, "sain.Some.map_or": {"tf": 2}, "sain.Some.filter": {"tf": 2}, "sain.Some.and_then": {"tf": 2}}, "df": 4, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "x": {"docs": {"sain.Iter.skip": {"tf": 1}, "sain.Iter.discard": {"tf": 1.4142135623730951}}, "df": 2}}}}, "j": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain": {"tf": 1}}, "df": 1}}}}}}, "h": {"1": {"docs": {"sain.Iter.any": {"tf": 1.4142135623730951}, "sain.Iter.sort": {"tf": 1.4142135623730951}, "sain.Iter.reversed": {"tf": 1.4142135623730951}, "sain.Iter.union": {"tf": 1.4142135623730951}, "sain.Iter.for_each": {"tf": 1.4142135623730951}, "sain.Iter.enumerate": {"tf": 1.4142135623730951}}, "df": 6}, "docs": {}, "df": 0, "i": {"docs": {"sain.Some.take": {"tf": 1}, "sain.Some.replace": {"tf": 1}}, "df": 2, "k": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {"sain.cfg": {"tf": 1.4142135623730951}, "sain.cfg.cfg": {"tf": 1.4142135623730951}}, "df": 2}}}}, "n": {"docs": {}, "df": 0, "t": {"docs": {"sain.Some.unwrap_or": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {"sain.Default": {"tf": 1}, "sain.Some": {"tf": 1}}, "df": 2}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sain.Some": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {"sain.Some": {"tf": 1.7320508075688772}, "sain.Some.replace": {"tf": 1.4142135623730951}, "sain.Some.expect": {"tf": 1.4142135623730951}}, "df": 3}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {"sain.Some.unwrap_or": {"tf": 1}}, "df": 1}}}}, "z": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {"sain.Iter.zip": {"tf": 1.4142135623730951}}, "df": 1, "s": {"docs": {"sain.Iter.zip": {"tf": 1}}, "df": 1}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.Iter.zip": {"tf": 1}}, "df": 1}}}}}}}}}, "pipeline": ["trimmer"], "_isPrebuiltIndex": true};

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();