window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = {"version": "0.9.5", "fields": ["qualname", "fullname", "annotation", "default_value", "signature", "bases", "doc"], "ref": "fullname", "documentStore": {"docs": {"sain": {"fullname": "sain", "modulename": "sain", "kind": "module", "doc": "<p>sain is a set of minimal abstraction that brings Rust's ecosystem to Python. It offers a few of the core Rust types like <code>Vec&lt;T&gt;</code> and <code>Result&lt;T, E&gt;</code> and more.</p>\n"}, "sain.cfg": {"fullname": "sain.cfg", "modulename": "sain.cfg", "kind": "module", "doc": "<p>Runtime attr configuration.</p>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>Target OS must be one of the following:</p>\n\n<ul>\n<li><code>linux</code></li>\n<li><code>win32</code> | <code>windows</code></li>\n<li><code>darwin</code> | <code>macos</code></li>\n<li><code>ios</code></li>\n<li><code>unix</code>, which is assumed to be either linux or darwin.</li>\n</ul>\n\n<p>Target architecture must be one of the following:</p>\n\n<ul>\n<li><code>x86</code></li>\n<li><code>x86_64</code></li>\n<li><code>arm</code></li>\n<li><code>arm64</code></li>\n</ul>\n\n<p>Target Python implementation must be one of the following:</p>\n\n<ul>\n<li><code>CPython</code></li>\n<li><code>PyPy</code></li>\n<li><code>IronPython</code></li>\n<li><code>Jython</code></li>\n</ul>\n"}, "sain.cfg_attr": {"fullname": "sain.cfg_attr", "modulename": "sain", "qualname": "cfg_attr", "kind": "function", "doc": "<p>Conditional runtime object configuration based on passed arguments.</p>\n\n<p>If the decorated object gets called and one of the attributes returns <code>False</code>,\n<code>RuntimeError</code> will be raised and the object will not run.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">sain</span>\n\n<span class=\"nd\">@cfg_attr</span><span class=\"p\">(</span><span class=\"n\">target_os</span><span class=\"o\">=</span><span class=\"s2\">&quot;windows&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">windows_only</span><span class=\"p\">():</span>\n    <span class=\"c1\"># Do stuff with Windows&#39;s API.</span>\n    <span class=\"o\">...</span>\n\n<span class=\"c1\"># Mut be PyPy Python implementation or `RuntimeError` will be raised</span>\n<span class=\"c1\"># when creating the instance.</span>\n<span class=\"nd\">@cfg_attr</span><span class=\"p\">(</span><span class=\"n\">impl</span><span class=\"o\">=</span><span class=\"s2\">&quot;PyPy&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">Zoo</span><span class=\"p\">:</span>\n    <span class=\"nd\">@sain</span><span class=\"o\">.</span><span class=\"n\">cfg_attr</span><span class=\"p\">(</span><span class=\"n\">target_os</span><span class=\"o\">=</span><span class=\"s2\">&quot;linux&quot;</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">bark</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">windows_only</span><span class=\"p\">()</span>  <span class=\"c1\"># RuntimeError(&quot;Windows OS only!)</span>\n\n<span class=\"c1\"># An instance will not be created if raised.</span>\n<span class=\"n\">zoo</span> <span class=\"o\">=</span> <span class=\"n\">Zoo</span><span class=\"p\">()</span>\n<span class=\"c1\"># RuntimeError(&quot;class Zoo requires PyPy implementation&quot;)</span>\n<span class=\"n\">zoo</span><span class=\"o\">.</span><span class=\"n\">bark</span><span class=\"p\">()</span>\n<span class=\"c1\"># Whats zoo??</span>\n</code></pre>\n</div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>target_os</strong> (<code>str | None</code>):\nThe targeted operating system thats required for the object.</li>\n<li><strong>python_version</strong> (<code>tuple[int, int, int] | None</code>):\nThe targeted Python version thats required for the object. Format must be <code>(3, 9, 5)</code>.</li>\n<li><strong>target_arch</strong> (<code>str | None</code>):\nThe CPU targeted architecture thats required for the object.</li>\n<li><strong>impl</strong> (<code>str | None</code>):\nThe Python implementation thats required for the object.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong><code>RuntimeError</code></strong>: This fails if any of the attributes returns <code>False</code>.</li>\n<li><strong><code>ValueError</code></strong>: If the passed Python implementation is unknown.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">target_os</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"s1\">&#39;linux&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;win32&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;darwin&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;macos&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;unix&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;windows&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;ios&#39;</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">python_version</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">target_arch</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"s1\">&#39;x86&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;x86_64&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;arm&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;arm64&#39;</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">impl</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"s1\">&#39;CPython&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;PyPy&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;IronPython&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Jython&#39;</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">F</span><span class=\"p\">],</span> <span class=\"o\">~</span><span class=\"n\">F</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.Default": {"fullname": "sain.Default", "modulename": "sain", "qualname": "Default", "kind": "class", "doc": "<p>An interface for an object that has a default value.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">sain</span> <span class=\"kn\">import</span> <span class=\"n\">Default</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Cache</span><span class=\"p\">(</span><span class=\"n\">Default</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]):</span>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">default</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]:</span>\n        <span class=\"k\">return</span> <span class=\"p\">{}</span>\n\n<span class=\"n\">cache</span> <span class=\"o\">=</span> <span class=\"n\">Cache</span><span class=\"o\">.</span><span class=\"n\">default</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">cache</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">cache</span><span class=\"p\">,</span> <span class=\"n\">Default</span><span class=\"p\">)</span>\n<span class=\"c1\"># {}</span>\n</code></pre>\n</div>\n", "bases": "typing.Protocol[+_T_co]"}, "sain.Default.__init__": {"fullname": "sain.Default.__init__", "modulename": "sain", "qualname": "Default.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, "sain.Default.default": {"fullname": "sain.Default.default", "modulename": "sain", "qualname": "Default.default", "kind": "function", "doc": "<p>Return the default value of the object.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"o\">+</span><span class=\"n\">_T_co</span>:</span></span>", "funcdef": "def"}, "sain.Some": {"fullname": "sain.Some", "modulename": "sain", "qualname": "Some", "kind": "class", "doc": "<p>The <code>Option</code> type. An object that might be <code>T</code> or <code>None</code>.</p>\n\n<p>It is a drop-in replacement for <code>typing.Optional[T]</code>, But has proper methods to handle the contained value.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"s2\">&quot;Hello&quot;</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n<span class=\"c1\"># Some(&quot;Hello&quot;)</span>\n\n<span class=\"c1\"># This will unwrap the contained value as long as</span>\n<span class=\"c1\"># it is not `None` otherwise this will raise an error.</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">unwrap</span><span class=\"p\">())</span>\n<span class=\"c1\"># &quot;Hello&quot;</span>\n\n<span class=\"n\">none_value</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"k\">while</span> <span class=\"n\">none_value</span><span class=\"o\">.</span><span class=\"n\">unwrap</span><span class=\"p\">():</span>\n    <span class=\"c1\"># Never unreachable!</span>\n\n<span class=\"c1\"># Solving it with `unwrap_or` method to unwrap the value or return a default value.</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">none_value</span><span class=\"o\">.</span><span class=\"n\">unwrap_or</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">))</span>\n<span class=\"c1\"># 10</span>\n</code></pre>\n</div>\n", "bases": "typing.Generic[~T], sain.default.Default[ForwardRef('Option[None]')]"}, "sain.Some.__init__": {"fullname": "sain.Some.__init__", "modulename": "sain", "qualname": "Some.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"o\">/</span></span>)</span>"}, "sain.Some.default": {"fullname": "sain.Some.default", "modulename": "sain", "qualname": "Some.default", "kind": "function", "doc": "<p>Default value for <code>Some</code>. Returns <code>None</code> wrapped in <code>Some</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"k\">assert</span> <span class=\"n\">Some</span><span class=\"o\">.</span><span class=\"n\">default</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">NOTHING</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">option</span><span class=\"o\">.</span><span class=\"n\">Some</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.Some.into_inner": {"fullname": "sain.Some.into_inner", "modulename": "sain", "qualname": "Some.into_inner", "kind": "function", "doc": "<p>Consume <code>Self</code>, returning the wrapped value as <code>T | None</code>.</p>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">opt</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"s1\">&#39;char&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">opt</span><span class=\"o\">.</span><span class=\"n\">into_inner</span><span class=\"p\">()</span>\n<span class=\"k\">assert</span> <span class=\"n\">x</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span>\n\n<span class=\"n\">opt</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">opt</span><span class=\"o\">.</span><span class=\"n\">into_inner</span><span class=\"p\">()</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.Some.unwrap": {"fullname": "sain.Some.unwrap", "modulename": "sain", "qualname": "Some.unwrap", "kind": "function", "doc": "<p>Unwrap the inner value either returning if its not <code>None</code> or raising a <code>RuntimeError</code>.</p>\n\n<p>It's usually not recommended to use this method in production code, since it raises.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">unwrap</span><span class=\"p\">())</span>\n<span class=\"c1\"># 5</span>\n\n<span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">unwrap</span><span class=\"p\">())</span>\n<span class=\"c1\"># RuntimeError</span>\n</code></pre>\n</div>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong><code>RuntimeError</code></strong>: If the inner value is <code>None</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">T</span>:</span></span>", "funcdef": "def"}, "sain.Some.unwrap_or": {"fullname": "sain.Some.unwrap_or", "modulename": "sain", "qualname": "Some.unwrap_or", "kind": "function", "doc": "<p>Unwrap the inner value either returning if its not <code>None</code> or returning <code>default</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">unwrap_or</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">))</span>\n<span class=\"c1\"># 5</span>\n\n<span class=\"c1\"># Type hint is required here.</span>\n<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Option</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">unwrap_or</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">))</span>\n<span class=\"c1\"># 10</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">default</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">T</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">T</span>:</span></span>", "funcdef": "def"}, "sain.Some.unwrap_or_else": {"fullname": "sain.Some.unwrap_or_else", "modulename": "sain", "qualname": "Some.unwrap_or_else", "kind": "function", "doc": "<p>Unwrap the inner value either returning if its not <code>None</code> or calling <code>f</code> to get a default value.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">unwrap_or_else</span><span class=\"p\">(</span><span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">))</span>\n<span class=\"c1\"># 5</span>\n\n<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Option</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">unwrap_or_else</span><span class=\"p\">(</span><span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">))</span>\n<span class=\"c1\"># True</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[],</span> <span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">T</span>:</span></span>", "funcdef": "def"}, "sain.Some.unwrap_unchecked": {"fullname": "sain.Some.unwrap_unchecked", "modulename": "sain", "qualname": "Some.unwrap_unchecked", "kind": "function", "doc": "<p>Returns the contained Some value without checking that the value is not None.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">v</span><span class=\"p\">:</span> <span class=\"n\">Option</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"mf\">1.2</span><span class=\"p\">)</span>\n<span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">unwrap_unchecked</span><span class=\"p\">()</span> <span class=\"c1\"># 1.2</span>\n\n<span class=\"n\">v</span><span class=\"p\">:</span> <span class=\"n\">Option</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">unwrap_unchecked</span><span class=\"p\">())</span> <span class=\"c1\"># Undefined Behavior</span>\n</code></pre>\n</div>\n\n<h1 id=\"safety\">Safety \u26a0\ufe0f</h1>\n\n<p>Calling this method on <code>None</code> is considered <a href=\"https://en.wikipedia.org/wiki/Undefined_behavior\">undefined behavior</a>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">T</span>:</span></span>", "funcdef": "def"}, "sain.Some.expect": {"fullname": "sain.Some.expect", "modulename": "sain", "qualname": "Some.expect", "kind": "function", "doc": "<p>Returns the contained value if it is not <code>None</code> otherwise raises a <code>RuntimeError</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"s2\">&quot;Hello&quot;</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s2\">&quot;Value is None&quot;</span><span class=\"p\">))</span>\n<span class=\"c1\"># &quot;Hello&quot;</span>\n\n<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Option</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s2\">&quot;Value is None&quot;</span><span class=\"p\">))</span>\n<span class=\"c1\"># RuntimeError(&quot;Value is None&quot;)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">T</span>:</span></span>", "funcdef": "def"}, "sain.Some.map": {"fullname": "sain.Some.map", "modulename": "sain", "qualname": "Some.map", "kind": "function", "doc": "<p>Map the inner value to another type. Returning <code>Some(None)</code> if <code>T</code> is <code>None</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"mf\">5.0</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"mf\">2.0</span><span class=\"p\">))</span>\n<span class=\"c1\"># Some(10.0)</span>\n\n<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Option</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n<span class=\"c1\"># Some(None)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">option</span><span class=\"o\">.</span><span class=\"n\">Some</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.Some.map_or": {"fullname": "sain.Some.map_or", "modulename": "sain", "qualname": "Some.map_or", "kind": "function", "doc": "<p>Map the inner value to another type or return <code>default</code> if its <code>None</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Option</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"mf\">5.0</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># map to int.</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">map_or</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">))</span>\n<span class=\"c1\"># 6</span>\n\n<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Option</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">map_or</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">)</span>\n<span class=\"c1\"># 0</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">default</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">U</span>, </span><span class=\"param\"><span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">U</span>:</span></span>", "funcdef": "def"}, "sain.Some.map_or_else": {"fullname": "sain.Some.map_or_else", "modulename": "sain", "qualname": "Some.map_or_else", "kind": "function", "doc": "<p>Map the inner value to another type, or return <code>default()</code> if its <code>None</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"k\">def</span> <span class=\"nf\">default</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">getsizeof</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">())</span>\n\n<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Option</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"mf\">5.0</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># map to int.</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">map_or_else</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">))</span>\n<span class=\"c1\"># 6</span>\n\n<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Option</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">map_or_else</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">)</span>\n<span class=\"c1\"># 28 &lt;- size of object()</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">default</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[],</span> <span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"o\">/</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">U</span>:</span></span>", "funcdef": "def"}, "sain.Some.filter": {"fullname": "sain.Some.filter", "modulename": "sain", "qualname": "Some.filter", "kind": "function", "doc": "<p>Returns <code>Some(None)</code> if the contained value is <code>None</code>,</p>\n\n<p>otherwise calls the predicate and returns <code>Some(T)</code> if the predicate returns <code>True</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"mi\">1</span> <span class=\"ow\">in</span> <span class=\"n\">x</span><span class=\"p\">))</span>\n<span class=\"c1\"># Some([1, 2, 3])</span>\n\n<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Option</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span> <span class=\"c1\"># or Some(None)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"mi\">1</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">x</span><span class=\"p\">))</span>\n<span class=\"c1\"># None</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">predicate</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">option</span><span class=\"o\">.</span><span class=\"n\">Some</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.Some.take": {"fullname": "sain.Some.take", "modulename": "sain", "qualname": "Some.take", "kind": "function", "doc": "<p>Take the value from <code>Self</code>, Setting it to <code>None</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">original</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"s2\">&quot;Hi&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">new</span> <span class=\"o\">=</span> <span class=\"n\">original</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">()</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">original</span><span class=\"p\">,</span> <span class=\"n\">new</span><span class=\"p\">)</span>\n<span class=\"c1\"># None, Some(&quot;Hi&quot;)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">option</span><span class=\"o\">.</span><span class=\"n\">Some</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.Some.take_if": {"fullname": "sain.Some.take_if", "modulename": "sain", "qualname": "Some.take_if", "kind": "function", "doc": "<p>Take the value from <code>Self</code>, Setting it to <code>None</code> only if predicate returns <code>True</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"k\">def</span> <span class=\"nf\">validate</span><span class=\"p\">(</span><span class=\"n\">email</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bool</span><span class=\"p\">:</span>\n    <span class=\"c1\"># you can obviously validate this better.</span>\n    <span class=\"k\">return</span> <span class=\"n\">email</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"s1\">&#39;@&#39;</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span>\n\n<span class=\"n\">original</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"s2\">&quot;flex@gg.com&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">valid</span> <span class=\"o\">=</span> <span class=\"n\">original</span><span class=\"o\">.</span><span class=\"n\">take_if</span><span class=\"p\">(</span><span class=\"n\">validate</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">is_allowed</span><span class=\"o\">.</span><span class=\"n\">is_some</span><span class=\"p\">()</span> <span class=\"ow\">and</span> <span class=\"n\">original</span><span class=\"o\">.</span><span class=\"n\">is_none</span><span class=\"p\">()</span>\n\n<span class=\"n\">original</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"s2\">&quot;mail.example.com&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">invalid</span> <span class=\"o\">=</span> <span class=\"n\">original</span><span class=\"o\">.</span><span class=\"n\">take_if</span><span class=\"p\">(</span><span class=\"n\">validate</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">invalid</span><span class=\"o\">.</span><span class=\"n\">is_none</span><span class=\"p\">()</span> <span class=\"ow\">and</span> <span class=\"n\">original</span><span class=\"o\">.</span><span class=\"n\">is_some</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">predicate</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">option</span><span class=\"o\">.</span><span class=\"n\">Some</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.Some.replace": {"fullname": "sain.Some.replace", "modulename": "sain", "qualname": "Some.replace", "kind": "function", "doc": "<p>Replace the contained value with another value.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Option</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">&quot;Hello&quot;</span><span class=\"p\">)</span>\n<span class=\"c1\"># Some(&quot;Hello&quot;)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">T</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">option</span><span class=\"o\">.</span><span class=\"n\">Some</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.Some.and_ok": {"fullname": "sain.Some.and_ok", "modulename": "sain", "qualname": "Some.and_ok", "kind": "function", "doc": "<p>Returns <code>Some(None)</code> if either contained value is <code>None</code>,</p>\n\n<p>Otherwise return <code>optb</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">Option</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"n\">Option</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"s2\">&quot;bye&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">and_ok</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">is_none</span><span class=\"p\">()</span>\n\n<span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">Option</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"n\">Option</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"s2\">&quot;bye&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">and_ok</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"s2\">&quot;bye&quot;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">optb</span><span class=\"p\">:</span> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">option</span><span class=\"o\">.</span><span class=\"n\">Some</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">option</span><span class=\"o\">.</span><span class=\"n\">Some</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.Some.and_then": {"fullname": "sain.Some.and_then", "modulename": "sain", "qualname": "Some.and_then", "kind": "function", "doc": "<p>Returns <code>Some(None)</code> if the contained value is <code>None</code>, otherwise call <code>f()</code>\non <code>T</code> and return <code>Option[T]</code> if it's value not <code>None</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">and_then</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"mi\">2</span><span class=\"p\">)))</span>\n<span class=\"c1\"># Some(10)</span>\n\n<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Option</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">and_then</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)))</span>\n<span class=\"c1\"># Some(None)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">option</span><span class=\"o\">.</span><span class=\"n\">Some</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">option</span><span class=\"o\">.</span><span class=\"n\">Some</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.Some.iter": {"fullname": "sain.Some.iter", "modulename": "sain", "qualname": "Some.iter", "kind": "function", "doc": "<p>Returns an iterator over the contained value.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">sain</span> <span class=\"kn\">import</span> <span class=\"n\">Some</span>\n<span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"s2\">&quot;gg&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">next</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"s2\">&quot;gg&quot;</span><span class=\"p\">)</span>\n\n<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Option</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">next</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">is_none</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"o\">.</span><span class=\"n\">Iterator</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.Some.as_ref": {"fullname": "sain.Some.as_ref", "modulename": "sain", "qualname": "Some.as_ref", "kind": "function", "doc": "<p>Returns immutable <code>Some[sain.cell.Cell[T]]</code> if the contained value is not <code>None</code>,</p>\n\n<p>Otherwise returns <code>Some(None)</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">as_ref</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">unwrap</span><span class=\"p\">()</span>\n<span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">object</span> <span class=\"o\">=</span> <span class=\"mi\">0</span> <span class=\"c1\"># FrozenError!</span>\n\n<span class=\"n\">owned</span> <span class=\"o\">=</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">object</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">owned</span><span class=\"p\">)</span> <span class=\"c1\"># 5</span>\n\n<span class=\"c1\"># Create a copy of object.</span>\n<span class=\"n\">clone</span> <span class=\"o\">=</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n<span class=\"n\">clone</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>  <span class=\"c1\"># Thats fine.</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">clone</span> <span class=\"o\">==</span> <span class=\"n\">owned</span><span class=\"p\">)</span> <span class=\"c1\"># False, 0 != 5</span>\n\n<span class=\"c1\"># None object.</span>\n<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Option</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">as_ref</span><span class=\"p\">())</span>\n<span class=\"c1\"># Some(None)</span>\n</code></pre>\n</div>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong><code>dataclasses.FrozenInstanceError</code></strong>: When attempting to modify the contained value. Use <code>sain.AsRef.copy()</code> method to create a copy.</li>\n</ul>\n\n<p>Or just use <code>.as_mut()</code> if you're dealing with mutable objects.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">option</span><span class=\"o\">.</span><span class=\"n\">Some</span><span class=\"p\">[</span><span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, "sain.Some.as_mut": {"fullname": "sain.Some.as_mut", "modulename": "sain", "qualname": "Some.as_mut", "kind": "function", "doc": "<p>Returns mutable <code>Some[sain.cell.RefCell[T]]</code> if the contained value is not <code>None</code>,</p>\n\n<p>Otherwise returns <code>Some(None)</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">as_mut</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">unwrap</span><span class=\"p\">()</span>\n<span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">object</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span> <span class=\"c1\"># Some(RefCell(0))</span>\n\n<span class=\"c1\"># None object.</span>\n<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Option</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">as_mut</span><span class=\"p\">())</span>\n<span class=\"c1\"># Some(None)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">option</span><span class=\"o\">.</span><span class=\"n\">Some</span><span class=\"p\">[</span><span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">RefCell</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, "sain.Some.is_some": {"fullname": "sain.Some.is_some", "modulename": "sain", "qualname": "Some.is_some", "kind": "function", "doc": "<p>Returns <code>True</code> if the contained value is not <code>None</code>, otherwise returns <code>False</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">is_some</span><span class=\"p\">())</span>\n<span class=\"c1\"># True</span>\n\n<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Option</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">is_some</span><span class=\"p\">())</span>\n<span class=\"c1\"># False</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "sain.Some.is_some_and": {"fullname": "sain.Some.is_some_and", "modulename": "sain", "qualname": "Some.is_some_and", "kind": "function", "doc": "<p>Returns <code>True</code> if the contained value is not <code>None</code> and\nthe predicate returns <code>True</code>, otherwise returns <code>False</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">is_some_and</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">&gt;</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"c1\"># True</span>\n\n<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Option</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">is_some_and</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">&gt;</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"c1\"># False</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">predicate</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "sain.Some.is_none": {"fullname": "sain.Some.is_none", "modulename": "sain", "qualname": "Some.is_none", "kind": "function", "doc": "<p>Returns <code>True</code> if the contained value is <code>None</code>, otherwise returns <code>False</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">is_none</span><span class=\"p\">())</span>\n<span class=\"c1\"># False</span>\n\n<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Option</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">is_none</span><span class=\"p\">())</span>\n<span class=\"c1\"># True</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "sain.Option": {"fullname": "sain.Option", "modulename": "sain", "qualname": "Option", "kind": "variable", "doc": "<p></p>\n", "default_value": "sain.option.Some[~T]"}, "sain.NOTHING": {"fullname": "sain.NOTHING", "modulename": "sain", "qualname": "NOTHING", "kind": "variable", "doc": "<p></p>\n", "default_value": "None"}, "sain.Iter": {"fullname": "sain.Iter", "modulename": "sain", "qualname": "Iter", "kind": "class", "doc": "<p>a lazy iterator that has its items ready in-memory.</p>\n\n<p>This is similar to Rust <code>std::slice::Iter&lt;T&gt;</code> item which iterables can build\nfrom this via <code>.iter()</code> method.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># Limit the results to 2.</span>\n<span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n<span class=\"c1\"># 1</span>\n<span class=\"c1\"># 2</span>\n\n<span class=\"c1\"># Filter the results.</span>\n<span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"n\">item</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n<span class=\"c1\"># 2</span>\n<span class=\"c1\"># 3</span>\n<span class=\"c1\"># 3</span>\n\n<span class=\"c1\"># Indexing is supported.</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">iterator</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"c1\"># 1</span>\n</code></pre>\n</div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>items</strong> (<code>Iterable[Item]</code>):\nThe items to iterate over. This can be anything that implements <code>__iter__</code> and <code>__next__</code>.</li>\n</ul>\n", "bases": "sain.iter.Iterator[~Item]"}, "sain.Iter.__init__": {"fullname": "sain.Iter.__init__", "modulename": "sain", "qualname": "Iter.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">iterable</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">]</span></span>)</span>"}, "sain.Iter.clone": {"fullname": "sain.Iter.clone", "modulename": "sain", "qualname": "Iter.clone", "kind": "function", "doc": "<p>Return a copy of this iterator.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">it</span> <span class=\"o\">=</span> <span class=\"n\">Iterator</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span>\n\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">it</span><span class=\"o\">.</span><span class=\"n\">clone</span><span class=\"p\">():</span>\n    <span class=\"o\">...</span>\n\n<span class=\"c1\"># The actual iterator hasn&#39;t been exhausted.</span>\n<span class=\"k\">assert</span> <span class=\"n\">it</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">3</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Self</span>:</span></span>", "funcdef": "def"}, "sain.Iterator": {"fullname": "sain.Iterator", "modulename": "sain", "qualname": "Iterator", "kind": "class", "doc": "<p>An abstract interface for dealing with iterators.</p>\n\n<p>This is exactly the same trait as <code>core::iter::Iterator</code> trait from Rust.</p>\n\n<p>This is the main interface that any type can implement by basically inheriting from it.\nThe method <code>__next__</code> is the only method that needs to be implemented, You get all the other methods for free.</p>\n\n<p>If you want to use a ready iterator for general purposes, Use <code>Iter</code>. This interface is only for implementors\nand type hints.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"nd\">@dataclass</span>\n<span class=\"k\">class</span> <span class=\"nc\">Message</span><span class=\"p\">:</span>\n    <span class=\"n\">content</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MessageIterator</span><span class=\"p\">(</span><span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">Iterator</span><span class=\"p\">[</span><span class=\"n\">Message</span><span class=\"p\">]):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"nb\">id</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randint</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">))</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_session</span><span class=\"p\">:</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">Session</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">id</span> <span class=\"o\">=</span> <span class=\"nb\">id</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__next__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Message</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_session</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_session</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"p\">()</span>\n\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"k\">with</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_session</span><span class=\"p\">:</span>\n                <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_session</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;https://dummyjson.com/products/</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">()</span>\n        <span class=\"k\">finally</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_session</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">Message</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">[</span><span class=\"s2\">&quot;description&quot;</span><span class=\"p\">])</span>\n\n<span class=\"n\">it</span> <span class=\"o\">=</span> <span class=\"n\">MessageIterator</span><span class=\"p\">()</span>\n<span class=\"c1\"># Lazily fetch the first 5 messages from the API.</span>\n<span class=\"k\">for</span> <span class=\"n\">msg</span> <span class=\"ow\">in</span> <span class=\"n\">it</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "bases": "typing.Generic[~Item], abc.ABC, sain.default.Default[~Item]"}, "sain.Iterator.default": {"fullname": "sain.Iterator.default", "modulename": "sain", "qualname": "Iterator.default", "kind": "function", "doc": "<p>Return the default iterator for this type. It returns an empty iterator.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">it</span><span class=\"p\">:</span> <span class=\"n\">Iterator</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"o\">.</span><span class=\"n\">default</span><span class=\"p\">()</span>\n<span class=\"k\">assert</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">next</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">is_none</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"o\">.</span><span class=\"n\">Empty</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.Iterator.collect": {"fullname": "sain.Iterator.collect", "modulename": "sain", "qualname": "Iterator.collect", "kind": "function", "doc": "<p>Collects all items in the iterator into an immutable sequence.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"c1\"># (0, 1, 2, 3)</span>\n<span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">(</span><span class=\"n\">cast</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"c1\"># Map each element and collect it.</span>\n<span class=\"c1\"># (&#39;0&#39;, &#39;1&#39;, &#39;2&#39;, &#39;3&#39;)</span>\n</code></pre>\n</div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cast</strong> (<code>T | None</code>):\nAn optional type to cast the items into.\nIf not provided the items will be returned as it's original type.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">cast</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">],</span> <span class=\"o\">~</span><span class=\"n\">OtherItem</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">OtherItem</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.Iterator.to_vec": {"fullname": "sain.Iterator.to_vec", "modulename": "sain", "qualname": "Iterator.to_vec", "kind": "function", "doc": "<p>Convert this iterator into <code>Vec[T]</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">it</span> <span class=\"o\">=</span> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"o\">.</span><span class=\"n\">once</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">vc</span> <span class=\"o\">=</span> <span class=\"n\">it</span><span class=\"o\">.</span><span class=\"n\">to_vec</span><span class=\"p\">()</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">to_vec</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">Vec</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.Iterator.sink": {"fullname": "sain.Iterator.sink", "modulename": "sain", "qualname": "Iterator.sink", "kind": "function", "doc": "<p>Consume all elements from this iterator, flushing it into the sink.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">it</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"n\">it</span><span class=\"o\">.</span><span class=\"n\">sink</span><span class=\"p\">()</span>\n<span class=\"k\">assert</span> <span class=\"n\">it</span><span class=\"o\">.</span><span class=\"n\">next</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">is_none</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "sain.Iterator.raw_parts": {"fullname": "sain.Iterator.raw_parts", "modulename": "sain", "qualname": "Iterator.raw_parts", "kind": "function", "doc": "<p>Decompose all elements from this iterator, yielding it one by one\nas a normal generator.</p>\n\n<p>This mainly used for objects that needs to satisfy its exact type.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">it</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">(</span><span class=\"s2\">&quot;cba&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">sort</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">it</span><span class=\"o\">.</span><span class=\"n\">raw_parts</span><span class=\"p\">())</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">it</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">0</span>\n<span class=\"k\">assert</span> <span class=\"n\">sort</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"s2\">&quot;a&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;b&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;c&quot;</span><span class=\"p\">]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Generator</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.Iterator.next": {"fullname": "sain.Iterator.next", "modulename": "sain", "qualname": "Iterator.next", "kind": "function", "doc": "<p>Advance the iterator, Returning the next item, <code>Some(None)</code> if all items yielded.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"s2\">&quot;1&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;2&quot;</span><span class=\"p\">])</span>\n<span class=\"k\">assert</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">next</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"s2\">&quot;1&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">next</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"s2\">&quot;2&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">next</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">is_none</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"s1\">&#39;Option[Item]&#39;</span>:</span></span>", "funcdef": "def"}, "sain.Iterator.cloned": {"fullname": "sain.Iterator.cloned", "modulename": "sain", "qualname": "Iterator.cloned", "kind": "function", "doc": "<p>Creates an iterator which shallow copies its elements by reference.</p>\n\n<p>If you need a copy of the actual iterator and not the elements.\nuse <code>Iter.clone()</code></p>\n\n<div class=\"pdoc-alert pdoc-alert-note\">\n\n<p>This method calls <a href=\"https://docs.python.org/3/library/copy.html\"><code>copy.copy()</code></a>\non each item that is being yielded.</p>\n\n</div>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"nd\">@dataclass</span>\n<span class=\"k\">class</span> <span class=\"nc\">User</span><span class=\"p\">:</span>\n    <span class=\"n\">users_ids</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n<span class=\"c1\"># An iterator which elements points to the same user.</span>\n<span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"p\">()</span>\n<span class=\"n\">it</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">((</span><span class=\"n\">user</span><span class=\"p\">,</span> <span class=\"n\">user</span><span class=\"p\">))</span>\n\n<span class=\"k\">for</span> <span class=\"n\">u</span> <span class=\"ow\">in</span> <span class=\"n\">it</span><span class=\"o\">.</span><span class=\"n\">cloned</span><span class=\"p\">():</span>\n    <span class=\"n\">u</span><span class=\"o\">.</span><span class=\"n\">user_ids</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># We iterated over the same user pointer twice and appended &quot;1&quot;</span>\n<span class=\"c1\"># since `copy` returns a shallow copy of nested structures.</span>\n<span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">user_ids</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">2</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"o\">.</span><span class=\"n\">Cloned</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.Iterator.copied": {"fullname": "sain.Iterator.copied", "modulename": "sain", "qualname": "Iterator.copied", "kind": "function", "doc": "<p>Creates an iterator which copies all of its elements by value.</p>\n\n<p>If you only need a copy of the item reference, Use <code>.cloned()</code> instead.</p>\n\n<div class=\"pdoc-alert pdoc-alert-note\">\n\n<p>This method simply calls <a href=\"https://docs.python.org/3/library/copy.html\"><code>copy.deepcopy()</code></a>\non each item that is being yielded.</p>\n\n</div>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"nd\">@dataclass</span>\n<span class=\"k\">class</span> <span class=\"nc\">User</span><span class=\"p\">:</span>\n    <span class=\"n\">users_ids</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n<span class=\"c1\"># An iterator which elements points to the same user.</span>\n<span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"p\">()</span>\n<span class=\"n\">it</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">((</span><span class=\"n\">user</span><span class=\"p\">,</span> <span class=\"n\">user</span><span class=\"p\">))</span>\n\n<span class=\"k\">for</span> <span class=\"n\">u</span> <span class=\"ow\">in</span> <span class=\"n\">it</span><span class=\"o\">.</span><span class=\"n\">copied</span><span class=\"p\">():</span>\n    <span class=\"c1\"># A new list is created for each item.</span>\n    <span class=\"n\">u</span><span class=\"o\">.</span><span class=\"n\">user_ids</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># The actual list is untouched since we consumed a deep copy of it.</span>\n<span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">user_ids</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"o\">.</span><span class=\"n\">Copied</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.Iterator.map": {"fullname": "sain.Iterator.map", "modulename": "sain", "qualname": "Iterator.map", "kind": "function", "doc": "<p>Maps each item in the iterator to another type.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"s2\">&quot;1&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;2&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;3&quot;</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">)</span>\n\n<span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">iterator</span><span class=\"p\">:</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>predicate</strong> (<code>Callable[[Item], OtherItem]</code>):\nThe function to map each item in the iterator to the other type.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">fn</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">],</span> <span class=\"o\">~</span><span class=\"n\">OtherItem</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"o\">.</span><span class=\"n\">Map</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">,</span> <span class=\"o\">~</span><span class=\"n\">OtherItem</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.Iterator.filter": {"fullname": "sain.Iterator.filter", "modulename": "sain", "qualname": "Iterator.filter", "kind": "function", "doc": "<p>Filters the iterator to only yield items that match the predicate.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">places</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"s1\">&#39;London&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Paris&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Los Angeles&#39;</span><span class=\"p\">])</span>\n<span class=\"k\">for</span> <span class=\"n\">place</span> <span class=\"ow\">in</span> <span class=\"n\">places</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">place</span><span class=\"p\">:</span> <span class=\"n\">place</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s1\">&#39;L&#39;</span><span class=\"p\">)):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">place</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># London</span>\n<span class=\"c1\"># Los Angeles</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">predicate</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"o\">.</span><span class=\"n\">Filter</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.Iterator.take": {"fullname": "sain.Iterator.take", "modulename": "sain", "qualname": "Iterator.take", "kind": "function", "doc": "<p>Take the first number of items until the number of items\nare yielded or the end of the iterator is exhausted.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"s1\">&#39;c&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;x&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;y&#39;</span><span class=\"p\">])</span>\n\n<span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">):</span>\n    <span class=\"k\">assert</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"p\">(</span><span class=\"s1\">&#39;c&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;x&#39;</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># &lt;Iter([&#39;c&#39;, &#39;x&#39;])&gt;</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">count</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"o\">.</span><span class=\"n\">Take</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.Iterator.skip": {"fullname": "sain.Iterator.skip", "modulename": "sain", "qualname": "Iterator.skip", "kind": "function", "doc": "<p>Skips the first number of items in the iterator.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">))</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">skip</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># 3</span>\n<span class=\"c1\"># 4</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">count</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"o\">.</span><span class=\"n\">Skip</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.Iterator.enumerate": {"fullname": "sain.Iterator.enumerate", "modulename": "sain", "qualname": "Iterator.enumerate", "kind": "function", "doc": "<p>Create a new iterator that yields a tuple of the index and item.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"k\">for</span> <span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">enumerate</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">item</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># 0 1</span>\n<span class=\"c1\"># 1 2</span>\n<span class=\"c1\"># 2 3</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"o\">.</span><span class=\"n\">Enumerate</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.Iterator.take_while": {"fullname": "sain.Iterator.take_while", "modulename": "sain", "qualname": "Iterator.take_while", "kind": "function", "doc": "<p>yields items from the iterator while predicate returns <code>True</code>.</p>\n\n<p>The rest of the items are discarded as soon as the predicate returns <code>False</code></p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;ab&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;xd&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;ba&#39;</span><span class=\"p\">])</span>\n<span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">take_while</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"s1\">&#39;a&#39;</span> <span class=\"ow\">in</span> <span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># a</span>\n<span class=\"c1\"># ab</span>\n</code></pre>\n</div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>predicate</strong> (<code>collections.Callable[[Item], bool]</code>):\nThe function to predicate each item in the iterator.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"o\">.</span><span class=\"n\">TakeWhile</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.Iterator.drop_while": {"fullname": "sain.Iterator.drop_while", "modulename": "sain", "qualname": "Iterator.drop_while", "kind": "function", "doc": "<p>Yields items from the iterator while predicate returns <code>False</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;ab&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;xd&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;ba&#39;</span><span class=\"p\">])</span>\n<span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">drop_while</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"s1\">&#39;a&#39;</span> <span class=\"ow\">in</span> <span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># xd</span>\n<span class=\"c1\"># ba</span>\n</code></pre>\n</div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>predicate</strong> (<code>collections.Callable[[Item], bool]</code>):\nThe function to predicate each item in the iterator.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"o\">.</span><span class=\"n\">DropWhile</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.Iterator.all": {"fullname": "sain.Iterator.all", "modulename": "sain", "qualname": "Iterator.all", "kind": "function", "doc": "<p>Return <code>True</code> if all items in the iterator match the predicate.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"k\">while</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">)):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Still all integers&quot;</span><span class=\"p\">)</span>\n    <span class=\"k\">continue</span>\n    <span class=\"c1\"># Still all integers</span>\n</code></pre>\n</div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>predicate</strong> (<code>collections.Callable[[Item], bool]</code>):\nThe function to test each item in the iterator.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">predicate</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "sain.Iterator.any": {"fullname": "sain.Iterator.any", "modulename": "sain", "qualname": "Iterator.any", "kind": "function", "doc": "<p><code>True</code> if any items in the iterator match the predicate.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"k\">if</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">any</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">)):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;At least one item is an int.&quot;</span><span class=\"p\">)</span>\n<span class=\"c1\"># At least one item is an int.</span>\n</code></pre>\n</div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>predicate</strong> (<code>collections.Callable[[Item], bool]</code>):\nThe function to test each item in the iterator.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">predicate</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "sain.Iterator.zip": {"fullname": "sain.Iterator.zip", "modulename": "sain", "qualname": "Iterator.zip", "kind": "function", "doc": "<p>Zips the iterator with another iterable.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"k\">for</span> <span class=\"n\">item</span><span class=\"p\">,</span> <span class=\"n\">other_item</span> <span class=\"ow\">in</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">zip</span><span class=\"p\">([</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">]):</span>\n    <span class=\"k\">assert</span> <span class=\"n\">item</span> <span class=\"o\">==</span> <span class=\"n\">other_item</span>\n<span class=\"o\">&lt;</span><span class=\"n\">Iter</span><span class=\"p\">([(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">)])</span><span class=\"o\">&gt;</span>\n</code></pre>\n</div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>other</strong> (<code>Iter[OtherItem]</code>):\nThe iterable to zip with.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong><code>Iter[tuple[Item, OtherItem]]</code></strong>: The zipped iterator.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">OtherItem</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"o\">.</span><span class=\"n\">Iterator</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">,</span> <span class=\"o\">~</span><span class=\"n\">OtherItem</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, "sain.Iterator.sort": {"fullname": "sain.Iterator.sort", "modulename": "sain", "qualname": "Iterator.sort", "kind": "function", "doc": "<p>Sorts the iterator.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">])</span>\n<span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">sort</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"n\">item</span> <span class=\"o\">&lt;</span> <span class=\"mi\">3</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n<span class=\"c1\"># 1</span>\n<span class=\"c1\"># 3</span>\n<span class=\"c1\"># 6</span>\n<span class=\"c1\"># 7</span>\n</code></pre>\n</div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>key</strong> (<code>collections.Callable[[Item], Any]</code>):\nThe function to sort by.</li>\n<li><strong>reverse</strong> (<code>bool</code>):\nWhether to reverse the sort.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"s1\">&#39;collections.Callable[[Item], _typeshed.SupportsRichComparison]&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">reverse</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"o\">.</span><span class=\"n\">Iterator</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.Iterator.reversed": {"fullname": "sain.Iterator.reversed", "modulename": "sain", "qualname": "Iterator.reversed", "kind": "function", "doc": "<p>Returns a new iterator that yields the items in the iterator in reverse order.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">])</span>\n<span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">reversed</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n<span class=\"c1\"># 7</span>\n<span class=\"c1\"># 6</span>\n<span class=\"c1\"># 1</span>\n<span class=\"c1\"># 3</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"o\">.</span><span class=\"n\">Iterator</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.Iterator.union": {"fullname": "sain.Iterator.union", "modulename": "sain", "qualname": "Iterator.union", "kind": "function", "doc": "<p>Returns a new iterator that yields all items from both iterators.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"n\">other</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">]</span>\n\n<span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">union</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n<span class=\"c1\"># 1</span>\n<span class=\"c1\"># 2</span>\n<span class=\"c1\"># 3</span>\n<span class=\"c1\"># 4</span>\n<span class=\"c1\"># 5</span>\n<span class=\"c1\"># 6</span>\n</code></pre>\n</div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>other</strong> (<code>Iter[Item]</code>):\nThe iterable to union with.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"o\">.</span><span class=\"n\">Iterator</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.Iterator.first": {"fullname": "sain.Iterator.first", "modulename": "sain", "qualname": "Iterator.first", "kind": "function", "doc": "<p>Returns the first item in the iterator.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">])</span>\n<span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">first</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">is_some_and</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"s1\">&#39;Option[Item]&#39;</span>:</span></span>", "funcdef": "def"}, "sain.Iterator.last": {"fullname": "sain.Iterator.last", "modulename": "sain", "qualname": "Iterator.last", "kind": "function", "doc": "<p>Returns the last item in the iterator.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">])</span>\n<span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">last</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">is_some_and</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"mi\">7</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"s1\">&#39;Option[Item]&#39;</span>:</span></span>", "funcdef": "def"}, "sain.Iterator.count": {"fullname": "sain.Iterator.count", "modulename": "sain", "qualname": "Iterator.count", "kind": "function", "doc": "<p>Return the count of elements in memory this iterator has.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">it</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"k\">assert</span> <span class=\"n\">it</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">3</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "sain.Iterator.for_each": {"fullname": "sain.Iterator.for_each", "modulename": "sain", "qualname": "Iterator.for_each", "kind": "function", "doc": "<p>Calls <code>func</code> on each item in the iterator.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">for_each</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">))</span>\n<span class=\"c1\"># 1</span>\n<span class=\"c1\"># 2</span>\n<span class=\"c1\"># 3</span>\n</code></pre>\n</div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>func</strong> (<code>collections.Callable[[Item], typing.Any]</code>):\nThe function to call on each item in the iterator.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">func</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">],</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "sain.Iterator.async_for_each": {"fullname": "sain.Iterator.async_for_each", "modulename": "sain", "qualname": "Iterator.async_for_each", "kind": "function", "doc": "<p>Calls the async function on each item in the iterator concurrently.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">create_user</span><span class=\"p\">(</span><span class=\"n\">username</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">aiohttp</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"p\">(</span><span class=\"s2\">&quot;POST&quot;</span><span class=\"p\">,</span> <span class=\"sa\">f</span><span class=\"s1\">&#39;.../</span><span class=\"si\">{</span><span class=\"n\">username</span><span class=\"si\">}</span><span class=\"s1\">&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">r</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"k\">await</span> <span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">()</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">users</span> <span class=\"o\">=</span> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">into_iter</span><span class=\"p\">([</span><span class=\"s2\">&quot;danny&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;legalia&quot;</span><span class=\"p\">])</span>\n    <span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">users</span><span class=\"o\">.</span><span class=\"n\">async_for_each</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">username</span><span class=\"p\">:</span> <span class=\"n\">create_user</span><span class=\"p\">(</span><span class=\"n\">username</span><span class=\"p\">))</span>\n    <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">results</span><span class=\"o\">.</span><span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n        <span class=\"o\">...</span>\n</code></pre>\n</div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>func</strong> (<code>collections.Callable[[Item], Coroutine[None, Any, Any]]</code>):\nThe async function to call on each item in the iterator.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">func</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">],</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Coroutine</span><span class=\"p\">[</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"o\">~</span><span class=\"n\">OtherItem</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">Ok</span><span class=\"p\">[</span><span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">OtherItem</span><span class=\"p\">]],</span> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">Err</span><span class=\"p\">[</span><span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">futures</span><span class=\"o\">.</span><span class=\"n\">SpawnError</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "async def"}, "sain.todo": {"fullname": "sain.todo", "modulename": "sain", "qualname": "todo", "kind": "function", "doc": "<p>A place holder that indicates unfinished code.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">sain</span> <span class=\"kn\">import</span> <span class=\"n\">todo</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">from_json</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">])</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n    <span class=\"c1\"># Calling this function will raise `Error`.</span>\n    <span class=\"n\">todo</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>message</strong> (<code>str | None</code>):\nMultiple optional arguments to pass if the error was raised.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">LiteralString</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">NoReturn</span>:</span></span>", "funcdef": "def"}, "sain.deprecated": {"fullname": "sain.deprecated", "modulename": "sain", "qualname": "deprecated", "kind": "function", "doc": "<p>A decorator that marks a function as deprecated.</p>\n\n<p>An attempt to call the object that's marked will cause a runtime warn.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">sain</span> <span class=\"kn\">import</span> <span class=\"n\">deprecated</span>\n\n<span class=\"nd\">@deprecated</span><span class=\"p\">(</span>\n    <span class=\"n\">since</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;1.0.0&quot;</span><span class=\"p\">,</span>\n    <span class=\"n\">removed_in</span> <span class=\"o\">=</span><span class=\"s2\">&quot;3.0.0&quot;</span><span class=\"p\">,</span>\n    <span class=\"n\">use_instead</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;UserImpl()&quot;</span><span class=\"p\">,</span>\n    <span class=\"n\">hint</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Hint for ux.&quot;</span>\n<span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">User</span><span class=\"p\">:</span>\n    <span class=\"o\">...</span>\n\n<span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"p\">()</span> <span class=\"c1\"># This will cause a warning at runtime.</span>\n</code></pre>\n</div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>since</strong> (<code>str</code>):\nThe version that the function was deprecated.</li>\n<li><strong>removed_in</strong> (<code>str | None</code>):\nIf provided, It will log when will the object will be removed in.</li>\n<li><strong>use_instead</strong> (<code>str | None</code>):\nIf provided, This should be the alternative object name that should be used instead.</li>\n<li><strong>hint</strong> (<code>str</code>):\nAn optional hint for the user.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">since</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">LiteralString</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">removed_in</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">LiteralString</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">use_instead</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">LiteralString</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">hint</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">LiteralString</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"s1\">&#39;collections.Callable[[collections.Callable[P, U]], collections.Callable[P, U]]&#39;</span>:</span></span>", "funcdef": "def"}, "sain.unimplemented": {"fullname": "sain.unimplemented", "modulename": "sain", "qualname": "unimplemented", "kind": "function", "doc": "<p>A decorator that marks an object as unimplemented.</p>\n\n<p>An attempt to call the object that's marked will cause a runtime warn.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">sain</span> <span class=\"kn\">import</span> <span class=\"n\">unimplemented</span>\n\n<span class=\"nd\">@unimplemented</span><span class=\"p\">(</span><span class=\"s2\">&quot;User object is not implemented yet.&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">User</span><span class=\"p\">:</span>\n    <span class=\"o\">...</span>\n</code></pre>\n</div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>message</strong> (<code>str | None</code>):\nAn optional message to be displayed when the function is called. Otherwise default message will be used.</li>\n<li><strong>available_in</strong> (<code>str | None</code>):\nIf provided, This will be shown as what release this object be implemented.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">LiteralString</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">available_in</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">LiteralString</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"s1\">&#39;collections.Callable[[collections.Callable[P, U]], collections.Callable[P, U]]&#39;</span>:</span></span>", "funcdef": "def"}, "sain.doc": {"fullname": "sain.doc", "modulename": "sain", "qualname": "doc", "kind": "function", "doc": "<p>Set <code>path</code> to be the object's documentation.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">sain</span> <span class=\"kn\">import</span> <span class=\"n\">doc</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pathlib</span> <span class=\"kn\">import</span> <span class=\"n\">Path</span>\n\n<span class=\"nd\">@doc</span><span class=\"p\">(</span><span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"s2\">&quot;../README.md&quot;</span><span class=\"p\">))</span>\n<span class=\"k\">class</span> <span class=\"nc\">User</span><span class=\"p\">:</span>\n\n    <span class=\"nd\">@doc</span><span class=\"p\">(</span><span class=\"s2\">&quot;bool.html&quot;</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">bool_docs</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"o\">...</span>\n</code></pre>\n</div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>path</strong> (<code>type[int] | type[str] | type[bytes] | type[PathLike[str]] | type[PathLike[bytes]]</code>):\nThe path to read the content from.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Read&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"s1\">&#39;collections.Callable[[collections.Callable[P, U]], collections.Callable[P, U]]&#39;</span>:</span></span>", "funcdef": "def"}, "sain.Ok": {"fullname": "sain.Ok", "modulename": "sain", "qualname": "Ok", "kind": "class", "doc": "<p>Contains the success value of <code>Result[T, ...]</code>.</p>\n", "bases": "typing.Generic[~T]"}, "sain.Ok.__init__": {"fullname": "sain.Ok.__init__", "modulename": "sain", "qualname": "Ok.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">_inner</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">T</span></span>)</span>"}, "sain.Ok.is_ok": {"fullname": "sain.Ok.is_ok", "modulename": "sain", "qualname": "Ok.is_ok", "kind": "function", "doc": "<p>Returns <code>True</code> if the contained value is <code>Ok</code> and <code>False</code> if it an <code>Err</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Ok</span><span class=\"p\">(</span><span class=\"s2\">&quot;value&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">is_ok</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"kc\">True</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"kc\">True</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.Ok.is_ok_and": {"fullname": "sain.Ok.is_ok_and", "modulename": "sain", "qualname": "Ok.is_ok_and", "kind": "function", "doc": "<p>Returns <code>True</code> if the contained value is <code>Ok</code> and <code>f()</code> returns True..</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Ok</span><span class=\"p\">(</span><span class=\"s2\">&quot;value&quot;</span><span class=\"p\">)</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">is_ok_and</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">inner</span><span class=\"p\">:</span> <span class=\"n\">inner</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;value&quot;</span><span class=\"p\">)</span>\n<span class=\"c1\"># True</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "sain.Ok.is_err": {"fullname": "sain.Ok.is_err", "modulename": "sain", "qualname": "Ok.is_err", "kind": "function", "doc": "<p>Returns <code>True</code> if the contained value is <code>Err</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Ok</span><span class=\"p\">(</span><span class=\"s2\">&quot;value&quot;</span><span class=\"p\">)</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">is_err</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"kc\">False</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"kc\">False</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.Ok.is_err_and": {"fullname": "sain.Ok.is_err_and", "modulename": "sain", "qualname": "Ok.is_err_and", "kind": "function", "doc": "<p>Returns <code>True</code> if the contained value is <code>Ok</code> and <code>f()</code> returns True..</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Ok</span><span class=\"p\">(</span><span class=\"s2\">&quot;value&quot;</span><span class=\"p\">)</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">is_err_and</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">inner</span><span class=\"p\">:</span> <span class=\"n\">inner</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;value&quot;</span><span class=\"p\">)</span>\n<span class=\"c1\"># False</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"kc\">False</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.Ok.expect": {"fullname": "sain.Ok.expect", "modulename": "sain", "qualname": "Ok.expect", "kind": "function", "doc": "<p>Return the underlying value if it was <code>Ok</code>, Raising <code>RuntimeError</code>\nif it was <code>Err</code> with <code>message</code> passed to it.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">ok</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Ok</span><span class=\"p\">(</span><span class=\"s2\">&quot;owo&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">ok</span><span class=\"o\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s2\">&quot;err&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># owo</span>\n\n<span class=\"n\">err</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Err</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"n\">err</span><span class=\"o\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s2\">&quot;err&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># RuntimeError(&quot;err&quot;)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">T</span>:</span></span>", "funcdef": "def"}, "sain.Ok.unwrap": {"fullname": "sain.Ok.unwrap", "modulename": "sain", "qualname": "Ok.unwrap", "kind": "function", "doc": "<p>Return the underlying value if it was <code>Ok</code>, Raising <code>RuntimeError</code> if it was <code>Err</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">ok</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Ok</span><span class=\"p\">(</span><span class=\"s2\">&quot;owo&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">ok</span><span class=\"o\">.</span><span class=\"n\">unwrap</span><span class=\"p\">()</span> <span class=\"c1\"># owo</span>\n\n<span class=\"n\">err</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Err</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"n\">err</span><span class=\"o\">.</span><span class=\"n\">unwrap</span><span class=\"p\">()</span> <span class=\"c1\"># RuntimeError</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">T</span>:</span></span>", "funcdef": "def"}, "sain.Ok.unwrap_or": {"fullname": "sain.Ok.unwrap_or", "modulename": "sain", "qualname": "Ok.unwrap_or", "kind": "function", "doc": "<p>Return the underlying value if it was <code>Ok</code>, returning <code>default</code> if it was <code>Err</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">ok</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Ok</span><span class=\"p\">(</span><span class=\"s2\">&quot;OwO&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">ok</span><span class=\"o\">.</span><span class=\"n\">unwrap_or</span><span class=\"p\">(</span><span class=\"s2\">&quot;uwu&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># OwO</span>\n\n<span class=\"n\">err</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Err</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"n\">err</span><span class=\"o\">.</span><span class=\"n\">unwrap_or</span><span class=\"p\">(</span><span class=\"s2\">&quot;uwu&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># uwu</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">default</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">T</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">T</span>:</span></span>", "funcdef": "def"}, "sain.Ok.unwrap_or_else": {"fullname": "sain.Ok.unwrap_or_else", "modulename": "sain", "qualname": "Ok.unwrap_or_else", "kind": "function", "doc": "<p>Return the contained <code>Ok</code> value or computes it from <code>f()</code> if it was <code>Err</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">ok</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Ok</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"n\">ok</span><span class=\"o\">.</span><span class=\"n\">unwrap_or_else</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">e</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"c1\"># 4</span>\n\n<span class=\"n\">err</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Err</span><span class=\"p\">(</span><span class=\"s2\">&quot;word&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">err</span><span class=\"o\">.</span><span class=\"n\">unwrap_or_else</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">e</span><span class=\"p\">:</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">))</span> <span class=\"c1\"># 4</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">E</span><span class=\"p\">],</span> <span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">T</span>:</span></span>", "funcdef": "def"}, "sain.Ok.unwrap_err": {"fullname": "sain.Ok.unwrap_err", "modulename": "sain", "qualname": "Ok.unwrap_err", "kind": "function", "doc": "<p>Return the contained <code>Err</code> value, Raising if it was <code>Ok</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">ok</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Ok</span><span class=\"p\">(</span><span class=\"s2\">&quot;buh&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">ok</span><span class=\"o\">.</span><span class=\"n\">unwrap_err</span><span class=\"p\">()</span>  <span class=\"c1\"># RuntimeError</span>\n\n<span class=\"n\">err</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Err</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"n\">err</span><span class=\"o\">.</span><span class=\"n\">unwrap_err</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"kc\">None</span>\n<span class=\"c1\"># True</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">NoReturn</span>:</span></span>", "funcdef": "def"}, "sain.Ok.ok": {"fullname": "sain.Ok.ok", "modulename": "sain", "qualname": "Ok.ok", "kind": "function", "doc": "<p>Convert <code>Ok[T]</code> to <code>Option[T]</code> if the contained value was <code>Ok</code> and <code>Option[None]</code> if it was <code>Err</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Ok</span><span class=\"p\">(</span><span class=\"s2\">&quot;buh&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">ok</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">is_some</span><span class=\"p\">()</span> <span class=\"c1\"># True</span>\n\n<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Err</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">ok</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">is_none</span><span class=\"p\">()</span> <span class=\"c1\"># True</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">option</span><span class=\"o\">.</span><span class=\"n\">Some</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.Ok.err": {"fullname": "sain.Ok.err", "modulename": "sain", "qualname": "Ok.err", "kind": "function", "doc": "<p>Convert <code>Err[T]</code> to <code>Option[T]</code> if the contained value was <code>Err</code> and <code>Option[None]</code> if it was <code>Ok</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Ok</span><span class=\"p\">(</span><span class=\"s2\">&quot;buh&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">is_none</span><span class=\"p\">()</span> <span class=\"c1\"># True</span>\n\n<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Err</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">is_some</span><span class=\"p\">()</span> <span class=\"c1\"># True</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">option</span><span class=\"o\">.</span><span class=\"n\">Some</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.Ok.inspect": {"fullname": "sain.Ok.inspect", "modulename": "sain", "qualname": "Ok.inspect", "kind": "function", "doc": "<p>Call a function to the contained value if it was <code>Ok</code> and do nothing if it was <code>Err</code></p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"k\">def</span> <span class=\"nf\">sink</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n    <span class=\"c1\"># do something with value</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Called &quot;</span> <span class=\"o\">+</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n\n<span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Ok</span><span class=\"p\">(</span><span class=\"s2\">&quot;ok&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">inspect</span><span class=\"p\">(</span><span class=\"n\">sink</span><span class=\"p\">)</span> <span class=\"c1\"># &quot;Called ok&quot;</span>\n\n<span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Err</span><span class=\"p\">(</span><span class=\"s2\">&quot;err&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">inspect</span><span class=\"p\">(</span><span class=\"n\">sink</span><span class=\"p\">)</span> <span class=\"c1\"># None</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "sain.Ok.inspect_err": {"fullname": "sain.Ok.inspect_err", "modulename": "sain", "qualname": "Ok.inspect_err", "kind": "function", "doc": "<p>Call a function to the contained value if it was <code>Err</code> and do nothing if it was <code>Ok</code></p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"k\">def</span> <span class=\"nf\">sink</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n    <span class=\"c1\"># do something with value</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Called &quot;</span> <span class=\"o\">+</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n\n<span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Ok</span><span class=\"p\">(</span><span class=\"s2\">&quot;ok&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">inspect_err</span><span class=\"p\">(</span><span class=\"n\">sink</span><span class=\"p\">)</span> <span class=\"c1\"># None</span>\n\n<span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Err</span><span class=\"p\">(</span><span class=\"s2\">&quot;err&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">inspect_err</span><span class=\"p\">(</span><span class=\"n\">sink</span><span class=\"p\">)</span> <span class=\"c1\"># Called err</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">E</span><span class=\"p\">],</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "sain.Ok.map": {"fullname": "sain.Ok.map", "modulename": "sain", "qualname": "Ok.map", "kind": "function", "doc": "<p>Map <code>Ok[T]</code> to <code>Ok[U]</code> by applying a function to <code>T</code>, Leaving <code>Err</code> untouched.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">ok</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Ok</span><span class=\"p\">(</span><span class=\"s2\">&quot;1&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">ok</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">c</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"c1\"># Ok(2)</span>\n\n<span class=\"n\">err</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Err</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">err</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"o\">.</span><span class=\"n\">upper</span><span class=\"p\">)</span> <span class=\"c1\"># Err(0)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">Ok</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.Ok.map_or": {"fullname": "sain.Ok.map_or", "modulename": "sain", "qualname": "Ok.map_or", "kind": "function", "doc": "<p>Returns the provided default value if <code>Err</code>,</p>\n\n<p>Otherwise extracts the <code>Ok</code> value and maps it to <code>f()</code></p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Ok</span><span class=\"p\">(</span><span class=\"s2\">&quot;foo&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">map_or</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">c</span><span class=\"p\">:</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">),</span> <span class=\"mi\">42</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">3</span>\n\n<span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Err</span><span class=\"p\">(</span><span class=\"s2\">&quot;bar&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">map_or</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">c</span><span class=\"p\">:</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">),</span> <span class=\"mi\">42</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">42</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">default</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">U</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">U</span>:</span></span>", "funcdef": "def"}, "sain.Ok.map_or_else": {"fullname": "sain.Ok.map_or_else", "modulename": "sain", "qualname": "Ok.map_or_else", "kind": "function", "doc": "<p>Returns the provided default value from a function if <code>Err</code>,</p>\n\n<p>Otherwise extracts the <code>Ok</code> value and maps it to <code>f()</code></p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Ok</span><span class=\"p\">(</span><span class=\"s2\">&quot;four&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">map_or_else</span><span class=\"p\">(</span>\n    <span class=\"k\">lambda</span> <span class=\"n\">c</span><span class=\"p\">:</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">),</span>\n    <span class=\"k\">lambda</span> <span class=\"n\">err</span><span class=\"p\">:</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">)</span>\n<span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">8</span>\n\n<span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Err</span><span class=\"p\">(</span><span class=\"s2\">&quot;bar&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">map_or_else</span><span class=\"p\">(</span>\n    <span class=\"k\">lambda</span> <span class=\"n\">c</span><span class=\"p\">:</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">),</span>\n    <span class=\"k\">lambda</span> <span class=\"n\">err</span><span class=\"p\">:</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">)</span>\n<span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">3</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">default</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">E</span><span class=\"p\">],</span> <span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"o\">/</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">U</span>:</span></span>", "funcdef": "def"}, "sain.Ok.map_err": {"fullname": "sain.Ok.map_err", "modulename": "sain", "qualname": "Ok.map_err", "kind": "function", "doc": "<p>Maps a <code>Result[T, E]</code> to <code>Result[T, U]</code>, leaving <code>OK[T]</code> untouched.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Ok</span><span class=\"p\">(</span><span class=\"s2\">&quot;blue&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">map_err</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">err</span><span class=\"p\">:</span> <span class=\"n\">err</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"c1\"># Ok(&quot;blue&quot;)</span>\n\n<span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Err</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">map_err</span><span class=\"p\">(</span><span class=\"nb\">float</span><span class=\"p\">)</span> <span class=\"c1\"># Err(5.0)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">E</span><span class=\"p\">],</span> <span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Self</span>:</span></span>", "funcdef": "def"}, "sain.Ok.iter": {"fullname": "sain.Ok.iter", "modulename": "sain", "qualname": "Ok.iter", "kind": "function", "doc": "<p>Return an iterator over the contained value.</p>\n\n<p>If it was <code>Ok[T]</code> then it will return <code>Iter[T]</code>, otherwise it will return <code>Iter[Never]</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">c</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Ok</span><span class=\"p\">(</span><span class=\"s2\">&quot;blue&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">next</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"s2\">&quot;blue&quot;</span><span class=\"p\">)</span>\n\n<span class=\"n\">c</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Err</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">next</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"o\">.</span><span class=\"n\">Iterator</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.Err": {"fullname": "sain.Err", "modulename": "sain", "qualname": "Err", "kind": "class", "doc": "<p>Contains the error value of <code>Result[..., E]</code>.</p>\n", "bases": "typing.Generic[~E]"}, "sain.Err.__init__": {"fullname": "sain.Err.__init__", "modulename": "sain", "qualname": "Err.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">_inner</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">E</span></span>)</span>"}, "sain.Err.is_ok": {"fullname": "sain.Err.is_ok", "modulename": "sain", "qualname": "Err.is_ok", "kind": "function", "doc": "<p>Returns <code>True</code> if the contained value is <code>Ok</code> and <code>False</code> if it an <code>Err</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Err</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">is_ok</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"kc\">False</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"kc\">False</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.Err.is_ok_and": {"fullname": "sain.Err.is_ok_and", "modulename": "sain", "qualname": "Err.is_ok_and", "kind": "function", "doc": "<p>Returns <code>True</code> if the contained value is <code>Ok</code> and <code>f()</code> returns True.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Err</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">is_ok_and</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">inner</span><span class=\"p\">:</span> <span class=\"n\">inner</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;value&quot;</span><span class=\"p\">)</span>\n<span class=\"c1\"># False</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">E</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"kc\">False</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.Err.is_err": {"fullname": "sain.Err.is_err", "modulename": "sain", "qualname": "Err.is_err", "kind": "function", "doc": "<p>Returns <code>True</code> if the contained value is <code>Err</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Err</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">is_err</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"kc\">True</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"kc\">True</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.Err.is_err_and": {"fullname": "sain.Err.is_err_and", "modulename": "sain", "qualname": "Err.is_err_and", "kind": "function", "doc": "<p>Returns <code>True</code> if the contained value is <code>Ok</code> and <code>f()</code> returns True..</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Err</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">is_err_and</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">err</span><span class=\"p\">:</span> <span class=\"n\">err</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"c1\"># True</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">E</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "sain.Err.expect": {"fullname": "sain.Err.expect", "modulename": "sain", "qualname": "Err.expect", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">msg</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">NoReturn</span>:</span></span>", "funcdef": "def"}, "sain.Err.expect_err": {"fullname": "sain.Err.expect_err", "modulename": "sain", "qualname": "Err.expect_err", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">E</span>:</span></span>", "funcdef": "def"}, "sain.Err.unwrap": {"fullname": "sain.Err.unwrap", "modulename": "sain", "qualname": "Err.unwrap", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">NoReturn</span>:</span></span>", "funcdef": "def"}, "sain.Err.unwrap_or": {"fullname": "sain.Err.unwrap_or", "modulename": "sain", "qualname": "Err.unwrap_or", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">_Err__default</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">T</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">T</span>:</span></span>", "funcdef": "def"}, "sain.Err.unwrap_or_else": {"fullname": "sain.Err.unwrap_or_else", "modulename": "sain", "qualname": "Err.unwrap_or_else", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">E</span><span class=\"p\">],</span> <span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">T</span>:</span></span>", "funcdef": "def"}, "sain.Err.unwrap_err": {"fullname": "sain.Err.unwrap_err", "modulename": "sain", "qualname": "Err.unwrap_err", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">E</span>:</span></span>", "funcdef": "def"}, "sain.Err.inspect": {"fullname": "sain.Err.inspect", "modulename": "sain", "qualname": "Err.inspect", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "sain.Err.inspect_err": {"fullname": "sain.Err.inspect_err", "modulename": "sain", "qualname": "Err.inspect_err", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">E</span><span class=\"p\">],</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "sain.Err.ok": {"fullname": "sain.Err.ok", "modulename": "sain", "qualname": "Err.ok", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">option</span><span class=\"o\">.</span><span class=\"n\">Some</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.Err.err": {"fullname": "sain.Err.err", "modulename": "sain", "qualname": "Err.err", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">option</span><span class=\"o\">.</span><span class=\"n\">Some</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">E</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.Err.map": {"fullname": "sain.Err.map", "modulename": "sain", "qualname": "Err.map", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">E</span><span class=\"p\">],</span> <span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Self</span>:</span></span>", "funcdef": "def"}, "sain.Err.map_or": {"fullname": "sain.Err.map_or", "modulename": "sain", "qualname": "Err.map_or", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">E</span><span class=\"p\">],</span> <span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">default</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">U</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">U</span>:</span></span>", "funcdef": "def"}, "sain.Err.map_or_else": {"fullname": "sain.Err.map_or_else", "modulename": "sain", "qualname": "Err.map_or_else", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">default</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">E</span><span class=\"p\">],</span> <span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"o\">/</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">U</span>:</span></span>", "funcdef": "def"}, "sain.Err.map_err": {"fullname": "sain.Err.map_err", "modulename": "sain", "qualname": "Err.map_err", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">E</span><span class=\"p\">],</span> <span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">Err</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.Err.iter": {"fullname": "sain.Err.iter", "modulename": "sain", "qualname": "Err.iter", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"o\">.</span><span class=\"n\">Iterator</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Never</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.Result": {"fullname": "sain.Result", "modulename": "sain", "qualname": "Result", "kind": "variable", "doc": "<p></p>\n", "default_value": "typing.Union[sain.result.Ok[~T], sain.result.Err[~E]]"}, "sain.Vec": {"fullname": "sain.Vec", "modulename": "sain", "qualname": "Vec", "kind": "class", "doc": "<p>A contiguous growable alternative to builtin <code>list</code> with extra functionalities.</p>\n\n<p>The layout of <code>Vec</code> is almost the same as <code>list</code>.</p>\n\n<p>When initializing a vec, it will not build the underlying list until the first element gets pushed.\nWhich saves a little bit of memory.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">names</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">()</span>\n<span class=\"n\">names</span><span class=\"o\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"s1\">&#39;foo&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">names</span><span class=\"o\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"s1\">&#39;bar&#39;</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">names</span><span class=\"p\">)</span> <span class=\"c1\"># [&#39;foo&#39;, &#39;bar&#39;]</span>\n<span class=\"k\">assert</span> <span class=\"n\">names</span><span class=\"o\">.</span><span class=\"n\">len</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">2</span>\n</code></pre>\n</div>\n\n<h6 id=\"constructing\">Constructing</h6>\n\n<ul>\n<li><code>Vec()</code>: Create an unallocated vec, Which means the underlying list will be <code>None</code> until you start pushing into it</li>\n<li><code>Vec(other_list)</code>: Create a vec which points to <code>other_list</code></li>\n<li><code>Vec((1, 2, 3))</code>: Create a vec with <code>[1, 2, 3]</code> pre-allocated</li>\n<li><code>Vec.with_capacity(5)</code>: Create a vec that can hold up to 5 elements</li>\n<li><code>from_args(1, 2, 3)</code>: Create a vec from arguments. This is not a classmethod</li>\n</ul>\n\n<h2 id=\"iterating-over-vec\">Iterating over <code>Vec</code></h2>\n\n<p>There're two ways to iterate over a <code>Vec</code>. The first is to normally use <code>for</code> loop.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">names</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># foo</span>\n<span class=\"c1\"># bar</span>\n</code></pre>\n</div>\n\n<p>The second is to use <code>Vec.iter</code>, which yields all items in this <code>Vec</code> from start to end.\nThen the iterator gets exhausted as usual, See <code>sain.Iterator</code>.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">names</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"p\">()</span>\n<span class=\"k\">for</span> <span class=\"n\">name</span> <span class=\"ow\">in</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"o\">.</span><span class=\"n\">upper</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># FOO</span>\n<span class=\"c1\"># BAR</span>\n\n<span class=\"c1\"># No more items, The actual vec is left unchanged.</span>\n<span class=\"k\">assert</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">next</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">is_none</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n\n<h2 id=\"comparison-operators\">Comparison operators</h2>\n\n<p>Comparing different collections with <code>Vec</code> have a cost. Depending on what you're comparing it wit.</p>\n\n<p>Any iterable that is not a <code>list</code> or <code>Vec</code> that is used to compare with will get copied into a <code>list</code>,\nSo be careful what you compare a <code>Vec</code> with.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"c1\"># zero-cost</span>\n<span class=\"n\">vec</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"c1\"># Copies {1, 2, 3} -&gt; [1, 2, 3] which can cost.</span>\n<span class=\"n\">vec</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">}</span>\n</code></pre>\n</div>\n\n<h2 id=\"zero-copy\">Zero-Copy</h2>\n\n<p>A vec that gets initialized from a <code>list</code> will <em>point</em> to it and doesn't copy it.\nSo any element that gets appended to the collection will also get pushed into the vec.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">cells</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">(</span><span class=\"n\">cells</span><span class=\"p\">)</span> <span class=\"c1\"># This DOES NOT copy the `cells`.</span>\n\n<span class=\"n\">cells</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;foo&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">vec</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;foo&quot;</span>  <span class=\"c1\"># True</span>\n</code></pre>\n</div>\n\n<p>The opposite of the above is to initialize the vec from either\nan iterable or args, or copy the list.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"c1\"># Creates a new vec and extend it with the elements.</span>\n<span class=\"n\">from_args</span> <span class=\"o\">=</span> <span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">from_args</span><span class=\"p\">(</span><span class=\"s2\">&quot;foo&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;bar&quot;</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># inlined from another iterable.</span>\n<span class=\"n\">from_iter</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">([</span><span class=\"s2\">&quot;foo&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;bar&quot;</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># Copy the list into a vec.</span>\n<span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">(</span><span class=\"n\">cells</span><span class=\"p\">[:])</span>\n<span class=\"n\">cells</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;bar&quot;</span><span class=\"p\">)</span>\n\n<span class=\"n\">vec</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"c1\"># IndexError: &quot;bar&quot; doesn&#39;t exist in vec.</span>\n</code></pre>\n</div>\n", "bases": "typing.Generic[~T]"}, "sain.Vec.__init__": {"fullname": "sain.Vec.__init__", "modulename": "sain", "qualname": "Vec.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">iterable</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, "sain.Vec.with_capacity": {"fullname": "sain.Vec.with_capacity", "modulename": "sain", "qualname": "Vec.with_capacity", "kind": "function", "doc": "<p>Create a new <code>Vec</code> with at least the specified capacity.\nThis vec will be able to hold <code>capacity</code> elements without pushing further.</p>\n\n<p>Check out <code>Vec.push_within_capacity</code> as well.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"o\">.</span><span class=\"n\">with_capacity</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">len</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"ow\">and</span> <span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">capacity</span><span class=\"p\">()</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">3</span>\n\n<span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">len</span><span class=\"p\">())</span> <span class=\"c1\"># 3</span>\n\n<span class=\"c1\"># This won&#39;t push.</span>\n<span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">capacity</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"s1\">&#39;Self&#39;</span>:</span></span>", "funcdef": "def"}, "sain.Vec.as_ref": {"fullname": "sain.Vec.as_ref", "modulename": "sain", "qualname": "Vec.as_ref", "kind": "function", "doc": "<p>Return an immutable view over this vector elements.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">as_ref</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Collection</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.Vec.len": {"fullname": "sain.Vec.len", "modulename": "sain", "qualname": "Vec.len", "kind": "function", "doc": "<p>Return the number of elements in this vector.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">len</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">3</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "sain.Vec.capacity": {"fullname": "sain.Vec.capacity", "modulename": "sain", "qualname": "Vec.capacity", "kind": "function", "doc": "<p>Return the capacity of this vector if set. 0 if not .</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec_with_cap</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"o\">.</span><span class=\"n\">with_capacity</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">vec_with_cap</span><span class=\"o\">.</span><span class=\"n\">capacity</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">unwrap</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">3</span>\n\n<span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"k\">assert</span> <span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">capacity</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">is_none</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "sain.Vec.iter": {"fullname": "sain.Vec.iter", "modulename": "sain", "qualname": "Vec.iter", "kind": "function", "doc": "<p>Return an iterator over this vector elements.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Map each element to a str</span>\n<span class=\"k\">for</span> <span class=\"n\">element</span> <span class=\"ow\">in</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">element</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"o\">.</span><span class=\"n\">Iterator</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.Vec.is_empty": {"fullname": "sain.Vec.is_empty", "modulename": "sain", "qualname": "Vec.is_empty", "kind": "function", "doc": "<p>Returns true if the vector contains no elements.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "sain.Vec.split_off": {"fullname": "sain.Vec.split_off", "modulename": "sain", "qualname": "Vec.split_off", "kind": "function", "doc": "<p>Split the vector off at the specified position.</p>\n\n<p>if this vec is empty, <code>self</code> is returned unchanged.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"n\">split</span> <span class=\"o\">=</span> <span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">split_off</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">split</span><span class=\"p\">,</span> <span class=\"n\">vec</span><span class=\"p\">)</span>  <span class=\"c1\"># [1], [2, 3]</span>\n</code></pre>\n</div>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong><code>RuntimeError</code></strong>: This method will raise if <code>at</code> &gt; <code>len(self)</code></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">at</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">Vec</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.Vec.split_first": {"fullname": "sain.Vec.split_first", "modulename": "sain", "qualname": "Vec.split_first", "kind": "function", "doc": "<p>Split the first and rest elements of the vector, If empty, <code>Some[None]</code> is returned.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"n\">split</span> <span class=\"o\">=</span> <span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">split_first</span><span class=\"p\">()</span>\n<span class=\"k\">assert</span> <span class=\"n\">split</span> <span class=\"o\">==</span> <span class=\"n\">Some</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]))</span>\n\n<span class=\"n\">vec</span><span class=\"p\">:</span> <span class=\"n\">Vec</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">()</span>\n<span class=\"n\">split</span> <span class=\"o\">=</span> <span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">split_first</span><span class=\"p\">()</span>\n<span class=\"k\">assert</span> <span class=\"n\">split</span> <span class=\"o\">==</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">option</span><span class=\"o\">.</span><span class=\"n\">Some</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]]]</span>:</span></span>", "funcdef": "def"}, "sain.Vec.first": {"fullname": "sain.Vec.first", "modulename": "sain", "qualname": "Vec.first", "kind": "function", "doc": "<p>Get the first element in this vec, returning <code>Some[None]</code> if there's none.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"n\">first</span> <span class=\"o\">=</span> <span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">first</span><span class=\"p\">()</span>\n<span class=\"k\">assert</span> <span class=\"o\">~</span><span class=\"n\">first</span> <span class=\"o\">==</span> <span class=\"mi\">1</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">option</span><span class=\"o\">.</span><span class=\"n\">Some</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.Vec.truncate": {"fullname": "sain.Vec.truncate", "modulename": "sain", "qualname": "Vec.truncate", "kind": "function", "doc": "<p>Shortens the vec, keeping the first <code>size</code> elements and dropping the rest.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">truncate</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">vec</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">size</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "sain.Vec.retain": {"fullname": "sain.Vec.retain", "modulename": "sain", "qualname": "Vec.retain", "kind": "function", "doc": "<p>Remove elements from this vec while <code>f()</code> returns <code>True</code>.</p>\n\n<p>In other words, filter this vector based on <code>f()</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">retain</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">elem</span><span class=\"p\">:</span> <span class=\"n\">elem</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">vec</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "sain.Vec.swap_remove": {"fullname": "sain.Vec.swap_remove", "modulename": "sain", "qualname": "Vec.swap_remove", "kind": "function", "doc": "<p>Remove the first appearance of <code>item</code> from this vector and return it.</p>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><p><strong>* <code>ValueError</code></strong> (if <code>item</code> is not in this vector.):</p></li>\n<li><p><strong>* <code>MemoryError</code></strong> (if this vector hasn't allocated, Aka nothing has been pushed to it.):</p></li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vector</span><span class=\"p\">((</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">))</span>\n<span class=\"n\">element</span> <span class=\"o\">=</span> <span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">vec</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span> <span class=\"ow\">and</span> <span class=\"n\">element</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;a&#39;</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">T</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">T</span>:</span></span>", "funcdef": "def"}, "sain.Vec.push": {"fullname": "sain.Vec.push", "modulename": "sain", "qualname": "Vec.push", "kind": "function", "doc": "<p>Push an element at the end of the vector.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">()</span>\n<span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">vec</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">T</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "sain.Vec.push_within_capacity": {"fullname": "sain.Vec.push_within_capacity", "modulename": "sain", "qualname": "Vec.push_within_capacity", "kind": "function", "doc": "<p>Appends an element if there is sufficient spare capacity, otherwise an error is returned with the element.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span><span class=\"p\">:</span> <span class=\"n\">Vec</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"o\">.</span><span class=\"n\">with_capacity</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">):</span>\n    <span class=\"k\">match</span> <span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">push_within_capacity</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">):</span>\n        <span class=\"k\">case</span><span class=\"w\"> </span><span class=\"n\">Ok</span><span class=\"p\">(</span><span class=\"k\">_</span><span class=\"p\">):</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;All good.&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">case</span> <span class=\"n\">Err</span><span class=\"p\">(</span><span class=\"n\">elem</span><span class=\"p\">):</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Reached max cap :&lt; cant push&quot;</span><span class=\"p\">,</span> <span class=\"n\">elem</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>Or you can also just call <code>Vec.push</code> and it will push within capacity if <code>Vec.capacity()</code> is not <code>None</code>.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span><span class=\"p\">:</span> <span class=\"n\">Vec</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"o\">.</span><span class=\"n\">with_capacity</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n\n<span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">len</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">3</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">T</span></span><span class=\"return-annotation\">) -> <span class=\"s1\">&#39;Result[None, T]&#39;</span>:</span></span>", "funcdef": "def"}, "sain.Vec.reserve": {"fullname": "sain.Vec.reserve", "modulename": "sain", "qualname": "Vec.reserve", "kind": "function", "doc": "<p>Reserves capacity for at least additional more elements to be inserted in the given Vec<T>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"o\">.</span><span class=\"n\">with_capacity</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">is_vip</span> <span class=\"o\">=</span> <span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">choice</span><span class=\"p\">((</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">))</span>\n\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">):</span>\n    <span class=\"k\">match</span> <span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">push_within_capacity</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">):</span>\n        <span class=\"k\">case</span><span class=\"w\"> </span><span class=\"n\">Ok</span><span class=\"p\">(</span><span class=\"k\">_</span><span class=\"p\">):</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;All good&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">case</span> <span class=\"n\">Err</span><span class=\"p\">(</span><span class=\"n\">person</span><span class=\"p\">):</span>\n            <span class=\"c1\"># If the person is a VIP, then reserve for one more.</span>\n            <span class=\"k\">if</span> <span class=\"n\">is_vip</span><span class=\"p\">:</span>\n                <span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">reserve</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n                <span class=\"k\">continue</span>\n\n            <span class=\"c1\"># is_vip was false.</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Can&#39;t reserve for non-VIP members...&quot;</span><span class=\"p\">,</span> <span class=\"n\">person</span><span class=\"p\">)</span>\n            <span class=\"k\">break</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">additional</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "sain.Vec.append": {"fullname": "sain.Vec.append", "modulename": "sain", "qualname": "Vec.append", "kind": "function", "doc": "<p>An alias for <code>Vec.push</code> method.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">T</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "sain.Vec.get": {"fullname": "sain.Vec.get", "modulename": "sain", "qualname": "Vec.get", "kind": "function", "doc": "<p>Get the item at the given index, or <code>Some[None]</code> if its out of bounds.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">index</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">option</span><span class=\"o\">.</span><span class=\"n\">Some</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.Vec.insert": {"fullname": "sain.Vec.insert", "modulename": "sain", "qualname": "Vec.insert", "kind": "function", "doc": "<p>Insert an element at the position <code>index</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">((</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">vec</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">index</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">T</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "sain.Vec.pop": {"fullname": "sain.Vec.pop", "modulename": "sain", "qualname": "Vec.pop", "kind": "function", "doc": "<p>Removes the last element from a vector and returns it, or <code>sain.Some(None)</code> if it is empty.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"k\">assert</span> <span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">vec</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">index</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">option</span><span class=\"o\">.</span><span class=\"n\">Some</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.Vec.remove": {"fullname": "sain.Vec.remove", "modulename": "sain", "qualname": "Vec.remove", "kind": "function", "doc": "<p>Remove <code>item</code> from this vector.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vector</span><span class=\"p\">((</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">))</span>\n<span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">vec</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">T</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "sain.Vec.extend": {"fullname": "sain.Vec.extend", "modulename": "sain", "qualname": "Vec.extend", "kind": "function", "doc": "<p>Extend this vector from another iterable.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">((</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">))</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">vec</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">iterable</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "sain.Vec.copy": {"fullname": "sain.Vec.copy", "modulename": "sain", "qualname": "Vec.copy", "kind": "function", "doc": "<p>Create a vector that copies all of its elements and place it into the new one.</p>\n\n<p>If the vector hasn't been allocated, <code>self</code> is returned.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">original</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"n\">copy</span> <span class=\"o\">=</span> <span class=\"n\">original</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n<span class=\"n\">copy</span><span class=\"o\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">original</span><span class=\"p\">)</span> <span class=\"c1\"># [1, 2, 3]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">Vec</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.Vec.clear": {"fullname": "sain.Vec.clear", "modulename": "sain", "qualname": "Vec.clear", "kind": "function", "doc": "<p>Clear all elements of this vector.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">clear</span><span class=\"p\">()</span>\n<span class=\"k\">assert</span> <span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">len</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">0</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "sain.Vec.sort": {"fullname": "sain.Vec.sort", "modulename": "sain", "qualname": "Vec.sort", "kind": "function", "doc": "<p>This method sorts the list in place, using only &lt; comparisons between items.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">((</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">sort</span><span class=\"p\">()</span>\n<span class=\"k\">assert</span> <span class=\"n\">vec</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"s1\">&#39;collections.Callable[[T], SupportsRichComparison] | None&#39;</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">reverse</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "sain.Vec.index": {"fullname": "sain.Vec.index", "modulename": "sain", "qualname": "Vec.index", "kind": "function", "doc": "<p>Return zero-based index in the vec of the first item whose value is equal to <code>item</code>.\nRaises a ValueError if there is no such item.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"k\">assert</span> <span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">T</span>,</span><span class=\"param\">\tstart: &lt;class &#x27;SupportsIndex&#x27;&gt; = 0,</span><span class=\"param\">\t<span class=\"n\">end</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">9223372036854775807</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "sain.Vec.count": {"fullname": "sain.Vec.count", "modulename": "sain", "qualname": "Vec.count", "kind": "function", "doc": "<p>Return the number of occurrences of <code>item</code> in the vec.</p>\n\n<p><code>0</code> is returned if the vector is empty or hasn't been initialized, as well if them item not found.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"k\">assert</span> <span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">2</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">T</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "sain.Error": {"fullname": "sain.Error", "modulename": "sain", "qualname": "Error", "kind": "class", "doc": "<p><code>Error</code> is an interface usually used for values that returns <code>sain.Result[T, E]</code></p>\n\n<p>where <code>E</code> is an implementation of this interface.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">requests</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dataclasses</span> <span class=\"kn\">import</span> <span class=\"n\">dataclass</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">sain</span> <span class=\"kn\">import</span> <span class=\"n\">Error</span><span class=\"p\">,</span> <span class=\"n\">Option</span><span class=\"p\">,</span> <span class=\"n\">Some</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sain</span> <span class=\"kn\">import</span> <span class=\"n\">Result</span><span class=\"p\">,</span> <span class=\"n\">Ok</span><span class=\"p\">,</span> <span class=\"n\">Err</span>\n\n<span class=\"c1\"># Base error.</span>\n<span class=\"k\">class</span> <span class=\"nc\">HTTPError</span><span class=\"p\">(</span><span class=\"n\">Error</span><span class=\"p\">):</span> <span class=\"o\">...</span>\n\n<span class=\"nd\">@dataclass</span>\n<span class=\"k\">class</span> <span class=\"nc\">NotFound</span><span class=\"p\">(</span><span class=\"n\">HTTPError</span><span class=\"p\">):</span>\n    <span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;The response returned [404]: not found.&quot;</span>\n    <span class=\"n\">http_status</span> <span class=\"o\">=</span> <span class=\"mi\">404</span>\n    <span class=\"n\">response</span><span class=\"p\">:</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">Response</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">description</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"s2\">&quot;Couldn&#39;t find what you&#39;re looking for &quot;</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">url</span>\n\n    <span class=\"c1\"># It is not necessary to define this method,</span>\n    <span class=\"c1\"># it just gives more context to the user handling this error.</span>\n    <span class=\"k\">def</span> <span class=\"nf\">source</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Option</span><span class=\"p\">[</span><span class=\"nb\">type</span><span class=\"p\">[</span><span class=\"n\">HTTPError</span><span class=\"p\">]]:</span>\n        <span class=\"k\">return</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"n\">HTTPError</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@dataclass</span>\n<span class=\"k\">class</span> <span class=\"nc\">UserNotFound</span><span class=\"p\">(</span><span class=\"n\">NotFound</span><span class=\"p\">):</span>\n    <span class=\"n\">user_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__post_init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">request</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">request</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;User </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">user_id</span><span class=\"si\">}</span><span class=\"s2\"> fetched from </span><span class=\"si\">{</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">path_url</span><span class=\"si\">}</span><span class=\"s2\"> was not found.&quot;</span>\n\n    <span class=\"c1\"># It is not necessary to define this method,</span>\n    <span class=\"c1\"># it just gives more context to the user handling this error.</span>\n    <span class=\"k\">def</span> <span class=\"nf\">source</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Option</span><span class=\"p\">[</span><span class=\"nb\">type</span><span class=\"p\">[</span><span class=\"n\">NotFound</span><span class=\"p\">]]:</span>\n        <span class=\"k\">return</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"n\">NotFound</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">description</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;Couldn&#39;t find the resource: </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">raw</span><span class=\"si\">}</span><span class=\"s2\">.&quot;</span>\n\n<span class=\"c1\"># A simple request that handles [404] responses.</span>\n<span class=\"k\">def</span> <span class=\"nf\">request</span><span class=\"p\">(</span>\n    <span class=\"n\">url</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span>\n    <span class=\"n\">resourceful</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"n\">uid</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n<span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">Response</span><span class=\"p\">,</span> <span class=\"n\">HTTPError</span><span class=\"p\">]:</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span>\n        <span class=\"n\">url</span><span class=\"p\">,</span>\n        <span class=\"n\">json</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;resourceful&quot;</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"s2\">&quot;user_id&quot;</span><span class=\"p\">:</span> <span class=\"n\">uid</span><span class=\"p\">}</span>\n        <span class=\"k\">if</span> <span class=\"n\">resourceful</span> <span class=\"k\">else</span> <span class=\"kc\">None</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">status_code</span> <span class=\"o\">==</span> <span class=\"mi\">404</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">resourceful</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">Err</span><span class=\"p\">(</span><span class=\"n\">UserNotFound</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">,</span> <span class=\"n\">uid</span><span class=\"p\">))</span>\n        <span class=\"k\">return</span> <span class=\"n\">Err</span><span class=\"p\">(</span><span class=\"n\">NotFound</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">))</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">Ok</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Execute the request</span>\n<span class=\"k\">match</span> <span class=\"n\">request</span><span class=\"p\">(</span><span class=\"s2\">&quot;some-url.com&#39;, True, uid=0):</span>\n    <span class=\"k\">case</span> <span class=\"n\">Ok</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Deal with the response</span>\n        <span class=\"o\">...</span>\n    <span class=\"k\">case</span> <span class=\"n\">Err</span><span class=\"p\">(</span><span class=\"n\">why</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Deal with the error.</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">why</span><span class=\"o\">.</span><span class=\"n\">message</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "bases": "typing.Protocol"}, "sain.Error.__init__": {"fullname": "sain.Error.__init__", "modulename": "sain", "qualname": "Error.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span></span>)</span>"}, "sain.Error.message": {"fullname": "sain.Error.message", "modulename": "sain", "qualname": "Error.message", "kind": "variable", "doc": "<p>A basic error message.</p>\n"}, "sain.Error.source": {"fullname": "sain.Error.source", "modulename": "sain", "qualname": "Error.source", "kind": "function", "doc": "<p>The source of this error, if any.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">option</span><span class=\"o\">.</span><span class=\"n\">Some</span><span class=\"p\">[</span><span class=\"nb\">type</span><span class=\"p\">[</span><span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"o\">.</span><span class=\"n\">Error</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, "sain.Error.description": {"fullname": "sain.Error.description", "modulename": "sain", "qualname": "Error.description", "kind": "function", "doc": "<p>Context for this error.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "sain.Box": {"fullname": "sain.Box", "modulename": "sain", "qualname": "Box", "kind": "class", "doc": "<p>The box object for expiring data. not thread-safe.</p>\n\n<p>A box is an object that contains a value of type <code>T</code> which expires it after the given amount of time,\nThe box won't start expiring the data until its first access with <code>Box.get</code> method.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"c1\"># Initializing a box doesn&#39;t mean it started expiring. instead,</span>\n<span class=\"c1\"># getting the value the first time will start the process.</span>\n<span class=\"n\">cache</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Box</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;sora&quot;</span><span class=\"p\">:</span> <span class=\"n\">Box</span><span class=\"p\">(</span><span class=\"mi\">999</span><span class=\"p\">,</span> <span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">seconds</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)}</span>\n\n<span class=\"c1\"># first start expiring here.</span>\n<span class=\"n\">cache</span><span class=\"p\">[</span><span class=\"s2\">&quot;sora&quot;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">unwrap</span><span class=\"p\">()</span>\n<span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">cache</span><span class=\"p\">[</span><span class=\"s2\">&quot;sora&quot;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">has_expired</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n", "bases": "typing.Generic[+T]"}, "sain.Box.__init__": {"fullname": "sain.Box.__init__", "modulename": "sain", "qualname": "Box.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"o\">+</span><span class=\"n\">T</span>, </span><span class=\"param\"><span class=\"n\">expire_in</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timedelta</span></span>)</span>"}, "sain.Box.has_expired": {"fullname": "sain.Box.has_expired", "modulename": "sain", "qualname": "Box.has_expired", "kind": "variable", "doc": "<p>Returns True if the value has expired.</p>\n", "annotation": ": bool"}, "sain.Box.on_expire": {"fullname": "sain.Box.on_expire", "modulename": "sain", "qualname": "Box.on_expire", "kind": "function", "doc": "<p>Set a callback that will be invoked when this value gets expired.</p>\n\n<p>Both async and sync callbacks are supported.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">sink</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n    <span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">create_message</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Sinked&quot;</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">)</span>\n\n<span class=\"n\">box</span> <span class=\"o\">=</span> <span class=\"n\">Box</span><span class=\"p\">(</span><span class=\"s2\">&quot;bluh&quot;</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">on_expire</span><span class=\"p\">(</span><span class=\"n\">sink</span><span class=\"p\">)</span>\n\n<span class=\"k\">while</span> <span class=\"n\">box</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">is_some</span><span class=\"p\">():</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>First <code>.get</code> call on an expired box, the <code>sink</code> callback will be invoked,\nalso the inner value will be set to <code>Some(None)</code>.</p>\n\n<p>After 5 seconds.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"k\">assert</span> <span class=\"n\">box</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"s2\">&quot;bluh&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># This last call invokes the callback.</span>\n<span class=\"c1\"># Sinked bluh</span>\n<span class=\"k\">assert</span> <span class=\"n\">box</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">is_none</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">callback</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">+</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Self</span>:</span></span>", "funcdef": "def"}, "sain.Box.remaining": {"fullname": "sain.Box.remaining", "modulename": "sain", "qualname": "Box.remaining", "kind": "function", "doc": "<p>Returns when this box will expire in seconds.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">jogo</span> <span class=\"o\">=</span> <span class=\"n\">Box</span><span class=\"p\">(</span><span class=\"s2\">&quot;jogo&quot;</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">jogo</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">unwrap</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;jogo&quot;</span>\n\n<span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">jogo</span><span class=\"o\">.</span><span class=\"n\">remaining</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">2</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, "sain.Box.get": {"fullname": "sain.Box.get", "modulename": "sain", "qualname": "Box.get", "kind": "function", "doc": "<p>Get the contained value if it was not expired, otherwise <code>Some(None)</code> is returned.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">pizza</span> <span class=\"o\">=</span> <span class=\"n\">Box</span><span class=\"p\">(</span><span class=\"s2\">&quot;pizza&quot;</span><span class=\"p\">,</span> <span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">days</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n\n<span class=\"k\">while</span> <span class=\"ow\">not</span> <span class=\"n\">pizza</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">is_none</span><span class=\"p\">():</span>\n    <span class=\"c1\"># Do stuff with the value while its not expired.</span>\n\n<span class=\"c1\"># After 1 day.</span>\n<span class=\"k\">assert</span> <span class=\"n\">pizza</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">is_none</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">option</span><span class=\"o\">.</span><span class=\"n\">Some</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.MaybeUninit": {"fullname": "sain.MaybeUninit", "modulename": "sain", "qualname": "MaybeUninit", "kind": "class", "doc": "<p>A wrapper type to construct uninitialized instances of <code>T</code>.</p>\n\n<p>This is kinda equivalent to Rust's <code>MaybeUninit&lt;T&gt;</code> wrapper.</p>\n\n<p>The difference is what's happening under the hood is when initializing an instance of this object,\nnothing really is being initialized, until you call <code>.write()</code> to initialize the inner value.</p>\n\n<h2 id=\"what\">What??</h2>\n\n<p>Ok, so <code>MaybeUninit&lt;T&gt;</code> is in a sense the unsafe equivalent of <code>Option&lt;T&gt;</code>, it either contains a value of type <code>T</code>,\nor it contains uninitialized memory (<code>the attribute doesn't exist</code>).</p>\n\n<p>However, <code>MaybeUninit</code> is unable to tell you whether the value it contains is <code>Some(T)</code> or <code>None</code>, So you\nas a programmer is responsible for initializing it.</p>\n\n<p>And by default, <code>Option&lt;T&gt;</code> always contain a default value, which is <code>None</code>.</p>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"c1\"># Create a list of 3 uninitialized strings preallocated.</span>\n<span class=\"n\">pool</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">MaybeUninit</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"n\">MaybeUninit</span><span class=\"o\">.</span><span class=\"n\">uninit_array</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">chars</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n\n<span class=\"k\">for</span> <span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">uninit</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">pool</span><span class=\"p\">):</span>\n    <span class=\"n\">uninit</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">chars</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">])</span>\n\n<span class=\"k\">assert</span> <span class=\"nb\">all</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">assume_init</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">obj</span> <span class=\"ow\">in</span> <span class=\"n\">pool</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "bases": "typing.Generic[~T]"}, "sain.MaybeUninit.__init__": {"fullname": "sain.MaybeUninit.__init__", "modulename": "sain", "qualname": "MaybeUninit.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, "sain.MaybeUninit.uninit": {"fullname": "sain.MaybeUninit.uninit", "modulename": "sain", "qualname": "MaybeUninit.uninit", "kind": "function", "doc": "<p>Creates a new <code>MaybeUninit&lt;T&gt;</code> in an uninitialized state.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">v</span><span class=\"p\">:</span> <span class=\"n\">MaybeUninit</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">MaybeUninit</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">uninit</span><span class=\"p\">()</span> <span class=\"c1\"># or just MaybeUninit()</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Self</span>:</span></span>", "funcdef": "def"}, "sain.MaybeUninit.uninit_array": {"fullname": "sain.MaybeUninit.uninit_array", "modulename": "sain", "qualname": "MaybeUninit.uninit_array", "kind": "function", "doc": "<p>Creates an immutable sequence of <code>MaybeUninit&lt;T&gt;</code> in an uninitialized state.</p>\n\n<p>Note that <code>inner</code> value doesn't exist in this state until you call <code>.write</code> to set it.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">MaybeUninit</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">uninit_array</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">3</span>\n<span class=\"k\">for</span> <span class=\"n\">uninit</span> <span class=\"ow\">in</span> <span class=\"n\">v</span><span class=\"p\">:</span>\n    <span class=\"n\">uninit</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s1\">&#39;content&#39;</span><span class=\"p\">)</span>\n\n    <span class=\"n\">initialized</span> <span class=\"o\">=</span> <span class=\"n\">uninit</span><span class=\"o\">.</span><span class=\"n\">assume_init</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Self</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.MaybeUninit.assume_init": {"fullname": "sain.MaybeUninit.assume_init", "modulename": "sain", "qualname": "MaybeUninit.assume_init", "kind": "function", "doc": "<p>Get the inner value, assuming that it was initialized by the caller.</p>\n\n<p>It is unsafe and undefined behavior to call this method on an uninitialized state,</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">uninit</span><span class=\"p\">:</span> <span class=\"n\">MaybeUninit</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">MaybeUninit</span><span class=\"o\">.</span><span class=\"n\">uninit</span><span class=\"p\">()</span>\n<span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">uninit</span><span class=\"o\">.</span><span class=\"n\">assume_init</span><span class=\"p\">()</span> <span class=\"c1\"># This is UNSAFE \u26a0\ufe0f</span>\n\n<span class=\"c1\"># Initialize it first.</span>\n<span class=\"n\">uninit</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">uninit</span><span class=\"o\">.</span><span class=\"n\">assume_init</span><span class=\"p\">()</span> <span class=\"c1\"># This is safe to access.</span>\n</code></pre>\n</div>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong><code>LookupError</code></strong>: If the <code>self</code> is not initialized.</li>\n<li><strong># Safety \u26a0\ufe0f</strong></li>\n<li>**Calling this method on <code>None</code> is considered <a href=\"https** (//en.wikipedia.org/wiki/Undefined_behavior).\">undefined behavior</a>:</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">T</span>:</span></span>", "funcdef": "def"}, "sain.MaybeUninit.write": {"fullname": "sain.MaybeUninit.write", "modulename": "sain", "qualname": "MaybeUninit.write", "kind": "function", "doc": "<p>Sets the value of the <code>MaybeUninit[T]</code>.</p>\n\n<p>This will overwrite any previous values, if was initialized obviously.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"k\">def</span> <span class=\"nf\">scoped</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">MaybeUninit</span><span class=\"p\">[</span><span class=\"nb\">bytes</span><span class=\"p\">])</span> <span class=\"o\">-&gt;</span> <span class=\"n\">MaybeUninit</span><span class=\"p\">[</span><span class=\"nb\">bytes</span><span class=\"p\">]:</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;...&quot;</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">ok</span><span class=\"p\">:</span>\n        <span class=\"c1\"># If ok, initialize.</span>\n        <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">content</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">value</span>\n\n<span class=\"n\">buffer</span><span class=\"p\">:</span> <span class=\"n\">MaybeUninit</span><span class=\"p\">[</span><span class=\"nb\">bytes</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">MaybeUninit</span><span class=\"p\">()</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">scoped</span><span class=\"p\">(</span><span class=\"n\">buffer</span><span class=\"p\">)</span> <span class=\"c1\"># buffer is initialized now.</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">assume_init</span><span class=\"p\">())</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">T</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">T</span>:</span></span>", "funcdef": "def"}, "sain.From": {"fullname": "sain.From", "modulename": "sain", "qualname": "From", "kind": "class", "doc": "<p>Used to do value-to-value conversions while consuming the input value. It is the reciprocal of Into.</p>\n\n<p>As the Rust documentation says, One should always prefer implementing From over Into\nbecause implementing From automatically provides one with an implementation of Into.</p>\n\n<p>But there's no such thing in Python, as it's impossible to auto-impl <code>Into&lt;T&gt;</code> for all types\nthat impl <code>From&lt;T&gt;</code>.</p>\n\n<p>So for the sake of simplicity, You should implement whichever interface you want deal with,\nOr simply, implement both as the same time.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"nd\">@dataclass</span>\n<span class=\"k\">class</span> <span class=\"nc\">Id</span><span class=\"p\">(</span><span class=\"n\">From</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]):</span>\n    <span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">from_t</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Self</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"bp\">cls</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n", "bases": "typing.Protocol[-T_co]"}, "sain.From.__init__": {"fullname": "sain.From.__init__", "modulename": "sain", "qualname": "From.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, "sain.From.from_t": {"fullname": "sain.From.from_t", "modulename": "sain", "qualname": "From.from_t", "kind": "function", "doc": "<p>Perform the conversion.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"n\">T_co</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Self</span>:</span></span>", "funcdef": "def"}, "sain.TryFrom": {"fullname": "sain.TryFrom", "modulename": "sain", "qualname": "TryFrom", "kind": "class", "doc": "<p>Simple and safe type conversions that may fail in a controlled way under some circumstances.\nIt is the reciprocal of <code>TryInto</code>.</p>\n\n<p>It is useful to implement this when you know that the conversion may fail in some way.</p>\n\n<h6 id=\"generic-implementations\">Generic Implementations</h6>\n\n<p>This interface takes two type arguments, and return <code>Result&lt;Self, E&gt;</code></p>\n\n<ul>\n<li><code>T</code>: Which's the first generic <code>T</code> is the type that's being converted from.</li>\n<li><code>E</code>: If the conversion fails in a way, this is what will return as the error.</li>\n<li><code>Self</code>: Which's the instance of the class that is being converted into.</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"nd\">@dataclass</span>\n<span class=\"k\">class</span> <span class=\"nc\">Id</span><span class=\"p\">(</span><span class=\"n\">TryFrom</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]):</span>\n    <span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">try_from</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"n\">Self</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]:</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">isnumeric</span><span class=\"p\">():</span>\n            <span class=\"c1\"># NaN</span>\n            <span class=\"k\">return</span> <span class=\"n\">Err</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Couldn&#39;t convert: </span><span class=\"si\">{</span><span class=\"n\">value</span><span class=\"si\">}</span><span class=\"s2\"> to self&quot;</span><span class=\"p\">)</span>\n        <span class=\"c1\"># otherwise convert it to an Id instance.</span>\n        <span class=\"k\">return</span> <span class=\"n\">Ok</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">=</span><span class=\"bp\">cls</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)))</span>\n</code></pre>\n</div>\n", "bases": "typing.Protocol[-T_co, ~E]"}, "sain.TryFrom.__init__": {"fullname": "sain.TryFrom.__init__", "modulename": "sain", "qualname": "TryFrom.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, "sain.TryFrom.try_from": {"fullname": "sain.TryFrom.try_from", "modulename": "sain", "qualname": "TryFrom.try_from", "kind": "function", "doc": "<p>Perform the conversion.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"n\">T_co</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">Ok</span><span class=\"p\">[</span><span class=\"n\">Self</span><span class=\"p\">],</span> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">Err</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">E</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, "sain.Into": {"fullname": "sain.Into", "modulename": "sain", "qualname": "Into", "kind": "class", "doc": "<p>Conversion from <code>self</code>, which may or may not be expensive.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"nd\">@dataclass</span>\n<span class=\"k\">class</span> <span class=\"nc\">Id</span><span class=\"p\">(</span><span class=\"n\">Into</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]):</span>\n    <span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">into</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "bases": "typing.Protocol[+T_cov]"}, "sain.Into.__init__": {"fullname": "sain.Into.__init__", "modulename": "sain", "qualname": "Into.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, "sain.Into.into": {"fullname": "sain.Into.into", "modulename": "sain", "qualname": "Into.into", "kind": "function", "doc": "<p>Perform the conversion.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"o\">+</span><span class=\"n\">T_cov</span>:</span></span>", "funcdef": "def"}, "sain.TryInto": {"fullname": "sain.TryInto", "modulename": "sain", "qualname": "TryInto", "kind": "class", "doc": "<p>An attempted conversion from <code>self</code>, which may or may not be expensive.</p>\n\n<p>It is useful to implement this when you know that the conversion may fail in some way.</p>\n\n<h6 id=\"generic-implementations\">Generic Implementations</h6>\n\n<p>This interface takes two type arguments, and return <code>Result&lt;T, E&gt;</code></p>\n\n<ul>\n<li><code>T</code>: The first generic <code>T</code> is the type that's being converted into.</li>\n<li><code>E</code>: If the conversion fails in a way, this is what will return as the error.</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"nd\">@dataclass</span>\n<span class=\"k\">class</span> <span class=\"nc\">Id</span><span class=\"p\">(</span><span class=\"n\">TryInto</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]):</span>\n    <span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">try_into</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]:</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">isnumeric</span><span class=\"p\">():</span>\n            <span class=\"k\">return</span> <span class=\"n\">Err</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"si\">}</span><span class=\"s2\"> is not a number...&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">Ok</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n", "bases": "typing.Protocol[~T, ~E]"}, "sain.TryInto.__init__": {"fullname": "sain.TryInto.__init__", "modulename": "sain", "qualname": "TryInto.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, "sain.TryInto.try_into": {"fullname": "sain.TryInto.try_into", "modulename": "sain", "qualname": "TryInto.try_into", "kind": "function", "doc": "<p>Perform the conversion.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">Ok</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">Err</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">E</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, "sain.boxed": {"fullname": "sain.boxed", "modulename": "sain.boxed", "kind": "module", "doc": "<p>a <code>Box</code> is a wrapper around a value that expires after the given amount of time.</p>\n"}, "sain.boxed.Box": {"fullname": "sain.boxed.Box", "modulename": "sain.boxed", "qualname": "Box", "kind": "class", "doc": "<p>The box object for expiring data. not thread-safe.</p>\n\n<p>A box is an object that contains a value of type <code>T</code> which expires it after the given amount of time,\nThe box won't start expiring the data until its first access with <code>Box.get</code> method.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"c1\"># Initializing a box doesn&#39;t mean it started expiring. instead,</span>\n<span class=\"c1\"># getting the value the first time will start the process.</span>\n<span class=\"n\">cache</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Box</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;sora&quot;</span><span class=\"p\">:</span> <span class=\"n\">Box</span><span class=\"p\">(</span><span class=\"mi\">999</span><span class=\"p\">,</span> <span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">seconds</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)}</span>\n\n<span class=\"c1\"># first start expiring here.</span>\n<span class=\"n\">cache</span><span class=\"p\">[</span><span class=\"s2\">&quot;sora&quot;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">unwrap</span><span class=\"p\">()</span>\n<span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">cache</span><span class=\"p\">[</span><span class=\"s2\">&quot;sora&quot;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">has_expired</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n", "bases": "typing.Generic[+T]"}, "sain.boxed.Box.__init__": {"fullname": "sain.boxed.Box.__init__", "modulename": "sain.boxed", "qualname": "Box.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"o\">+</span><span class=\"n\">T</span>, </span><span class=\"param\"><span class=\"n\">expire_in</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timedelta</span></span>)</span>"}, "sain.boxed.Box.has_expired": {"fullname": "sain.boxed.Box.has_expired", "modulename": "sain.boxed", "qualname": "Box.has_expired", "kind": "variable", "doc": "<p>Returns True if the value has expired.</p>\n", "annotation": ": bool"}, "sain.boxed.Box.on_expire": {"fullname": "sain.boxed.Box.on_expire", "modulename": "sain.boxed", "qualname": "Box.on_expire", "kind": "function", "doc": "<p>Set a callback that will be invoked when this value gets expired.</p>\n\n<p>Both async and sync callbacks are supported.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">sink</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n    <span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">create_message</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Sinked&quot;</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">)</span>\n\n<span class=\"n\">box</span> <span class=\"o\">=</span> <span class=\"n\">Box</span><span class=\"p\">(</span><span class=\"s2\">&quot;bluh&quot;</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">on_expire</span><span class=\"p\">(</span><span class=\"n\">sink</span><span class=\"p\">)</span>\n\n<span class=\"k\">while</span> <span class=\"n\">box</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">is_some</span><span class=\"p\">():</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>First <code>.get</code> call on an expired box, the <code>sink</code> callback will be invoked,\nalso the inner value will be set to <code>Some(None)</code>.</p>\n\n<p>After 5 seconds.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"k\">assert</span> <span class=\"n\">box</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"s2\">&quot;bluh&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># This last call invokes the callback.</span>\n<span class=\"c1\"># Sinked bluh</span>\n<span class=\"k\">assert</span> <span class=\"n\">box</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">is_none</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">callback</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">+</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Self</span>:</span></span>", "funcdef": "def"}, "sain.boxed.Box.remaining": {"fullname": "sain.boxed.Box.remaining", "modulename": "sain.boxed", "qualname": "Box.remaining", "kind": "function", "doc": "<p>Returns when this box will expire in seconds.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">jogo</span> <span class=\"o\">=</span> <span class=\"n\">Box</span><span class=\"p\">(</span><span class=\"s2\">&quot;jogo&quot;</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">jogo</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">unwrap</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;jogo&quot;</span>\n\n<span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">jogo</span><span class=\"o\">.</span><span class=\"n\">remaining</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">2</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, "sain.boxed.Box.get": {"fullname": "sain.boxed.Box.get", "modulename": "sain.boxed", "qualname": "Box.get", "kind": "function", "doc": "<p>Get the contained value if it was not expired, otherwise <code>Some(None)</code> is returned.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">pizza</span> <span class=\"o\">=</span> <span class=\"n\">Box</span><span class=\"p\">(</span><span class=\"s2\">&quot;pizza&quot;</span><span class=\"p\">,</span> <span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">days</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n\n<span class=\"k\">while</span> <span class=\"ow\">not</span> <span class=\"n\">pizza</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">is_none</span><span class=\"p\">():</span>\n    <span class=\"c1\"># Do stuff with the value while its not expired.</span>\n\n<span class=\"c1\"># After 1 day.</span>\n<span class=\"k\">assert</span> <span class=\"n\">pizza</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">is_none</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">option</span><span class=\"o\">.</span><span class=\"n\">Some</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.cfg.cfg_attr": {"fullname": "sain.cfg.cfg_attr", "modulename": "sain.cfg", "qualname": "cfg_attr", "kind": "function", "doc": "<p>Conditional runtime object configuration based on passed arguments.</p>\n\n<p>If the decorated object gets called and one of the attributes returns <code>False</code>,\n<code>RuntimeError</code> will be raised and the object will not run.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">sain</span>\n\n<span class=\"nd\">@cfg_attr</span><span class=\"p\">(</span><span class=\"n\">target_os</span><span class=\"o\">=</span><span class=\"s2\">&quot;windows&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">windows_only</span><span class=\"p\">():</span>\n    <span class=\"c1\"># Do stuff with Windows&#39;s API.</span>\n    <span class=\"o\">...</span>\n\n<span class=\"c1\"># Mut be PyPy Python implementation or `RuntimeError` will be raised</span>\n<span class=\"c1\"># when creating the instance.</span>\n<span class=\"nd\">@cfg_attr</span><span class=\"p\">(</span><span class=\"n\">impl</span><span class=\"o\">=</span><span class=\"s2\">&quot;PyPy&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">Zoo</span><span class=\"p\">:</span>\n    <span class=\"nd\">@sain</span><span class=\"o\">.</span><span class=\"n\">cfg_attr</span><span class=\"p\">(</span><span class=\"n\">target_os</span><span class=\"o\">=</span><span class=\"s2\">&quot;linux&quot;</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">bark</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">windows_only</span><span class=\"p\">()</span>  <span class=\"c1\"># RuntimeError(&quot;Windows OS only!)</span>\n\n<span class=\"c1\"># An instance will not be created if raised.</span>\n<span class=\"n\">zoo</span> <span class=\"o\">=</span> <span class=\"n\">Zoo</span><span class=\"p\">()</span>\n<span class=\"c1\"># RuntimeError(&quot;class Zoo requires PyPy implementation&quot;)</span>\n<span class=\"n\">zoo</span><span class=\"o\">.</span><span class=\"n\">bark</span><span class=\"p\">()</span>\n<span class=\"c1\"># Whats zoo??</span>\n</code></pre>\n</div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>target_os</strong> (<code>str | None</code>):\nThe targeted operating system thats required for the object.</li>\n<li><strong>python_version</strong> (<code>tuple[int, int, int] | None</code>):\nThe targeted Python version thats required for the object. Format must be <code>(3, 9, 5)</code>.</li>\n<li><strong>target_arch</strong> (<code>str | None</code>):\nThe CPU targeted architecture thats required for the object.</li>\n<li><strong>impl</strong> (<code>str | None</code>):\nThe Python implementation thats required for the object.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong><code>RuntimeError</code></strong>: This fails if any of the attributes returns <code>False</code>.</li>\n<li><strong><code>ValueError</code></strong>: If the passed Python implementation is unknown.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">requires</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"bp\">Ellipsis</span>,</span><span class=\"param\">\t<span class=\"n\">target_os</span><span class=\"p\">:</span> <span class=\"n\">System</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"bp\">Ellipsis</span>,</span><span class=\"param\">\t<span class=\"n\">python_version</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"bp\">Ellipsis</span>,</span><span class=\"param\">\t<span class=\"n\">target_arch</span><span class=\"p\">:</span> <span class=\"n\">Arch</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"bp\">Ellipsis</span>,</span><span class=\"param\">\t<span class=\"n\">impl</span><span class=\"p\">:</span> <span class=\"n\">Python</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"bp\">Ellipsis</span></span><span class=\"return-annotation\">) -> <span class=\"s1\">&#39;Callable[[F], F]&#39;</span>:</span></span>", "funcdef": "def"}, "sain.cfg.cfg": {"fullname": "sain.cfg.cfg", "modulename": "sain.cfg", "qualname": "cfg", "kind": "function", "doc": "<p>A function that will run the code only if all predicate attributes returns <code>True</code>.</p>\n\n<p>The difference between this function and <code>cfg_attr</code> is that this function will not raise an exception.\nInstead it will return <code>False</code> if any of the attributes fails.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">sain</span>\n\n<span class=\"k\">if</span> <span class=\"n\">cfg</span><span class=\"p\">(</span><span class=\"n\">target_os</span><span class=\"o\">=</span><span class=\"s2\">&quot;windows&quot;</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Windows&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">elif</span> <span class=\"n\">cfg</span><span class=\"p\">(</span><span class=\"n\">target_os</span><span class=\"o\">=</span><span class=\"s2\">&quot;linux&quot;</span><span class=\"p\">,</span> <span class=\"n\">target_arch</span><span class=\"o\">=</span><span class=\"s2\">&quot;arm64&quot;</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Linux&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Something else&quot;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>target_os</strong> (<code>str | None</code>):\nThe targeted operating system thats required for the object to be ran.</li>\n<li><strong>python_version</strong> (<code>tuple[int, int, int] | None</code>):\nThe targeted Python version thats required for the object to be ran. Format must be `(3, 9, 5)``</li>\n<li><strong>target_arch</strong> (<code>str | None</code>):\nThe CPU targeted architecture thats required for the object to be ran.</li>\n<li><strong>impl</strong> (<code>str | None</code>):\nThe Python implementation thats required for the object to be ran.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong><code>bool</code></strong>: The condition that was checked.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">target_os</span><span class=\"p\">:</span> <span class=\"n\">System</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"bp\">Ellipsis</span>,</span><span class=\"param\">\t<span class=\"n\">requires</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"bp\">Ellipsis</span>,</span><span class=\"param\">\t<span class=\"n\">python_version</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"bp\">Ellipsis</span>,</span><span class=\"param\">\t<span class=\"n\">target_arch</span><span class=\"p\">:</span> <span class=\"n\">Arch</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"bp\">Ellipsis</span>,</span><span class=\"param\">\t<span class=\"n\">impl</span><span class=\"p\">:</span> <span class=\"n\">Python</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"bp\">Ellipsis</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "sain.collections": {"fullname": "sain.collections", "modulename": "sain.collections", "kind": "module", "doc": "<p>Dynamically growable collections and containers.</p>\n\n<p>These collections are basic implementations of Rust's standard collections crate. from under the hood, they're an extended\nand more rich implementations of the built-in sequences such as <code>list</code> and <code>bytearray</code>.</p>\n\n<h3 id=\"when-should-you-use-which-collection\">When Should You Use Which Collection?</h3>\n\n<p>This question's answer should be pretty straightforward.</p>\n\n<ul>\n<li>Use <code>Vec</code> when you want to replace <code>list</code></li>\n<li>Use <code>Bytes</code> when you want to replace <code>bytearray</code> or <code>bytes</code> or in general, you want to store bytes in memory,\nthen perform conversions into other types.</li>\n</ul>\n"}, "sain.collections.Vec": {"fullname": "sain.collections.Vec", "modulename": "sain.collections", "qualname": "Vec", "kind": "class", "doc": "<p>A contiguous growable alternative to builtin <code>list</code> with extra functionalities.</p>\n\n<p>The layout of <code>Vec</code> is almost the same as <code>list</code>.</p>\n\n<p>When initializing a vec, it will not build the underlying list until the first element gets pushed.\nWhich saves a little bit of memory.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">names</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">()</span>\n<span class=\"n\">names</span><span class=\"o\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"s1\">&#39;foo&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">names</span><span class=\"o\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"s1\">&#39;bar&#39;</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">names</span><span class=\"p\">)</span> <span class=\"c1\"># [&#39;foo&#39;, &#39;bar&#39;]</span>\n<span class=\"k\">assert</span> <span class=\"n\">names</span><span class=\"o\">.</span><span class=\"n\">len</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">2</span>\n</code></pre>\n</div>\n\n<h6 id=\"constructing\">Constructing</h6>\n\n<ul>\n<li><code>Vec()</code>: Create an unallocated vec, Which means the underlying list will be <code>None</code> until you start pushing into it</li>\n<li><code>Vec(other_list)</code>: Create a vec which points to <code>other_list</code></li>\n<li><code>Vec((1, 2, 3))</code>: Create a vec with <code>[1, 2, 3]</code> pre-allocated</li>\n<li><code>Vec.with_capacity(5)</code>: Create a vec that can hold up to 5 elements</li>\n<li><code>from_args(1, 2, 3)</code>: Create a vec from arguments. This is not a classmethod</li>\n</ul>\n\n<h2 id=\"iterating-over-vec\">Iterating over <code>Vec</code></h2>\n\n<p>There're two ways to iterate over a <code>Vec</code>. The first is to normally use <code>for</code> loop.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">names</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># foo</span>\n<span class=\"c1\"># bar</span>\n</code></pre>\n</div>\n\n<p>The second is to use <code>Vec.iter</code>, which yields all items in this <code>Vec</code> from start to end.\nThen the iterator gets exhausted as usual, See <code>sain.Iterator</code>.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">names</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"p\">()</span>\n<span class=\"k\">for</span> <span class=\"n\">name</span> <span class=\"ow\">in</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"o\">.</span><span class=\"n\">upper</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># FOO</span>\n<span class=\"c1\"># BAR</span>\n\n<span class=\"c1\"># No more items, The actual vec is left unchanged.</span>\n<span class=\"k\">assert</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">next</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">is_none</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n\n<h2 id=\"comparison-operators\">Comparison operators</h2>\n\n<p>Comparing different collections with <code>Vec</code> have a cost. Depending on what you're comparing it wit.</p>\n\n<p>Any iterable that is not a <code>list</code> or <code>Vec</code> that is used to compare with will get copied into a <code>list</code>,\nSo be careful what you compare a <code>Vec</code> with.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"c1\"># zero-cost</span>\n<span class=\"n\">vec</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"c1\"># Copies {1, 2, 3} -&gt; [1, 2, 3] which can cost.</span>\n<span class=\"n\">vec</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">}</span>\n</code></pre>\n</div>\n\n<h2 id=\"zero-copy\">Zero-Copy</h2>\n\n<p>A vec that gets initialized from a <code>list</code> will <em>point</em> to it and doesn't copy it.\nSo any element that gets appended to the collection will also get pushed into the vec.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">cells</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">(</span><span class=\"n\">cells</span><span class=\"p\">)</span> <span class=\"c1\"># This DOES NOT copy the `cells`.</span>\n\n<span class=\"n\">cells</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;foo&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">vec</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;foo&quot;</span>  <span class=\"c1\"># True</span>\n</code></pre>\n</div>\n\n<p>The opposite of the above is to initialize the vec from either\nan iterable or args, or copy the list.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"c1\"># Creates a new vec and extend it with the elements.</span>\n<span class=\"n\">from_args</span> <span class=\"o\">=</span> <span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">from_args</span><span class=\"p\">(</span><span class=\"s2\">&quot;foo&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;bar&quot;</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># inlined from another iterable.</span>\n<span class=\"n\">from_iter</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">([</span><span class=\"s2\">&quot;foo&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;bar&quot;</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># Copy the list into a vec.</span>\n<span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">(</span><span class=\"n\">cells</span><span class=\"p\">[:])</span>\n<span class=\"n\">cells</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;bar&quot;</span><span class=\"p\">)</span>\n\n<span class=\"n\">vec</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"c1\"># IndexError: &quot;bar&quot; doesn&#39;t exist in vec.</span>\n</code></pre>\n</div>\n", "bases": "typing.Generic[~T]"}, "sain.collections.Vec.__init__": {"fullname": "sain.collections.Vec.__init__", "modulename": "sain.collections", "qualname": "Vec.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">iterable</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, "sain.collections.Vec.with_capacity": {"fullname": "sain.collections.Vec.with_capacity", "modulename": "sain.collections", "qualname": "Vec.with_capacity", "kind": "function", "doc": "<p>Create a new <code>Vec</code> with at least the specified capacity.\nThis vec will be able to hold <code>capacity</code> elements without pushing further.</p>\n\n<p>Check out <code>Vec.push_within_capacity</code> as well.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"o\">.</span><span class=\"n\">with_capacity</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">len</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"ow\">and</span> <span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">capacity</span><span class=\"p\">()</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">3</span>\n\n<span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">len</span><span class=\"p\">())</span> <span class=\"c1\"># 3</span>\n\n<span class=\"c1\"># This won&#39;t push.</span>\n<span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">capacity</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"s1\">&#39;Self&#39;</span>:</span></span>", "funcdef": "def"}, "sain.collections.Vec.as_ref": {"fullname": "sain.collections.Vec.as_ref", "modulename": "sain.collections", "qualname": "Vec.as_ref", "kind": "function", "doc": "<p>Return an immutable view over this vector elements.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">as_ref</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Collection</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.collections.Vec.len": {"fullname": "sain.collections.Vec.len", "modulename": "sain.collections", "qualname": "Vec.len", "kind": "function", "doc": "<p>Return the number of elements in this vector.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">len</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">3</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "sain.collections.Vec.capacity": {"fullname": "sain.collections.Vec.capacity", "modulename": "sain.collections", "qualname": "Vec.capacity", "kind": "function", "doc": "<p>Return the capacity of this vector if set. 0 if not .</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec_with_cap</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"o\">.</span><span class=\"n\">with_capacity</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">vec_with_cap</span><span class=\"o\">.</span><span class=\"n\">capacity</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">unwrap</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">3</span>\n\n<span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"k\">assert</span> <span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">capacity</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">is_none</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "sain.collections.Vec.iter": {"fullname": "sain.collections.Vec.iter", "modulename": "sain.collections", "qualname": "Vec.iter", "kind": "function", "doc": "<p>Return an iterator over this vector elements.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Map each element to a str</span>\n<span class=\"k\">for</span> <span class=\"n\">element</span> <span class=\"ow\">in</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">element</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"o\">.</span><span class=\"n\">Iterator</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.collections.Vec.is_empty": {"fullname": "sain.collections.Vec.is_empty", "modulename": "sain.collections", "qualname": "Vec.is_empty", "kind": "function", "doc": "<p>Returns true if the vector contains no elements.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "sain.collections.Vec.split_off": {"fullname": "sain.collections.Vec.split_off", "modulename": "sain.collections", "qualname": "Vec.split_off", "kind": "function", "doc": "<p>Split the vector off at the specified position.</p>\n\n<p>if this vec is empty, <code>self</code> is returned unchanged.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"n\">split</span> <span class=\"o\">=</span> <span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">split_off</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">split</span><span class=\"p\">,</span> <span class=\"n\">vec</span><span class=\"p\">)</span>  <span class=\"c1\"># [1], [2, 3]</span>\n</code></pre>\n</div>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong><code>RuntimeError</code></strong>: This method will raise if <code>at</code> &gt; <code>len(self)</code></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">at</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">Vec</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.collections.Vec.split_first": {"fullname": "sain.collections.Vec.split_first", "modulename": "sain.collections", "qualname": "Vec.split_first", "kind": "function", "doc": "<p>Split the first and rest elements of the vector, If empty, <code>Some[None]</code> is returned.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"n\">split</span> <span class=\"o\">=</span> <span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">split_first</span><span class=\"p\">()</span>\n<span class=\"k\">assert</span> <span class=\"n\">split</span> <span class=\"o\">==</span> <span class=\"n\">Some</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]))</span>\n\n<span class=\"n\">vec</span><span class=\"p\">:</span> <span class=\"n\">Vec</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">()</span>\n<span class=\"n\">split</span> <span class=\"o\">=</span> <span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">split_first</span><span class=\"p\">()</span>\n<span class=\"k\">assert</span> <span class=\"n\">split</span> <span class=\"o\">==</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">option</span><span class=\"o\">.</span><span class=\"n\">Some</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]]]</span>:</span></span>", "funcdef": "def"}, "sain.collections.Vec.first": {"fullname": "sain.collections.Vec.first", "modulename": "sain.collections", "qualname": "Vec.first", "kind": "function", "doc": "<p>Get the first element in this vec, returning <code>Some[None]</code> if there's none.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"n\">first</span> <span class=\"o\">=</span> <span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">first</span><span class=\"p\">()</span>\n<span class=\"k\">assert</span> <span class=\"o\">~</span><span class=\"n\">first</span> <span class=\"o\">==</span> <span class=\"mi\">1</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">option</span><span class=\"o\">.</span><span class=\"n\">Some</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.collections.Vec.truncate": {"fullname": "sain.collections.Vec.truncate", "modulename": "sain.collections", "qualname": "Vec.truncate", "kind": "function", "doc": "<p>Shortens the vec, keeping the first <code>size</code> elements and dropping the rest.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">truncate</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">vec</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">size</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "sain.collections.Vec.retain": {"fullname": "sain.collections.Vec.retain", "modulename": "sain.collections", "qualname": "Vec.retain", "kind": "function", "doc": "<p>Remove elements from this vec while <code>f()</code> returns <code>True</code>.</p>\n\n<p>In other words, filter this vector based on <code>f()</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">retain</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">elem</span><span class=\"p\">:</span> <span class=\"n\">elem</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">vec</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "sain.collections.Vec.swap_remove": {"fullname": "sain.collections.Vec.swap_remove", "modulename": "sain.collections", "qualname": "Vec.swap_remove", "kind": "function", "doc": "<p>Remove the first appearance of <code>item</code> from this vector and return it.</p>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><p><strong>* <code>ValueError</code></strong> (if <code>item</code> is not in this vector.):</p></li>\n<li><p><strong>* <code>MemoryError</code></strong> (if this vector hasn't allocated, Aka nothing has been pushed to it.):</p></li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vector</span><span class=\"p\">((</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">))</span>\n<span class=\"n\">element</span> <span class=\"o\">=</span> <span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">vec</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span> <span class=\"ow\">and</span> <span class=\"n\">element</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;a&#39;</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">T</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">T</span>:</span></span>", "funcdef": "def"}, "sain.collections.Vec.push": {"fullname": "sain.collections.Vec.push", "modulename": "sain.collections", "qualname": "Vec.push", "kind": "function", "doc": "<p>Push an element at the end of the vector.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">()</span>\n<span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">vec</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">T</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "sain.collections.Vec.push_within_capacity": {"fullname": "sain.collections.Vec.push_within_capacity", "modulename": "sain.collections", "qualname": "Vec.push_within_capacity", "kind": "function", "doc": "<p>Appends an element if there is sufficient spare capacity, otherwise an error is returned with the element.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span><span class=\"p\">:</span> <span class=\"n\">Vec</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"o\">.</span><span class=\"n\">with_capacity</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">):</span>\n    <span class=\"k\">match</span> <span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">push_within_capacity</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">):</span>\n        <span class=\"k\">case</span><span class=\"w\"> </span><span class=\"n\">Ok</span><span class=\"p\">(</span><span class=\"k\">_</span><span class=\"p\">):</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;All good.&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">case</span> <span class=\"n\">Err</span><span class=\"p\">(</span><span class=\"n\">elem</span><span class=\"p\">):</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Reached max cap :&lt; cant push&quot;</span><span class=\"p\">,</span> <span class=\"n\">elem</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>Or you can also just call <code>Vec.push</code> and it will push within capacity if <code>Vec.capacity()</code> is not <code>None</code>.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span><span class=\"p\">:</span> <span class=\"n\">Vec</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"o\">.</span><span class=\"n\">with_capacity</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n\n<span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">len</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">3</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">T</span></span><span class=\"return-annotation\">) -> <span class=\"s1\">&#39;Result[None, T]&#39;</span>:</span></span>", "funcdef": "def"}, "sain.collections.Vec.reserve": {"fullname": "sain.collections.Vec.reserve", "modulename": "sain.collections", "qualname": "Vec.reserve", "kind": "function", "doc": "<p>Reserves capacity for at least additional more elements to be inserted in the given Vec<T>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"o\">.</span><span class=\"n\">with_capacity</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">is_vip</span> <span class=\"o\">=</span> <span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">choice</span><span class=\"p\">((</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">))</span>\n\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">):</span>\n    <span class=\"k\">match</span> <span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">push_within_capacity</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">):</span>\n        <span class=\"k\">case</span><span class=\"w\"> </span><span class=\"n\">Ok</span><span class=\"p\">(</span><span class=\"k\">_</span><span class=\"p\">):</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;All good&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">case</span> <span class=\"n\">Err</span><span class=\"p\">(</span><span class=\"n\">person</span><span class=\"p\">):</span>\n            <span class=\"c1\"># If the person is a VIP, then reserve for one more.</span>\n            <span class=\"k\">if</span> <span class=\"n\">is_vip</span><span class=\"p\">:</span>\n                <span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">reserve</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n                <span class=\"k\">continue</span>\n\n            <span class=\"c1\"># is_vip was false.</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Can&#39;t reserve for non-VIP members...&quot;</span><span class=\"p\">,</span> <span class=\"n\">person</span><span class=\"p\">)</span>\n            <span class=\"k\">break</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">additional</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "sain.collections.Vec.append": {"fullname": "sain.collections.Vec.append", "modulename": "sain.collections", "qualname": "Vec.append", "kind": "function", "doc": "<p>An alias for <code>Vec.push</code> method.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">T</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "sain.collections.Vec.get": {"fullname": "sain.collections.Vec.get", "modulename": "sain.collections", "qualname": "Vec.get", "kind": "function", "doc": "<p>Get the item at the given index, or <code>Some[None]</code> if its out of bounds.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">index</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">option</span><span class=\"o\">.</span><span class=\"n\">Some</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.collections.Vec.insert": {"fullname": "sain.collections.Vec.insert", "modulename": "sain.collections", "qualname": "Vec.insert", "kind": "function", "doc": "<p>Insert an element at the position <code>index</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">((</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">vec</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">index</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">T</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "sain.collections.Vec.pop": {"fullname": "sain.collections.Vec.pop", "modulename": "sain.collections", "qualname": "Vec.pop", "kind": "function", "doc": "<p>Removes the last element from a vector and returns it, or <code>sain.Some(None)</code> if it is empty.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"k\">assert</span> <span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">vec</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">index</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">option</span><span class=\"o\">.</span><span class=\"n\">Some</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.collections.Vec.remove": {"fullname": "sain.collections.Vec.remove", "modulename": "sain.collections", "qualname": "Vec.remove", "kind": "function", "doc": "<p>Remove <code>item</code> from this vector.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vector</span><span class=\"p\">((</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">))</span>\n<span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">vec</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">T</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "sain.collections.Vec.extend": {"fullname": "sain.collections.Vec.extend", "modulename": "sain.collections", "qualname": "Vec.extend", "kind": "function", "doc": "<p>Extend this vector from another iterable.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">((</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">))</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">vec</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">iterable</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "sain.collections.Vec.copy": {"fullname": "sain.collections.Vec.copy", "modulename": "sain.collections", "qualname": "Vec.copy", "kind": "function", "doc": "<p>Create a vector that copies all of its elements and place it into the new one.</p>\n\n<p>If the vector hasn't been allocated, <code>self</code> is returned.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">original</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"n\">copy</span> <span class=\"o\">=</span> <span class=\"n\">original</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n<span class=\"n\">copy</span><span class=\"o\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">original</span><span class=\"p\">)</span> <span class=\"c1\"># [1, 2, 3]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">Vec</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.collections.Vec.clear": {"fullname": "sain.collections.Vec.clear", "modulename": "sain.collections", "qualname": "Vec.clear", "kind": "function", "doc": "<p>Clear all elements of this vector.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">clear</span><span class=\"p\">()</span>\n<span class=\"k\">assert</span> <span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">len</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">0</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "sain.collections.Vec.sort": {"fullname": "sain.collections.Vec.sort", "modulename": "sain.collections", "qualname": "Vec.sort", "kind": "function", "doc": "<p>This method sorts the list in place, using only &lt; comparisons between items.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">((</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">sort</span><span class=\"p\">()</span>\n<span class=\"k\">assert</span> <span class=\"n\">vec</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"s1\">&#39;collections.Callable[[T], SupportsRichComparison] | None&#39;</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">reverse</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "sain.collections.Vec.index": {"fullname": "sain.collections.Vec.index", "modulename": "sain.collections", "qualname": "Vec.index", "kind": "function", "doc": "<p>Return zero-based index in the vec of the first item whose value is equal to <code>item</code>.\nRaises a ValueError if there is no such item.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"k\">assert</span> <span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">T</span>,</span><span class=\"param\">\tstart: &lt;class &#x27;SupportsIndex&#x27;&gt; = 0,</span><span class=\"param\">\t<span class=\"n\">end</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">9223372036854775807</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "sain.collections.Vec.count": {"fullname": "sain.collections.Vec.count", "modulename": "sain.collections", "qualname": "Vec.count", "kind": "function", "doc": "<p>Return the number of occurrences of <code>item</code> in the vec.</p>\n\n<p><code>0</code> is returned if the vector is empty or hasn't been initialized, as well if them item not found.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"k\">assert</span> <span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">2</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">T</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "sain.collections.Bytes": {"fullname": "sain.collections.Bytes", "modulename": "sain.collections", "qualname": "Bytes", "kind": "class", "doc": "<p>Provides abstractions for working with UTF-8 compatible bytes.</p>\n\n<p>It is an efficient container for storing and operating with bytes.\nIt behaves very much like <code>array.array[int]</code> as well has the same layout.</p>\n\n<p>A <code>Bytes</code> objects are usually used within networking applications, but can also be used\nelsewhere as well.</p>\n\n<h6 id=\"construction\">Construction</h6>\n\n<p><code>Bytes</code> object accept multiple rawish data types, See <code>Rawish</code> for all supported types.</p>\n\n<ul>\n<li><code>Bytes()</code>: Initialize an empty <code>Bytes</code> object</li>\n<li><code>from_str</code>: Create <code>Bytes</code> from <code>str</code></li>\n<li><code>from_bytes</code>: Create <code>Bytes</code> from a <code>Buffer</code> type</li>\n<li><code>from_raw</code>: Create <code>Bytes</code> from a <code>Rawish</code> type</li>\n<li><code>from_static</code>: Create <code>Bytes</code> that points to an <code>array.array[int]</code> without copying it</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">sain</span> <span class=\"kn\">import</span> <span class=\"n\">Bytes</span>\n\n<span class=\"n\">buf</span> <span class=\"o\">=</span> <span class=\"n\">Bytes</span><span class=\"p\">()</span>\n<span class=\"n\">buffer</span><span class=\"o\">.</span><span class=\"n\">put_bytes</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s2\">&quot;Hello&quot;</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">buffer</span><span class=\"p\">)</span> <span class=\"c1\"># [72, 101, 108, 108, 111]</span>\n\n<span class=\"n\">buf</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"mi\">1234</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">buffer</span><span class=\"o\">.</span><span class=\"n\">as_bytes</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"sa\">b</span><span class=\"s2\">&quot;Hello\u0004\u00d2&quot;</span>\n</code></pre>\n</div>\n"}, "sain.collections.Bytes.__init__": {"fullname": "sain.collections.Bytes.__init__", "modulename": "sain.collections", "qualname": "Bytes.__init__", "kind": "function", "doc": "<p>Creates a new empty <code>Bytes</code>.</p>\n\n<p>This won't allocate the array and the returned <code>Bytes</code> will be empty.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, "sain.collections.Bytes.from_str": {"fullname": "sain.collections.Bytes.from_str", "modulename": "sain.collections", "qualname": "Bytes.from_str", "kind": "function", "doc": "<p>Create a new <code>Bytes</code> from a string with the given encoding.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">buffer</span> <span class=\"o\">=</span> <span class=\"n\">Bytes</span><span class=\"o\">.</span><span class=\"n\">from_str</span><span class=\"p\">(</span><span class=\"s2\">&quot;\ud83d\udc80&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">buffer</span><span class=\"o\">.</span><span class=\"n\">as_ref</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"mi\">240</span><span class=\"p\">,</span> <span class=\"mi\">159</span><span class=\"p\">,</span> <span class=\"mi\">146</span><span class=\"p\">,</span> <span class=\"mi\">128</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">s</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Self</span>:</span></span>", "funcdef": "def"}, "sain.collections.Bytes.from_static": {"fullname": "sain.collections.Bytes.from_static", "modulename": "sain.collections", "qualname": "Bytes.from_static", "kind": "function", "doc": "<p>Create a new <code>Bytes</code> from an array.</p>\n\n<p>The returned <code>Bytes</code> will directly point to <code>arr</code> without copying.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">arr</span> <span class=\"o\">=</span> <span class=\"n\">array</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"s2\">&quot;B&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">buffer</span> <span class=\"o\">=</span> <span class=\"n\">Bytes</span><span class=\"o\">.</span><span class=\"n\">from_static</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">arr</span><span class=\"p\">:</span> <span class=\"n\">array</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Self</span>:</span></span>", "funcdef": "def"}, "sain.collections.Bytes.from_bytes": {"fullname": "sain.collections.Bytes.from_bytes", "modulename": "sain.collections", "qualname": "Bytes.from_bytes", "kind": "function", "doc": "<p>Create a new <code>Bytes</code> from an initial bytes.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">arr</span> <span class=\"o\">=</span> <span class=\"n\">array</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"s2\">&quot;B&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">buffer</span> <span class=\"o\">=</span> <span class=\"n\">Bytes</span><span class=\"o\">.</span><span class=\"n\">from_bytes</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s2\">&quot;SIGNATURE&quot;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">buf</span><span class=\"p\">:</span> <span class=\"nb\">bytes</span> <span class=\"o\">|</span> <span class=\"nb\">bytearray</span> <span class=\"o\">|</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Self</span>:</span></span>", "funcdef": "def"}, "sain.collections.Bytes.from_raw": {"fullname": "sain.collections.Bytes.from_raw", "modulename": "sain.collections", "qualname": "Bytes.from_raw", "kind": "function", "doc": "<p>Initialize a new <code>Bytes</code> in-place from a valid raw data type.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">&#39;file.txt&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rb&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">file</span><span class=\"p\">:</span>\n    <span class=\"n\">buff</span> <span class=\"o\">=</span> <span class=\"n\">Bytes</span><span class=\"o\">.</span><span class=\"n\">from_raw</span><span class=\"p\">(</span><span class=\"n\">file</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># in memory bytes io</span>\n<span class=\"n\">bytes_io</span> <span class=\"o\">=</span> <span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">BytesIO</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s2\">&quot;data&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">buffer1</span> <span class=\"o\">=</span> <span class=\"n\">Bytes</span><span class=\"o\">.</span><span class=\"n\">from_raw</span><span class=\"p\">(</span><span class=\"n\">bytes_io</span><span class=\"p\">)</span>\n<span class=\"c1\"># in memory string io</span>\n<span class=\"n\">string_io</span> <span class=\"o\">=</span> <span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">StringIO</span><span class=\"p\">(</span><span class=\"s2\">&quot;data&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">buffer2</span> <span class=\"o\">=</span> <span class=\"n\">Bytes</span><span class=\"o\">.</span><span class=\"n\">from_raw</span><span class=\"p\">(</span><span class=\"n\">string_io</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong><code>ValueError</code></strong>: If <code>raw</code> contains a byte not in range <code>0..256</code></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">raw</span><span class=\"p\">:</span> <span class=\"n\">_io</span><span class=\"o\">.</span><span class=\"n\">StringIO</span> <span class=\"o\">|</span> <span class=\"n\">_io</span><span class=\"o\">.</span><span class=\"n\">BytesIO</span> <span class=\"o\">|</span> <span class=\"n\">_io</span><span class=\"o\">.</span><span class=\"n\">BufferedReader</span> <span class=\"o\">|</span> <span class=\"nb\">memoryview</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Self</span>:</span></span>", "funcdef": "def"}, "sain.collections.Bytes.try_to_str": {"fullname": "sain.collections.Bytes.try_to_str", "modulename": "sain.collections", "qualname": "Bytes.try_to_str", "kind": "function", "doc": "<p>A safe method to convert <code>self</code> into a string.</p>\n\n<p>This may fail if the <code>self</code> contains invalid bytes. strings\nneeds to be valid utf-8.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">buf</span> <span class=\"o\">=</span> <span class=\"n\">Bytes</span><span class=\"p\">()</span>\n<span class=\"n\">sparkles_heart</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">240</span><span class=\"p\">,</span> <span class=\"mi\">159</span><span class=\"p\">,</span> <span class=\"mi\">146</span><span class=\"p\">,</span> <span class=\"mi\">150</span><span class=\"p\">]</span>\n<span class=\"n\">buf</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"n\">sparkles_heart</span><span class=\"p\">)</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">buf</span><span class=\"o\">.</span><span class=\"n\">try_to_str</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">unwrap</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;\ud83d\udc96&quot;</span>\n</code></pre>\n</div>\n\n<h6 id=\"incorrect-bytes\">Incorrect bytes</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">invalid_bytes</span> <span class=\"o\">=</span> <span class=\"n\">Bytes</span><span class=\"o\">.</span><span class=\"n\">from_raw</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">159</span><span class=\"p\">,</span> <span class=\"mi\">146</span><span class=\"p\">,</span> <span class=\"mi\">150</span><span class=\"p\">])</span>\n<span class=\"n\">invalid_bytes</span><span class=\"o\">.</span><span class=\"n\">try_to_str</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">is_err</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong><code>Result[str, bytes]</code></strong>: If successful, returns the decoded string, otherwise the original bytes that failed\nto get decoded.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">Ok</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">Err</span><span class=\"p\">[</span><span class=\"nb\">bytes</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, "sain.collections.Bytes.to_str": {"fullname": "sain.collections.Bytes.to_str", "modulename": "sain.collections", "qualname": "Bytes.to_str", "kind": "function", "doc": "<p>Convert <code>self</code> to a utf-8 string. which may or may not be expensive.</p>\n\n<p>During the conversion process, any invalid bytes will get converted to\n<a href=\"https://en.wikipedia.org/wiki/Specials_(Unicode_block)\">REPLACEMENT_CHARACTER</a>\nwhich looks like this <code>\ufffd</code>, so be carful on what you're trying to convert.</p>\n\n<p>Use <code>.try_to_str</code> try attempt the conversion incase of failure.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">buff</span> <span class=\"o\">=</span> <span class=\"n\">Bytes</span><span class=\"p\">()</span>\n<span class=\"n\">sparkles_heart</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">240</span><span class=\"p\">,</span> <span class=\"mi\">159</span><span class=\"p\">,</span> <span class=\"mi\">146</span><span class=\"p\">,</span> <span class=\"mi\">150</span><span class=\"p\">]</span>\n<span class=\"n\">buff</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"n\">sparkles_heart</span><span class=\"p\">)</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">buf</span><span class=\"o\">.</span><span class=\"n\">to_str</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;\ud83d\udc96&quot;</span>\n</code></pre>\n</div>\n\n<h6 id=\"incorrect-bytes\">Incorrect bytes</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">invalid_bytes</span> <span class=\"o\">=</span> <span class=\"n\">Bytes</span><span class=\"o\">.</span><span class=\"n\">from_raw</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s2\">&quot;Hello \u00f0\u0090\u0080World&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">invalid_bytes</span><span class=\"o\">.</span><span class=\"n\">to_str</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Hello \ufffdWorld&quot;</span>\n</code></pre>\n</div>\n\n<h6 id=\"unrecoverable-failures\">Unrecoverable failures</h6>\n\n<p>This method may raise <code>UnicodeDecodeError</code> if <code>self</code> contains\ninvalid bytes that cannot be decoded.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">invalid_bytes</span> <span class=\"o\">=</span> <span class=\"n\">Bytes</span><span class=\"o\">.</span><span class=\"n\">from_raw</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">159</span><span class=\"p\">,</span> <span class=\"mi\">146</span><span class=\"p\">,</span> <span class=\"mi\">150</span><span class=\"p\">])</span>\n<span class=\"n\">invalid_bytes</span><span class=\"o\">.</span><span class=\"n\">to_str</span><span class=\"p\">()</span> <span class=\"c1\"># ERROR</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "sain.collections.Bytes.leak": {"fullname": "sain.collections.Bytes.leak", "modulename": "sain.collections", "qualname": "Bytes.leak", "kind": "function", "doc": "<p>Consumes and leaks the <code>Bytes</code>, returning the underlying <code>array</code> and setting it to <code>None</code>.</p>\n\n<p><code>None</code> is returned if it was already <code>None</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"nb\">bytes</span> <span class=\"o\">=</span> <span class=\"n\">Bytes</span><span class=\"o\">.</span><span class=\"n\">from_str</span><span class=\"p\">(</span><span class=\"s2\">&quot;chunks of data&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">consumed</span> <span class=\"o\">=</span> <span class=\"nb\">bytes</span><span class=\"o\">.</span><span class=\"n\">leak</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">unwrap</span><span class=\"p\">()</span>\n\n<span class=\"k\">assert</span> <span class=\"nb\">bytes</span><span class=\"o\">.</span><span class=\"n\">is_empty</span><span class=\"p\">()</span>\n<span class=\"k\">assert</span> <span class=\"n\">consumed</span><span class=\"o\">.</span><span class=\"n\">tobytes</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"sa\">b</span><span class=\"s2\">&quot;chunks of data&quot;</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">option</span><span class=\"o\">.</span><span class=\"n\">Some</span><span class=\"p\">[</span><span class=\"n\">array</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, "sain.collections.Bytes.as_bytes": {"fullname": "sain.collections.Bytes.as_bytes", "modulename": "sain.collections", "qualname": "Bytes.as_bytes", "kind": "function", "doc": "<p>Convert <code>self</code> into <code>bytes</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">buf</span> <span class=\"o\">=</span> <span class=\"n\">Bytes</span><span class=\"o\">.</span><span class=\"n\">from_str</span><span class=\"p\">(</span><span class=\"s2\">&quot;Hello&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">buf</span><span class=\"o\">.</span><span class=\"n\">as_bytes</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"sa\">b</span><span class=\"s1\">&#39;Hello&#39;</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bytes</span>:</span></span>", "funcdef": "def"}, "sain.collections.Bytes.as_ref": {"fullname": "sain.collections.Bytes.as_ref", "modulename": "sain.collections", "qualname": "Bytes.as_ref", "kind": "function", "doc": "<p>Convert <code>self</code> into an immutable sequence.</p>\n\n<p>An empty sequence is returned if <code>self</code> hasn't been initialized.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">buff</span> <span class=\"o\">=</span> <span class=\"n\">Bytes</span><span class=\"o\">.</span><span class=\"n\">from_str</span><span class=\"p\">(</span><span class=\"s2\">&quot;Hello&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">buff</span><span class=\"o\">.</span><span class=\"n\">as_ref</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"mi\">72</span><span class=\"p\">,</span> <span class=\"mi\">101</span><span class=\"p\">,</span> <span class=\"mi\">108</span><span class=\"p\">,</span> <span class=\"mi\">108</span><span class=\"p\">,</span> <span class=\"mi\">111</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.collections.Bytes.as_mut": {"fullname": "sain.collections.Bytes.as_mut", "modulename": "sain.collections", "qualname": "Bytes.as_mut", "kind": "function", "doc": "<p>Return <code>self</code> as a mutable sequence without copying.</p>\n\n<p>An empty sequence is returned if <code>self</code> hasn't been initialized.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">buff</span> <span class=\"o\">=</span> <span class=\"n\">Bytes</span><span class=\"o\">.</span><span class=\"n\">from_str</span><span class=\"p\">(</span><span class=\"s2\">&quot;Hello&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">buff</span><span class=\"o\">.</span><span class=\"n\">as_mut</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"mi\">72</span><span class=\"p\">,</span> <span class=\"mi\">101</span><span class=\"p\">,</span> <span class=\"mi\">108</span><span class=\"p\">,</span> <span class=\"mi\">108</span><span class=\"p\">,</span> <span class=\"mi\">111</span><span class=\"p\">]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">MutableSequence</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.collections.Bytes.raw_parts": {"fullname": "sain.collections.Bytes.raw_parts", "modulename": "sain.collections", "qualname": "Bytes.raw_parts", "kind": "function", "doc": "<p>Return <code>self</code> as tuple containing the memory address to the buffer and how many bytes it currently contains</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Annotated</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"s1\">&#39;address&#39;</span><span class=\"p\">],</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Annotated</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"s1\">&#39;len&#39;</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, "sain.collections.Bytes.put": {"fullname": "sain.collections.Bytes.put", "modulename": "sain.collections", "qualname": "Bytes.put", "kind": "function", "doc": "<p>Append a byte at the end of the array.</p>\n\n<p>unlike <code>.put_bytes</code>, this method appends instead of extending the array\nwhich is faster if you're putting a single byte in a single call.</p>\n\n<p>if <code>self</code> hasn't been initialized, the array will allocate along with the byte.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">buf</span> <span class=\"o\">=</span> <span class=\"n\">Bytes</span><span class=\"p\">()</span>\n<span class=\"n\">buf</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"mi\">32</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">buf</span><span class=\"o\">.</span><span class=\"n\">as_bytes</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"sa\">b</span><span class=\"s1\">&#39; &#39;</span>\n</code></pre>\n</div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>src</strong> (<code>int</code>):\nAn unsigned integer, also known as <code>u8</code> to put.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong><code>OverflowError</code></strong>: If a byte in <code>src</code> not in range 0..=255</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">src</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "sain.collections.Bytes.put_raw": {"fullname": "sain.collections.Bytes.put_raw", "modulename": "sain.collections", "qualname": "Bytes.put_raw", "kind": "function", "doc": "<p>Extend <code>self</code> from a raw data type source.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">buffer</span> <span class=\"o\">=</span> <span class=\"n\">Bytes</span><span class=\"p\">()</span>\n<span class=\"c1\"># A file descriptor&#39;s contents</span>\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">&#39;file.txt&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rb&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">file</span><span class=\"p\">:</span>\n    <span class=\"n\">buffer</span><span class=\"o\">.</span><span class=\"n\">put_raw</span><span class=\"p\">(</span><span class=\"n\">file</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># bytes io</span>\n<span class=\"n\">buffer</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">BytesIO</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s2\">&quot;data&quot;</span><span class=\"p\">))</span>\n<span class=\"c1\"># string io</span>\n<span class=\"n\">buffer</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">StringIO</span><span class=\"p\">(</span><span class=\"s2\">&quot;data&quot;</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>src</strong> (<code>Rawish</code>):\nA valid raw data type. See <code>Rawish</code> for more details.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong><code>OverflowError</code></strong>: If a byte in <code>src</code> is greater than <code>u8-&gt;MAX</code> which is 255.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">src</span><span class=\"p\">:</span> <span class=\"n\">_io</span><span class=\"o\">.</span><span class=\"n\">StringIO</span> <span class=\"o\">|</span> <span class=\"n\">_io</span><span class=\"o\">.</span><span class=\"n\">BytesIO</span> <span class=\"o\">|</span> <span class=\"n\">_io</span><span class=\"o\">.</span><span class=\"n\">BufferedReader</span> <span class=\"o\">|</span> <span class=\"nb\">memoryview</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "sain.collections.Bytes.put_bytes": {"fullname": "sain.collections.Bytes.put_bytes", "modulename": "sain.collections", "qualname": "Bytes.put_bytes", "kind": "function", "doc": "<p>Put <code>bytes</code> into <code>self</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">buf</span> <span class=\"o\">=</span> <span class=\"n\">Bytes</span><span class=\"o\">.</span><span class=\"n\">from_bytes</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s2\">&quot;hello&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">buf</span><span class=\"o\">.</span><span class=\"n\">put_bytes</span><span class=\"p\">([</span><span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"mi\">119</span><span class=\"p\">,</span> <span class=\"mi\">111</span><span class=\"p\">,</span> <span class=\"mi\">114</span><span class=\"p\">,</span> <span class=\"mi\">108</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">])</span>\n<span class=\"k\">assert</span> <span class=\"n\">buf</span><span class=\"o\">.</span><span class=\"n\">to_str</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;hello world&quot;</span>\n</code></pre>\n</div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>src</strong> (<code>Buffer</code>):\nCan be one of <code>Bytes</code>, <code>bytes</code>, <code>bytearray</code> or <code>Sequence[int]</code></li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong><code>OverflowError</code></strong>: If a byte in <code>src</code> is greater than <code>u8-&gt;MAX</code> which is 255.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">src</span><span class=\"p\">:</span> <span class=\"nb\">bytes</span> <span class=\"o\">|</span> <span class=\"nb\">bytearray</span> <span class=\"o\">|</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "sain.collections.Bytes.put_str": {"fullname": "sain.collections.Bytes.put_str", "modulename": "sain.collections", "qualname": "Bytes.put_str", "kind": "function", "doc": "<p>Put bytes into <code>self</code> from an encoded string.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">buffer</span> <span class=\"o\">=</span> <span class=\"n\">Bytes</span><span class=\"p\">()</span>\n<span class=\"n\">buffer</span><span class=\"o\">.</span><span class=\"n\">put_str</span><span class=\"p\">(</span><span class=\"s2\">&quot;hello&quot;</span><span class=\"p\">)</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">buffer</span><span class=\"o\">.</span><span class=\"n\">to_str</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;hello&quot;</span>\n</code></pre>\n</div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>src</strong> (<code>str</code>):\nThe string</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">s</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "sain.collections.Bytes.len": {"fullname": "sain.collections.Bytes.len", "modulename": "sain.collections", "qualname": "Bytes.len", "kind": "function", "doc": "<p>Return the number of elements in this buffer.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">buf</span> <span class=\"o\">=</span> <span class=\"n\">Bytes</span><span class=\"p\">()</span>\n<span class=\"n\">buf</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"k\">assert</span> <span class=\"n\">buf</span><span class=\"o\">.</span><span class=\"n\">len</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">3</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "sain.collections.Bytes.size": {"fullname": "sain.collections.Bytes.size", "modulename": "sain.collections", "qualname": "Bytes.size", "kind": "function", "doc": "<p>The length in bytes of one array item in the internal representation.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">buf</span> <span class=\"o\">=</span> <span class=\"n\">Bytes</span><span class=\"o\">.</span><span class=\"n\">from_raw</span><span class=\"p\">([</span><span class=\"mi\">240</span><span class=\"p\">,</span> <span class=\"mi\">159</span><span class=\"p\">,</span> <span class=\"mi\">146</span><span class=\"p\">,</span> <span class=\"mi\">150</span><span class=\"p\">])</span>\n<span class=\"k\">assert</span> <span class=\"n\">buf</span><span class=\"o\">.</span><span class=\"n\">size</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">1</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "sain.collections.Bytes.iter": {"fullname": "sain.collections.Bytes.iter", "modulename": "sain.collections", "qualname": "Bytes.iter", "kind": "function", "doc": "<p>Returns an iterator over the bytes of <code>self</code>.</p>\n\n<p>This iterator yields all <code>int</code>s from start to end.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">buf</span> <span class=\"o\">=</span> <span class=\"n\">Bytes</span><span class=\"o\">.</span><span class=\"n\">from_raw</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">buf</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># map each byte to a character</span>\n<span class=\"k\">for</span> <span class=\"n\">element</span> <span class=\"ow\">in</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"nb\">chr</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">element</span><span class=\"p\">)</span>\n<span class=\"c1\"># \u263a</span>\n<span class=\"c1\"># \u263b</span>\n<span class=\"c1\"># \u2665</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"o\">.</span><span class=\"n\">Iterator</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.collections.Bytes.is_empty": {"fullname": "sain.collections.Bytes.is_empty", "modulename": "sain.collections", "qualname": "Bytes.is_empty", "kind": "function", "doc": "<p>Check whether <code>self</code> contains any bytes or not.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">buffer</span> <span class=\"o\">=</span> <span class=\"n\">Bytes</span><span class=\"p\">()</span>\n<span class=\"k\">assert</span> <span class=\"n\">buffer</span><span class=\"o\">.</span><span class=\"n\">is_empty</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "sain.collections.Bytes.copy": {"fullname": "sain.collections.Bytes.copy", "modulename": "sain.collections", "qualname": "Bytes.copy", "kind": "function", "doc": "<p>Create a copy of the bytes.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">original</span> <span class=\"o\">=</span> <span class=\"n\">Bytes</span><span class=\"o\">.</span><span class=\"n\">from_raw</span><span class=\"p\">([</span><span class=\"mi\">255</span><span class=\"p\">,</span> <span class=\"mi\">255</span><span class=\"p\">,</span> <span class=\"mi\">255</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"n\">copy</span> <span class=\"o\">=</span> <span class=\"n\">original</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Self</span>:</span></span>", "funcdef": "def"}, "sain.collections.Bytes.clear": {"fullname": "sain.collections.Bytes.clear", "modulename": "sain.collections", "qualname": "Bytes.clear", "kind": "function", "doc": "<p>Clear the buffer.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">buf</span> <span class=\"o\">=</span> <span class=\"n\">Bytes</span><span class=\"p\">([</span><span class=\"mi\">255</span><span class=\"p\">])</span>\n<span class=\"n\">buf</span><span class=\"o\">.</span><span class=\"n\">clear</span><span class=\"p\">()</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">buf</span><span class=\"o\">.</span><span class=\"n\">is_empty</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "sain.collections.Bytes.index": {"fullname": "sain.collections.Bytes.index", "modulename": "sain.collections", "qualname": "Bytes.index", "kind": "function", "doc": "<p>Return the smallest <code>i</code> such that <code>i</code> is the index of the\nfirst occurrence of <code>v</code> in the buffer.</p>\n\n<p>The optional arguments start and stop can be specified to search for x within a\nsubsection of the array. Raise ValueError if x is not found</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">v</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">stop</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">9223372036854775807</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "sain.collections.Bytes.count": {"fullname": "sain.collections.Bytes.count", "modulename": "sain.collections", "qualname": "Bytes.count", "kind": "function", "doc": "<p>Return the number of occurrences of <code>x</code> in the buffer.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">buf</span> <span class=\"o\">=</span> <span class=\"n\">Bytes</span><span class=\"p\">([</span><span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"mi\">31</span><span class=\"p\">])</span>\n<span class=\"k\">assert</span> <span class=\"n\">buf</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">(</span><span class=\"mi\">32</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">2</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "sain.collections.Bytes.insert": {"fullname": "sain.collections.Bytes.insert", "modulename": "sain.collections", "qualname": "Bytes.insert", "kind": "function", "doc": "<p>Insert a new item with <code>value</code> in the buffer before position <code>index</code>.</p>\n\n<p>Negative values are treated as being relative to the end of the buffer.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">index</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "sain.collections.Bytes.pop": {"fullname": "sain.collections.Bytes.pop", "modulename": "sain.collections", "qualname": "Bytes.pop", "kind": "function", "doc": "<p>Removes the last element from the buffer and returns it, <code>Some(None)</code> if it is empty.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">buf</span> <span class=\"o\">=</span> <span class=\"n\">Bytes</span><span class=\"p\">((</span><span class=\"mi\">21</span><span class=\"p\">,</span> <span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"mi\">44</span><span class=\"p\">))</span>\n<span class=\"k\">assert</span> <span class=\"n\">buf</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"mi\">44</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">i</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">option</span><span class=\"o\">.</span><span class=\"n\">Some</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.collections.buf": {"fullname": "sain.collections.buf", "modulename": "sain.collections.buf", "kind": "module", "doc": "<p>Basic implementation of a cheap container for dealing with byte buffers.</p>\n"}, "sain.collections.buf.Bytes": {"fullname": "sain.collections.buf.Bytes", "modulename": "sain.collections.buf", "qualname": "Bytes", "kind": "class", "doc": "<p>Provides abstractions for working with UTF-8 compatible bytes.</p>\n\n<p>It is an efficient container for storing and operating with bytes.\nIt behaves very much like <code>array.array[int]</code> as well has the same layout.</p>\n\n<p>A <code>Bytes</code> objects are usually used within networking applications, but can also be used\nelsewhere as well.</p>\n\n<h6 id=\"construction\">Construction</h6>\n\n<p><code>Bytes</code> object accept multiple rawish data types, See <code>Rawish</code> for all supported types.</p>\n\n<ul>\n<li><code>Bytes()</code>: Initialize an empty <code>Bytes</code> object</li>\n<li><code>from_str</code>: Create <code>Bytes</code> from <code>str</code></li>\n<li><code>from_bytes</code>: Create <code>Bytes</code> from a <code>Buffer</code> type</li>\n<li><code>from_raw</code>: Create <code>Bytes</code> from a <code>Rawish</code> type</li>\n<li><code>from_static</code>: Create <code>Bytes</code> that points to an <code>array.array[int]</code> without copying it</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">sain</span> <span class=\"kn\">import</span> <span class=\"n\">Bytes</span>\n\n<span class=\"n\">buf</span> <span class=\"o\">=</span> <span class=\"n\">Bytes</span><span class=\"p\">()</span>\n<span class=\"n\">buffer</span><span class=\"o\">.</span><span class=\"n\">put_bytes</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s2\">&quot;Hello&quot;</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">buffer</span><span class=\"p\">)</span> <span class=\"c1\"># [72, 101, 108, 108, 111]</span>\n\n<span class=\"n\">buf</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"mi\">1234</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">buffer</span><span class=\"o\">.</span><span class=\"n\">as_bytes</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"sa\">b</span><span class=\"s2\">&quot;Hello\u0004\u00d2&quot;</span>\n</code></pre>\n</div>\n"}, "sain.collections.buf.Bytes.__init__": {"fullname": "sain.collections.buf.Bytes.__init__", "modulename": "sain.collections.buf", "qualname": "Bytes.__init__", "kind": "function", "doc": "<p>Creates a new empty <code>Bytes</code>.</p>\n\n<p>This won't allocate the array and the returned <code>Bytes</code> will be empty.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, "sain.collections.buf.Bytes.from_str": {"fullname": "sain.collections.buf.Bytes.from_str", "modulename": "sain.collections.buf", "qualname": "Bytes.from_str", "kind": "function", "doc": "<p>Create a new <code>Bytes</code> from a string with the given encoding.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">buffer</span> <span class=\"o\">=</span> <span class=\"n\">Bytes</span><span class=\"o\">.</span><span class=\"n\">from_str</span><span class=\"p\">(</span><span class=\"s2\">&quot;\ud83d\udc80&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">buffer</span><span class=\"o\">.</span><span class=\"n\">as_ref</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"mi\">240</span><span class=\"p\">,</span> <span class=\"mi\">159</span><span class=\"p\">,</span> <span class=\"mi\">146</span><span class=\"p\">,</span> <span class=\"mi\">128</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">s</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Self</span>:</span></span>", "funcdef": "def"}, "sain.collections.buf.Bytes.from_static": {"fullname": "sain.collections.buf.Bytes.from_static", "modulename": "sain.collections.buf", "qualname": "Bytes.from_static", "kind": "function", "doc": "<p>Create a new <code>Bytes</code> from an array.</p>\n\n<p>The returned <code>Bytes</code> will directly point to <code>arr</code> without copying.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">arr</span> <span class=\"o\">=</span> <span class=\"n\">array</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"s2\">&quot;B&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">buffer</span> <span class=\"o\">=</span> <span class=\"n\">Bytes</span><span class=\"o\">.</span><span class=\"n\">from_static</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">arr</span><span class=\"p\">:</span> <span class=\"n\">array</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Self</span>:</span></span>", "funcdef": "def"}, "sain.collections.buf.Bytes.from_bytes": {"fullname": "sain.collections.buf.Bytes.from_bytes", "modulename": "sain.collections.buf", "qualname": "Bytes.from_bytes", "kind": "function", "doc": "<p>Create a new <code>Bytes</code> from an initial bytes.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">arr</span> <span class=\"o\">=</span> <span class=\"n\">array</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"s2\">&quot;B&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">buffer</span> <span class=\"o\">=</span> <span class=\"n\">Bytes</span><span class=\"o\">.</span><span class=\"n\">from_bytes</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s2\">&quot;SIGNATURE&quot;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">buf</span><span class=\"p\">:</span> <span class=\"nb\">bytes</span> <span class=\"o\">|</span> <span class=\"nb\">bytearray</span> <span class=\"o\">|</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Self</span>:</span></span>", "funcdef": "def"}, "sain.collections.buf.Bytes.from_raw": {"fullname": "sain.collections.buf.Bytes.from_raw", "modulename": "sain.collections.buf", "qualname": "Bytes.from_raw", "kind": "function", "doc": "<p>Initialize a new <code>Bytes</code> in-place from a valid raw data type.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">&#39;file.txt&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rb&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">file</span><span class=\"p\">:</span>\n    <span class=\"n\">buff</span> <span class=\"o\">=</span> <span class=\"n\">Bytes</span><span class=\"o\">.</span><span class=\"n\">from_raw</span><span class=\"p\">(</span><span class=\"n\">file</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># in memory bytes io</span>\n<span class=\"n\">bytes_io</span> <span class=\"o\">=</span> <span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">BytesIO</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s2\">&quot;data&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">buffer1</span> <span class=\"o\">=</span> <span class=\"n\">Bytes</span><span class=\"o\">.</span><span class=\"n\">from_raw</span><span class=\"p\">(</span><span class=\"n\">bytes_io</span><span class=\"p\">)</span>\n<span class=\"c1\"># in memory string io</span>\n<span class=\"n\">string_io</span> <span class=\"o\">=</span> <span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">StringIO</span><span class=\"p\">(</span><span class=\"s2\">&quot;data&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">buffer2</span> <span class=\"o\">=</span> <span class=\"n\">Bytes</span><span class=\"o\">.</span><span class=\"n\">from_raw</span><span class=\"p\">(</span><span class=\"n\">string_io</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong><code>ValueError</code></strong>: If <code>raw</code> contains a byte not in range <code>0..256</code></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">raw</span><span class=\"p\">:</span> <span class=\"n\">_io</span><span class=\"o\">.</span><span class=\"n\">StringIO</span> <span class=\"o\">|</span> <span class=\"n\">_io</span><span class=\"o\">.</span><span class=\"n\">BytesIO</span> <span class=\"o\">|</span> <span class=\"n\">_io</span><span class=\"o\">.</span><span class=\"n\">BufferedReader</span> <span class=\"o\">|</span> <span class=\"nb\">memoryview</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Self</span>:</span></span>", "funcdef": "def"}, "sain.collections.buf.Bytes.try_to_str": {"fullname": "sain.collections.buf.Bytes.try_to_str", "modulename": "sain.collections.buf", "qualname": "Bytes.try_to_str", "kind": "function", "doc": "<p>A safe method to convert <code>self</code> into a string.</p>\n\n<p>This may fail if the <code>self</code> contains invalid bytes. strings\nneeds to be valid utf-8.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">buf</span> <span class=\"o\">=</span> <span class=\"n\">Bytes</span><span class=\"p\">()</span>\n<span class=\"n\">sparkles_heart</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">240</span><span class=\"p\">,</span> <span class=\"mi\">159</span><span class=\"p\">,</span> <span class=\"mi\">146</span><span class=\"p\">,</span> <span class=\"mi\">150</span><span class=\"p\">]</span>\n<span class=\"n\">buf</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"n\">sparkles_heart</span><span class=\"p\">)</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">buf</span><span class=\"o\">.</span><span class=\"n\">try_to_str</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">unwrap</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;\ud83d\udc96&quot;</span>\n</code></pre>\n</div>\n\n<h6 id=\"incorrect-bytes\">Incorrect bytes</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">invalid_bytes</span> <span class=\"o\">=</span> <span class=\"n\">Bytes</span><span class=\"o\">.</span><span class=\"n\">from_raw</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">159</span><span class=\"p\">,</span> <span class=\"mi\">146</span><span class=\"p\">,</span> <span class=\"mi\">150</span><span class=\"p\">])</span>\n<span class=\"n\">invalid_bytes</span><span class=\"o\">.</span><span class=\"n\">try_to_str</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">is_err</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong><code>Result[str, bytes]</code></strong>: If successful, returns the decoded string, otherwise the original bytes that failed\nto get decoded.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">Ok</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">Err</span><span class=\"p\">[</span><span class=\"nb\">bytes</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, "sain.collections.buf.Bytes.to_str": {"fullname": "sain.collections.buf.Bytes.to_str", "modulename": "sain.collections.buf", "qualname": "Bytes.to_str", "kind": "function", "doc": "<p>Convert <code>self</code> to a utf-8 string. which may or may not be expensive.</p>\n\n<p>During the conversion process, any invalid bytes will get converted to\n<a href=\"https://en.wikipedia.org/wiki/Specials_(Unicode_block)\">REPLACEMENT_CHARACTER</a>\nwhich looks like this <code>\ufffd</code>, so be carful on what you're trying to convert.</p>\n\n<p>Use <code>.try_to_str</code> try attempt the conversion incase of failure.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">buff</span> <span class=\"o\">=</span> <span class=\"n\">Bytes</span><span class=\"p\">()</span>\n<span class=\"n\">sparkles_heart</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">240</span><span class=\"p\">,</span> <span class=\"mi\">159</span><span class=\"p\">,</span> <span class=\"mi\">146</span><span class=\"p\">,</span> <span class=\"mi\">150</span><span class=\"p\">]</span>\n<span class=\"n\">buff</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"n\">sparkles_heart</span><span class=\"p\">)</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">buf</span><span class=\"o\">.</span><span class=\"n\">to_str</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;\ud83d\udc96&quot;</span>\n</code></pre>\n</div>\n\n<h6 id=\"incorrect-bytes\">Incorrect bytes</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">invalid_bytes</span> <span class=\"o\">=</span> <span class=\"n\">Bytes</span><span class=\"o\">.</span><span class=\"n\">from_raw</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s2\">&quot;Hello \u00f0\u0090\u0080World&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">invalid_bytes</span><span class=\"o\">.</span><span class=\"n\">to_str</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Hello \ufffdWorld&quot;</span>\n</code></pre>\n</div>\n\n<h6 id=\"unrecoverable-failures\">Unrecoverable failures</h6>\n\n<p>This method may raise <code>UnicodeDecodeError</code> if <code>self</code> contains\ninvalid bytes that cannot be decoded.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">invalid_bytes</span> <span class=\"o\">=</span> <span class=\"n\">Bytes</span><span class=\"o\">.</span><span class=\"n\">from_raw</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">159</span><span class=\"p\">,</span> <span class=\"mi\">146</span><span class=\"p\">,</span> <span class=\"mi\">150</span><span class=\"p\">])</span>\n<span class=\"n\">invalid_bytes</span><span class=\"o\">.</span><span class=\"n\">to_str</span><span class=\"p\">()</span> <span class=\"c1\"># ERROR</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "sain.collections.buf.Bytes.leak": {"fullname": "sain.collections.buf.Bytes.leak", "modulename": "sain.collections.buf", "qualname": "Bytes.leak", "kind": "function", "doc": "<p>Consumes and leaks the <code>Bytes</code>, returning the underlying <code>array</code> and setting it to <code>None</code>.</p>\n\n<p><code>None</code> is returned if it was already <code>None</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"nb\">bytes</span> <span class=\"o\">=</span> <span class=\"n\">Bytes</span><span class=\"o\">.</span><span class=\"n\">from_str</span><span class=\"p\">(</span><span class=\"s2\">&quot;chunks of data&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">consumed</span> <span class=\"o\">=</span> <span class=\"nb\">bytes</span><span class=\"o\">.</span><span class=\"n\">leak</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">unwrap</span><span class=\"p\">()</span>\n\n<span class=\"k\">assert</span> <span class=\"nb\">bytes</span><span class=\"o\">.</span><span class=\"n\">is_empty</span><span class=\"p\">()</span>\n<span class=\"k\">assert</span> <span class=\"n\">consumed</span><span class=\"o\">.</span><span class=\"n\">tobytes</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"sa\">b</span><span class=\"s2\">&quot;chunks of data&quot;</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">option</span><span class=\"o\">.</span><span class=\"n\">Some</span><span class=\"p\">[</span><span class=\"n\">array</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, "sain.collections.buf.Bytes.as_bytes": {"fullname": "sain.collections.buf.Bytes.as_bytes", "modulename": "sain.collections.buf", "qualname": "Bytes.as_bytes", "kind": "function", "doc": "<p>Convert <code>self</code> into <code>bytes</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">buf</span> <span class=\"o\">=</span> <span class=\"n\">Bytes</span><span class=\"o\">.</span><span class=\"n\">from_str</span><span class=\"p\">(</span><span class=\"s2\">&quot;Hello&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">buf</span><span class=\"o\">.</span><span class=\"n\">as_bytes</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"sa\">b</span><span class=\"s1\">&#39;Hello&#39;</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bytes</span>:</span></span>", "funcdef": "def"}, "sain.collections.buf.Bytes.as_ref": {"fullname": "sain.collections.buf.Bytes.as_ref", "modulename": "sain.collections.buf", "qualname": "Bytes.as_ref", "kind": "function", "doc": "<p>Convert <code>self</code> into an immutable sequence.</p>\n\n<p>An empty sequence is returned if <code>self</code> hasn't been initialized.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">buff</span> <span class=\"o\">=</span> <span class=\"n\">Bytes</span><span class=\"o\">.</span><span class=\"n\">from_str</span><span class=\"p\">(</span><span class=\"s2\">&quot;Hello&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">buff</span><span class=\"o\">.</span><span class=\"n\">as_ref</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"mi\">72</span><span class=\"p\">,</span> <span class=\"mi\">101</span><span class=\"p\">,</span> <span class=\"mi\">108</span><span class=\"p\">,</span> <span class=\"mi\">108</span><span class=\"p\">,</span> <span class=\"mi\">111</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.collections.buf.Bytes.as_mut": {"fullname": "sain.collections.buf.Bytes.as_mut", "modulename": "sain.collections.buf", "qualname": "Bytes.as_mut", "kind": "function", "doc": "<p>Return <code>self</code> as a mutable sequence without copying.</p>\n\n<p>An empty sequence is returned if <code>self</code> hasn't been initialized.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">buff</span> <span class=\"o\">=</span> <span class=\"n\">Bytes</span><span class=\"o\">.</span><span class=\"n\">from_str</span><span class=\"p\">(</span><span class=\"s2\">&quot;Hello&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">buff</span><span class=\"o\">.</span><span class=\"n\">as_mut</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"mi\">72</span><span class=\"p\">,</span> <span class=\"mi\">101</span><span class=\"p\">,</span> <span class=\"mi\">108</span><span class=\"p\">,</span> <span class=\"mi\">108</span><span class=\"p\">,</span> <span class=\"mi\">111</span><span class=\"p\">]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">MutableSequence</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.collections.buf.Bytes.raw_parts": {"fullname": "sain.collections.buf.Bytes.raw_parts", "modulename": "sain.collections.buf", "qualname": "Bytes.raw_parts", "kind": "function", "doc": "<p>Return <code>self</code> as tuple containing the memory address to the buffer and how many bytes it currently contains</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Annotated</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"s1\">&#39;address&#39;</span><span class=\"p\">],</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Annotated</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"s1\">&#39;len&#39;</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, "sain.collections.buf.Bytes.put": {"fullname": "sain.collections.buf.Bytes.put", "modulename": "sain.collections.buf", "qualname": "Bytes.put", "kind": "function", "doc": "<p>Append a byte at the end of the array.</p>\n\n<p>unlike <code>.put_bytes</code>, this method appends instead of extending the array\nwhich is faster if you're putting a single byte in a single call.</p>\n\n<p>if <code>self</code> hasn't been initialized, the array will allocate along with the byte.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">buf</span> <span class=\"o\">=</span> <span class=\"n\">Bytes</span><span class=\"p\">()</span>\n<span class=\"n\">buf</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"mi\">32</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">buf</span><span class=\"o\">.</span><span class=\"n\">as_bytes</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"sa\">b</span><span class=\"s1\">&#39; &#39;</span>\n</code></pre>\n</div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>src</strong> (<code>int</code>):\nAn unsigned integer, also known as <code>u8</code> to put.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong><code>OverflowError</code></strong>: If a byte in <code>src</code> not in range 0..=255</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">src</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "sain.collections.buf.Bytes.put_raw": {"fullname": "sain.collections.buf.Bytes.put_raw", "modulename": "sain.collections.buf", "qualname": "Bytes.put_raw", "kind": "function", "doc": "<p>Extend <code>self</code> from a raw data type source.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">buffer</span> <span class=\"o\">=</span> <span class=\"n\">Bytes</span><span class=\"p\">()</span>\n<span class=\"c1\"># A file descriptor&#39;s contents</span>\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">&#39;file.txt&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rb&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">file</span><span class=\"p\">:</span>\n    <span class=\"n\">buffer</span><span class=\"o\">.</span><span class=\"n\">put_raw</span><span class=\"p\">(</span><span class=\"n\">file</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># bytes io</span>\n<span class=\"n\">buffer</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">BytesIO</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s2\">&quot;data&quot;</span><span class=\"p\">))</span>\n<span class=\"c1\"># string io</span>\n<span class=\"n\">buffer</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">StringIO</span><span class=\"p\">(</span><span class=\"s2\">&quot;data&quot;</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>src</strong> (<code>Rawish</code>):\nA valid raw data type. See <code>Rawish</code> for more details.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong><code>OverflowError</code></strong>: If a byte in <code>src</code> is greater than <code>u8-&gt;MAX</code> which is 255.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">src</span><span class=\"p\">:</span> <span class=\"n\">_io</span><span class=\"o\">.</span><span class=\"n\">StringIO</span> <span class=\"o\">|</span> <span class=\"n\">_io</span><span class=\"o\">.</span><span class=\"n\">BytesIO</span> <span class=\"o\">|</span> <span class=\"n\">_io</span><span class=\"o\">.</span><span class=\"n\">BufferedReader</span> <span class=\"o\">|</span> <span class=\"nb\">memoryview</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "sain.collections.buf.Bytes.put_bytes": {"fullname": "sain.collections.buf.Bytes.put_bytes", "modulename": "sain.collections.buf", "qualname": "Bytes.put_bytes", "kind": "function", "doc": "<p>Put <code>bytes</code> into <code>self</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">buf</span> <span class=\"o\">=</span> <span class=\"n\">Bytes</span><span class=\"o\">.</span><span class=\"n\">from_bytes</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s2\">&quot;hello&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">buf</span><span class=\"o\">.</span><span class=\"n\">put_bytes</span><span class=\"p\">([</span><span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"mi\">119</span><span class=\"p\">,</span> <span class=\"mi\">111</span><span class=\"p\">,</span> <span class=\"mi\">114</span><span class=\"p\">,</span> <span class=\"mi\">108</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">])</span>\n<span class=\"k\">assert</span> <span class=\"n\">buf</span><span class=\"o\">.</span><span class=\"n\">to_str</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;hello world&quot;</span>\n</code></pre>\n</div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>src</strong> (<code>Buffer</code>):\nCan be one of <code>Bytes</code>, <code>bytes</code>, <code>bytearray</code> or <code>Sequence[int]</code></li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong><code>OverflowError</code></strong>: If a byte in <code>src</code> is greater than <code>u8-&gt;MAX</code> which is 255.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">src</span><span class=\"p\">:</span> <span class=\"nb\">bytes</span> <span class=\"o\">|</span> <span class=\"nb\">bytearray</span> <span class=\"o\">|</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "sain.collections.buf.Bytes.put_str": {"fullname": "sain.collections.buf.Bytes.put_str", "modulename": "sain.collections.buf", "qualname": "Bytes.put_str", "kind": "function", "doc": "<p>Put bytes into <code>self</code> from an encoded string.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">buffer</span> <span class=\"o\">=</span> <span class=\"n\">Bytes</span><span class=\"p\">()</span>\n<span class=\"n\">buffer</span><span class=\"o\">.</span><span class=\"n\">put_str</span><span class=\"p\">(</span><span class=\"s2\">&quot;hello&quot;</span><span class=\"p\">)</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">buffer</span><span class=\"o\">.</span><span class=\"n\">to_str</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;hello&quot;</span>\n</code></pre>\n</div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>src</strong> (<code>str</code>):\nThe string</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">s</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "sain.collections.buf.Bytes.len": {"fullname": "sain.collections.buf.Bytes.len", "modulename": "sain.collections.buf", "qualname": "Bytes.len", "kind": "function", "doc": "<p>Return the number of elements in this buffer.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">buf</span> <span class=\"o\">=</span> <span class=\"n\">Bytes</span><span class=\"p\">()</span>\n<span class=\"n\">buf</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"k\">assert</span> <span class=\"n\">buf</span><span class=\"o\">.</span><span class=\"n\">len</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">3</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "sain.collections.buf.Bytes.size": {"fullname": "sain.collections.buf.Bytes.size", "modulename": "sain.collections.buf", "qualname": "Bytes.size", "kind": "function", "doc": "<p>The length in bytes of one array item in the internal representation.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">buf</span> <span class=\"o\">=</span> <span class=\"n\">Bytes</span><span class=\"o\">.</span><span class=\"n\">from_raw</span><span class=\"p\">([</span><span class=\"mi\">240</span><span class=\"p\">,</span> <span class=\"mi\">159</span><span class=\"p\">,</span> <span class=\"mi\">146</span><span class=\"p\">,</span> <span class=\"mi\">150</span><span class=\"p\">])</span>\n<span class=\"k\">assert</span> <span class=\"n\">buf</span><span class=\"o\">.</span><span class=\"n\">size</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">1</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "sain.collections.buf.Bytes.iter": {"fullname": "sain.collections.buf.Bytes.iter", "modulename": "sain.collections.buf", "qualname": "Bytes.iter", "kind": "function", "doc": "<p>Returns an iterator over the bytes of <code>self</code>.</p>\n\n<p>This iterator yields all <code>int</code>s from start to end.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">buf</span> <span class=\"o\">=</span> <span class=\"n\">Bytes</span><span class=\"o\">.</span><span class=\"n\">from_raw</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">buf</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># map each byte to a character</span>\n<span class=\"k\">for</span> <span class=\"n\">element</span> <span class=\"ow\">in</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"nb\">chr</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">element</span><span class=\"p\">)</span>\n<span class=\"c1\"># \u263a</span>\n<span class=\"c1\"># \u263b</span>\n<span class=\"c1\"># \u2665</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"o\">.</span><span class=\"n\">Iterator</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.collections.buf.Bytes.is_empty": {"fullname": "sain.collections.buf.Bytes.is_empty", "modulename": "sain.collections.buf", "qualname": "Bytes.is_empty", "kind": "function", "doc": "<p>Check whether <code>self</code> contains any bytes or not.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">buffer</span> <span class=\"o\">=</span> <span class=\"n\">Bytes</span><span class=\"p\">()</span>\n<span class=\"k\">assert</span> <span class=\"n\">buffer</span><span class=\"o\">.</span><span class=\"n\">is_empty</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "sain.collections.buf.Bytes.copy": {"fullname": "sain.collections.buf.Bytes.copy", "modulename": "sain.collections.buf", "qualname": "Bytes.copy", "kind": "function", "doc": "<p>Create a copy of the bytes.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">original</span> <span class=\"o\">=</span> <span class=\"n\">Bytes</span><span class=\"o\">.</span><span class=\"n\">from_raw</span><span class=\"p\">([</span><span class=\"mi\">255</span><span class=\"p\">,</span> <span class=\"mi\">255</span><span class=\"p\">,</span> <span class=\"mi\">255</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"n\">copy</span> <span class=\"o\">=</span> <span class=\"n\">original</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Self</span>:</span></span>", "funcdef": "def"}, "sain.collections.buf.Bytes.clear": {"fullname": "sain.collections.buf.Bytes.clear", "modulename": "sain.collections.buf", "qualname": "Bytes.clear", "kind": "function", "doc": "<p>Clear the buffer.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">buf</span> <span class=\"o\">=</span> <span class=\"n\">Bytes</span><span class=\"p\">([</span><span class=\"mi\">255</span><span class=\"p\">])</span>\n<span class=\"n\">buf</span><span class=\"o\">.</span><span class=\"n\">clear</span><span class=\"p\">()</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">buf</span><span class=\"o\">.</span><span class=\"n\">is_empty</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "sain.collections.buf.Bytes.index": {"fullname": "sain.collections.buf.Bytes.index", "modulename": "sain.collections.buf", "qualname": "Bytes.index", "kind": "function", "doc": "<p>Return the smallest <code>i</code> such that <code>i</code> is the index of the\nfirst occurrence of <code>v</code> in the buffer.</p>\n\n<p>The optional arguments start and stop can be specified to search for x within a\nsubsection of the array. Raise ValueError if x is not found</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">v</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">stop</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">9223372036854775807</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "sain.collections.buf.Bytes.count": {"fullname": "sain.collections.buf.Bytes.count", "modulename": "sain.collections.buf", "qualname": "Bytes.count", "kind": "function", "doc": "<p>Return the number of occurrences of <code>x</code> in the buffer.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">buf</span> <span class=\"o\">=</span> <span class=\"n\">Bytes</span><span class=\"p\">([</span><span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"mi\">31</span><span class=\"p\">])</span>\n<span class=\"k\">assert</span> <span class=\"n\">buf</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">(</span><span class=\"mi\">32</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">2</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "sain.collections.buf.Bytes.insert": {"fullname": "sain.collections.buf.Bytes.insert", "modulename": "sain.collections.buf", "qualname": "Bytes.insert", "kind": "function", "doc": "<p>Insert a new item with <code>value</code> in the buffer before position <code>index</code>.</p>\n\n<p>Negative values are treated as being relative to the end of the buffer.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">index</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "sain.collections.buf.Bytes.pop": {"fullname": "sain.collections.buf.Bytes.pop", "modulename": "sain.collections.buf", "qualname": "Bytes.pop", "kind": "function", "doc": "<p>Removes the last element from the buffer and returns it, <code>Some(None)</code> if it is empty.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">buf</span> <span class=\"o\">=</span> <span class=\"n\">Bytes</span><span class=\"p\">((</span><span class=\"mi\">21</span><span class=\"p\">,</span> <span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"mi\">44</span><span class=\"p\">))</span>\n<span class=\"k\">assert</span> <span class=\"n\">buf</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"mi\">44</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">i</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">option</span><span class=\"o\">.</span><span class=\"n\">Some</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.collections.buf.Rawish": {"fullname": "sain.collections.buf.Rawish", "modulename": "sain.collections.buf", "qualname": "Rawish", "kind": "variable", "doc": "<p>A type hint for some raw data type.</p>\n\n<p>This can be any of:</p>\n\n<ul>\n<li><code>io.StringIO</code></li>\n<li><code>io.BytesIO</code></li>\n<li><code>io.BufferedReader</code></li>\n<li><code>memoryview</code></li>\n</ul>\n", "annotation": ": TypeAlias", "default_value": "_io.StringIO | _io.BytesIO | _io.BufferedReader | memoryview"}, "sain.collections.buf.Buffer": {"fullname": "sain.collections.buf.Buffer", "modulename": "sain.collections.buf", "qualname": "Buffer", "kind": "variable", "doc": "<p>A type hint for some bytes data type.</p>\n\n<p>This can be any of:</p>\n\n<ul>\n<li><code>bytes</code></li>\n<li><code>Bytes</code></li>\n<li><code>bytearray</code></li>\n<li><code>Iterable[int]</code></li>\n</ul>\n", "annotation": ": TypeAlias", "default_value": "bytes | bytearray | collections.abc.Iterable[int]"}, "sain.collections.vec": {"fullname": "sain.collections.vec", "modulename": "sain.collections.vec", "kind": "module", "doc": "<p>A contiguous growable alternative to builtin <code>list</code> with extra functionalities.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">names</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]()</span>\n\n<span class=\"n\">names</span><span class=\"o\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"s1\">&#39;foo&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">names</span><span class=\"o\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"s1\">&#39;bar&#39;</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">names</span><span class=\"p\">)</span> <span class=\"c1\"># [&#39;foo&#39;, &#39;bar&#39;]</span>\n<span class=\"k\">assert</span> <span class=\"n\">names</span><span class=\"o\">.</span><span class=\"n\">len</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">2</span>\n</code></pre>\n</div>\n"}, "sain.collections.vec.Vec": {"fullname": "sain.collections.vec.Vec", "modulename": "sain.collections.vec", "qualname": "Vec", "kind": "class", "doc": "<p>A contiguous growable alternative to builtin <code>list</code> with extra functionalities.</p>\n\n<p>The layout of <code>Vec</code> is almost the same as <code>list</code>.</p>\n\n<p>When initializing a vec, it will not build the underlying list until the first element gets pushed.\nWhich saves a little bit of memory.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">names</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">()</span>\n<span class=\"n\">names</span><span class=\"o\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"s1\">&#39;foo&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">names</span><span class=\"o\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"s1\">&#39;bar&#39;</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">names</span><span class=\"p\">)</span> <span class=\"c1\"># [&#39;foo&#39;, &#39;bar&#39;]</span>\n<span class=\"k\">assert</span> <span class=\"n\">names</span><span class=\"o\">.</span><span class=\"n\">len</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">2</span>\n</code></pre>\n</div>\n\n<h6 id=\"constructing\">Constructing</h6>\n\n<ul>\n<li><code>Vec()</code>: Create an unallocated vec, Which means the underlying list will be <code>None</code> until you start pushing into it</li>\n<li><code>Vec(other_list)</code>: Create a vec which points to <code>other_list</code></li>\n<li><code>Vec((1, 2, 3))</code>: Create a vec with <code>[1, 2, 3]</code> pre-allocated</li>\n<li><code>Vec.with_capacity(5)</code>: Create a vec that can hold up to 5 elements</li>\n<li><code>from_args(1, 2, 3)</code>: Create a vec from arguments. This is not a classmethod</li>\n</ul>\n\n<h2 id=\"iterating-over-vec\">Iterating over <code>Vec</code></h2>\n\n<p>There're two ways to iterate over a <code>Vec</code>. The first is to normally use <code>for</code> loop.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">names</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># foo</span>\n<span class=\"c1\"># bar</span>\n</code></pre>\n</div>\n\n<p>The second is to use <code>Vec.iter</code>, which yields all items in this <code>Vec</code> from start to end.\nThen the iterator gets exhausted as usual, See <code>sain.Iterator</code>.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">names</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"p\">()</span>\n<span class=\"k\">for</span> <span class=\"n\">name</span> <span class=\"ow\">in</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"o\">.</span><span class=\"n\">upper</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># FOO</span>\n<span class=\"c1\"># BAR</span>\n\n<span class=\"c1\"># No more items, The actual vec is left unchanged.</span>\n<span class=\"k\">assert</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">next</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">is_none</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n\n<h2 id=\"comparison-operators\">Comparison operators</h2>\n\n<p>Comparing different collections with <code>Vec</code> have a cost. Depending on what you're comparing it wit.</p>\n\n<p>Any iterable that is not a <code>list</code> or <code>Vec</code> that is used to compare with will get copied into a <code>list</code>,\nSo be careful what you compare a <code>Vec</code> with.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"c1\"># zero-cost</span>\n<span class=\"n\">vec</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"c1\"># Copies {1, 2, 3} -&gt; [1, 2, 3] which can cost.</span>\n<span class=\"n\">vec</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">}</span>\n</code></pre>\n</div>\n\n<h2 id=\"zero-copy\">Zero-Copy</h2>\n\n<p>A vec that gets initialized from a <code>list</code> will <em>point</em> to it and doesn't copy it.\nSo any element that gets appended to the collection will also get pushed into the vec.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">cells</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">(</span><span class=\"n\">cells</span><span class=\"p\">)</span> <span class=\"c1\"># This DOES NOT copy the `cells`.</span>\n\n<span class=\"n\">cells</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;foo&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">vec</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;foo&quot;</span>  <span class=\"c1\"># True</span>\n</code></pre>\n</div>\n\n<p>The opposite of the above is to initialize the vec from either\nan iterable or args, or copy the list.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"c1\"># Creates a new vec and extend it with the elements.</span>\n<span class=\"n\">from_args</span> <span class=\"o\">=</span> <span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">from_args</span><span class=\"p\">(</span><span class=\"s2\">&quot;foo&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;bar&quot;</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># inlined from another iterable.</span>\n<span class=\"n\">from_iter</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">([</span><span class=\"s2\">&quot;foo&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;bar&quot;</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># Copy the list into a vec.</span>\n<span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">(</span><span class=\"n\">cells</span><span class=\"p\">[:])</span>\n<span class=\"n\">cells</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;bar&quot;</span><span class=\"p\">)</span>\n\n<span class=\"n\">vec</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"c1\"># IndexError: &quot;bar&quot; doesn&#39;t exist in vec.</span>\n</code></pre>\n</div>\n", "bases": "typing.Generic[~T]"}, "sain.collections.vec.Vec.__init__": {"fullname": "sain.collections.vec.Vec.__init__", "modulename": "sain.collections.vec", "qualname": "Vec.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">iterable</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, "sain.collections.vec.Vec.with_capacity": {"fullname": "sain.collections.vec.Vec.with_capacity", "modulename": "sain.collections.vec", "qualname": "Vec.with_capacity", "kind": "function", "doc": "<p>Create a new <code>Vec</code> with at least the specified capacity.\nThis vec will be able to hold <code>capacity</code> elements without pushing further.</p>\n\n<p>Check out <code>Vec.push_within_capacity</code> as well.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"o\">.</span><span class=\"n\">with_capacity</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">len</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"ow\">and</span> <span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">capacity</span><span class=\"p\">()</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">3</span>\n\n<span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">len</span><span class=\"p\">())</span> <span class=\"c1\"># 3</span>\n\n<span class=\"c1\"># This won&#39;t push.</span>\n<span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">capacity</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"s1\">&#39;Self&#39;</span>:</span></span>", "funcdef": "def"}, "sain.collections.vec.Vec.as_ref": {"fullname": "sain.collections.vec.Vec.as_ref", "modulename": "sain.collections.vec", "qualname": "Vec.as_ref", "kind": "function", "doc": "<p>Return an immutable view over this vector elements.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">as_ref</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Collection</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.collections.vec.Vec.len": {"fullname": "sain.collections.vec.Vec.len", "modulename": "sain.collections.vec", "qualname": "Vec.len", "kind": "function", "doc": "<p>Return the number of elements in this vector.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">len</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">3</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "sain.collections.vec.Vec.capacity": {"fullname": "sain.collections.vec.Vec.capacity", "modulename": "sain.collections.vec", "qualname": "Vec.capacity", "kind": "function", "doc": "<p>Return the capacity of this vector if set. 0 if not .</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec_with_cap</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"o\">.</span><span class=\"n\">with_capacity</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">vec_with_cap</span><span class=\"o\">.</span><span class=\"n\">capacity</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">unwrap</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">3</span>\n\n<span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"k\">assert</span> <span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">capacity</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">is_none</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "sain.collections.vec.Vec.iter": {"fullname": "sain.collections.vec.Vec.iter", "modulename": "sain.collections.vec", "qualname": "Vec.iter", "kind": "function", "doc": "<p>Return an iterator over this vector elements.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Map each element to a str</span>\n<span class=\"k\">for</span> <span class=\"n\">element</span> <span class=\"ow\">in</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">element</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"o\">.</span><span class=\"n\">Iterator</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.collections.vec.Vec.is_empty": {"fullname": "sain.collections.vec.Vec.is_empty", "modulename": "sain.collections.vec", "qualname": "Vec.is_empty", "kind": "function", "doc": "<p>Returns true if the vector contains no elements.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "sain.collections.vec.Vec.split_off": {"fullname": "sain.collections.vec.Vec.split_off", "modulename": "sain.collections.vec", "qualname": "Vec.split_off", "kind": "function", "doc": "<p>Split the vector off at the specified position.</p>\n\n<p>if this vec is empty, <code>self</code> is returned unchanged.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"n\">split</span> <span class=\"o\">=</span> <span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">split_off</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">split</span><span class=\"p\">,</span> <span class=\"n\">vec</span><span class=\"p\">)</span>  <span class=\"c1\"># [1], [2, 3]</span>\n</code></pre>\n</div>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong><code>RuntimeError</code></strong>: This method will raise if <code>at</code> &gt; <code>len(self)</code></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">at</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">Vec</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.collections.vec.Vec.split_first": {"fullname": "sain.collections.vec.Vec.split_first", "modulename": "sain.collections.vec", "qualname": "Vec.split_first", "kind": "function", "doc": "<p>Split the first and rest elements of the vector, If empty, <code>Some[None]</code> is returned.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"n\">split</span> <span class=\"o\">=</span> <span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">split_first</span><span class=\"p\">()</span>\n<span class=\"k\">assert</span> <span class=\"n\">split</span> <span class=\"o\">==</span> <span class=\"n\">Some</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]))</span>\n\n<span class=\"n\">vec</span><span class=\"p\">:</span> <span class=\"n\">Vec</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">()</span>\n<span class=\"n\">split</span> <span class=\"o\">=</span> <span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">split_first</span><span class=\"p\">()</span>\n<span class=\"k\">assert</span> <span class=\"n\">split</span> <span class=\"o\">==</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">option</span><span class=\"o\">.</span><span class=\"n\">Some</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]]]</span>:</span></span>", "funcdef": "def"}, "sain.collections.vec.Vec.first": {"fullname": "sain.collections.vec.Vec.first", "modulename": "sain.collections.vec", "qualname": "Vec.first", "kind": "function", "doc": "<p>Get the first element in this vec, returning <code>Some[None]</code> if there's none.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"n\">first</span> <span class=\"o\">=</span> <span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">first</span><span class=\"p\">()</span>\n<span class=\"k\">assert</span> <span class=\"o\">~</span><span class=\"n\">first</span> <span class=\"o\">==</span> <span class=\"mi\">1</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">option</span><span class=\"o\">.</span><span class=\"n\">Some</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.collections.vec.Vec.truncate": {"fullname": "sain.collections.vec.Vec.truncate", "modulename": "sain.collections.vec", "qualname": "Vec.truncate", "kind": "function", "doc": "<p>Shortens the vec, keeping the first <code>size</code> elements and dropping the rest.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">truncate</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">vec</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">size</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "sain.collections.vec.Vec.retain": {"fullname": "sain.collections.vec.Vec.retain", "modulename": "sain.collections.vec", "qualname": "Vec.retain", "kind": "function", "doc": "<p>Remove elements from this vec while <code>f()</code> returns <code>True</code>.</p>\n\n<p>In other words, filter this vector based on <code>f()</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">retain</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">elem</span><span class=\"p\">:</span> <span class=\"n\">elem</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">vec</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "sain.collections.vec.Vec.swap_remove": {"fullname": "sain.collections.vec.Vec.swap_remove", "modulename": "sain.collections.vec", "qualname": "Vec.swap_remove", "kind": "function", "doc": "<p>Remove the first appearance of <code>item</code> from this vector and return it.</p>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><p><strong>* <code>ValueError</code></strong> (if <code>item</code> is not in this vector.):</p></li>\n<li><p><strong>* <code>MemoryError</code></strong> (if this vector hasn't allocated, Aka nothing has been pushed to it.):</p></li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vector</span><span class=\"p\">((</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">))</span>\n<span class=\"n\">element</span> <span class=\"o\">=</span> <span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">vec</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span> <span class=\"ow\">and</span> <span class=\"n\">element</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;a&#39;</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">T</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">T</span>:</span></span>", "funcdef": "def"}, "sain.collections.vec.Vec.push": {"fullname": "sain.collections.vec.Vec.push", "modulename": "sain.collections.vec", "qualname": "Vec.push", "kind": "function", "doc": "<p>Push an element at the end of the vector.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">()</span>\n<span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">vec</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">T</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "sain.collections.vec.Vec.push_within_capacity": {"fullname": "sain.collections.vec.Vec.push_within_capacity", "modulename": "sain.collections.vec", "qualname": "Vec.push_within_capacity", "kind": "function", "doc": "<p>Appends an element if there is sufficient spare capacity, otherwise an error is returned with the element.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span><span class=\"p\">:</span> <span class=\"n\">Vec</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"o\">.</span><span class=\"n\">with_capacity</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">):</span>\n    <span class=\"k\">match</span> <span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">push_within_capacity</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">):</span>\n        <span class=\"k\">case</span><span class=\"w\"> </span><span class=\"n\">Ok</span><span class=\"p\">(</span><span class=\"k\">_</span><span class=\"p\">):</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;All good.&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">case</span> <span class=\"n\">Err</span><span class=\"p\">(</span><span class=\"n\">elem</span><span class=\"p\">):</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Reached max cap :&lt; cant push&quot;</span><span class=\"p\">,</span> <span class=\"n\">elem</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>Or you can also just call <code>Vec.push</code> and it will push within capacity if <code>Vec.capacity()</code> is not <code>None</code>.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span><span class=\"p\">:</span> <span class=\"n\">Vec</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"o\">.</span><span class=\"n\">with_capacity</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n\n<span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">len</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">3</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">T</span></span><span class=\"return-annotation\">) -> <span class=\"s1\">&#39;Result[None, T]&#39;</span>:</span></span>", "funcdef": "def"}, "sain.collections.vec.Vec.reserve": {"fullname": "sain.collections.vec.Vec.reserve", "modulename": "sain.collections.vec", "qualname": "Vec.reserve", "kind": "function", "doc": "<p>Reserves capacity for at least additional more elements to be inserted in the given Vec<T>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"o\">.</span><span class=\"n\">with_capacity</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">is_vip</span> <span class=\"o\">=</span> <span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">choice</span><span class=\"p\">((</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">))</span>\n\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">):</span>\n    <span class=\"k\">match</span> <span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">push_within_capacity</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">):</span>\n        <span class=\"k\">case</span><span class=\"w\"> </span><span class=\"n\">Ok</span><span class=\"p\">(</span><span class=\"k\">_</span><span class=\"p\">):</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;All good&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">case</span> <span class=\"n\">Err</span><span class=\"p\">(</span><span class=\"n\">person</span><span class=\"p\">):</span>\n            <span class=\"c1\"># If the person is a VIP, then reserve for one more.</span>\n            <span class=\"k\">if</span> <span class=\"n\">is_vip</span><span class=\"p\">:</span>\n                <span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">reserve</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n                <span class=\"k\">continue</span>\n\n            <span class=\"c1\"># is_vip was false.</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Can&#39;t reserve for non-VIP members...&quot;</span><span class=\"p\">,</span> <span class=\"n\">person</span><span class=\"p\">)</span>\n            <span class=\"k\">break</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">additional</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "sain.collections.vec.Vec.append": {"fullname": "sain.collections.vec.Vec.append", "modulename": "sain.collections.vec", "qualname": "Vec.append", "kind": "function", "doc": "<p>An alias for <code>Vec.push</code> method.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">T</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "sain.collections.vec.Vec.get": {"fullname": "sain.collections.vec.Vec.get", "modulename": "sain.collections.vec", "qualname": "Vec.get", "kind": "function", "doc": "<p>Get the item at the given index, or <code>Some[None]</code> if its out of bounds.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">index</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">option</span><span class=\"o\">.</span><span class=\"n\">Some</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.collections.vec.Vec.insert": {"fullname": "sain.collections.vec.Vec.insert", "modulename": "sain.collections.vec", "qualname": "Vec.insert", "kind": "function", "doc": "<p>Insert an element at the position <code>index</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">((</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">vec</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">index</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">T</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "sain.collections.vec.Vec.pop": {"fullname": "sain.collections.vec.Vec.pop", "modulename": "sain.collections.vec", "qualname": "Vec.pop", "kind": "function", "doc": "<p>Removes the last element from a vector and returns it, or <code>sain.Some(None)</code> if it is empty.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"k\">assert</span> <span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">vec</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">index</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">option</span><span class=\"o\">.</span><span class=\"n\">Some</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.collections.vec.Vec.remove": {"fullname": "sain.collections.vec.Vec.remove", "modulename": "sain.collections.vec", "qualname": "Vec.remove", "kind": "function", "doc": "<p>Remove <code>item</code> from this vector.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vector</span><span class=\"p\">((</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">))</span>\n<span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">vec</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">T</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "sain.collections.vec.Vec.extend": {"fullname": "sain.collections.vec.Vec.extend", "modulename": "sain.collections.vec", "qualname": "Vec.extend", "kind": "function", "doc": "<p>Extend this vector from another iterable.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">((</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">))</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">vec</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">iterable</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "sain.collections.vec.Vec.copy": {"fullname": "sain.collections.vec.Vec.copy", "modulename": "sain.collections.vec", "qualname": "Vec.copy", "kind": "function", "doc": "<p>Create a vector that copies all of its elements and place it into the new one.</p>\n\n<p>If the vector hasn't been allocated, <code>self</code> is returned.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">original</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"n\">copy</span> <span class=\"o\">=</span> <span class=\"n\">original</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n<span class=\"n\">copy</span><span class=\"o\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">original</span><span class=\"p\">)</span> <span class=\"c1\"># [1, 2, 3]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">Vec</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.collections.vec.Vec.clear": {"fullname": "sain.collections.vec.Vec.clear", "modulename": "sain.collections.vec", "qualname": "Vec.clear", "kind": "function", "doc": "<p>Clear all elements of this vector.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">clear</span><span class=\"p\">()</span>\n<span class=\"k\">assert</span> <span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">len</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">0</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "sain.collections.vec.Vec.sort": {"fullname": "sain.collections.vec.Vec.sort", "modulename": "sain.collections.vec", "qualname": "Vec.sort", "kind": "function", "doc": "<p>This method sorts the list in place, using only &lt; comparisons between items.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">((</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">sort</span><span class=\"p\">()</span>\n<span class=\"k\">assert</span> <span class=\"n\">vec</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"s1\">&#39;collections.Callable[[T], SupportsRichComparison] | None&#39;</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">reverse</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "sain.collections.vec.Vec.index": {"fullname": "sain.collections.vec.Vec.index", "modulename": "sain.collections.vec", "qualname": "Vec.index", "kind": "function", "doc": "<p>Return zero-based index in the vec of the first item whose value is equal to <code>item</code>.\nRaises a ValueError if there is no such item.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"k\">assert</span> <span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">T</span>,</span><span class=\"param\">\tstart: &lt;class &#x27;SupportsIndex&#x27;&gt; = 0,</span><span class=\"param\">\t<span class=\"n\">end</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">9223372036854775807</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "sain.collections.vec.Vec.count": {"fullname": "sain.collections.vec.Vec.count", "modulename": "sain.collections.vec", "qualname": "Vec.count", "kind": "function", "doc": "<p>Return the number of occurrences of <code>item</code> in the vec.</p>\n\n<p><code>0</code> is returned if the vector is empty or hasn't been initialized, as well if them item not found.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"k\">assert</span> <span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">2</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">T</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "sain.collections.vec.from_args": {"fullname": "sain.collections.vec.from_args", "modulename": "sain.collections.vec", "qualname": "from_args", "kind": "function", "doc": "<p>Construct a vector containing <code>elements</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">sain.vec</span> <span class=\"k\">as</span> <span class=\"nn\">vec</span>\n\n<span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">from_args</span><span class=\"p\">(</span><span class=\"s1\">&#39;Apple&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Orange&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Lemon&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">items</span><span class=\"o\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"s1\">&#39;Grape&#39;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">elements</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">T</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">Vec</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.convert": {"fullname": "sain.convert", "modulename": "sain.convert", "kind": "module", "doc": "<p>Protocols for conversions between types.</p>\n\n<p>The protocols in this module provide a way to convert from one type to another type. Each trait serves a different purpose:</p>\n\n<ul>\n<li>Implement the From trait for consuming value-to-value conversions</li>\n<li>Implement the Into trait for consuming value-to-value conversions to types outside the current crate</li>\n<li>The TryFrom and TryInto traits behave like From and Into, but should be implemented when the conversion can fail.</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"nd\">@dataclass</span>\n<span class=\"k\">class</span> <span class=\"nc\">Id</span><span class=\"p\">(</span><span class=\"n\">From</span><span class=\"p\">[</span><span class=\"n\">UUID</span><span class=\"p\">],</span> <span class=\"n\">Into</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]):</span>\n    <span class=\"nb\">id</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">float</span>\n\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">from_t</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">UUID</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Self</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Keep in mind, this stores a 128 bit &lt;long&gt; integer.</span>\n        <span class=\"k\">return</span> <span class=\"bp\">cls</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">))</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">into</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Simply perform conversions.</span>\n<span class=\"n\">from_uuid</span> <span class=\"o\">=</span> <span class=\"n\">Id</span><span class=\"o\">.</span><span class=\"n\">from_t</span><span class=\"p\">(</span><span class=\"n\">uuid4</span><span class=\"p\">())</span>\n<span class=\"n\">into_int</span> <span class=\"o\">=</span> <span class=\"n\">from_uuid</span><span class=\"o\">.</span><span class=\"n\">into</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n\n<p>For type conversions that may fail, two safe interfaces, <code>TryInto</code> and <code>TryFrom</code> exist which deal with that.</p>\n\n<p>This is useful when you are doing a type conversion that may trivially succeed but may also need special handling.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"nd\">@dataclass</span>\n<span class=\"k\">class</span> <span class=\"nc\">Message</span><span class=\"p\">(</span><span class=\"n\">Into</span><span class=\"p\">[</span><span class=\"nb\">bytes</span><span class=\"p\">],</span> <span class=\"n\">TryFrom</span><span class=\"p\">[</span><span class=\"nb\">bytes</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]):</span>\n    <span class=\"n\">content</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n    <span class=\"nb\">id</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">into</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bytes</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__dict__</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">try_from</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">bytes</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"n\">Self</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]:</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">payload</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">Ok</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">(</span><span class=\"n\">content</span><span class=\"o\">=</span><span class=\"n\">payload</span><span class=\"p\">[</span><span class=\"s1\">&#39;content&#39;</span><span class=\"p\">],</span> <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"n\">payload</span><span class=\"p\">[</span><span class=\"s1\">&#39;id&#39;</span><span class=\"p\">]))</span>\n        <span class=\"k\">except</span> <span class=\"p\">(</span><span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">decoder</span><span class=\"o\">.</span><span class=\"n\">JSONDecodeError</span><span class=\"p\">,</span> <span class=\"ne\">KeyError</span><span class=\"p\">):</span>\n            <span class=\"c1\"># Its rare to see a JSONDecodeError raised, but usually</span>\n            <span class=\"c1\"># keys goes missing, which raises a KeyError.</span>\n            <span class=\"k\">return</span> <span class=\"n\">Err</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n\n<span class=\"n\">message_bytes</span> <span class=\"o\">=</span> <span class=\"sa\">b</span><span class=\"s1\">&#39;{&quot;content&quot;: &quot;content&quot;, &quot;id&quot;: 0}&#39;</span>\n\n<span class=\"k\">match</span> <span class=\"n\">Message</span><span class=\"o\">.</span><span class=\"n\">try_from</span><span class=\"p\">(</span><span class=\"n\">message_bytes</span><span class=\"p\">):</span>\n    <span class=\"k\">case</span> <span class=\"n\">Ok</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Successful conversion&quot;</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">)</span>\n    <span class=\"k\">case</span> <span class=\"n\">Err</span><span class=\"p\">(</span><span class=\"n\">invalid_bytes</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Invalid bytes:&quot;</span><span class=\"p\">,</span> <span class=\"n\">invalid_bytes</span><span class=\"p\">)</span>\n\n<span class=\"n\">payload</span> <span class=\"o\">=</span> <span class=\"n\">Message</span><span class=\"p\">(</span><span class=\"n\">content</span><span class=\"o\">=</span><span class=\"s1\">&#39;...&#39;</span><span class=\"p\">,</span> <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">payload</span><span class=\"o\">.</span><span class=\"n\">into</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">message_bytes</span>\n</code></pre>\n</div>\n"}, "sain.convert.From": {"fullname": "sain.convert.From", "modulename": "sain.convert", "qualname": "From", "kind": "class", "doc": "<p>Used to do value-to-value conversions while consuming the input value. It is the reciprocal of Into.</p>\n\n<p>As the Rust documentation says, One should always prefer implementing From over Into\nbecause implementing From automatically provides one with an implementation of Into.</p>\n\n<p>But there's no such thing in Python, as it's impossible to auto-impl <code>Into&lt;T&gt;</code> for all types\nthat impl <code>From&lt;T&gt;</code>.</p>\n\n<p>So for the sake of simplicity, You should implement whichever interface you want deal with,\nOr simply, implement both as the same time.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"nd\">@dataclass</span>\n<span class=\"k\">class</span> <span class=\"nc\">Id</span><span class=\"p\">(</span><span class=\"n\">From</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]):</span>\n    <span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">from_t</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Self</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"bp\">cls</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n", "bases": "typing.Protocol[-T_co]"}, "sain.convert.From.__init__": {"fullname": "sain.convert.From.__init__", "modulename": "sain.convert", "qualname": "From.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, "sain.convert.From.from_t": {"fullname": "sain.convert.From.from_t", "modulename": "sain.convert", "qualname": "From.from_t", "kind": "function", "doc": "<p>Perform the conversion.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"n\">T_co</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Self</span>:</span></span>", "funcdef": "def"}, "sain.convert.TryFrom": {"fullname": "sain.convert.TryFrom", "modulename": "sain.convert", "qualname": "TryFrom", "kind": "class", "doc": "<p>Simple and safe type conversions that may fail in a controlled way under some circumstances.\nIt is the reciprocal of <code>TryInto</code>.</p>\n\n<p>It is useful to implement this when you know that the conversion may fail in some way.</p>\n\n<h6 id=\"generic-implementations\">Generic Implementations</h6>\n\n<p>This interface takes two type arguments, and return <code>Result&lt;Self, E&gt;</code></p>\n\n<ul>\n<li><code>T</code>: Which's the first generic <code>T</code> is the type that's being converted from.</li>\n<li><code>E</code>: If the conversion fails in a way, this is what will return as the error.</li>\n<li><code>Self</code>: Which's the instance of the class that is being converted into.</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"nd\">@dataclass</span>\n<span class=\"k\">class</span> <span class=\"nc\">Id</span><span class=\"p\">(</span><span class=\"n\">TryFrom</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]):</span>\n    <span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">try_from</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"n\">Self</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]:</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">isnumeric</span><span class=\"p\">():</span>\n            <span class=\"c1\"># NaN</span>\n            <span class=\"k\">return</span> <span class=\"n\">Err</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Couldn&#39;t convert: </span><span class=\"si\">{</span><span class=\"n\">value</span><span class=\"si\">}</span><span class=\"s2\"> to self&quot;</span><span class=\"p\">)</span>\n        <span class=\"c1\"># otherwise convert it to an Id instance.</span>\n        <span class=\"k\">return</span> <span class=\"n\">Ok</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">=</span><span class=\"bp\">cls</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)))</span>\n</code></pre>\n</div>\n", "bases": "typing.Protocol[-T_co, ~E]"}, "sain.convert.TryFrom.__init__": {"fullname": "sain.convert.TryFrom.__init__", "modulename": "sain.convert", "qualname": "TryFrom.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, "sain.convert.TryFrom.try_from": {"fullname": "sain.convert.TryFrom.try_from", "modulename": "sain.convert", "qualname": "TryFrom.try_from", "kind": "function", "doc": "<p>Perform the conversion.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"n\">T_co</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">Ok</span><span class=\"p\">[</span><span class=\"n\">Self</span><span class=\"p\">],</span> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">Err</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">E</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, "sain.convert.Into": {"fullname": "sain.convert.Into", "modulename": "sain.convert", "qualname": "Into", "kind": "class", "doc": "<p>Conversion from <code>self</code>, which may or may not be expensive.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"nd\">@dataclass</span>\n<span class=\"k\">class</span> <span class=\"nc\">Id</span><span class=\"p\">(</span><span class=\"n\">Into</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]):</span>\n    <span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">into</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "bases": "typing.Protocol[+T_cov]"}, "sain.convert.Into.__init__": {"fullname": "sain.convert.Into.__init__", "modulename": "sain.convert", "qualname": "Into.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, "sain.convert.Into.into": {"fullname": "sain.convert.Into.into", "modulename": "sain.convert", "qualname": "Into.into", "kind": "function", "doc": "<p>Perform the conversion.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"o\">+</span><span class=\"n\">T_cov</span>:</span></span>", "funcdef": "def"}, "sain.convert.TryInto": {"fullname": "sain.convert.TryInto", "modulename": "sain.convert", "qualname": "TryInto", "kind": "class", "doc": "<p>An attempted conversion from <code>self</code>, which may or may not be expensive.</p>\n\n<p>It is useful to implement this when you know that the conversion may fail in some way.</p>\n\n<h6 id=\"generic-implementations\">Generic Implementations</h6>\n\n<p>This interface takes two type arguments, and return <code>Result&lt;T, E&gt;</code></p>\n\n<ul>\n<li><code>T</code>: The first generic <code>T</code> is the type that's being converted into.</li>\n<li><code>E</code>: If the conversion fails in a way, this is what will return as the error.</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"nd\">@dataclass</span>\n<span class=\"k\">class</span> <span class=\"nc\">Id</span><span class=\"p\">(</span><span class=\"n\">TryInto</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]):</span>\n    <span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">try_into</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]:</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">isnumeric</span><span class=\"p\">():</span>\n            <span class=\"k\">return</span> <span class=\"n\">Err</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"si\">}</span><span class=\"s2\"> is not a number...&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">Ok</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n", "bases": "typing.Protocol[~T, ~E]"}, "sain.convert.TryInto.__init__": {"fullname": "sain.convert.TryInto.__init__", "modulename": "sain.convert", "qualname": "TryInto.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, "sain.convert.TryInto.try_into": {"fullname": "sain.convert.TryInto.try_into", "modulename": "sain.convert", "qualname": "TryInto.try_into", "kind": "function", "doc": "<p>Perform the conversion.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">Ok</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">Err</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">E</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, "sain.default": {"fullname": "sain.default", "modulename": "sain.default", "kind": "module", "doc": "<p>The default trait for types that can have a default implementation.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">sain</span> <span class=\"kn\">import</span> <span class=\"n\">Default</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Generator</span><span class=\"p\">(</span><span class=\"n\">Default</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]):</span>\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">default</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">random_str</span><span class=\"p\">()</span>\n\n<span class=\"n\">DEFAULT_GENERATOR</span> <span class=\"o\">=</span> <span class=\"n\">Generator</span><span class=\"o\">.</span><span class=\"n\">default</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n"}, "sain.default.Default": {"fullname": "sain.default.Default", "modulename": "sain.default", "qualname": "Default", "kind": "class", "doc": "<p>An interface for an object that has a default value.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">sain</span> <span class=\"kn\">import</span> <span class=\"n\">Default</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Cache</span><span class=\"p\">(</span><span class=\"n\">Default</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]):</span>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">default</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]:</span>\n        <span class=\"k\">return</span> <span class=\"p\">{}</span>\n\n<span class=\"n\">cache</span> <span class=\"o\">=</span> <span class=\"n\">Cache</span><span class=\"o\">.</span><span class=\"n\">default</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">cache</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">cache</span><span class=\"p\">,</span> <span class=\"n\">Default</span><span class=\"p\">)</span>\n<span class=\"c1\"># {}</span>\n</code></pre>\n</div>\n", "bases": "typing.Protocol[+_T_co]"}, "sain.default.Default.__init__": {"fullname": "sain.default.Default.__init__", "modulename": "sain.default", "qualname": "Default.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, "sain.default.Default.default": {"fullname": "sain.default.Default.default", "modulename": "sain.default", "qualname": "Default.default", "kind": "function", "doc": "<p>Return the default value of the object.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"o\">+</span><span class=\"n\">_T_co</span>:</span></span>", "funcdef": "def"}, "sain.error": {"fullname": "sain.error", "modulename": "sain.error", "kind": "module", "doc": "<p>Interfaces for working with Errors.</p>\n\n<p>This exposes one abstract interface, <code>Error</code> that other errors can implement and use as an argument to match upon.</p>\n\n<p>Usually this error is returned from a <code>Result[T, Error]</code> object.</p>\n\n<p>Those errors can be converted into <code>RuntimeError</code> exceptions by calling <code>sain.Result.unwrap</code> and <code>sain.Option.unwrap</code>.</p>\n\n<p>For an example</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"c1\"># Read the env variable, raises `RuntimeError` if it is not present.</span>\n<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">Option</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;SOME_PATH&#39;</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">unwrap</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n\n<p>HTTP requests are good example where errors can be returned all the time.\nLets implement one.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<p>from sain import Error\nfrom dataclasses import dataclass</p>\n\n<h1 id=\"base-error\">Base error.</h1>\n\n<p>class HTTPError(Error):\n    ...</p>\n\n<p>@dataclass\nclass NotFound(HTTPError):\n    message = \"Response not found.\"\n    response =</p>\n\n<pre><code>def description(self) -&gt; str:\n    ...\n</code></pre>\n"}, "sain.error.Error": {"fullname": "sain.error.Error", "modulename": "sain.error", "qualname": "Error", "kind": "class", "doc": "<p><code>Error</code> is an interface usually used for values that returns <code>sain.Result[T, E]</code></p>\n\n<p>where <code>E</code> is an implementation of this interface.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">requests</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dataclasses</span> <span class=\"kn\">import</span> <span class=\"n\">dataclass</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">sain</span> <span class=\"kn\">import</span> <span class=\"n\">Error</span><span class=\"p\">,</span> <span class=\"n\">Option</span><span class=\"p\">,</span> <span class=\"n\">Some</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sain</span> <span class=\"kn\">import</span> <span class=\"n\">Result</span><span class=\"p\">,</span> <span class=\"n\">Ok</span><span class=\"p\">,</span> <span class=\"n\">Err</span>\n\n<span class=\"c1\"># Base error.</span>\n<span class=\"k\">class</span> <span class=\"nc\">HTTPError</span><span class=\"p\">(</span><span class=\"n\">Error</span><span class=\"p\">):</span> <span class=\"o\">...</span>\n\n<span class=\"nd\">@dataclass</span>\n<span class=\"k\">class</span> <span class=\"nc\">NotFound</span><span class=\"p\">(</span><span class=\"n\">HTTPError</span><span class=\"p\">):</span>\n    <span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;The response returned [404]: not found.&quot;</span>\n    <span class=\"n\">http_status</span> <span class=\"o\">=</span> <span class=\"mi\">404</span>\n    <span class=\"n\">response</span><span class=\"p\">:</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">Response</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">description</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"s2\">&quot;Couldn&#39;t find what you&#39;re looking for &quot;</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">url</span>\n\n    <span class=\"c1\"># It is not necessary to define this method,</span>\n    <span class=\"c1\"># it just gives more context to the user handling this error.</span>\n    <span class=\"k\">def</span> <span class=\"nf\">source</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Option</span><span class=\"p\">[</span><span class=\"nb\">type</span><span class=\"p\">[</span><span class=\"n\">HTTPError</span><span class=\"p\">]]:</span>\n        <span class=\"k\">return</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"n\">HTTPError</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@dataclass</span>\n<span class=\"k\">class</span> <span class=\"nc\">UserNotFound</span><span class=\"p\">(</span><span class=\"n\">NotFound</span><span class=\"p\">):</span>\n    <span class=\"n\">user_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__post_init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">request</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">request</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;User </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">user_id</span><span class=\"si\">}</span><span class=\"s2\"> fetched from </span><span class=\"si\">{</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">path_url</span><span class=\"si\">}</span><span class=\"s2\"> was not found.&quot;</span>\n\n    <span class=\"c1\"># It is not necessary to define this method,</span>\n    <span class=\"c1\"># it just gives more context to the user handling this error.</span>\n    <span class=\"k\">def</span> <span class=\"nf\">source</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Option</span><span class=\"p\">[</span><span class=\"nb\">type</span><span class=\"p\">[</span><span class=\"n\">NotFound</span><span class=\"p\">]]:</span>\n        <span class=\"k\">return</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"n\">NotFound</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">description</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;Couldn&#39;t find the resource: </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">raw</span><span class=\"si\">}</span><span class=\"s2\">.&quot;</span>\n\n<span class=\"c1\"># A simple request that handles [404] responses.</span>\n<span class=\"k\">def</span> <span class=\"nf\">request</span><span class=\"p\">(</span>\n    <span class=\"n\">url</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span>\n    <span class=\"n\">resourceful</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"n\">uid</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n<span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">Response</span><span class=\"p\">,</span> <span class=\"n\">HTTPError</span><span class=\"p\">]:</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span>\n        <span class=\"n\">url</span><span class=\"p\">,</span>\n        <span class=\"n\">json</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;resourceful&quot;</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"s2\">&quot;user_id&quot;</span><span class=\"p\">:</span> <span class=\"n\">uid</span><span class=\"p\">}</span>\n        <span class=\"k\">if</span> <span class=\"n\">resourceful</span> <span class=\"k\">else</span> <span class=\"kc\">None</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">status_code</span> <span class=\"o\">==</span> <span class=\"mi\">404</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">resourceful</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">Err</span><span class=\"p\">(</span><span class=\"n\">UserNotFound</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">,</span> <span class=\"n\">uid</span><span class=\"p\">))</span>\n        <span class=\"k\">return</span> <span class=\"n\">Err</span><span class=\"p\">(</span><span class=\"n\">NotFound</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">))</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">Ok</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Execute the request</span>\n<span class=\"k\">match</span> <span class=\"n\">request</span><span class=\"p\">(</span><span class=\"s2\">&quot;some-url.com&#39;, True, uid=0):</span>\n    <span class=\"k\">case</span> <span class=\"n\">Ok</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Deal with the response</span>\n        <span class=\"o\">...</span>\n    <span class=\"k\">case</span> <span class=\"n\">Err</span><span class=\"p\">(</span><span class=\"n\">why</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Deal with the error.</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">why</span><span class=\"o\">.</span><span class=\"n\">message</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "bases": "typing.Protocol"}, "sain.error.Error.__init__": {"fullname": "sain.error.Error.__init__", "modulename": "sain.error", "qualname": "Error.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span></span>)</span>"}, "sain.error.Error.message": {"fullname": "sain.error.Error.message", "modulename": "sain.error", "qualname": "Error.message", "kind": "variable", "doc": "<p>A basic error message.</p>\n"}, "sain.error.Error.source": {"fullname": "sain.error.Error.source", "modulename": "sain.error", "qualname": "Error.source", "kind": "function", "doc": "<p>The source of this error, if any.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">option</span><span class=\"o\">.</span><span class=\"n\">Some</span><span class=\"p\">[</span><span class=\"nb\">type</span><span class=\"p\">[</span><span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"o\">.</span><span class=\"n\">Error</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, "sain.error.Error.description": {"fullname": "sain.error.Error.description", "modulename": "sain.error", "qualname": "Error.description", "kind": "function", "doc": "<p>Context for this error.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "sain.futures": {"fullname": "sain.futures", "modulename": "sain.futures", "kind": "module", "doc": "<p>Abstractions for threading / asynchronous programming.</p>\n"}, "sain.futures.spawn": {"fullname": "sain.futures.spawn", "modulename": "sain.futures", "qualname": "spawn", "kind": "function", "doc": "<p>Spawn all given awaitables concurrently.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]:</span>\n    <span class=\"k\">return</span> <span class=\"k\">await</span> <span class=\"n\">http</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">()</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n    <span class=\"n\">tasks</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">spawn</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;url.com&quot;</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)))</span>\n    <span class=\"k\">match</span> <span class=\"n\">tasks</span><span class=\"p\">:</span>\n        <span class=\"k\">case</span> <span class=\"n\">Ok</span><span class=\"p\">(</span><span class=\"n\">tasks</span><span class=\"p\">):</span>\n            <span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">tasks</span><span class=\"p\">)</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">10</span>\n        <span class=\"k\">case</span> <span class=\"n\">Err</span><span class=\"p\">(</span><span class=\"n\">why</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">why</span><span class=\"o\">.</span><span class=\"n\">TIMEOUT</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;couldn&#39;t make it in time :&lt;&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">case</span><span class=\"w\"> </span><span class=\"k\">_</span><span class=\"p\">:</span>\n            <span class=\"o\">...</span>\n</code></pre>\n</div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>*aws</strong> (<code>collections.Awaitable[T]</code>):\nThe awaitables to gather.</li>\n<li><strong>timeout</strong> (<code>float | None</code>):\nAn optional timeout.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong><code>sain.Result[T, SpawnError]</code>:</strong>: The result of the gathered awaitables.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">aws</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Awaitable</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">T_co</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">timeout</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">Ok</span><span class=\"p\">[</span><span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">T_co</span><span class=\"p\">]],</span> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">Err</span><span class=\"p\">[</span><span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">futures</span><span class=\"o\">.</span><span class=\"n\">SpawnError</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "async def"}, "sain.futures.loop": {"fullname": "sain.futures.loop", "modulename": "sain.futures", "qualname": "loop", "kind": "function", "doc": "<p>Get the current usable event loop or create a new one.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong><code>asyncio.AbstractEventLoop</code></strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">AbstractEventLoop</span>:</span></span>", "funcdef": "def"}, "sain.iter": {"fullname": "sain.iter", "modulename": "sain.iter", "kind": "module", "doc": "<p>Composable external iteration. See <code>Iterator</code> for more details.</p>\n"}, "sain.iter.Iter": {"fullname": "sain.iter.Iter", "modulename": "sain.iter", "qualname": "Iter", "kind": "class", "doc": "<p>a lazy iterator that has its items ready in-memory.</p>\n\n<p>This is similar to Rust <code>std::slice::Iter&lt;T&gt;</code> item which iterables can build\nfrom this via <code>.iter()</code> method.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># Limit the results to 2.</span>\n<span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n<span class=\"c1\"># 1</span>\n<span class=\"c1\"># 2</span>\n\n<span class=\"c1\"># Filter the results.</span>\n<span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"n\">item</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n<span class=\"c1\"># 2</span>\n<span class=\"c1\"># 3</span>\n<span class=\"c1\"># 3</span>\n\n<span class=\"c1\"># Indexing is supported.</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">iterator</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"c1\"># 1</span>\n</code></pre>\n</div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>items</strong> (<code>Iterable[Item]</code>):\nThe items to iterate over. This can be anything that implements <code>__iter__</code> and <code>__next__</code>.</li>\n</ul>\n", "bases": "sain.iter.Iterator[~Item]"}, "sain.iter.Iter.__init__": {"fullname": "sain.iter.Iter.__init__", "modulename": "sain.iter", "qualname": "Iter.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">iterable</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">]</span></span>)</span>"}, "sain.iter.Iter.clone": {"fullname": "sain.iter.Iter.clone", "modulename": "sain.iter", "qualname": "Iter.clone", "kind": "function", "doc": "<p>Return a copy of this iterator.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">it</span> <span class=\"o\">=</span> <span class=\"n\">Iterator</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span>\n\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">it</span><span class=\"o\">.</span><span class=\"n\">clone</span><span class=\"p\">():</span>\n    <span class=\"o\">...</span>\n\n<span class=\"c1\"># The actual iterator hasn&#39;t been exhausted.</span>\n<span class=\"k\">assert</span> <span class=\"n\">it</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">3</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Self</span>:</span></span>", "funcdef": "def"}, "sain.iter.Iterator": {"fullname": "sain.iter.Iterator", "modulename": "sain.iter", "qualname": "Iterator", "kind": "class", "doc": "<p>An abstract interface for dealing with iterators.</p>\n\n<p>This is exactly the same trait as <code>core::iter::Iterator</code> trait from Rust.</p>\n\n<p>This is the main interface that any type can implement by basically inheriting from it.\nThe method <code>__next__</code> is the only method that needs to be implemented, You get all the other methods for free.</p>\n\n<p>If you want to use a ready iterator for general purposes, Use <code>Iter</code>. This interface is only for implementors\nand type hints.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"nd\">@dataclass</span>\n<span class=\"k\">class</span> <span class=\"nc\">Message</span><span class=\"p\">:</span>\n    <span class=\"n\">content</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MessageIterator</span><span class=\"p\">(</span><span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">Iterator</span><span class=\"p\">[</span><span class=\"n\">Message</span><span class=\"p\">]):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"nb\">id</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randint</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">))</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_session</span><span class=\"p\">:</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">Session</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">id</span> <span class=\"o\">=</span> <span class=\"nb\">id</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__next__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Message</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_session</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_session</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"p\">()</span>\n\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"k\">with</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_session</span><span class=\"p\">:</span>\n                <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_session</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;https://dummyjson.com/products/</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">()</span>\n        <span class=\"k\">finally</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_session</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">Message</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">[</span><span class=\"s2\">&quot;description&quot;</span><span class=\"p\">])</span>\n\n<span class=\"n\">it</span> <span class=\"o\">=</span> <span class=\"n\">MessageIterator</span><span class=\"p\">()</span>\n<span class=\"c1\"># Lazily fetch the first 5 messages from the API.</span>\n<span class=\"k\">for</span> <span class=\"n\">msg</span> <span class=\"ow\">in</span> <span class=\"n\">it</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "bases": "typing.Generic[~Item], abc.ABC, sain.default.Default[~Item]"}, "sain.iter.Iterator.default": {"fullname": "sain.iter.Iterator.default", "modulename": "sain.iter", "qualname": "Iterator.default", "kind": "function", "doc": "<p>Return the default iterator for this type. It returns an empty iterator.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">it</span><span class=\"p\">:</span> <span class=\"n\">Iterator</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"o\">.</span><span class=\"n\">default</span><span class=\"p\">()</span>\n<span class=\"k\">assert</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">next</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">is_none</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"o\">.</span><span class=\"n\">Empty</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.iter.Iterator.collect": {"fullname": "sain.iter.Iterator.collect", "modulename": "sain.iter", "qualname": "Iterator.collect", "kind": "function", "doc": "<p>Collects all items in the iterator into an immutable sequence.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"c1\"># (0, 1, 2, 3)</span>\n<span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">(</span><span class=\"n\">cast</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"c1\"># Map each element and collect it.</span>\n<span class=\"c1\"># (&#39;0&#39;, &#39;1&#39;, &#39;2&#39;, &#39;3&#39;)</span>\n</code></pre>\n</div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cast</strong> (<code>T | None</code>):\nAn optional type to cast the items into.\nIf not provided the items will be returned as it's original type.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">cast</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">],</span> <span class=\"o\">~</span><span class=\"n\">OtherItem</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">OtherItem</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.iter.Iterator.to_vec": {"fullname": "sain.iter.Iterator.to_vec", "modulename": "sain.iter", "qualname": "Iterator.to_vec", "kind": "function", "doc": "<p>Convert this iterator into <code>Vec[T]</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">it</span> <span class=\"o\">=</span> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"o\">.</span><span class=\"n\">once</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">vc</span> <span class=\"o\">=</span> <span class=\"n\">it</span><span class=\"o\">.</span><span class=\"n\">to_vec</span><span class=\"p\">()</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">to_vec</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">Vec</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.iter.Iterator.sink": {"fullname": "sain.iter.Iterator.sink", "modulename": "sain.iter", "qualname": "Iterator.sink", "kind": "function", "doc": "<p>Consume all elements from this iterator, flushing it into the sink.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">it</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"n\">it</span><span class=\"o\">.</span><span class=\"n\">sink</span><span class=\"p\">()</span>\n<span class=\"k\">assert</span> <span class=\"n\">it</span><span class=\"o\">.</span><span class=\"n\">next</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">is_none</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "sain.iter.Iterator.raw_parts": {"fullname": "sain.iter.Iterator.raw_parts", "modulename": "sain.iter", "qualname": "Iterator.raw_parts", "kind": "function", "doc": "<p>Decompose all elements from this iterator, yielding it one by one\nas a normal generator.</p>\n\n<p>This mainly used for objects that needs to satisfy its exact type.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">it</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">(</span><span class=\"s2\">&quot;cba&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">sort</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">it</span><span class=\"o\">.</span><span class=\"n\">raw_parts</span><span class=\"p\">())</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">it</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">0</span>\n<span class=\"k\">assert</span> <span class=\"n\">sort</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"s2\">&quot;a&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;b&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;c&quot;</span><span class=\"p\">]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Generator</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.iter.Iterator.next": {"fullname": "sain.iter.Iterator.next", "modulename": "sain.iter", "qualname": "Iterator.next", "kind": "function", "doc": "<p>Advance the iterator, Returning the next item, <code>Some(None)</code> if all items yielded.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"s2\">&quot;1&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;2&quot;</span><span class=\"p\">])</span>\n<span class=\"k\">assert</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">next</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"s2\">&quot;1&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">next</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"s2\">&quot;2&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">next</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">is_none</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"s1\">&#39;Option[Item]&#39;</span>:</span></span>", "funcdef": "def"}, "sain.iter.Iterator.cloned": {"fullname": "sain.iter.Iterator.cloned", "modulename": "sain.iter", "qualname": "Iterator.cloned", "kind": "function", "doc": "<p>Creates an iterator which shallow copies its elements by reference.</p>\n\n<p>If you need a copy of the actual iterator and not the elements.\nuse <code>Iter.clone()</code></p>\n\n<div class=\"pdoc-alert pdoc-alert-note\">\n\n<p>This method calls <a href=\"https://docs.python.org/3/library/copy.html\"><code>copy.copy()</code></a>\non each item that is being yielded.</p>\n\n</div>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"nd\">@dataclass</span>\n<span class=\"k\">class</span> <span class=\"nc\">User</span><span class=\"p\">:</span>\n    <span class=\"n\">users_ids</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n<span class=\"c1\"># An iterator which elements points to the same user.</span>\n<span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"p\">()</span>\n<span class=\"n\">it</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">((</span><span class=\"n\">user</span><span class=\"p\">,</span> <span class=\"n\">user</span><span class=\"p\">))</span>\n\n<span class=\"k\">for</span> <span class=\"n\">u</span> <span class=\"ow\">in</span> <span class=\"n\">it</span><span class=\"o\">.</span><span class=\"n\">cloned</span><span class=\"p\">():</span>\n    <span class=\"n\">u</span><span class=\"o\">.</span><span class=\"n\">user_ids</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># We iterated over the same user pointer twice and appended &quot;1&quot;</span>\n<span class=\"c1\"># since `copy` returns a shallow copy of nested structures.</span>\n<span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">user_ids</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">2</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"o\">.</span><span class=\"n\">Cloned</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.iter.Iterator.copied": {"fullname": "sain.iter.Iterator.copied", "modulename": "sain.iter", "qualname": "Iterator.copied", "kind": "function", "doc": "<p>Creates an iterator which copies all of its elements by value.</p>\n\n<p>If you only need a copy of the item reference, Use <code>.cloned()</code> instead.</p>\n\n<div class=\"pdoc-alert pdoc-alert-note\">\n\n<p>This method simply calls <a href=\"https://docs.python.org/3/library/copy.html\"><code>copy.deepcopy()</code></a>\non each item that is being yielded.</p>\n\n</div>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"nd\">@dataclass</span>\n<span class=\"k\">class</span> <span class=\"nc\">User</span><span class=\"p\">:</span>\n    <span class=\"n\">users_ids</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n<span class=\"c1\"># An iterator which elements points to the same user.</span>\n<span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"p\">()</span>\n<span class=\"n\">it</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">((</span><span class=\"n\">user</span><span class=\"p\">,</span> <span class=\"n\">user</span><span class=\"p\">))</span>\n\n<span class=\"k\">for</span> <span class=\"n\">u</span> <span class=\"ow\">in</span> <span class=\"n\">it</span><span class=\"o\">.</span><span class=\"n\">copied</span><span class=\"p\">():</span>\n    <span class=\"c1\"># A new list is created for each item.</span>\n    <span class=\"n\">u</span><span class=\"o\">.</span><span class=\"n\">user_ids</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># The actual list is untouched since we consumed a deep copy of it.</span>\n<span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">user_ids</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"o\">.</span><span class=\"n\">Copied</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.iter.Iterator.map": {"fullname": "sain.iter.Iterator.map", "modulename": "sain.iter", "qualname": "Iterator.map", "kind": "function", "doc": "<p>Maps each item in the iterator to another type.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"s2\">&quot;1&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;2&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;3&quot;</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">)</span>\n\n<span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">iterator</span><span class=\"p\">:</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>predicate</strong> (<code>Callable[[Item], OtherItem]</code>):\nThe function to map each item in the iterator to the other type.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">fn</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">],</span> <span class=\"o\">~</span><span class=\"n\">OtherItem</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"o\">.</span><span class=\"n\">Map</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">,</span> <span class=\"o\">~</span><span class=\"n\">OtherItem</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.iter.Iterator.filter": {"fullname": "sain.iter.Iterator.filter", "modulename": "sain.iter", "qualname": "Iterator.filter", "kind": "function", "doc": "<p>Filters the iterator to only yield items that match the predicate.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">places</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"s1\">&#39;London&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Paris&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Los Angeles&#39;</span><span class=\"p\">])</span>\n<span class=\"k\">for</span> <span class=\"n\">place</span> <span class=\"ow\">in</span> <span class=\"n\">places</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">place</span><span class=\"p\">:</span> <span class=\"n\">place</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s1\">&#39;L&#39;</span><span class=\"p\">)):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">place</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># London</span>\n<span class=\"c1\"># Los Angeles</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">predicate</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"o\">.</span><span class=\"n\">Filter</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.iter.Iterator.take": {"fullname": "sain.iter.Iterator.take", "modulename": "sain.iter", "qualname": "Iterator.take", "kind": "function", "doc": "<p>Take the first number of items until the number of items\nare yielded or the end of the iterator is exhausted.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"s1\">&#39;c&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;x&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;y&#39;</span><span class=\"p\">])</span>\n\n<span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">):</span>\n    <span class=\"k\">assert</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"p\">(</span><span class=\"s1\">&#39;c&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;x&#39;</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># &lt;Iter([&#39;c&#39;, &#39;x&#39;])&gt;</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">count</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"o\">.</span><span class=\"n\">Take</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.iter.Iterator.skip": {"fullname": "sain.iter.Iterator.skip", "modulename": "sain.iter", "qualname": "Iterator.skip", "kind": "function", "doc": "<p>Skips the first number of items in the iterator.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">))</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">skip</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># 3</span>\n<span class=\"c1\"># 4</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">count</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"o\">.</span><span class=\"n\">Skip</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.iter.Iterator.enumerate": {"fullname": "sain.iter.Iterator.enumerate", "modulename": "sain.iter", "qualname": "Iterator.enumerate", "kind": "function", "doc": "<p>Create a new iterator that yields a tuple of the index and item.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"k\">for</span> <span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">enumerate</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">item</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># 0 1</span>\n<span class=\"c1\"># 1 2</span>\n<span class=\"c1\"># 2 3</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"o\">.</span><span class=\"n\">Enumerate</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.iter.Iterator.take_while": {"fullname": "sain.iter.Iterator.take_while", "modulename": "sain.iter", "qualname": "Iterator.take_while", "kind": "function", "doc": "<p>yields items from the iterator while predicate returns <code>True</code>.</p>\n\n<p>The rest of the items are discarded as soon as the predicate returns <code>False</code></p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;ab&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;xd&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;ba&#39;</span><span class=\"p\">])</span>\n<span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">take_while</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"s1\">&#39;a&#39;</span> <span class=\"ow\">in</span> <span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># a</span>\n<span class=\"c1\"># ab</span>\n</code></pre>\n</div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>predicate</strong> (<code>collections.Callable[[Item], bool]</code>):\nThe function to predicate each item in the iterator.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"o\">.</span><span class=\"n\">TakeWhile</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.iter.Iterator.drop_while": {"fullname": "sain.iter.Iterator.drop_while", "modulename": "sain.iter", "qualname": "Iterator.drop_while", "kind": "function", "doc": "<p>Yields items from the iterator while predicate returns <code>False</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;ab&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;xd&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;ba&#39;</span><span class=\"p\">])</span>\n<span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">drop_while</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"s1\">&#39;a&#39;</span> <span class=\"ow\">in</span> <span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># xd</span>\n<span class=\"c1\"># ba</span>\n</code></pre>\n</div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>predicate</strong> (<code>collections.Callable[[Item], bool]</code>):\nThe function to predicate each item in the iterator.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"o\">.</span><span class=\"n\">DropWhile</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.iter.Iterator.all": {"fullname": "sain.iter.Iterator.all", "modulename": "sain.iter", "qualname": "Iterator.all", "kind": "function", "doc": "<p>Return <code>True</code> if all items in the iterator match the predicate.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"k\">while</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">)):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Still all integers&quot;</span><span class=\"p\">)</span>\n    <span class=\"k\">continue</span>\n    <span class=\"c1\"># Still all integers</span>\n</code></pre>\n</div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>predicate</strong> (<code>collections.Callable[[Item], bool]</code>):\nThe function to test each item in the iterator.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">predicate</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "sain.iter.Iterator.any": {"fullname": "sain.iter.Iterator.any", "modulename": "sain.iter", "qualname": "Iterator.any", "kind": "function", "doc": "<p><code>True</code> if any items in the iterator match the predicate.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"k\">if</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">any</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">)):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;At least one item is an int.&quot;</span><span class=\"p\">)</span>\n<span class=\"c1\"># At least one item is an int.</span>\n</code></pre>\n</div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>predicate</strong> (<code>collections.Callable[[Item], bool]</code>):\nThe function to test each item in the iterator.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">predicate</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "sain.iter.Iterator.zip": {"fullname": "sain.iter.Iterator.zip", "modulename": "sain.iter", "qualname": "Iterator.zip", "kind": "function", "doc": "<p>Zips the iterator with another iterable.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"k\">for</span> <span class=\"n\">item</span><span class=\"p\">,</span> <span class=\"n\">other_item</span> <span class=\"ow\">in</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">zip</span><span class=\"p\">([</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">]):</span>\n    <span class=\"k\">assert</span> <span class=\"n\">item</span> <span class=\"o\">==</span> <span class=\"n\">other_item</span>\n<span class=\"o\">&lt;</span><span class=\"n\">Iter</span><span class=\"p\">([(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">)])</span><span class=\"o\">&gt;</span>\n</code></pre>\n</div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>other</strong> (<code>Iter[OtherItem]</code>):\nThe iterable to zip with.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong><code>Iter[tuple[Item, OtherItem]]</code></strong>: The zipped iterator.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">OtherItem</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"o\">.</span><span class=\"n\">Iterator</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">,</span> <span class=\"o\">~</span><span class=\"n\">OtherItem</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, "sain.iter.Iterator.sort": {"fullname": "sain.iter.Iterator.sort", "modulename": "sain.iter", "qualname": "Iterator.sort", "kind": "function", "doc": "<p>Sorts the iterator.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">])</span>\n<span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">sort</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"n\">item</span> <span class=\"o\">&lt;</span> <span class=\"mi\">3</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n<span class=\"c1\"># 1</span>\n<span class=\"c1\"># 3</span>\n<span class=\"c1\"># 6</span>\n<span class=\"c1\"># 7</span>\n</code></pre>\n</div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>key</strong> (<code>collections.Callable[[Item], Any]</code>):\nThe function to sort by.</li>\n<li><strong>reverse</strong> (<code>bool</code>):\nWhether to reverse the sort.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"s1\">&#39;collections.Callable[[Item], _typeshed.SupportsRichComparison]&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">reverse</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"o\">.</span><span class=\"n\">Iterator</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.iter.Iterator.reversed": {"fullname": "sain.iter.Iterator.reversed", "modulename": "sain.iter", "qualname": "Iterator.reversed", "kind": "function", "doc": "<p>Returns a new iterator that yields the items in the iterator in reverse order.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">])</span>\n<span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">reversed</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n<span class=\"c1\"># 7</span>\n<span class=\"c1\"># 6</span>\n<span class=\"c1\"># 1</span>\n<span class=\"c1\"># 3</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"o\">.</span><span class=\"n\">Iterator</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.iter.Iterator.union": {"fullname": "sain.iter.Iterator.union", "modulename": "sain.iter", "qualname": "Iterator.union", "kind": "function", "doc": "<p>Returns a new iterator that yields all items from both iterators.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"n\">other</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">]</span>\n\n<span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">union</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n<span class=\"c1\"># 1</span>\n<span class=\"c1\"># 2</span>\n<span class=\"c1\"># 3</span>\n<span class=\"c1\"># 4</span>\n<span class=\"c1\"># 5</span>\n<span class=\"c1\"># 6</span>\n</code></pre>\n</div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>other</strong> (<code>Iter[Item]</code>):\nThe iterable to union with.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"o\">.</span><span class=\"n\">Iterator</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.iter.Iterator.first": {"fullname": "sain.iter.Iterator.first", "modulename": "sain.iter", "qualname": "Iterator.first", "kind": "function", "doc": "<p>Returns the first item in the iterator.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">])</span>\n<span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">first</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">is_some_and</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"s1\">&#39;Option[Item]&#39;</span>:</span></span>", "funcdef": "def"}, "sain.iter.Iterator.last": {"fullname": "sain.iter.Iterator.last", "modulename": "sain.iter", "qualname": "Iterator.last", "kind": "function", "doc": "<p>Returns the last item in the iterator.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">])</span>\n<span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">last</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">is_some_and</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"mi\">7</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"s1\">&#39;Option[Item]&#39;</span>:</span></span>", "funcdef": "def"}, "sain.iter.Iterator.count": {"fullname": "sain.iter.Iterator.count", "modulename": "sain.iter", "qualname": "Iterator.count", "kind": "function", "doc": "<p>Return the count of elements in memory this iterator has.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">it</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"k\">assert</span> <span class=\"n\">it</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">3</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "sain.iter.Iterator.for_each": {"fullname": "sain.iter.Iterator.for_each", "modulename": "sain.iter", "qualname": "Iterator.for_each", "kind": "function", "doc": "<p>Calls <code>func</code> on each item in the iterator.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">for_each</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">))</span>\n<span class=\"c1\"># 1</span>\n<span class=\"c1\"># 2</span>\n<span class=\"c1\"># 3</span>\n</code></pre>\n</div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>func</strong> (<code>collections.Callable[[Item], typing.Any]</code>):\nThe function to call on each item in the iterator.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">func</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">],</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "sain.iter.Iterator.async_for_each": {"fullname": "sain.iter.Iterator.async_for_each", "modulename": "sain.iter", "qualname": "Iterator.async_for_each", "kind": "function", "doc": "<p>Calls the async function on each item in the iterator concurrently.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">create_user</span><span class=\"p\">(</span><span class=\"n\">username</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">aiohttp</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"p\">(</span><span class=\"s2\">&quot;POST&quot;</span><span class=\"p\">,</span> <span class=\"sa\">f</span><span class=\"s1\">&#39;.../</span><span class=\"si\">{</span><span class=\"n\">username</span><span class=\"si\">}</span><span class=\"s1\">&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">r</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"k\">await</span> <span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">()</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">users</span> <span class=\"o\">=</span> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">into_iter</span><span class=\"p\">([</span><span class=\"s2\">&quot;danny&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;legalia&quot;</span><span class=\"p\">])</span>\n    <span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">users</span><span class=\"o\">.</span><span class=\"n\">async_for_each</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">username</span><span class=\"p\">:</span> <span class=\"n\">create_user</span><span class=\"p\">(</span><span class=\"n\">username</span><span class=\"p\">))</span>\n    <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">results</span><span class=\"o\">.</span><span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n        <span class=\"o\">...</span>\n</code></pre>\n</div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>func</strong> (<code>collections.Callable[[Item], Coroutine[None, Any, Any]]</code>):\nThe async function to call on each item in the iterator.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">func</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">],</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Coroutine</span><span class=\"p\">[</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"o\">~</span><span class=\"n\">OtherItem</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">Ok</span><span class=\"p\">[</span><span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">OtherItem</span><span class=\"p\">]],</span> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">Err</span><span class=\"p\">[</span><span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">futures</span><span class=\"o\">.</span><span class=\"n\">SpawnError</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "async def"}, "sain.iter.Cloned": {"fullname": "sain.iter.Cloned", "modulename": "sain.iter", "qualname": "Cloned", "kind": "class", "doc": "<p>An iterator that copies the elements from an underlying iterator.</p>\n\n<p>This iterator is created by the <code>Iterator.cloned</code> method.</p>\n", "bases": "typing.Generic[~Item], sain.iter.Iterator[~Item]"}, "sain.iter.Cloned.__init__": {"fullname": "sain.iter.Cloned.__init__", "modulename": "sain.iter", "qualname": "Cloned.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">it</span><span class=\"p\">:</span> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"o\">.</span><span class=\"n\">Iterator</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">]</span></span>)</span>"}, "sain.iter.Copied": {"fullname": "sain.iter.Copied", "modulename": "sain.iter", "qualname": "Copied", "kind": "class", "doc": "<p>An iterator that deeply-copies the elements from an underlying iterator.</p>\n\n<p>This iterator is created by the <code>Iterator.copied</code> method.</p>\n", "bases": "typing.Generic[~Item], sain.iter.Iterator[~Item]"}, "sain.iter.Copied.__init__": {"fullname": "sain.iter.Copied.__init__", "modulename": "sain.iter", "qualname": "Copied.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">it</span><span class=\"p\">:</span> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"o\">.</span><span class=\"n\">Iterator</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">]</span></span>)</span>"}, "sain.iter.Take": {"fullname": "sain.iter.Take", "modulename": "sain.iter", "qualname": "Take", "kind": "class", "doc": "<p>An iterator that yields the first <code>number</code> of elements and drops the rest.</p>\n\n<p>This iterator is created by the <code>Iterator.take</code> method.</p>\n", "bases": "typing.Generic[~Item], sain.iter.Iterator[~Item]"}, "sain.iter.Take.__init__": {"fullname": "sain.iter.Take.__init__", "modulename": "sain.iter", "qualname": "Take.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">it</span><span class=\"p\">:</span> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"o\">.</span><span class=\"n\">Iterator</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">count</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span>)</span>"}, "sain.iter.Filter": {"fullname": "sain.iter.Filter", "modulename": "sain.iter", "qualname": "Filter", "kind": "class", "doc": "<p>An iterator that filters the elements to a <code>predicate</code>.</p>\n\n<p>This iterator is created by the <code>Iterator.filter</code> method.</p>\n", "bases": "typing.Generic[~Item], sain.iter.Iterator[~Item]"}, "sain.iter.Filter.__init__": {"fullname": "sain.iter.Filter.__init__", "modulename": "sain.iter", "qualname": "Filter.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">it</span><span class=\"p\">:</span> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"o\">.</span><span class=\"n\">Iterator</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">call</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]</span></span>)</span>"}, "sain.iter.Map": {"fullname": "sain.iter.Map", "modulename": "sain.iter", "qualname": "Map", "kind": "class", "doc": "<p>An iterator that maps the elements to a callable.</p>\n\n<p>This iterator is created by the <code>Iterator.map</code> method.</p>\n", "bases": "typing.Generic[~Item, ~OtherItem], sain.iter.Iterator[~Item]"}, "sain.iter.Map.__init__": {"fullname": "sain.iter.Map.__init__", "modulename": "sain.iter", "qualname": "Map.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">it</span><span class=\"p\">:</span> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"o\">.</span><span class=\"n\">Iterator</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">call</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">],</span> <span class=\"o\">~</span><span class=\"n\">OtherItem</span><span class=\"p\">]</span></span>)</span>"}, "sain.iter.Skip": {"fullname": "sain.iter.Skip", "modulename": "sain.iter", "qualname": "Skip", "kind": "class", "doc": "<p>An iterator that skips the first <code>number</code> of elements and yields the rest.</p>\n\n<p>This iterator is created by the <code>Iterator.skip</code> method.</p>\n", "bases": "typing.Generic[~Item], sain.iter.Iterator[~Item]"}, "sain.iter.Skip.__init__": {"fullname": "sain.iter.Skip.__init__", "modulename": "sain.iter", "qualname": "Skip.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">it</span><span class=\"p\">:</span> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"o\">.</span><span class=\"n\">Iterator</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">count</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span>)</span>"}, "sain.iter.Enumerate": {"fullname": "sain.iter.Enumerate", "modulename": "sain.iter", "qualname": "Enumerate", "kind": "class", "doc": "<p>An iterator that yields the current count and the element during iteration.</p>\n\n<p>This iterator is created by the <code>Iterator.enumerate</code> method.</p>\n", "bases": "typing.Generic[~Item], sain.iter.Iterator[tuple[int, ~Item]]"}, "sain.iter.Enumerate.__init__": {"fullname": "sain.iter.Enumerate.__init__", "modulename": "sain.iter", "qualname": "Enumerate.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">it</span><span class=\"p\">:</span> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"o\">.</span><span class=\"n\">Iterator</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span>)</span>"}, "sain.iter.TakeWhile": {"fullname": "sain.iter.TakeWhile", "modulename": "sain.iter", "qualname": "TakeWhile", "kind": "class", "doc": "<p>An iterator that yields elements while <code>predicate</code> returns <code>True</code>.</p>\n\n<p>This iterator is created by the <code>Iterator.take_while</code> method.</p>\n", "bases": "typing.Generic[~Item], sain.iter.Iterator[~Item]"}, "sain.iter.TakeWhile.__init__": {"fullname": "sain.iter.TakeWhile.__init__", "modulename": "sain.iter", "qualname": "TakeWhile.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">it</span><span class=\"p\">:</span> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"o\">.</span><span class=\"n\">Iterator</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">predicate</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]</span></span>)</span>"}, "sain.iter.DropWhile": {"fullname": "sain.iter.DropWhile", "modulename": "sain.iter", "qualname": "DropWhile", "kind": "class", "doc": "<p>An iterator that yields elements while <code>predicate</code> returns <code>False</code>.</p>\n\n<p>This iterator is created by the <code>Iterator.drop_while</code> method.</p>\n", "bases": "typing.Generic[~Item], sain.iter.Iterator[~Item]"}, "sain.iter.DropWhile.__init__": {"fullname": "sain.iter.DropWhile.__init__", "modulename": "sain.iter", "qualname": "DropWhile.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">it</span><span class=\"p\">:</span> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"o\">.</span><span class=\"n\">Iterator</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">predicate</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]</span></span>)</span>"}, "sain.iter.Empty": {"fullname": "sain.iter.Empty", "modulename": "sain.iter", "qualname": "Empty", "kind": "class", "doc": "<p>An iterator that yields literally nothing.</p>\n\n<p>This is the default iterator that is created by <code>Iterator.default()</code> or <code>empty()</code></p>\n", "bases": "typing.Generic[~Item], sain.iter.Iterator[~Item]"}, "sain.iter.Empty.next": {"fullname": "sain.iter.Empty.next", "modulename": "sain.iter", "qualname": "Empty.next", "kind": "function", "doc": "<p>Advance the iterator, Returning the next item, <code>Some(None)</code> if all items yielded.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"s2\">&quot;1&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;2&quot;</span><span class=\"p\">])</span>\n<span class=\"k\">assert</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">next</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"s2\">&quot;1&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">next</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"s2\">&quot;2&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">next</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">is_none</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"s1\">&#39;Option[Item]&#39;</span>:</span></span>", "funcdef": "def"}, "sain.iter.Empty.count": {"fullname": "sain.iter.Empty.count", "modulename": "sain.iter", "qualname": "Empty.count", "kind": "function", "doc": "<p>Return the count of elements in memory this iterator has.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">it</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"k\">assert</span> <span class=\"n\">it</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">3</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.iter.Empty.any": {"fullname": "sain.iter.Empty.any", "modulename": "sain.iter", "qualname": "Empty.any", "kind": "function", "doc": "<p><code>True</code> if any items in the iterator match the predicate.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"k\">if</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">any</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">)):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;At least one item is an int.&quot;</span><span class=\"p\">)</span>\n<span class=\"c1\"># At least one item is an int.</span>\n</code></pre>\n</div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>predicate</strong> (<code>collections.Callable[[Item], bool]</code>):\nThe function to test each item in the iterator.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">predicate</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"kc\">False</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.iter.Empty.all": {"fullname": "sain.iter.Empty.all", "modulename": "sain.iter", "qualname": "Empty.all", "kind": "function", "doc": "<p>Return <code>True</code> if all items in the iterator match the predicate.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"k\">while</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">)):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Still all integers&quot;</span><span class=\"p\">)</span>\n    <span class=\"k\">continue</span>\n    <span class=\"c1\"># Still all integers</span>\n</code></pre>\n</div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>predicate</strong> (<code>collections.Callable[[Item], bool]</code>):\nThe function to test each item in the iterator.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">predicate</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"kc\">False</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.iter.into_iter": {"fullname": "sain.iter.into_iter", "modulename": "sain.iter", "qualname": "into_iter", "kind": "function", "doc": "<p>Convert any iterable into <code>Iterator[Item]</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">sequence</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">into_iter</span><span class=\"p\">(</span><span class=\"n\">sequence</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">reversed</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n<span class=\"c1\"># 3</span>\n<span class=\"c1\"># 2</span>\n<span class=\"c1\"># 1</span>\n</code></pre>\n</div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>iterable</strong> (<code>Iterable[Item]</code>):\nThe iterable to convert.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">iterable</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"o\">.</span><span class=\"n\">Iterator</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.iter.empty": {"fullname": "sain.iter.empty", "modulename": "sain.iter", "qualname": "empty", "kind": "function", "doc": "<p>Create an iterator that yields nothing.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">nope</span><span class=\"p\">:</span> <span class=\"n\">Iterator</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"o\">.</span><span class=\"n\">empty</span><span class=\"p\">()</span>\n<span class=\"k\">assert</span> <span class=\"n\">nope</span><span class=\"o\">.</span><span class=\"n\">next</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">is_none</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"o\">.</span><span class=\"n\">Empty</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.iter.once": {"fullname": "sain.iter.once", "modulename": "sain.iter", "qualname": "once", "kind": "function", "doc": "<p>Returns an iterator that yields exactly a single item.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"o\">.</span><span class=\"n\">once</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">next</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">next</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">Item</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"o\">.</span><span class=\"n\">Iterator</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.iter.repeat": {"fullname": "sain.iter.repeat", "modulename": "sain.iter", "qualname": "repeat", "kind": "function", "doc": "<p>Returns an iterator that yields the same <code>element</code> number of <code>count</code> times.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"o\">.</span><span class=\"n\">repeat</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">next</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">next</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">next</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">next</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">element</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">Item</span>, </span><span class=\"param\"><span class=\"n\">count</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"o\">.</span><span class=\"n\">Iterator</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.macros": {"fullname": "sain.macros", "modulename": "sain.macros", "kind": "module", "doc": "<p>A module that contains useful decorators for marking objects.</p>\n\n<p>It appends useful messages to warn at runtime and to the object documentation.</p>\n"}, "sain.macros.deprecated": {"fullname": "sain.macros.deprecated", "modulename": "sain.macros", "qualname": "deprecated", "kind": "function", "doc": "<p>A decorator that marks a function as deprecated.</p>\n\n<p>An attempt to call the object that's marked will cause a runtime warn.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">sain</span> <span class=\"kn\">import</span> <span class=\"n\">deprecated</span>\n\n<span class=\"nd\">@deprecated</span><span class=\"p\">(</span>\n    <span class=\"n\">since</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;1.0.0&quot;</span><span class=\"p\">,</span>\n    <span class=\"n\">removed_in</span> <span class=\"o\">=</span><span class=\"s2\">&quot;3.0.0&quot;</span><span class=\"p\">,</span>\n    <span class=\"n\">use_instead</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;UserImpl()&quot;</span><span class=\"p\">,</span>\n    <span class=\"n\">hint</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Hint for ux.&quot;</span>\n<span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">User</span><span class=\"p\">:</span>\n    <span class=\"o\">...</span>\n\n<span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"p\">()</span> <span class=\"c1\"># This will cause a warning at runtime.</span>\n</code></pre>\n</div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>since</strong> (<code>str</code>):\nThe version that the function was deprecated.</li>\n<li><strong>removed_in</strong> (<code>str | None</code>):\nIf provided, It will log when will the object will be removed in.</li>\n<li><strong>use_instead</strong> (<code>str | None</code>):\nIf provided, This should be the alternative object name that should be used instead.</li>\n<li><strong>hint</strong> (<code>str</code>):\nAn optional hint for the user.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">since</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">LiteralString</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">removed_in</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">LiteralString</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">use_instead</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">LiteralString</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">hint</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">LiteralString</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"s1\">&#39;collections.Callable[[collections.Callable[P, U]], collections.Callable[P, U]]&#39;</span>:</span></span>", "funcdef": "def"}, "sain.macros.unimplemented": {"fullname": "sain.macros.unimplemented", "modulename": "sain.macros", "qualname": "unimplemented", "kind": "function", "doc": "<p>A decorator that marks an object as unimplemented.</p>\n\n<p>An attempt to call the object that's marked will cause a runtime warn.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">sain</span> <span class=\"kn\">import</span> <span class=\"n\">unimplemented</span>\n\n<span class=\"nd\">@unimplemented</span><span class=\"p\">(</span><span class=\"s2\">&quot;User object is not implemented yet.&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">User</span><span class=\"p\">:</span>\n    <span class=\"o\">...</span>\n</code></pre>\n</div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>message</strong> (<code>str | None</code>):\nAn optional message to be displayed when the function is called. Otherwise default message will be used.</li>\n<li><strong>available_in</strong> (<code>str | None</code>):\nIf provided, This will be shown as what release this object be implemented.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">LiteralString</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">available_in</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">LiteralString</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"s1\">&#39;collections.Callable[[collections.Callable[P, U]], collections.Callable[P, U]]&#39;</span>:</span></span>", "funcdef": "def"}, "sain.macros.todo": {"fullname": "sain.macros.todo", "modulename": "sain.macros", "qualname": "todo", "kind": "function", "doc": "<p>A place holder that indicates unfinished code.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">sain</span> <span class=\"kn\">import</span> <span class=\"n\">todo</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">from_json</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">])</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n    <span class=\"c1\"># Calling this function will raise `Error`.</span>\n    <span class=\"n\">todo</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>message</strong> (<code>str | None</code>):\nMultiple optional arguments to pass if the error was raised.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">LiteralString</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">NoReturn</span>:</span></span>", "funcdef": "def"}, "sain.macros.doc": {"fullname": "sain.macros.doc", "modulename": "sain.macros", "qualname": "doc", "kind": "function", "doc": "<p>Set <code>path</code> to be the object's documentation.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">sain</span> <span class=\"kn\">import</span> <span class=\"n\">doc</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pathlib</span> <span class=\"kn\">import</span> <span class=\"n\">Path</span>\n\n<span class=\"nd\">@doc</span><span class=\"p\">(</span><span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"s2\">&quot;../README.md&quot;</span><span class=\"p\">))</span>\n<span class=\"k\">class</span> <span class=\"nc\">User</span><span class=\"p\">:</span>\n\n    <span class=\"nd\">@doc</span><span class=\"p\">(</span><span class=\"s2\">&quot;bool.html&quot;</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">bool_docs</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"o\">...</span>\n</code></pre>\n</div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>path</strong> (<code>type[int] | type[str] | type[bytes] | type[PathLike[str]] | type[PathLike[bytes]]</code>):\nThe path to read the content from.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Read&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"s1\">&#39;collections.Callable[[collections.Callable[P, U]], collections.Callable[P, U]]&#39;</span>:</span></span>", "funcdef": "def"}, "sain.macros.unsafe": {"fullname": "sain.macros.unsafe", "modulename": "sain.macros", "qualname": "unsafe", "kind": "function", "doc": "<p>Mark a function as unsafe.</p>\n\n<p>The caller of the decorated function is responsible for the undefined behavior if occurred.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">fn</span><span class=\"p\">:</span> <span class=\"s1\">&#39;collections.Callable[P, U]&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"s1\">&#39;collections.Callable[P, U]&#39;</span>:</span></span>", "funcdef": "def"}, "sain.option": {"fullname": "sain.option", "modulename": "sain.option", "kind": "module", "doc": "<p>Rust's <code>Option&lt;T&gt;</code> type. A value that can either be <code>T</code> or <code>None</code></p>\n"}, "sain.option.Some": {"fullname": "sain.option.Some", "modulename": "sain.option", "qualname": "Some", "kind": "class", "doc": "<p>An interface for an object that has a default value.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">sain</span> <span class=\"kn\">import</span> <span class=\"n\">Default</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Cache</span><span class=\"p\">(</span><span class=\"n\">Default</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]):</span>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">default</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]:</span>\n        <span class=\"k\">return</span> <span class=\"p\">{}</span>\n\n<span class=\"n\">cache</span> <span class=\"o\">=</span> <span class=\"n\">Cache</span><span class=\"o\">.</span><span class=\"n\">default</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">cache</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">cache</span><span class=\"p\">,</span> <span class=\"n\">Default</span><span class=\"p\">)</span>\n<span class=\"c1\"># {}</span>\n</code></pre>\n</div>\n", "bases": "typing.Generic[~T], sain.default.Default[ForwardRef('Option[None]')]"}, "sain.option.Some.__init__": {"fullname": "sain.option.Some.__init__", "modulename": "sain.option", "qualname": "Some.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"s1\">&#39;T | None&#39;</span>, </span><span class=\"param\"><span class=\"o\">/</span></span>)</span>"}, "sain.option.Some.default": {"fullname": "sain.option.Some.default", "modulename": "sain.option", "qualname": "Some.default", "kind": "function", "doc": "<p>Return the default value of the object.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">Option</span><span class=\"p\">[</span><span class=\"kc\">None</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.option.Some.into_inner": {"fullname": "sain.option.Some.into_inner", "modulename": "sain.option", "qualname": "Some.into_inner", "kind": "function", "doc": "<p>Consume <code>Self</code>, returning the wrapped value as <code>T | None</code>.</p>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">opt</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"s1\">&#39;char&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">opt</span><span class=\"o\">.</span><span class=\"n\">into_inner</span><span class=\"p\">()</span>\n<span class=\"k\">assert</span> <span class=\"n\">x</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span>\n\n<span class=\"n\">opt</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">opt</span><span class=\"o\">.</span><span class=\"n\">into_inner</span><span class=\"p\">()</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"s1\">&#39;T | None&#39;</span>:</span></span>", "funcdef": "def"}, "sain.option.Some.unwrap": {"fullname": "sain.option.Some.unwrap", "modulename": "sain.option", "qualname": "Some.unwrap", "kind": "function", "doc": "<p>Unwrap the inner value either returning if its not <code>None</code> or raising a <code>RuntimeError</code>.</p>\n\n<p>It's usually not recommended to use this method in production code, since it raises.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">unwrap</span><span class=\"p\">())</span>\n<span class=\"c1\"># 5</span>\n\n<span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">unwrap</span><span class=\"p\">())</span>\n<span class=\"c1\"># RuntimeError</span>\n</code></pre>\n</div>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong><code>RuntimeError</code></strong>: If the inner value is <code>None</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">) -> <span class=\"s1\">&#39;T | _typing.NoReturn&#39;</span>:</span></span>", "funcdef": "def"}, "sain.option.Some.unwrap_or": {"fullname": "sain.option.Some.unwrap_or", "modulename": "sain.option", "qualname": "Some.unwrap_or", "kind": "function", "doc": "<p>Unwrap the inner value either returning if its not <code>None</code> or returning <code>default</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">unwrap_or</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">))</span>\n<span class=\"c1\"># 5</span>\n\n<span class=\"c1\"># Type hint is required here.</span>\n<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Option</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">unwrap_or</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">))</span>\n<span class=\"c1\"># 10</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">default</span><span class=\"p\">:</span> <span class=\"s1\">&#39;T&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"s1\">&#39;T&#39;</span>:</span></span>", "funcdef": "def"}, "sain.option.Some.unwrap_or_else": {"fullname": "sain.option.Some.unwrap_or_else", "modulename": "sain.option", "qualname": "Some.unwrap_or_else", "kind": "function", "doc": "<p>Unwrap the inner value either returning if its not <code>None</code> or calling <code>f</code> to get a default value.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">unwrap_or_else</span><span class=\"p\">(</span><span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">))</span>\n<span class=\"c1\"># 5</span>\n\n<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Option</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">unwrap_or_else</span><span class=\"p\">(</span><span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">))</span>\n<span class=\"c1\"># True</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"s1\">&#39;FnOnce[T]&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"s1\">&#39;T&#39;</span>:</span></span>", "funcdef": "def"}, "sain.option.Some.unwrap_unchecked": {"fullname": "sain.option.Some.unwrap_unchecked", "modulename": "sain.option", "qualname": "Some.unwrap_unchecked", "kind": "function", "doc": "<p>Returns the contained Some value without checking that the value is not None.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">v</span><span class=\"p\">:</span> <span class=\"n\">Option</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"mf\">1.2</span><span class=\"p\">)</span>\n<span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">unwrap_unchecked</span><span class=\"p\">()</span> <span class=\"c1\"># 1.2</span>\n\n<span class=\"n\">v</span><span class=\"p\">:</span> <span class=\"n\">Option</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">unwrap_unchecked</span><span class=\"p\">())</span> <span class=\"c1\"># Undefined Behavior</span>\n</code></pre>\n</div>\n\n<h1 id=\"safety\">Safety \u26a0\ufe0f</h1>\n\n<p>Calling this method on <code>None</code> is considered <a href=\"https://en.wikipedia.org/wiki/Undefined_behavior\">undefined behavior</a>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"s1\">&#39;T&#39;</span>:</span></span>", "funcdef": "def"}, "sain.option.Some.expect": {"fullname": "sain.option.Some.expect", "modulename": "sain.option", "qualname": "Some.expect", "kind": "function", "doc": "<p>Returns the contained value if it is not <code>None</code> otherwise raises a <code>RuntimeError</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"s2\">&quot;Hello&quot;</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s2\">&quot;Value is None&quot;</span><span class=\"p\">))</span>\n<span class=\"c1\"># &quot;Hello&quot;</span>\n\n<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Option</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s2\">&quot;Value is None&quot;</span><span class=\"p\">))</span>\n<span class=\"c1\"># RuntimeError(&quot;Value is None&quot;)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"s1\">&#39;T&#39;</span>:</span></span>", "funcdef": "def"}, "sain.option.Some.map": {"fullname": "sain.option.Some.map", "modulename": "sain.option", "qualname": "Some.map", "kind": "function", "doc": "<p>Map the inner value to another type. Returning <code>Some(None)</code> if <code>T</code> is <code>None</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"mf\">5.0</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"mf\">2.0</span><span class=\"p\">))</span>\n<span class=\"c1\"># Some(10.0)</span>\n\n<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Option</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n<span class=\"c1\"># Some(None)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Fn[T, U]&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"s1\">&#39;Option[U]&#39;</span>:</span></span>", "funcdef": "def"}, "sain.option.Some.map_or": {"fullname": "sain.option.Some.map_or", "modulename": "sain.option", "qualname": "Some.map_or", "kind": "function", "doc": "<p>Map the inner value to another type or return <code>default</code> if its <code>None</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Option</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"mf\">5.0</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># map to int.</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">map_or</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">))</span>\n<span class=\"c1\"># 6</span>\n\n<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Option</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">map_or</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">)</span>\n<span class=\"c1\"># 0</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">default</span><span class=\"p\">:</span> <span class=\"s1\">&#39;U&#39;</span>, </span><span class=\"param\"><span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Fn[T, U]&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"s1\">&#39;U&#39;</span>:</span></span>", "funcdef": "def"}, "sain.option.Some.map_or_else": {"fullname": "sain.option.Some.map_or_else", "modulename": "sain.option", "qualname": "Some.map_or_else", "kind": "function", "doc": "<p>Map the inner value to another type, or return <code>default()</code> if its <code>None</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"k\">def</span> <span class=\"nf\">default</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">getsizeof</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">())</span>\n\n<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Option</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"mf\">5.0</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># map to int.</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">map_or_else</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">))</span>\n<span class=\"c1\"># 6</span>\n\n<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Option</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">map_or_else</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">)</span>\n<span class=\"c1\"># 28 &lt;- size of object()</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">default</span><span class=\"p\">:</span> <span class=\"s1\">&#39;FnOnce[U]&#39;</span>, </span><span class=\"param\"><span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Fn[T, U]&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"s1\">&#39;U&#39;</span>:</span></span>", "funcdef": "def"}, "sain.option.Some.filter": {"fullname": "sain.option.Some.filter", "modulename": "sain.option", "qualname": "Some.filter", "kind": "function", "doc": "<p>Returns <code>Some(None)</code> if the contained value is <code>None</code>,</p>\n\n<p>otherwise calls the predicate and returns <code>Some(T)</code> if the predicate returns <code>True</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"mi\">1</span> <span class=\"ow\">in</span> <span class=\"n\">x</span><span class=\"p\">))</span>\n<span class=\"c1\"># Some([1, 2, 3])</span>\n\n<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Option</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span> <span class=\"c1\"># or Some(None)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"mi\">1</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">x</span><span class=\"p\">))</span>\n<span class=\"c1\"># None</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">predicate</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Fn[T, bool]&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"s1\">&#39;Option[T]&#39;</span>:</span></span>", "funcdef": "def"}, "sain.option.Some.take": {"fullname": "sain.option.Some.take", "modulename": "sain.option", "qualname": "Some.take", "kind": "function", "doc": "<p>Take the value from <code>Self</code>, Setting it to <code>None</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">original</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"s2\">&quot;Hi&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">new</span> <span class=\"o\">=</span> <span class=\"n\">original</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">()</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">original</span><span class=\"p\">,</span> <span class=\"n\">new</span><span class=\"p\">)</span>\n<span class=\"c1\"># None, Some(&quot;Hi&quot;)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"s1\">&#39;Option[T]&#39;</span>:</span></span>", "funcdef": "def"}, "sain.option.Some.take_if": {"fullname": "sain.option.Some.take_if", "modulename": "sain.option", "qualname": "Some.take_if", "kind": "function", "doc": "<p>Take the value from <code>Self</code>, Setting it to <code>None</code> only if predicate returns <code>True</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"k\">def</span> <span class=\"nf\">validate</span><span class=\"p\">(</span><span class=\"n\">email</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bool</span><span class=\"p\">:</span>\n    <span class=\"c1\"># you can obviously validate this better.</span>\n    <span class=\"k\">return</span> <span class=\"n\">email</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"s1\">&#39;@&#39;</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span>\n\n<span class=\"n\">original</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"s2\">&quot;flex@gg.com&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">valid</span> <span class=\"o\">=</span> <span class=\"n\">original</span><span class=\"o\">.</span><span class=\"n\">take_if</span><span class=\"p\">(</span><span class=\"n\">validate</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">is_allowed</span><span class=\"o\">.</span><span class=\"n\">is_some</span><span class=\"p\">()</span> <span class=\"ow\">and</span> <span class=\"n\">original</span><span class=\"o\">.</span><span class=\"n\">is_none</span><span class=\"p\">()</span>\n\n<span class=\"n\">original</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"s2\">&quot;mail.example.com&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">invalid</span> <span class=\"o\">=</span> <span class=\"n\">original</span><span class=\"o\">.</span><span class=\"n\">take_if</span><span class=\"p\">(</span><span class=\"n\">validate</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">invalid</span><span class=\"o\">.</span><span class=\"n\">is_none</span><span class=\"p\">()</span> <span class=\"ow\">and</span> <span class=\"n\">original</span><span class=\"o\">.</span><span class=\"n\">is_some</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">predicate</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Fn[T, bool]&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"s1\">&#39;Option[T]&#39;</span>:</span></span>", "funcdef": "def"}, "sain.option.Some.replace": {"fullname": "sain.option.Some.replace", "modulename": "sain.option", "qualname": "Some.replace", "kind": "function", "doc": "<p>Replace the contained value with another value.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Option</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">&quot;Hello&quot;</span><span class=\"p\">)</span>\n<span class=\"c1\"># Some(&quot;Hello&quot;)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"s1\">&#39;T&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"s1\">&#39;Option[T]&#39;</span>:</span></span>", "funcdef": "def"}, "sain.option.Some.and_ok": {"fullname": "sain.option.Some.and_ok", "modulename": "sain.option", "qualname": "Some.and_ok", "kind": "function", "doc": "<p>Returns <code>Some(None)</code> if either contained value is <code>None</code>,</p>\n\n<p>Otherwise return <code>optb</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">Option</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"n\">Option</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"s2\">&quot;bye&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">and_ok</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">is_none</span><span class=\"p\">()</span>\n\n<span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">Option</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"n\">Option</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"s2\">&quot;bye&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">and_ok</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"s2\">&quot;bye&quot;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">optb</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Option[T]&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"s1\">&#39;Option[U]&#39;</span>:</span></span>", "funcdef": "def"}, "sain.option.Some.and_then": {"fullname": "sain.option.Some.and_then", "modulename": "sain.option", "qualname": "Some.and_then", "kind": "function", "doc": "<p>Returns <code>Some(None)</code> if the contained value is <code>None</code>, otherwise call <code>f()</code>\non <code>T</code> and return <code>Option[T]</code> if it's value not <code>None</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">and_then</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"mi\">2</span><span class=\"p\">)))</span>\n<span class=\"c1\"># Some(10)</span>\n\n<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Option</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">and_then</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)))</span>\n<span class=\"c1\"># Some(None)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Fn[T, Option[U]]&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"s1\">&#39;Option[U]&#39;</span>:</span></span>", "funcdef": "def"}, "sain.option.Some.iter": {"fullname": "sain.option.Some.iter", "modulename": "sain.option", "qualname": "Some.iter", "kind": "function", "doc": "<p>Returns an iterator over the contained value.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">sain</span> <span class=\"kn\">import</span> <span class=\"n\">Some</span>\n<span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"s2\">&quot;gg&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">next</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"s2\">&quot;gg&quot;</span><span class=\"p\">)</span>\n\n<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Option</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">next</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">is_none</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"s1\">&#39;Iter[T]&#39;</span>:</span></span>", "funcdef": "def"}, "sain.option.Some.as_ref": {"fullname": "sain.option.Some.as_ref", "modulename": "sain.option", "qualname": "Some.as_ref", "kind": "function", "doc": "<p>Returns immutable <code>Some[sain.cell.Cell[T]]</code> if the contained value is not <code>None</code>,</p>\n\n<p>Otherwise returns <code>Some(None)</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">as_ref</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">unwrap</span><span class=\"p\">()</span>\n<span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">object</span> <span class=\"o\">=</span> <span class=\"mi\">0</span> <span class=\"c1\"># FrozenError!</span>\n\n<span class=\"n\">owned</span> <span class=\"o\">=</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">object</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">owned</span><span class=\"p\">)</span> <span class=\"c1\"># 5</span>\n\n<span class=\"c1\"># Create a copy of object.</span>\n<span class=\"n\">clone</span> <span class=\"o\">=</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n<span class=\"n\">clone</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>  <span class=\"c1\"># Thats fine.</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">clone</span> <span class=\"o\">==</span> <span class=\"n\">owned</span><span class=\"p\">)</span> <span class=\"c1\"># False, 0 != 5</span>\n\n<span class=\"c1\"># None object.</span>\n<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Option</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">as_ref</span><span class=\"p\">())</span>\n<span class=\"c1\"># Some(None)</span>\n</code></pre>\n</div>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong><code>dataclasses.FrozenInstanceError</code></strong>: When attempting to modify the contained value. Use <code>sain.AsRef.copy()</code> method to create a copy.</li>\n</ul>\n\n<p>Or just use <code>.as_mut()</code> if you're dealing with mutable objects.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"s1\">&#39;Option[_ref.Cell[T]]&#39;</span>:</span></span>", "funcdef": "def"}, "sain.option.Some.as_mut": {"fullname": "sain.option.Some.as_mut", "modulename": "sain.option", "qualname": "Some.as_mut", "kind": "function", "doc": "<p>Returns mutable <code>Some[sain.cell.RefCell[T]]</code> if the contained value is not <code>None</code>,</p>\n\n<p>Otherwise returns <code>Some(None)</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">as_mut</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">unwrap</span><span class=\"p\">()</span>\n<span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">object</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span> <span class=\"c1\"># Some(RefCell(0))</span>\n\n<span class=\"c1\"># None object.</span>\n<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Option</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">as_mut</span><span class=\"p\">())</span>\n<span class=\"c1\"># Some(None)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"s1\">&#39;Option[_ref.RefCell[T]]&#39;</span>:</span></span>", "funcdef": "def"}, "sain.option.Some.is_some": {"fullname": "sain.option.Some.is_some", "modulename": "sain.option", "qualname": "Some.is_some", "kind": "function", "doc": "<p>Returns <code>True</code> if the contained value is not <code>None</code>, otherwise returns <code>False</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">is_some</span><span class=\"p\">())</span>\n<span class=\"c1\"># True</span>\n\n<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Option</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">is_some</span><span class=\"p\">())</span>\n<span class=\"c1\"># False</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "sain.option.Some.is_some_and": {"fullname": "sain.option.Some.is_some_and", "modulename": "sain.option", "qualname": "Some.is_some_and", "kind": "function", "doc": "<p>Returns <code>True</code> if the contained value is not <code>None</code> and\nthe predicate returns <code>True</code>, otherwise returns <code>False</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">is_some_and</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">&gt;</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"c1\"># True</span>\n\n<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Option</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">is_some_and</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">&gt;</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"c1\"># False</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">predicate</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Fn[T, bool]&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "sain.option.Some.is_none": {"fullname": "sain.option.Some.is_none", "modulename": "sain.option", "qualname": "Some.is_none", "kind": "function", "doc": "<p>Returns <code>True</code> if the contained value is <code>None</code>, otherwise returns <code>False</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">is_none</span><span class=\"p\">())</span>\n<span class=\"c1\"># False</span>\n\n<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Option</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">is_none</span><span class=\"p\">())</span>\n<span class=\"c1\"># True</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "sain.option.Option": {"fullname": "sain.option.Option", "modulename": "sain.option", "qualname": "Option", "kind": "variable", "doc": "<p>A type hint for a value that can be <code>Some&lt;T&gt;</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"kn\">import</span> <span class=\"n\">annotations</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">typing</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sain</span> <span class=\"kn\">import</span> <span class=\"n\">Some</span>\n\n<span class=\"k\">if</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">CHECKING</span><span class=\"p\">:</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">sain</span> <span class=\"kn\">import</span> <span class=\"n\">Option</span>\n\n<span class=\"n\">foo</span><span class=\"p\">:</span> <span class=\"n\">Option</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "default_value": "sain.option.Some[~T]"}, "sain.option.NOTHING": {"fullname": "sain.option.NOTHING", "modulename": "sain.option", "qualname": "NOTHING", "kind": "variable", "doc": "<p>A constant that is always <code>Option&lt;None&gt;</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">sain</span> <span class=\"kn\">import</span> <span class=\"n\">NOTHING</span><span class=\"p\">,</span> <span class=\"n\">Some</span>\n\n<span class=\"n\">place_holder</span> <span class=\"o\">=</span> <span class=\"n\">NOTHING</span>\n<span class=\"k\">assert</span> <span class=\"n\">NOTHING</span> <span class=\"o\">==</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span> <span class=\"c1\"># True</span>\n</code></pre>\n</div>\n", "annotation": ": Option[None]", "default_value": "None"}, "sain.result": {"fullname": "sain.result", "modulename": "sain.result", "kind": "module", "doc": "<p>Error handling with the <code>Result</code> type.</p>\n\n<p><code>Result[T, E]</code> is a drop-in replacement for exceptions <code>try/except</code></p>\n\n<p>where<code>Ok(T)</code> is the successful value and <code>Err(E)</code> is the error result.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">enum</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">sain</span> <span class=\"kn\">import</span> <span class=\"n\">Result</span><span class=\"p\">,</span> <span class=\"n\">Ok</span><span class=\"p\">,</span> <span class=\"n\">Err</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">FileError</span><span class=\"p\">(</span><span class=\"n\">enum</span><span class=\"o\">.</span><span class=\"n\">Enum</span><span class=\"p\">):</span>\n    <span class=\"n\">READ</span> <span class=\"o\">=</span> <span class=\"n\">enum</span><span class=\"o\">.</span><span class=\"n\">auto</span><span class=\"p\">()</span>\n    <span class=\"n\">WRITE</span> <span class=\"o\">=</span> <span class=\"n\">enum</span><span class=\"o\">.</span><span class=\"n\">auto</span><span class=\"p\">()</span>\n    <span class=\"n\">EMPTY</span> <span class=\"o\">=</span> <span class=\"n\">enum</span><span class=\"o\">.</span><span class=\"n\">auto</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">ready_lines</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">FileError</span><span class=\"p\">]:</span>\n    <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"s1\">&#39;r&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">file</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">lines</span> <span class=\"o\">:=</span> <span class=\"n\">file</span><span class=\"o\">.</span><span class=\"n\">readable</span><span class=\"p\">()):</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">lines</span><span class=\"p\">:</span>\n                <span class=\"c1\"># File is readable but doesn&#39;t contain any lines.</span>\n                <span class=\"k\">return</span> <span class=\"n\">Err</span><span class=\"p\">(</span><span class=\"n\">FileError</span><span class=\"o\">.</span><span class=\"n\">EMPTY</span><span class=\"p\">)</span>\n\n            <span class=\"c1\"># File is not readable.</span>\n            <span class=\"k\">return</span> <span class=\"n\">Err</span><span class=\"p\">(</span><span class=\"n\">FileError</span><span class=\"o\">.</span><span class=\"n\">READ</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Success.</span>\n        <span class=\"k\">return</span> <span class=\"n\">Ok</span><span class=\"p\">(</span><span class=\"n\">file</span><span class=\"o\">.</span><span class=\"n\">readlines</span><span class=\"p\">())</span>\n</code></pre>\n</div>\n\n<p>simple pattern matching in <code>Result</code> is a straight-forward way to handle the returned value.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"k\">match</span> <span class=\"n\">read_lines</span><span class=\"p\">(</span><span class=\"s1\">&#39;quotes.txt&#39;</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Ok(T) represents the success result which&#39;s `list[str]`.</span>\n    <span class=\"k\">case</span> <span class=\"n\">Ok</span><span class=\"p\">(</span><span class=\"n\">lines</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">line</span> <span class=\"ow\">in</span> <span class=\"n\">lines</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Error represents the error contained value which&#39;s the enum `FileError`.</span>\n    <span class=\"k\">case</span> <span class=\"n\">Err</span><span class=\"p\">(</span><span class=\"n\">reason</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Match the reason.</span>\n        <span class=\"k\">match</span> <span class=\"n\">reason</span><span class=\"p\">:</span>\n            <span class=\"k\">case</span> <span class=\"n\">FileError</span><span class=\"o\">.</span><span class=\"n\">READ</span> <span class=\"o\">|</span> <span class=\"n\">FileError</span><span class=\"o\">.</span><span class=\"n\">WRITE</span><span class=\"p\">:</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Can&#39;t read/write file.&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">case</span> <span class=\"n\">FileError</span><span class=\"o\">.</span><span class=\"n\">EMPTY</span><span class=\"p\">:</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;No lines in file.&quot;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>In addition to working with pattern matching, <code>Result</code> provides a\nwide variety of different methods.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"c1\"># This will either return the `Ok` value or default if it was `Err</span>\n<span class=\"c1\"># which&#39;s equivalent to `unwrap_or` method.</span>\n\n<span class=\"c1\"># On Ok</span>\n<span class=\"n\">username</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Ok</span><span class=\"p\">(</span><span class=\"s2\">&quot;Name&quot;</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">username</span> <span class=\"o\">|</span> <span class=\"s2\">&quot;default_name&quot;</span><span class=\"p\">)</span>  <span class=\"c1\"># name</span>\n\n<span class=\"c1\"># On Err</span>\n<span class=\"n\">username</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Err</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">username</span> <span class=\"o\">|</span> <span class=\"s2\">&quot;default_name&quot;</span><span class=\"p\">)</span>  <span class=\"c1\"># default_name</span>\n</code></pre>\n</div>\n"}, "sain.result.Ok": {"fullname": "sain.result.Ok", "modulename": "sain.result", "qualname": "Ok", "kind": "class", "doc": "<p>Contains the success value of <code>Result[T, ...]</code>.</p>\n", "bases": "typing.Generic[~T]"}, "sain.result.Ok.__init__": {"fullname": "sain.result.Ok.__init__", "modulename": "sain.result", "qualname": "Ok.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">_inner</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">T</span></span>)</span>"}, "sain.result.Ok.is_ok": {"fullname": "sain.result.Ok.is_ok", "modulename": "sain.result", "qualname": "Ok.is_ok", "kind": "function", "doc": "<p>Returns <code>True</code> if the contained value is <code>Ok</code> and <code>False</code> if it an <code>Err</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Ok</span><span class=\"p\">(</span><span class=\"s2\">&quot;value&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">is_ok</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"kc\">True</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"kc\">True</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.result.Ok.is_ok_and": {"fullname": "sain.result.Ok.is_ok_and", "modulename": "sain.result", "qualname": "Ok.is_ok_and", "kind": "function", "doc": "<p>Returns <code>True</code> if the contained value is <code>Ok</code> and <code>f()</code> returns True..</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Ok</span><span class=\"p\">(</span><span class=\"s2\">&quot;value&quot;</span><span class=\"p\">)</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">is_ok_and</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">inner</span><span class=\"p\">:</span> <span class=\"n\">inner</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;value&quot;</span><span class=\"p\">)</span>\n<span class=\"c1\"># True</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "sain.result.Ok.is_err": {"fullname": "sain.result.Ok.is_err", "modulename": "sain.result", "qualname": "Ok.is_err", "kind": "function", "doc": "<p>Returns <code>True</code> if the contained value is <code>Err</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Ok</span><span class=\"p\">(</span><span class=\"s2\">&quot;value&quot;</span><span class=\"p\">)</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">is_err</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"kc\">False</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"kc\">False</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.result.Ok.is_err_and": {"fullname": "sain.result.Ok.is_err_and", "modulename": "sain.result", "qualname": "Ok.is_err_and", "kind": "function", "doc": "<p>Returns <code>True</code> if the contained value is <code>Ok</code> and <code>f()</code> returns True..</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Ok</span><span class=\"p\">(</span><span class=\"s2\">&quot;value&quot;</span><span class=\"p\">)</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">is_err_and</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">inner</span><span class=\"p\">:</span> <span class=\"n\">inner</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;value&quot;</span><span class=\"p\">)</span>\n<span class=\"c1\"># False</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"kc\">False</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.result.Ok.expect": {"fullname": "sain.result.Ok.expect", "modulename": "sain.result", "qualname": "Ok.expect", "kind": "function", "doc": "<p>Return the underlying value if it was <code>Ok</code>, Raising <code>RuntimeError</code>\nif it was <code>Err</code> with <code>message</code> passed to it.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">ok</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Ok</span><span class=\"p\">(</span><span class=\"s2\">&quot;owo&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">ok</span><span class=\"o\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s2\">&quot;err&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># owo</span>\n\n<span class=\"n\">err</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Err</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"n\">err</span><span class=\"o\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s2\">&quot;err&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># RuntimeError(&quot;err&quot;)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">T</span>:</span></span>", "funcdef": "def"}, "sain.result.Ok.unwrap": {"fullname": "sain.result.Ok.unwrap", "modulename": "sain.result", "qualname": "Ok.unwrap", "kind": "function", "doc": "<p>Return the underlying value if it was <code>Ok</code>, Raising <code>RuntimeError</code> if it was <code>Err</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">ok</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Ok</span><span class=\"p\">(</span><span class=\"s2\">&quot;owo&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">ok</span><span class=\"o\">.</span><span class=\"n\">unwrap</span><span class=\"p\">()</span> <span class=\"c1\"># owo</span>\n\n<span class=\"n\">err</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Err</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"n\">err</span><span class=\"o\">.</span><span class=\"n\">unwrap</span><span class=\"p\">()</span> <span class=\"c1\"># RuntimeError</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">T</span>:</span></span>", "funcdef": "def"}, "sain.result.Ok.unwrap_or": {"fullname": "sain.result.Ok.unwrap_or", "modulename": "sain.result", "qualname": "Ok.unwrap_or", "kind": "function", "doc": "<p>Return the underlying value if it was <code>Ok</code>, returning <code>default</code> if it was <code>Err</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">ok</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Ok</span><span class=\"p\">(</span><span class=\"s2\">&quot;OwO&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">ok</span><span class=\"o\">.</span><span class=\"n\">unwrap_or</span><span class=\"p\">(</span><span class=\"s2\">&quot;uwu&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># OwO</span>\n\n<span class=\"n\">err</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Err</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"n\">err</span><span class=\"o\">.</span><span class=\"n\">unwrap_or</span><span class=\"p\">(</span><span class=\"s2\">&quot;uwu&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># uwu</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">default</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">T</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">T</span>:</span></span>", "funcdef": "def"}, "sain.result.Ok.unwrap_or_else": {"fullname": "sain.result.Ok.unwrap_or_else", "modulename": "sain.result", "qualname": "Ok.unwrap_or_else", "kind": "function", "doc": "<p>Return the contained <code>Ok</code> value or computes it from <code>f()</code> if it was <code>Err</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">ok</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Ok</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"n\">ok</span><span class=\"o\">.</span><span class=\"n\">unwrap_or_else</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">e</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"c1\"># 4</span>\n\n<span class=\"n\">err</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Err</span><span class=\"p\">(</span><span class=\"s2\">&quot;word&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">err</span><span class=\"o\">.</span><span class=\"n\">unwrap_or_else</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">e</span><span class=\"p\">:</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">))</span> <span class=\"c1\"># 4</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">E</span><span class=\"p\">],</span> <span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">T</span>:</span></span>", "funcdef": "def"}, "sain.result.Ok.unwrap_err": {"fullname": "sain.result.Ok.unwrap_err", "modulename": "sain.result", "qualname": "Ok.unwrap_err", "kind": "function", "doc": "<p>Return the contained <code>Err</code> value, Raising if it was <code>Ok</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">ok</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Ok</span><span class=\"p\">(</span><span class=\"s2\">&quot;buh&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">ok</span><span class=\"o\">.</span><span class=\"n\">unwrap_err</span><span class=\"p\">()</span>  <span class=\"c1\"># RuntimeError</span>\n\n<span class=\"n\">err</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Err</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"n\">err</span><span class=\"o\">.</span><span class=\"n\">unwrap_err</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"kc\">None</span>\n<span class=\"c1\"># True</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">NoReturn</span>:</span></span>", "funcdef": "def"}, "sain.result.Ok.ok": {"fullname": "sain.result.Ok.ok", "modulename": "sain.result", "qualname": "Ok.ok", "kind": "function", "doc": "<p>Convert <code>Ok[T]</code> to <code>Option[T]</code> if the contained value was <code>Ok</code> and <code>Option[None]</code> if it was <code>Err</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Ok</span><span class=\"p\">(</span><span class=\"s2\">&quot;buh&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">ok</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">is_some</span><span class=\"p\">()</span> <span class=\"c1\"># True</span>\n\n<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Err</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">ok</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">is_none</span><span class=\"p\">()</span> <span class=\"c1\"># True</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">option</span><span class=\"o\">.</span><span class=\"n\">Some</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.result.Ok.err": {"fullname": "sain.result.Ok.err", "modulename": "sain.result", "qualname": "Ok.err", "kind": "function", "doc": "<p>Convert <code>Err[T]</code> to <code>Option[T]</code> if the contained value was <code>Err</code> and <code>Option[None]</code> if it was <code>Ok</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Ok</span><span class=\"p\">(</span><span class=\"s2\">&quot;buh&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">is_none</span><span class=\"p\">()</span> <span class=\"c1\"># True</span>\n\n<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Err</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">is_some</span><span class=\"p\">()</span> <span class=\"c1\"># True</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">option</span><span class=\"o\">.</span><span class=\"n\">Some</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.result.Ok.inspect": {"fullname": "sain.result.Ok.inspect", "modulename": "sain.result", "qualname": "Ok.inspect", "kind": "function", "doc": "<p>Call a function to the contained value if it was <code>Ok</code> and do nothing if it was <code>Err</code></p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"k\">def</span> <span class=\"nf\">sink</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n    <span class=\"c1\"># do something with value</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Called &quot;</span> <span class=\"o\">+</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n\n<span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Ok</span><span class=\"p\">(</span><span class=\"s2\">&quot;ok&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">inspect</span><span class=\"p\">(</span><span class=\"n\">sink</span><span class=\"p\">)</span> <span class=\"c1\"># &quot;Called ok&quot;</span>\n\n<span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Err</span><span class=\"p\">(</span><span class=\"s2\">&quot;err&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">inspect</span><span class=\"p\">(</span><span class=\"n\">sink</span><span class=\"p\">)</span> <span class=\"c1\"># None</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "sain.result.Ok.inspect_err": {"fullname": "sain.result.Ok.inspect_err", "modulename": "sain.result", "qualname": "Ok.inspect_err", "kind": "function", "doc": "<p>Call a function to the contained value if it was <code>Err</code> and do nothing if it was <code>Ok</code></p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"k\">def</span> <span class=\"nf\">sink</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n    <span class=\"c1\"># do something with value</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Called &quot;</span> <span class=\"o\">+</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n\n<span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Ok</span><span class=\"p\">(</span><span class=\"s2\">&quot;ok&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">inspect_err</span><span class=\"p\">(</span><span class=\"n\">sink</span><span class=\"p\">)</span> <span class=\"c1\"># None</span>\n\n<span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Err</span><span class=\"p\">(</span><span class=\"s2\">&quot;err&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">inspect_err</span><span class=\"p\">(</span><span class=\"n\">sink</span><span class=\"p\">)</span> <span class=\"c1\"># Called err</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">E</span><span class=\"p\">],</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "sain.result.Ok.map": {"fullname": "sain.result.Ok.map", "modulename": "sain.result", "qualname": "Ok.map", "kind": "function", "doc": "<p>Map <code>Ok[T]</code> to <code>Ok[U]</code> by applying a function to <code>T</code>, Leaving <code>Err</code> untouched.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">ok</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Ok</span><span class=\"p\">(</span><span class=\"s2\">&quot;1&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">ok</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">c</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"c1\"># Ok(2)</span>\n\n<span class=\"n\">err</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Err</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">err</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"o\">.</span><span class=\"n\">upper</span><span class=\"p\">)</span> <span class=\"c1\"># Err(0)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">Ok</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.result.Ok.map_or": {"fullname": "sain.result.Ok.map_or", "modulename": "sain.result", "qualname": "Ok.map_or", "kind": "function", "doc": "<p>Returns the provided default value if <code>Err</code>,</p>\n\n<p>Otherwise extracts the <code>Ok</code> value and maps it to <code>f()</code></p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Ok</span><span class=\"p\">(</span><span class=\"s2\">&quot;foo&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">map_or</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">c</span><span class=\"p\">:</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">),</span> <span class=\"mi\">42</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">3</span>\n\n<span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Err</span><span class=\"p\">(</span><span class=\"s2\">&quot;bar&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">map_or</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">c</span><span class=\"p\">:</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">),</span> <span class=\"mi\">42</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">42</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">default</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">U</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">U</span>:</span></span>", "funcdef": "def"}, "sain.result.Ok.map_or_else": {"fullname": "sain.result.Ok.map_or_else", "modulename": "sain.result", "qualname": "Ok.map_or_else", "kind": "function", "doc": "<p>Returns the provided default value from a function if <code>Err</code>,</p>\n\n<p>Otherwise extracts the <code>Ok</code> value and maps it to <code>f()</code></p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Ok</span><span class=\"p\">(</span><span class=\"s2\">&quot;four&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">map_or_else</span><span class=\"p\">(</span>\n    <span class=\"k\">lambda</span> <span class=\"n\">c</span><span class=\"p\">:</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">),</span>\n    <span class=\"k\">lambda</span> <span class=\"n\">err</span><span class=\"p\">:</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">)</span>\n<span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">8</span>\n\n<span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Err</span><span class=\"p\">(</span><span class=\"s2\">&quot;bar&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">map_or_else</span><span class=\"p\">(</span>\n    <span class=\"k\">lambda</span> <span class=\"n\">c</span><span class=\"p\">:</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">),</span>\n    <span class=\"k\">lambda</span> <span class=\"n\">err</span><span class=\"p\">:</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">)</span>\n<span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">3</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">default</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">E</span><span class=\"p\">],</span> <span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"o\">/</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">U</span>:</span></span>", "funcdef": "def"}, "sain.result.Ok.map_err": {"fullname": "sain.result.Ok.map_err", "modulename": "sain.result", "qualname": "Ok.map_err", "kind": "function", "doc": "<p>Maps a <code>Result[T, E]</code> to <code>Result[T, U]</code>, leaving <code>OK[T]</code> untouched.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Ok</span><span class=\"p\">(</span><span class=\"s2\">&quot;blue&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">map_err</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">err</span><span class=\"p\">:</span> <span class=\"n\">err</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"c1\"># Ok(&quot;blue&quot;)</span>\n\n<span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Err</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">map_err</span><span class=\"p\">(</span><span class=\"nb\">float</span><span class=\"p\">)</span> <span class=\"c1\"># Err(5.0)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">E</span><span class=\"p\">],</span> <span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Self</span>:</span></span>", "funcdef": "def"}, "sain.result.Ok.iter": {"fullname": "sain.result.Ok.iter", "modulename": "sain.result", "qualname": "Ok.iter", "kind": "function", "doc": "<p>Return an iterator over the contained value.</p>\n\n<p>If it was <code>Ok[T]</code> then it will return <code>Iter[T]</code>, otherwise it will return <code>Iter[Never]</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">c</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Ok</span><span class=\"p\">(</span><span class=\"s2\">&quot;blue&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">next</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"s2\">&quot;blue&quot;</span><span class=\"p\">)</span>\n\n<span class=\"n\">c</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Err</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">next</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"o\">.</span><span class=\"n\">Iterator</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.result.Err": {"fullname": "sain.result.Err", "modulename": "sain.result", "qualname": "Err", "kind": "class", "doc": "<p>Contains the error value of <code>Result[..., E]</code>.</p>\n", "bases": "typing.Generic[~E]"}, "sain.result.Err.__init__": {"fullname": "sain.result.Err.__init__", "modulename": "sain.result", "qualname": "Err.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">_inner</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">E</span></span>)</span>"}, "sain.result.Err.is_ok": {"fullname": "sain.result.Err.is_ok", "modulename": "sain.result", "qualname": "Err.is_ok", "kind": "function", "doc": "<p>Returns <code>True</code> if the contained value is <code>Ok</code> and <code>False</code> if it an <code>Err</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Err</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">is_ok</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"kc\">False</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"kc\">False</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.result.Err.is_ok_and": {"fullname": "sain.result.Err.is_ok_and", "modulename": "sain.result", "qualname": "Err.is_ok_and", "kind": "function", "doc": "<p>Returns <code>True</code> if the contained value is <code>Ok</code> and <code>f()</code> returns True.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Err</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">is_ok_and</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">inner</span><span class=\"p\">:</span> <span class=\"n\">inner</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;value&quot;</span><span class=\"p\">)</span>\n<span class=\"c1\"># False</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">E</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"kc\">False</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.result.Err.is_err": {"fullname": "sain.result.Err.is_err", "modulename": "sain.result", "qualname": "Err.is_err", "kind": "function", "doc": "<p>Returns <code>True</code> if the contained value is <code>Err</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Err</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">is_err</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"kc\">True</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"kc\">True</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.result.Err.is_err_and": {"fullname": "sain.result.Err.is_err_and", "modulename": "sain.result", "qualname": "Err.is_err_and", "kind": "function", "doc": "<p>Returns <code>True</code> if the contained value is <code>Ok</code> and <code>f()</code> returns True..</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Err</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">is_err_and</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">err</span><span class=\"p\">:</span> <span class=\"n\">err</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"c1\"># True</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">E</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "sain.result.Err.expect": {"fullname": "sain.result.Err.expect", "modulename": "sain.result", "qualname": "Err.expect", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">msg</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">NoReturn</span>:</span></span>", "funcdef": "def"}, "sain.result.Err.expect_err": {"fullname": "sain.result.Err.expect_err", "modulename": "sain.result", "qualname": "Err.expect_err", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">E</span>:</span></span>", "funcdef": "def"}, "sain.result.Err.unwrap": {"fullname": "sain.result.Err.unwrap", "modulename": "sain.result", "qualname": "Err.unwrap", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">NoReturn</span>:</span></span>", "funcdef": "def"}, "sain.result.Err.unwrap_or": {"fullname": "sain.result.Err.unwrap_or", "modulename": "sain.result", "qualname": "Err.unwrap_or", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">_Err__default</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">T</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">T</span>:</span></span>", "funcdef": "def"}, "sain.result.Err.unwrap_or_else": {"fullname": "sain.result.Err.unwrap_or_else", "modulename": "sain.result", "qualname": "Err.unwrap_or_else", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">E</span><span class=\"p\">],</span> <span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">T</span>:</span></span>", "funcdef": "def"}, "sain.result.Err.unwrap_err": {"fullname": "sain.result.Err.unwrap_err", "modulename": "sain.result", "qualname": "Err.unwrap_err", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">E</span>:</span></span>", "funcdef": "def"}, "sain.result.Err.inspect": {"fullname": "sain.result.Err.inspect", "modulename": "sain.result", "qualname": "Err.inspect", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "sain.result.Err.inspect_err": {"fullname": "sain.result.Err.inspect_err", "modulename": "sain.result", "qualname": "Err.inspect_err", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">E</span><span class=\"p\">],</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "sain.result.Err.ok": {"fullname": "sain.result.Err.ok", "modulename": "sain.result", "qualname": "Err.ok", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">option</span><span class=\"o\">.</span><span class=\"n\">Some</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.result.Err.err": {"fullname": "sain.result.Err.err", "modulename": "sain.result", "qualname": "Err.err", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">option</span><span class=\"o\">.</span><span class=\"n\">Some</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">E</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.result.Err.map": {"fullname": "sain.result.Err.map", "modulename": "sain.result", "qualname": "Err.map", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">E</span><span class=\"p\">],</span> <span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Self</span>:</span></span>", "funcdef": "def"}, "sain.result.Err.map_or": {"fullname": "sain.result.Err.map_or", "modulename": "sain.result", "qualname": "Err.map_or", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">E</span><span class=\"p\">],</span> <span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">default</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">U</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">U</span>:</span></span>", "funcdef": "def"}, "sain.result.Err.map_or_else": {"fullname": "sain.result.Err.map_or_else", "modulename": "sain.result", "qualname": "Err.map_or_else", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">default</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">E</span><span class=\"p\">],</span> <span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"o\">/</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">U</span>:</span></span>", "funcdef": "def"}, "sain.result.Err.map_err": {"fullname": "sain.result.Err.map_err", "modulename": "sain.result", "qualname": "Err.map_err", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">E</span><span class=\"p\">],</span> <span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">Err</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.result.Err.iter": {"fullname": "sain.result.Err.iter", "modulename": "sain.result", "qualname": "Err.iter", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"o\">.</span><span class=\"n\">Iterator</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Never</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.result.Result": {"fullname": "sain.result.Result", "modulename": "sain.result", "qualname": "Result", "kind": "variable", "doc": "<p></p>\n", "annotation": ": TypeAlias", "default_value": "Union[sain.result.Ok[~T], sain.result.Err[~E]]"}, "sain.sync": {"fullname": "sain.sync", "modulename": "sain.sync", "kind": "module", "doc": "<p>Synchronization primitives.</p>\n"}, "sain.sync.Lazy": {"fullname": "sain.sync.Lazy", "modulename": "sain.sync", "qualname": "Lazy", "kind": "class", "doc": "<p>A thread-safe value that gets lazily initialized at runtime.</p>\n\n<p>This isn't some sort of magic, the inner value is set to <code>None</code> when first initialized,\nThen this <code>None</code> gets replaced at runtime when calling <code>Lazy.set</code> method.</p>\n\n<p>This is a well-known approach used in Python to lazily initialize expensive objects\nthat needs to be <code>None</code> until it gets initialized with a function call at runtime.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"nd\">@dataclass</span>\n<span class=\"k\">class</span> <span class=\"nc\">Config</span><span class=\"p\">:</span>\n    <span class=\"n\">token</span><span class=\"p\">:</span> <span class=\"n\">Lazy</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Lazy</span><span class=\"p\">()</span>\n\n<span class=\"nd\">@dataclass</span>\n<span class=\"k\">class</span> <span class=\"nc\">Application</span><span class=\"p\">:</span>\n    <span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"n\">Config</span>\n\n<span class=\"c1\"># application entry point.</span>\n<span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">:</span> <span class=\"n\">Application</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n    <span class=\"n\">token</span> <span class=\"o\">=</span> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">token</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s1\">&#39;token&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">token</span><span class=\"o\">=</span><span class=\"n\">token</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "bases": "typing.Generic[~T]"}, "sain.sync.Lazy.is_initialized": {"fullname": "sain.sync.Lazy.is_initialized", "modulename": "sain.sync", "qualname": "Lazy.is_initialized", "kind": "variable", "doc": "<p>Whether the contained value is initialized or not.</p>\n", "annotation": ": bool"}, "sain.sync.Lazy.get": {"fullname": "sain.sync.Lazy.get", "modulename": "sain.sync", "qualname": "Lazy.get", "kind": "function", "doc": "<p>Hold ownership of the contained value and return it.</p>\n\n<p>This ensures that the value is only generated once and kept\nacquired until its set again with <code>Lazy.set</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">option</span><span class=\"o\">.</span><span class=\"n\">Some</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.sync.Lazy.get_unchecked": {"fullname": "sain.sync.Lazy.get_unchecked", "modulename": "sain.sync", "qualname": "Lazy.get_unchecked", "kind": "function", "doc": "<p>Get the contained value without checking if it was initialized.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">sqrt</span> <span class=\"o\">=</span> <span class=\"n\">Lazy</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]()</span>\n<span class=\"n\">inner</span> <span class=\"o\">=</span> <span class=\"n\">sqrt</span><span class=\"o\">.</span><span class=\"n\">get_unchecked</span><span class=\"p\">()</span> <span class=\"c1\"># Undefined Behavior</span>\n\n<span class=\"c1\"># Initialize it first.</span>\n<span class=\"n\">sqrt</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"mf\">2.0</span><span class=\"p\">))</span>\n<span class=\"n\">inner</span> <span class=\"o\">=</span> <span class=\"n\">sqrt</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n\n<h1 id=\"safety\">Safety \u26a0\ufe0f</h1>\n\n<p>Calling this method on <code>None</code> is considered <a href=\"https://en.wikipedia.org/wiki/Undefined_behavior\">undefined behavior</a>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">T</span>:</span></span>", "funcdef": "def"}, "sain.sync.Lazy.set": {"fullname": "sain.sync.Lazy.set", "modulename": "sain.sync", "qualname": "Lazy.set", "kind": "function", "doc": "<p>Set the contained value to <code>value</code>.</p>\n\n<p>This will clear any ownership of the value until the next <code>get</code> call.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">lazy</span> <span class=\"o\">=</span> <span class=\"n\">Lazy</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">lazy</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s2\">&quot;foo&quot;</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">T</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">T</span>:</span></span>", "funcdef": "def"}, "sain.sync.Once": {"fullname": "sain.sync.Once", "modulename": "sain.sync", "qualname": "Once", "kind": "class", "doc": "<p>A synchronization primitive which can be written to only once.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">sain.once</span> <span class=\"kn\">import</span> <span class=\"n\">Once</span>\n<span class=\"kn\">from</span> <span class=\"nn\">uuid</span> <span class=\"kn\">import</span> <span class=\"n\">uuid4</span><span class=\"p\">,</span> <span class=\"n\">UUID</span>\n\n<span class=\"n\">UUID</span><span class=\"p\">:</span> <span class=\"n\">Once</span><span class=\"p\">[</span><span class=\"n\">UUID</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Once</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">start</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n    <span class=\"k\">assert</span> <span class=\"n\">UUID</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">is_none</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># First initialization.</span>\n    <span class=\"n\">UUID</span><span class=\"o\">.</span><span class=\"n\">get_or</span><span class=\"p\">(</span><span class=\"n\">uuid4</span><span class=\"p\">())</span> <span class=\"c1\"># some-uuid</span>\n\n    <span class=\"c1\"># Won&#39;t set, returns the same uuid that got initialized first.</span>\n    <span class=\"n\">UUID</span><span class=\"o\">.</span><span class=\"n\">get_or</span><span class=\"p\">(</span><span class=\"n\">uuid4</span><span class=\"p\">())</span> <span class=\"c1\"># some-uuid</span>\n</code></pre>\n</div>\n", "bases": "typing.Generic[~T]"}, "sain.sync.Once.is_set": {"fullname": "sain.sync.Once.is_set", "modulename": "sain.sync", "qualname": "Once.is_set", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, "sain.sync.Once.get": {"fullname": "sain.sync.Once.get", "modulename": "sain.sync", "qualname": "Once.get", "kind": "function", "doc": "<p>Gets the stored value, returning <code>None</code> if not initialized.</p>\n\n<p>This method will never block.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">option</span><span class=\"o\">.</span><span class=\"n\">Some</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.sync.Once.get_unchecked": {"fullname": "sain.sync.Once.get_unchecked", "modulename": "sain.sync", "qualname": "Once.get_unchecked", "kind": "function", "doc": "<p>Get the contained value without checking if it was initialized.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">cell</span> <span class=\"o\">=</span> <span class=\"n\">Once</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]()</span>\n<span class=\"n\">inner</span> <span class=\"o\">=</span> <span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">get_unchecked</span><span class=\"p\">()</span> <span class=\"c1\"># Undefined Behavior!!</span>\n\n<span class=\"c1\"># Initialize it first.</span>\n<span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">get_or</span><span class=\"p\">(</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"mf\">2.0</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># At this point of the program,</span>\n<span class=\"c1\"># it is guaranteed that the value is initialized.</span>\n<span class=\"n\">inner</span> <span class=\"o\">=</span> <span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">get_unchecked</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n\n<h1 id=\"safety\">Safety \u26a0\ufe0f</h1>\n\n<p>Calling this method on <code>None</code> is considered <a href=\"https://en.wikipedia.org/wiki/Undefined_behavior\">undefined behavior</a>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">T</span>:</span></span>", "funcdef": "def"}, "sain.sync.Once.set": {"fullname": "sain.sync.Once.set", "modulename": "sain.sync", "qualname": "Once.set", "kind": "function", "doc": "<p>Set the const value if its not set. returning <code>T</code> if its already set.</p>\n\n<p>This method may block if another thread is trying to initialize the value.\nThe value is guaranteed to be set, just not necessarily the one provided.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">flag</span> <span class=\"o\">=</span> <span class=\"n\">Once</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]()</span>\n<span class=\"c1\"># flag is empty.</span>\n<span class=\"k\">assert</span> <span class=\"n\">flag</span><span class=\"o\">.</span><span class=\"n\">get_or</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"kc\">True</span><span class=\"o\">.</span>\n\n<span class=\"c1\"># flag is not empty, so it returns the value we set first.</span>\n<span class=\"k\">assert</span> <span class=\"n\">flag</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">Err</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong><code>sain.Result[None, T]</code></strong>: This cell returns <code>Ok(None)</code> if it was empty. otherwise <code>Err(T)</code> if it was full.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">v</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">T</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">Ok</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">],</span> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">Err</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, "sain.sync.Once.clear": {"fullname": "sain.sync.Once.clear", "modulename": "sain.sync", "qualname": "Once.clear", "kind": "function", "doc": "<p>Clear the inner value, Setting it to <code>None</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "sain.sync.Once.get_or": {"fullname": "sain.sync.Once.get_or", "modulename": "sain.sync", "qualname": "Once.get_or", "kind": "function", "doc": "<p>Get the value if it was not initialized, Otherwise set <code>init</code> value and returning it.</p>\n\n<p>Many threads may call <code>get_or</code> concurrently with different\ninitializing functions, but it is guaranteed that only one function\nwill be executed.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">UUID</span><span class=\"p\">:</span> <span class=\"n\">Once</span><span class=\"p\">[</span><span class=\"n\">UUID</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Once</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n    <span class=\"k\">assert</span> <span class=\"n\">UUID</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">is_none</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># First initialization.</span>\n    <span class=\"n\">UUID</span><span class=\"o\">.</span><span class=\"n\">get_or</span><span class=\"p\">(</span><span class=\"n\">uuid4</span><span class=\"p\">())</span> <span class=\"c1\"># some-uuid</span>\n\n    <span class=\"c1\"># Won&#39;t set, returns the same uuid that got initialized first.</span>\n    <span class=\"n\">UUID</span><span class=\"o\">.</span><span class=\"n\">get_or</span><span class=\"p\">(</span><span class=\"n\">uuid4</span><span class=\"p\">())</span> <span class=\"c1\"># some-uuid</span>\n   \n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">init</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">T</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">T</span>:</span></span>", "funcdef": "def"}, "sain.sync.Once.get_or_with": {"fullname": "sain.sync.Once.get_or_with", "modulename": "sain.sync", "qualname": "Once.get_or_with", "kind": "function", "doc": "<p>Gets the contents of the cell, initializing it with <code>f</code> if the cell\nwas empty.</p>\n\n<p>Many threads may call <code>get_or_with</code> concurrently with different\ninitializing functions, but it is guaranteed that only one function\nwill be executed.</p>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">cell</span> <span class=\"o\">=</span> <span class=\"n\">Once</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]()</span>\n<span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">get_or_with</span><span class=\"p\">(</span><span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"mi\">92</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">value</span> <span class=\"o\">==</span> <span class=\"mi\">92</span>\n\n<span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">get_or_with</span><span class=\"p\">(</span><span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">value</span> <span class=\"o\">==</span> <span class=\"mi\">92</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">T</span>:</span></span>", "funcdef": "def"}, "sain.sync.Once.into_inner": {"fullname": "sain.sync.Once.into_inner", "modulename": "sain.sync", "qualname": "Once.into_inner", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.sync.LazyFuture": {"fullname": "sain.sync.LazyFuture", "modulename": "sain.sync", "qualname": "LazyFuture", "kind": "class", "doc": "<p>A thread-safe value that gets lazily initialized at runtime asynchronously.</p>\n\n<p>This isn't some sort of magic, the inner value is set to <code>None</code> when first initialized,\nThen this <code>None</code> gets replaced at runtime when calling <code>LazyFuture.set</code> method.</p>\n\n<p>This is a well-known approach used in Python to lazily initialize expensive objects\nthat needs to be <code>None</code> until it gets initialized with a function call at runtime.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"nd\">@dataclass</span>\n<span class=\"k\">class</span> <span class=\"nc\">Config</span><span class=\"p\">:</span>\n    <span class=\"n\">token</span><span class=\"p\">:</span> <span class=\"n\">Lazy</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Lazy</span><span class=\"p\">()</span>\n\n<span class=\"nd\">@dataclass</span>\n<span class=\"k\">class</span> <span class=\"nc\">Application</span><span class=\"p\">:</span>\n    <span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"n\">Config</span>\n\n<span class=\"c1\"># application entry point.</span>\n<span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">:</span> <span class=\"n\">Application</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n    <span class=\"n\">token</span> <span class=\"o\">=</span> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">token</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s1\">&#39;token&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">token</span><span class=\"o\">=</span><span class=\"n\">token</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "bases": "typing.Generic[~T]"}, "sain.sync.LazyFuture.is_initialized": {"fullname": "sain.sync.LazyFuture.is_initialized", "modulename": "sain.sync", "qualname": "LazyFuture.is_initialized", "kind": "variable", "doc": "<p>Whether the contained value is initialized or not.</p>\n", "annotation": ": bool"}, "sain.sync.LazyFuture.get": {"fullname": "sain.sync.LazyFuture.get", "modulename": "sain.sync", "qualname": "LazyFuture.get", "kind": "function", "doc": "<p>Hold ownership of the contained value and return it.</p>\n\n<p>This ensures that the value is only generated once and kept acquired.</p>\n\n<h1 id=\"safety\">Safety \u26a0\ufe0f</h1>\n\n<p>Calling this method on <code>None</code> is considered <a href=\"https://en.wikipedia.org/wiki/Undefined_behavior\">undefined behavior</a>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">option</span><span class=\"o\">.</span><span class=\"n\">Some</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "async def"}, "sain.sync.LazyFuture.set": {"fullname": "sain.sync.LazyFuture.set", "modulename": "sain.sync", "qualname": "LazyFuture.set", "kind": "function", "doc": "<p>Set the contained value to <code>value</code>.</p>\n\n<p>This will clear any ownership of the value until the next <code>get</code> call.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">lazy</span> <span class=\"o\">=</span> <span class=\"n\">LazyFuture</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">lazy</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s2\">&quot;foo&quot;</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">T</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">T</span>:</span></span>", "funcdef": "def"}, "sain.sync.AsyncOnce": {"fullname": "sain.sync.AsyncOnce", "modulename": "sain.sync", "qualname": "AsyncOnce", "kind": "class", "doc": "<p>A synchronization primitive which can be written to only once.</p>\n\n<p>This is an <code>async</code> version of <code>Once</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">sain.once</span> <span class=\"kn\">import</span> <span class=\"n\">Once</span>\n<span class=\"kn\">from</span> <span class=\"nn\">uuid</span> <span class=\"kn\">import</span> <span class=\"n\">uuid4</span><span class=\"p\">,</span> <span class=\"n\">UUID</span>\n\n<span class=\"c1\"># A global uuid</span>\n<span class=\"n\">UUID</span><span class=\"p\">:</span> <span class=\"n\">AsyncOnce</span><span class=\"p\">[</span><span class=\"n\">UUID</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">AsyncOnce</span><span class=\"p\">()</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">start</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n    <span class=\"k\">assert</span> <span class=\"n\">UUID</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">is_none</span><span class=\"p\">()</span>\n    <span class=\"c1\"># First initialization.</span>\n    <span class=\"k\">await</span> <span class=\"n\">UUID</span><span class=\"o\">.</span><span class=\"n\">get_or</span><span class=\"p\">(</span><span class=\"n\">uuid4</span><span class=\"p\">())</span> <span class=\"c1\"># some-uuid</span>\n    <span class=\"c1\"># Won&#39;t set, returns the same uuid that got initialized first.</span>\n    <span class=\"k\">await</span> <span class=\"n\">UUID</span><span class=\"o\">.</span><span class=\"n\">get_or</span><span class=\"p\">(</span><span class=\"n\">uuid4</span><span class=\"p\">())</span> <span class=\"c1\"># some-uuid</span>\n</code></pre>\n</div>\n", "bases": "typing.Generic[~T]"}, "sain.sync.AsyncOnce.is_set": {"fullname": "sain.sync.AsyncOnce.is_set", "modulename": "sain.sync", "qualname": "AsyncOnce.is_set", "kind": "variable", "doc": "<p>Whether this inner value has ben initialized or not.</p>\n", "annotation": ": bool"}, "sain.sync.AsyncOnce.get": {"fullname": "sain.sync.AsyncOnce.get", "modulename": "sain.sync", "qualname": "AsyncOnce.get", "kind": "function", "doc": "<p>Gets the stored value. <code>Some(None)</code> is returned if nothing is stored.</p>\n\n<p>This method will never block.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">option</span><span class=\"o\">.</span><span class=\"n\">Some</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.sync.AsyncOnce.get_unchecked": {"fullname": "sain.sync.AsyncOnce.get_unchecked", "modulename": "sain.sync", "qualname": "AsyncOnce.get_unchecked", "kind": "function", "doc": "<p>Get the contained value without checking if it was initialized.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">cell</span> <span class=\"o\">=</span> <span class=\"n\">AsyncOnce</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]()</span>\n<span class=\"n\">inner</span> <span class=\"o\">=</span> <span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">get_unchecked</span><span class=\"p\">()</span> <span class=\"c1\"># Undefined Behavior!!</span>\n\n<span class=\"c1\"># Initialize it first.</span>\n<span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">get_or</span><span class=\"p\">(</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"mf\">2.0</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># At this point of the program,</span>\n<span class=\"c1\"># it is guaranteed that the value is initialized.</span>\n<span class=\"n\">inner</span> <span class=\"o\">=</span> <span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">get_unchecked</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n\n<h1 id=\"safety\">Safety \u26a0\ufe0f</h1>\n\n<p>Calling this method on <code>None</code> is considered <a href=\"https://en.wikipedia.org/wiki/Undefined_behavior\">undefined behavior</a>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">T</span>:</span></span>", "funcdef": "def"}, "sain.sync.AsyncOnce.set": {"fullname": "sain.sync.AsyncOnce.set", "modulename": "sain.sync", "qualname": "AsyncOnce.set", "kind": "function", "doc": "<p>Set the const value if its not set. returning <code>T</code> if its already set.</p>\n\n<p>if another thread is trying to initialize the value, The value is guaranteed to be set,\njust not necessarily the one provided.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">flag</span> <span class=\"o\">=</span> <span class=\"n\">AsyncOnce</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]()</span>\n<span class=\"c1\"># flag is empty.</span>\n<span class=\"k\">assert</span> <span class=\"k\">await</span> <span class=\"n\">flag</span><span class=\"o\">.</span><span class=\"n\">get_or</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"kc\">True</span><span class=\"o\">.</span>\n<span class=\"c1\"># flag is not empty, so it returns the value we set first.</span>\n<span class=\"k\">assert</span> <span class=\"k\">await</span> <span class=\"n\">flag</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">Err</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong><code>sain.Result[None, T]</code></strong>: This cell returns <code>Ok(None)</code> if it was empty. otherwise <code>Err(T)</code> if it was full.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">v</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">T</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">Ok</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">],</span> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">Err</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "async def"}, "sain.sync.AsyncOnce.clear": {"fullname": "sain.sync.AsyncOnce.clear", "modulename": "sain.sync", "qualname": "AsyncOnce.clear", "kind": "function", "doc": "<p>Clear the inner value, Setting it to <code>None</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "sain.sync.AsyncOnce.get_or": {"fullname": "sain.sync.AsyncOnce.get_or", "modulename": "sain.sync", "qualname": "AsyncOnce.get_or", "kind": "function", "doc": "<p>Gets the contents of the cell, initializing it with <code>init</code> if the cell\nwas empty.</p>\n\n<p>Many threads may call <code>get_or</code> concurrently with different\ninitializing functions, but it is guaranteed that only one function\nwill be executed.</p>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">sain.sync</span> <span class=\"kn\">import</span> <span class=\"n\">AsyncOnce</span>\n\n<span class=\"n\">cell</span> <span class=\"o\">=</span> <span class=\"n\">AsyncOnce</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]()</span>\n<span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">get_or</span><span class=\"p\">(</span><span class=\"mi\">92</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">value</span> <span class=\"o\">==</span> <span class=\"mi\">92</span>\n\n<span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">get_or</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">value</span> <span class=\"o\">==</span> <span class=\"mi\">92</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">init</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">T</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">T</span>:</span></span>", "funcdef": "async def"}, "sain.sync.AsyncOnce.get_or_with": {"fullname": "sain.sync.AsyncOnce.get_or_with", "modulename": "sain.sync", "qualname": "AsyncOnce.get_or_with", "kind": "function", "doc": "<p>Gets the contents of the cell, initializing it with <code>f</code> if the cell\nwas empty.</p>\n\n<p>Many threads may call <code>get_or_with</code> concurrently with different\ninitializing functions, but it is guaranteed that only one function\nwill be executed.</p>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">sain.sync</span> <span class=\"kn\">import</span> <span class=\"n\">AsyncOnce</span>\n\n<span class=\"n\">cell</span> <span class=\"o\">=</span> <span class=\"n\">AsyncOnce</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]()</span>\n<span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">get_or_with</span><span class=\"p\">(</span><span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"mi\">92</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">value</span> <span class=\"o\">==</span> <span class=\"mi\">92</span>\n\n<span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">get_or_init</span><span class=\"p\">(</span><span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">value</span> <span class=\"o\">==</span> <span class=\"mi\">92</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">T</span>:</span></span>", "funcdef": "async def"}}, "docInfo": {"sain": {"qualname": 0, "fullname": 1, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 45}, "sain.cfg": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 136}, "sain.cfg_attr": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 303, "bases": 0, "doc": 424}, "sain.Default": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 4, "doc": 158}, "sain.Default.__init__": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 18, "bases": 0, "doc": 3}, "sain.Default.default": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 10}, "sain.Some": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 7, "doc": 232}, "sain.Some.__init__": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 27, "bases": 0, "doc": 3}, "sain.Some.default": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 26, "bases": 0, "doc": 53}, "sain.Some.into_inner": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 22, "bases": 0, "doc": 126}, "sain.Some.unwrap": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 152}, "sain.Some.unwrap_or": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 33, "bases": 0, "doc": 142}, "sain.Some.unwrap_or_else": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 51, "bases": 0, "doc": 150}, "sain.Some.unwrap_unchecked": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 148}, "sain.Some.expect": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 156}, "sain.Some.map": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 73, "bases": 0, "doc": 146}, "sain.Some.map_or": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 69, "bases": 0, "doc": 164}, "sain.Some.map_or_else": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 91, "bases": 0, "doc": 210}, "sain.Some.filter": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 68, "bases": 0, "doc": 215}, "sain.Some.take": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 96}, "sain.Some.take_if": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 68, "bases": 0, "doc": 262}, "sain.Some.replace": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 44, "bases": 0, "doc": 88}, "sain.Some.and_ok": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 60, "bases": 0, "doc": 231}, "sain.Some.and_then": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 84, "bases": 0, "doc": 189}, "sain.Some.iter": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 137}, "sain.Some.as_ref": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 46, "bases": 0, "doc": 307}, "sain.Some.as_mut": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 46, "bases": 0, "doc": 169}, "sain.Some.is_some": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 124}, "sain.Some.is_some_and": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 48, "bases": 0, "doc": 175}, "sain.Some.is_none": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 123}, "sain.Option": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 3, "signature": 0, "bases": 0, "doc": 3}, "sain.NOTHING": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 1, "signature": 0, "bases": 0, "doc": 3}, "sain.Iter": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 3, "doc": 275}, "sain.Iter.__init__": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 3}, "sain.Iter.clone": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 107}, "sain.Iterator": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 7, "doc": 509}, "sain.Iterator.default": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 28, "bases": 0, "doc": 81}, "sain.Iterator.collect": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 113, "bases": 0, "doc": 156}, "sain.Iterator.to_vec": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 37, "bases": 0, "doc": 89}, "sain.Iterator.sink": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 92}, "sain.Iterator.raw_parts": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 44, "bases": 0, "doc": 152}, "sain.Iterator.next": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 18, "bases": 0, "doc": 154}, "sain.Iterator.cloned": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 254}, "sain.Iterator.copied": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 254}, "sain.Iterator.map": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 78, "bases": 0, "doc": 146}, "sain.Iterator.filter": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 68, "bases": 0, "doc": 138}, "sain.Iterator.take": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 42, "bases": 0, "doc": 152}, "sain.Iterator.skip": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 42, "bases": 0, "doc": 106}, "sain.Iterator.enumerate": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 54, "bases": 0, "doc": 118}, "sain.Iterator.take_while": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 68, "bases": 0, "doc": 189}, "sain.Iterator.drop_while": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 68, "bases": 0, "doc": 171}, "sain.Iterator.all": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 48, "bases": 0, "doc": 152}, "sain.Iterator.any": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 48, "bases": 0, "doc": 157}, "sain.Iterator.zip": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 74, "bases": 0, "doc": 209}, "sain.Iterator.sort": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 75, "bases": 0, "doc": 168}, "sain.Iterator.reversed": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 114}, "sain.Iterator.union": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 62, "bases": 0, "doc": 166}, "sain.Iterator.first": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 18, "bases": 0, "doc": 101}, "sain.Iterator.last": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 18, "bases": 0, "doc": 101}, "sain.Iterator.count": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 71}, "sain.Iterator.for_each": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 53, "bases": 0, "doc": 129}, "sain.Iterator.async_for_each": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 149, "bases": 0, "doc": 294}, "sain.todo": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 121}, "sain.deprecated": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 123, "bases": 0, "doc": 265}, "sain.unimplemented": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 74, "bases": 0, "doc": 148}, "sain.doc": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 34, "bases": 0, "doc": 152}, "sain.Ok": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 12}, "sain.Ok.__init__": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 17, "bases": 0, "doc": 3}, "sain.Ok.is_ok": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 20, "bases": 0, "doc": 100}, "sain.Ok.is_ok_and": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 48, "bases": 0, "doc": 119}, "sain.Ok.is_err": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 20, "bases": 0, "doc": 90}, "sain.Ok.is_err_and": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 54, "bases": 0, "doc": 119}, "sain.Ok.expect": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 170}, "sain.Ok.unwrap": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 141}, "sain.Ok.unwrap_or": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 33, "bases": 0, "doc": 161}, "sain.Ok.unwrap_or_else": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 52, "bases": 0, "doc": 177}, "sain.Ok.unwrap_err": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 144}, "sain.Ok.ok": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 165}, "sain.Ok.err": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 30, "bases": 0, "doc": 165}, "sain.Ok.inspect": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 53, "bases": 0, "doc": 217}, "sain.Ok.inspect_err": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 53, "bases": 0, "doc": 216}, "sain.Ok.map": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 73, "bases": 0, "doc": 183}, "sain.Ok.map_or": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 69, "bases": 0, "doc": 213}, "sain.Ok.map_or_else": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 97, "bases": 0, "doc": 266}, "sain.Ok.map_err": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 55, "bases": 0, "doc": 170}, "sain.Ok.iter": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 193}, "sain.Err": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 12}, "sain.Err.__init__": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 17, "bases": 0, "doc": 3}, "sain.Err.is_ok": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 20, "bases": 0, "doc": 96}, "sain.Err.is_ok_and": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 54, "bases": 0, "doc": 115}, "sain.Err.is_err": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 20, "bases": 0, "doc": 86}, "sain.Err.is_err_and": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 48, "bases": 0, "doc": 110}, "sain.Err.expect": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 24, "bases": 0, "doc": 3}, "sain.Err.expect_err": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 3}, "sain.Err.unwrap": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 3}, "sain.Err.unwrap_or": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 35, "bases": 0, "doc": 3}, "sain.Err.unwrap_or_else": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 52, "bases": 0, "doc": 3}, "sain.Err.unwrap_err": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 3}, "sain.Err.inspect": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 53, "bases": 0, "doc": 3}, "sain.Err.inspect_err": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 53, "bases": 0, "doc": 3}, "sain.Err.ok": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 30, "bases": 0, "doc": 3}, "sain.Err.err": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 3}, "sain.Err.map": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 50, "bases": 0, "doc": 3}, "sain.Err.map_or": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 69, "bases": 0, "doc": 3}, "sain.Err.map_or_else": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 97, "bases": 0, "doc": 3}, "sain.Err.map_err": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 68, "bases": 0, "doc": 3}, "sain.Err.iter": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 35, "bases": 0, "doc": 3}, "sain.Result": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 7, "signature": 0, "bases": 0, "doc": 3}, "sain.Vec": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 1029}, "sain.Vec.__init__": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 45, "bases": 0, "doc": 3}, "sain.Vec.with_capacity": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 28, "bases": 0, "doc": 216}, "sain.Vec.as_ref": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 91}, "sain.Vec.len": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 74}, "sain.Vec.capacity": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 138}, "sain.Vec.iter": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 115}, "sain.Vec.is_empty": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 11}, "sain.Vec.split_off": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 47, "bases": 0, "doc": 144}, "sain.Vec.split_first": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 58, "bases": 0, "doc": 181}, "sain.Vec.first": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 93}, "sain.Vec.truncate": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 24, "bases": 0, "doc": 92}, "sain.Vec.retain": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 48, "bases": 0, "doc": 131}, "sain.Vec.swap_remove": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 28, "bases": 0, "doc": 199}, "sain.Vec.push": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 26, "bases": 0, "doc": 72}, "sain.Vec.push_within_capacity": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 325}, "sain.Vec.reserve": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 24, "bases": 0, "doc": 257}, "sain.Vec.append": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 26, "bases": 0, "doc": 11}, "sain.Vec.get": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 42, "bases": 0, "doc": 125}, "sain.Vec.insert": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 36, "bases": 0, "doc": 101}, "sain.Vec.pop": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 52, "bases": 0, "doc": 120}, "sain.Vec.remove": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 26, "bases": 0, "doc": 117}, "sain.Vec.extend": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 42, "bases": 0, "doc": 128}, "sain.Vec.copy": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 37, "bases": 0, "doc": 127}, "sain.Vec.clear": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 83}, "sain.Vec.sort": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 65, "bases": 0, "doc": 100}, "sain.Vec.index": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 57, "bases": 0, "doc": 101}, "sain.Vec.count": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 26, "bases": 0, "doc": 116}, "sain.Error": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 929}, "sain.Error.__init__": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 24, "bases": 0, "doc": 3}, "sain.Error.message": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 7}, "sain.Error.source": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 44, "bases": 0, "doc": 10}, "sain.Error.description": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 7}, "sain.Box": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 243}, "sain.Box.__init__": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 44, "bases": 0, "doc": 3}, "sain.Box.has_expired": {"qualname": 3, "fullname": 4, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 10}, "sain.Box.on_expire": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 53, "bases": 0, "doc": 315}, "sain.Box.remaining": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 123}, "sain.Box.get": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 141}, "sain.MaybeUninit": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 366}, "sain.MaybeUninit.__init__": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 29, "bases": 0, "doc": 3}, "sain.MaybeUninit.uninit": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 70}, "sain.MaybeUninit.uninit_array": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 45, "bases": 0, "doc": 162}, "sain.MaybeUninit.assume_init": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 197}, "sain.MaybeUninit.write": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 28, "bases": 0, "doc": 215}, "sain.From": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 4, "doc": 217}, "sain.From.__init__": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 18, "bases": 0, "doc": 3}, "sain.From.from_t": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 28, "bases": 0, "doc": 6}, "sain.TryFrom": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 5, "doc": 326}, "sain.TryFrom.__init__": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 18, "bases": 0, "doc": 3}, "sain.TryFrom.try_from": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 70, "bases": 0, "doc": 6}, "sain.Into": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 3, "doc": 101}, "sain.Into.__init__": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 18, "bases": 0, "doc": 3}, "sain.Into.into": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 17, "bases": 0, "doc": 6}, "sain.TryInto": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 3, "doc": 271}, "sain.TryInto.__init__": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 18, "bases": 0, "doc": 3}, "sain.TryInto.try_into": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 58, "bases": 0, "doc": 6}, "sain.boxed": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 21}, "sain.boxed.Box": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 243}, "sain.boxed.Box.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 44, "bases": 0, "doc": 3}, "sain.boxed.Box.has_expired": {"qualname": 3, "fullname": 5, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 10}, "sain.boxed.Box.on_expire": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 53, "bases": 0, "doc": 315}, "sain.boxed.Box.remaining": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 123}, "sain.boxed.Box.get": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 141}, "sain.cfg.cfg_attr": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 161, "bases": 0, "doc": 424}, "sain.cfg.cfg": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 156, "bases": 0, "doc": 323}, "sain.collections": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 120}, "sain.collections.Vec": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 1029}, "sain.collections.Vec.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 45, "bases": 0, "doc": 3}, "sain.collections.Vec.with_capacity": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 28, "bases": 0, "doc": 216}, "sain.collections.Vec.as_ref": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 91}, "sain.collections.Vec.len": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 74}, "sain.collections.Vec.capacity": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 138}, "sain.collections.Vec.iter": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 115}, "sain.collections.Vec.is_empty": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 11}, "sain.collections.Vec.split_off": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 47, "bases": 0, "doc": 144}, "sain.collections.Vec.split_first": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 58, "bases": 0, "doc": 181}, "sain.collections.Vec.first": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 93}, "sain.collections.Vec.truncate": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 24, "bases": 0, "doc": 92}, "sain.collections.Vec.retain": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 48, "bases": 0, "doc": 131}, "sain.collections.Vec.swap_remove": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 28, "bases": 0, "doc": 199}, "sain.collections.Vec.push": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 26, "bases": 0, "doc": 72}, "sain.collections.Vec.push_within_capacity": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 325}, "sain.collections.Vec.reserve": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 24, "bases": 0, "doc": 257}, "sain.collections.Vec.append": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 26, "bases": 0, "doc": 11}, "sain.collections.Vec.get": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 42, "bases": 0, "doc": 125}, "sain.collections.Vec.insert": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 36, "bases": 0, "doc": 101}, "sain.collections.Vec.pop": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 52, "bases": 0, "doc": 120}, "sain.collections.Vec.remove": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 26, "bases": 0, "doc": 117}, "sain.collections.Vec.extend": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 42, "bases": 0, "doc": 128}, "sain.collections.Vec.copy": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 37, "bases": 0, "doc": 127}, "sain.collections.Vec.clear": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 83}, "sain.collections.Vec.sort": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 65, "bases": 0, "doc": 100}, "sain.collections.Vec.index": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 57, "bases": 0, "doc": 101}, "sain.collections.Vec.count": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 26, "bases": 0, "doc": 116}, "sain.collections.Bytes": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 295}, "sain.collections.Bytes.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 4, "bases": 0, "doc": 28}, "sain.collections.Bytes.from_str": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 24, "bases": 0, "doc": 104}, "sain.collections.Bytes.from_static": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 35, "bases": 0, "doc": 94}, "sain.collections.Bytes.from_bytes": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 52, "bases": 0, "doc": 84}, "sain.collections.Bytes.from_raw": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 62, "bases": 0, "doc": 242}, "sain.collections.Bytes.try_to_str": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 54, "bases": 0, "doc": 259}, "sain.collections.Bytes.to_str": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 345}, "sain.collections.Bytes.leak": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 39, "bases": 0, "doc": 152}, "sain.collections.Bytes.as_bytes": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 81}, "sain.collections.Bytes.as_ref": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 30, "bases": 0, "doc": 121}, "sain.collections.Bytes.as_mut": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 30, "bases": 0, "doc": 121}, "sain.collections.Bytes.raw_parts": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 65, "bases": 0, "doc": 22}, "sain.collections.Bytes.put": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 24, "bases": 0, "doc": 186}, "sain.collections.Bytes.put_raw": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 62, "bases": 0, "doc": 237}, "sain.collections.Bytes.put_bytes": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 52, "bases": 0, "doc": 195}, "sain.collections.Bytes.put_str": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 24, "bases": 0, "doc": 105}, "sain.collections.Bytes.len": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 87}, "sain.collections.Bytes.size": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 92}, "sain.collections.Bytes.iter": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 30, "bases": 0, "doc": 152}, "sain.collections.Bytes.is_empty": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 55}, "sain.collections.Bytes.copy": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 83}, "sain.collections.Bytes.clear": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 64}, "sain.collections.Bytes.index": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 58, "bases": 0, "doc": 56}, "sain.collections.Bytes.count": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 24, "bases": 0, "doc": 85}, "sain.collections.Bytes.insert": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 34, "bases": 0, "doc": 35}, "sain.collections.Bytes.pop": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 50, "bases": 0, "doc": 95}, "sain.collections.buf": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 14}, "sain.collections.buf.Bytes": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 295}, "sain.collections.buf.Bytes.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 4, "bases": 0, "doc": 28}, "sain.collections.buf.Bytes.from_str": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 24, "bases": 0, "doc": 104}, "sain.collections.buf.Bytes.from_static": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 35, "bases": 0, "doc": 94}, "sain.collections.buf.Bytes.from_bytes": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 52, "bases": 0, "doc": 84}, "sain.collections.buf.Bytes.from_raw": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 62, "bases": 0, "doc": 242}, "sain.collections.buf.Bytes.try_to_str": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 54, "bases": 0, "doc": 259}, "sain.collections.buf.Bytes.to_str": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 345}, "sain.collections.buf.Bytes.leak": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 39, "bases": 0, "doc": 152}, "sain.collections.buf.Bytes.as_bytes": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 81}, "sain.collections.buf.Bytes.as_ref": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 30, "bases": 0, "doc": 121}, "sain.collections.buf.Bytes.as_mut": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 30, "bases": 0, "doc": 121}, "sain.collections.buf.Bytes.raw_parts": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 65, "bases": 0, "doc": 22}, "sain.collections.buf.Bytes.put": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 24, "bases": 0, "doc": 186}, "sain.collections.buf.Bytes.put_raw": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 62, "bases": 0, "doc": 237}, "sain.collections.buf.Bytes.put_bytes": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 52, "bases": 0, "doc": 195}, "sain.collections.buf.Bytes.put_str": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 24, "bases": 0, "doc": 105}, "sain.collections.buf.Bytes.len": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 87}, "sain.collections.buf.Bytes.size": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 92}, "sain.collections.buf.Bytes.iter": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 30, "bases": 0, "doc": 152}, "sain.collections.buf.Bytes.is_empty": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 55}, "sain.collections.buf.Bytes.copy": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 83}, "sain.collections.buf.Bytes.clear": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 64}, "sain.collections.buf.Bytes.index": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 58, "bases": 0, "doc": 56}, "sain.collections.buf.Bytes.count": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 24, "bases": 0, "doc": 85}, "sain.collections.buf.Bytes.insert": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 34, "bases": 0, "doc": 35}, "sain.collections.buf.Bytes.pop": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 50, "bases": 0, "doc": 95}, "sain.collections.buf.Rawish": {"qualname": 1, "fullname": 4, "annotation": 2, "default_value": 11, "signature": 0, "bases": 0, "doc": 45}, "sain.collections.buf.Buffer": {"qualname": 1, "fullname": 4, "annotation": 2, "default_value": 7, "signature": 0, "bases": 0, "doc": 42}, "sain.collections.vec": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 129}, "sain.collections.vec.Vec": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 1029}, "sain.collections.vec.Vec.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 45, "bases": 0, "doc": 3}, "sain.collections.vec.Vec.with_capacity": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 28, "bases": 0, "doc": 216}, "sain.collections.vec.Vec.as_ref": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 91}, "sain.collections.vec.Vec.len": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 74}, "sain.collections.vec.Vec.capacity": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 138}, "sain.collections.vec.Vec.iter": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 115}, "sain.collections.vec.Vec.is_empty": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 11}, "sain.collections.vec.Vec.split_off": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 47, "bases": 0, "doc": 144}, "sain.collections.vec.Vec.split_first": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 58, "bases": 0, "doc": 181}, "sain.collections.vec.Vec.first": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 93}, "sain.collections.vec.Vec.truncate": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 24, "bases": 0, "doc": 92}, "sain.collections.vec.Vec.retain": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 48, "bases": 0, "doc": 131}, "sain.collections.vec.Vec.swap_remove": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 28, "bases": 0, "doc": 199}, "sain.collections.vec.Vec.push": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 26, "bases": 0, "doc": 72}, "sain.collections.vec.Vec.push_within_capacity": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 325}, "sain.collections.vec.Vec.reserve": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 24, "bases": 0, "doc": 257}, "sain.collections.vec.Vec.append": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 26, "bases": 0, "doc": 11}, "sain.collections.vec.Vec.get": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 42, "bases": 0, "doc": 125}, "sain.collections.vec.Vec.insert": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 36, "bases": 0, "doc": 101}, "sain.collections.vec.Vec.pop": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 52, "bases": 0, "doc": 120}, "sain.collections.vec.Vec.remove": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 26, "bases": 0, "doc": 117}, "sain.collections.vec.Vec.extend": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 42, "bases": 0, "doc": 128}, "sain.collections.vec.Vec.copy": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 37, "bases": 0, "doc": 127}, "sain.collections.vec.Vec.clear": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 83}, "sain.collections.vec.Vec.sort": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 65, "bases": 0, "doc": 100}, "sain.collections.vec.Vec.index": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 57, "bases": 0, "doc": 101}, "sain.collections.vec.Vec.count": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 26, "bases": 0, "doc": 116}, "sain.collections.vec.from_args": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 46, "bases": 0, "doc": 105}, "sain.convert": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 861}, "sain.convert.From": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 4, "doc": 217}, "sain.convert.From.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 18, "bases": 0, "doc": 3}, "sain.convert.From.from_t": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 28, "bases": 0, "doc": 6}, "sain.convert.TryFrom": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 5, "doc": 326}, "sain.convert.TryFrom.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 18, "bases": 0, "doc": 3}, "sain.convert.TryFrom.try_from": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 70, "bases": 0, "doc": 6}, "sain.convert.Into": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 3, "doc": 101}, "sain.convert.Into.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 18, "bases": 0, "doc": 3}, "sain.convert.Into.into": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 17, "bases": 0, "doc": 6}, "sain.convert.TryInto": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 3, "doc": 271}, "sain.convert.TryInto.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 18, "bases": 0, "doc": 3}, "sain.convert.TryInto.try_into": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 58, "bases": 0, "doc": 6}, "sain.default": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 114}, "sain.default.Default": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 4, "doc": 158}, "sain.default.Default.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 18, "bases": 0, "doc": 3}, "sain.default.Default.default": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 10}, "sain.error": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 228}, "sain.error.Error": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 929}, "sain.error.Error.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 24, "bases": 0, "doc": 3}, "sain.error.Error.message": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 7}, "sain.error.Error.source": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 44, "bases": 0, "doc": 10}, "sain.error.Error.description": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 7}, "sain.futures": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 9}, "sain.futures.spawn": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 132, "bases": 0, "doc": 342}, "sain.futures.loop": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 20, "bases": 0, "doc": 29}, "sain.iter": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 13}, "sain.iter.Iter": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 3, "doc": 275}, "sain.iter.Iter.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 3}, "sain.iter.Iter.clone": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 107}, "sain.iter.Iterator": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 7, "doc": 509}, "sain.iter.Iterator.default": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 28, "bases": 0, "doc": 81}, "sain.iter.Iterator.collect": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 113, "bases": 0, "doc": 156}, "sain.iter.Iterator.to_vec": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 37, "bases": 0, "doc": 89}, "sain.iter.Iterator.sink": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 92}, "sain.iter.Iterator.raw_parts": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 44, "bases": 0, "doc": 152}, "sain.iter.Iterator.next": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 18, "bases": 0, "doc": 154}, "sain.iter.Iterator.cloned": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 254}, "sain.iter.Iterator.copied": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 254}, "sain.iter.Iterator.map": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 78, "bases": 0, "doc": 146}, "sain.iter.Iterator.filter": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 68, "bases": 0, "doc": 138}, "sain.iter.Iterator.take": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 42, "bases": 0, "doc": 152}, "sain.iter.Iterator.skip": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 42, "bases": 0, "doc": 106}, "sain.iter.Iterator.enumerate": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 54, "bases": 0, "doc": 118}, "sain.iter.Iterator.take_while": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 68, "bases": 0, "doc": 189}, "sain.iter.Iterator.drop_while": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 68, "bases": 0, "doc": 171}, "sain.iter.Iterator.all": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 48, "bases": 0, "doc": 152}, "sain.iter.Iterator.any": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 48, "bases": 0, "doc": 157}, "sain.iter.Iterator.zip": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 74, "bases": 0, "doc": 209}, "sain.iter.Iterator.sort": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 75, "bases": 0, "doc": 168}, "sain.iter.Iterator.reversed": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 114}, "sain.iter.Iterator.union": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 62, "bases": 0, "doc": 166}, "sain.iter.Iterator.first": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 18, "bases": 0, "doc": 101}, "sain.iter.Iterator.last": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 18, "bases": 0, "doc": 101}, "sain.iter.Iterator.count": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 71}, "sain.iter.Iterator.for_each": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 53, "bases": 0, "doc": 129}, "sain.iter.Iterator.async_for_each": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 149, "bases": 0, "doc": 294}, "sain.iter.Cloned": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 5, "doc": 27}, "sain.iter.Cloned.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 3}, "sain.iter.Copied": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 5, "doc": 28}, "sain.iter.Copied.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 3}, "sain.iter.Take": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 5, "doc": 32}, "sain.iter.Take.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 42, "bases": 0, "doc": 3}, "sain.iter.Filter": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 5, "doc": 28}, "sain.iter.Filter.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 68, "bases": 0, "doc": 3}, "sain.iter.Map": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 6, "doc": 26}, "sain.iter.Map.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 70, "bases": 0, "doc": 3}, "sain.iter.Skip": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 5, "doc": 32}, "sain.iter.Skip.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 42, "bases": 0, "doc": 3}, "sain.iter.Enumerate": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 6, "doc": 29}, "sain.iter.Enumerate.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 42, "bases": 0, "doc": 3}, "sain.iter.TakeWhile": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 5, "doc": 31}, "sain.iter.TakeWhile.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 68, "bases": 0, "doc": 3}, "sain.iter.DropWhile": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 5, "doc": 31}, "sain.iter.DropWhile.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 68, "bases": 0, "doc": 3}, "sain.iter.Empty": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 5, "doc": 30}, "sain.iter.Empty.next": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 18, "bases": 0, "doc": 154}, "sain.iter.Empty.count": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 20, "bases": 0, "doc": 71}, "sain.iter.Empty.any": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 56, "bases": 0, "doc": 157}, "sain.iter.Empty.all": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 56, "bases": 0, "doc": 152}, "sain.iter.into_iter": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 55, "bases": 0, "doc": 126}, "sain.iter.empty": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 28, "bases": 0, "doc": 80}, "sain.iter.once": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 39, "bases": 0, "doc": 112}, "sain.iter.repeat": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 49, "bases": 0, "doc": 183}, "sain.macros": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 28}, "sain.macros.deprecated": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 123, "bases": 0, "doc": 265}, "sain.macros.unimplemented": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 74, "bases": 0, "doc": 148}, "sain.macros.todo": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 121}, "sain.macros.doc": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 34, "bases": 0, "doc": 152}, "sain.macros.unsafe": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 25}, "sain.option": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 25}, "sain.option.Some": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 7, "doc": 158}, "sain.option.Some.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 25, "bases": 0, "doc": 3}, "sain.option.Some.default": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 10}, "sain.option.Some.into_inner": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 20, "bases": 0, "doc": 126}, "sain.option.Some.unwrap": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 26, "bases": 0, "doc": 152}, "sain.option.Some.unwrap_or": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 142}, "sain.option.Some.unwrap_or_else": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 150}, "sain.option.Some.unwrap_unchecked": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 18, "bases": 0, "doc": 148}, "sain.option.Some.expect": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 28, "bases": 0, "doc": 156}, "sain.option.Some.map": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 33, "bases": 0, "doc": 146}, "sain.option.Some.map_or": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 47, "bases": 0, "doc": 164}, "sain.option.Some.map_or_else": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 47, "bases": 0, "doc": 210}, "sain.option.Some.filter": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 33, "bases": 0, "doc": 215}, "sain.option.Some.take": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 18, "bases": 0, "doc": 96}, "sain.option.Some.take_if": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 33, "bases": 0, "doc": 262}, "sain.option.Some.replace": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 88}, "sain.option.Some.and_ok": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 231}, "sain.option.Some.and_then": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 33, "bases": 0, "doc": 189}, "sain.option.Some.iter": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 18, "bases": 0, "doc": 137}, "sain.option.Some.as_ref": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 20, "bases": 0, "doc": 307}, "sain.option.Some.as_mut": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 20, "bases": 0, "doc": 169}, "sain.option.Some.is_some": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 124}, "sain.option.Some.is_some_and": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 29, "bases": 0, "doc": 175}, "sain.option.Some.is_none": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 123}, "sain.option.Option": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 3, "signature": 0, "bases": 0, "doc": 119}, "sain.option.NOTHING": {"qualname": 1, "fullname": 3, "annotation": 2, "default_value": 1, "signature": 0, "bases": 0, "doc": 83}, "sain.result": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 777}, "sain.result.Ok": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 12}, "sain.result.Ok.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 17, "bases": 0, "doc": 3}, "sain.result.Ok.is_ok": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 20, "bases": 0, "doc": 100}, "sain.result.Ok.is_ok_and": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 48, "bases": 0, "doc": 119}, "sain.result.Ok.is_err": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 20, "bases": 0, "doc": 90}, "sain.result.Ok.is_err_and": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 54, "bases": 0, "doc": 119}, "sain.result.Ok.expect": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 170}, "sain.result.Ok.unwrap": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 141}, "sain.result.Ok.unwrap_or": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 33, "bases": 0, "doc": 161}, "sain.result.Ok.unwrap_or_else": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 52, "bases": 0, "doc": 177}, "sain.result.Ok.unwrap_err": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 144}, "sain.result.Ok.ok": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 165}, "sain.result.Ok.err": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 30, "bases": 0, "doc": 165}, "sain.result.Ok.inspect": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 53, "bases": 0, "doc": 217}, "sain.result.Ok.inspect_err": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 53, "bases": 0, "doc": 216}, "sain.result.Ok.map": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 73, "bases": 0, "doc": 183}, "sain.result.Ok.map_or": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 69, "bases": 0, "doc": 213}, "sain.result.Ok.map_or_else": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 97, "bases": 0, "doc": 266}, "sain.result.Ok.map_err": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 55, "bases": 0, "doc": 170}, "sain.result.Ok.iter": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 193}, "sain.result.Err": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 12}, "sain.result.Err.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 17, "bases": 0, "doc": 3}, "sain.result.Err.is_ok": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 20, "bases": 0, "doc": 96}, "sain.result.Err.is_ok_and": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 54, "bases": 0, "doc": 115}, "sain.result.Err.is_err": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 20, "bases": 0, "doc": 86}, "sain.result.Err.is_err_and": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 48, "bases": 0, "doc": 110}, "sain.result.Err.expect": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 24, "bases": 0, "doc": 3}, "sain.result.Err.expect_err": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 3}, "sain.result.Err.unwrap": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 3}, "sain.result.Err.unwrap_or": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 35, "bases": 0, "doc": 3}, "sain.result.Err.unwrap_or_else": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 52, "bases": 0, "doc": 3}, "sain.result.Err.unwrap_err": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 3}, "sain.result.Err.inspect": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 53, "bases": 0, "doc": 3}, "sain.result.Err.inspect_err": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 53, "bases": 0, "doc": 3}, "sain.result.Err.ok": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 30, "bases": 0, "doc": 3}, "sain.result.Err.err": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 3}, "sain.result.Err.map": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 50, "bases": 0, "doc": 3}, "sain.result.Err.map_or": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 69, "bases": 0, "doc": 3}, "sain.result.Err.map_or_else": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 97, "bases": 0, "doc": 3}, "sain.result.Err.map_err": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 68, "bases": 0, "doc": 3}, "sain.result.Err.iter": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 35, "bases": 0, "doc": 3}, "sain.result.Result": {"qualname": 1, "fullname": 3, "annotation": 2, "default_value": 6, "signature": 0, "bases": 0, "doc": 3}, "sain.sync": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 5}, "sain.sync.Lazy": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 247}, "sain.sync.Lazy.is_initialized": {"qualname": 3, "fullname": 5, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 11}, "sain.sync.Lazy.get": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 36}, "sain.sync.Lazy.get_unchecked": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 140}, "sain.sync.Lazy.set": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 33, "bases": 0, "doc": 85}, "sain.sync.Once": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 190}, "sain.sync.Once.is_set": {"qualname": 3, "fullname": 5, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sain.sync.Once.get": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 22}, "sain.sync.Once.get_unchecked": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 164}, "sain.sync.Once.set": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 68, "bases": 0, "doc": 204}, "sain.sync.Once.clear": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 13}, "sain.sync.Once.get_or": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 28, "bases": 0, "doc": 193}, "sain.sync.Once.get_or_with": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 51, "bases": 0, "doc": 165}, "sain.sync.Once.into_inner": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 22, "bases": 0, "doc": 3}, "sain.sync.LazyFuture": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 248}, "sain.sync.LazyFuture.is_initialized": {"qualname": 3, "fullname": 5, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 11}, "sain.sync.LazyFuture.get": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 47}, "sain.sync.LazyFuture.set": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 33, "bases": 0, "doc": 81}, "sain.sync.AsyncOnce": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 219}, "sain.sync.AsyncOnce.is_set": {"qualname": 3, "fullname": 5, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 12}, "sain.sync.AsyncOnce.get": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 26}, "sain.sync.AsyncOnce.get_unchecked": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 164}, "sain.sync.AsyncOnce.set": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 68, "bases": 0, "doc": 206}, "sain.sync.AsyncOnce.clear": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 13}, "sain.sync.AsyncOnce.get_or": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 28, "bases": 0, "doc": 171}, "sain.sync.AsyncOnce.get_or_with": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 51, "bases": 0, "doc": 184}}, "length": 477, "save": true}, "index": {"qualname": {"root": {"docs": {"sain.Default.__init__": {"tf": 1}, "sain.Some.__init__": {"tf": 1}, "sain.Iter.__init__": {"tf": 1}, "sain.Ok.__init__": {"tf": 1}, "sain.Err.__init__": {"tf": 1}, "sain.Vec.__init__": {"tf": 1}, "sain.Error.__init__": {"tf": 1}, "sain.Box.__init__": {"tf": 1}, "sain.MaybeUninit.__init__": {"tf": 1}, "sain.From.__init__": {"tf": 1}, "sain.TryFrom.__init__": {"tf": 1}, "sain.Into.__init__": {"tf": 1}, "sain.TryInto.__init__": {"tf": 1}, "sain.boxed.Box.__init__": {"tf": 1}, "sain.collections.Vec.__init__": {"tf": 1}, "sain.collections.Bytes.__init__": {"tf": 1}, "sain.collections.buf.Bytes.__init__": {"tf": 1}, "sain.collections.vec.Vec.__init__": {"tf": 1}, "sain.convert.From.__init__": {"tf": 1}, "sain.convert.TryFrom.__init__": {"tf": 1}, "sain.convert.Into.__init__": {"tf": 1}, "sain.convert.TryInto.__init__": {"tf": 1}, "sain.default.Default.__init__": {"tf": 1}, "sain.error.Error.__init__": {"tf": 1}, "sain.iter.Iter.__init__": {"tf": 1}, "sain.iter.Cloned.__init__": {"tf": 1}, "sain.iter.Copied.__init__": {"tf": 1}, "sain.iter.Take.__init__": {"tf": 1}, "sain.iter.Filter.__init__": {"tf": 1}, "sain.iter.Map.__init__": {"tf": 1}, "sain.iter.Skip.__init__": {"tf": 1}, "sain.iter.Enumerate.__init__": {"tf": 1}, "sain.iter.TakeWhile.__init__": {"tf": 1}, "sain.iter.DropWhile.__init__": {"tf": 1}, "sain.option.Some.__init__": {"tf": 1}, "sain.result.Ok.__init__": {"tf": 1}, "sain.result.Err.__init__": {"tf": 1}}, "df": 37, "c": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "g": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 4}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"sain.Iter.clone": {"tf": 1}, "sain.iter.Iter.clone": {"tf": 1}}, "df": 2, "d": {"docs": {"sain.Iterator.cloned": {"tf": 1}, "sain.iter.Iterator.cloned": {"tf": 1}, "sain.iter.Cloned": {"tf": 1}, "sain.iter.Cloned.__init__": {"tf": 1}}, "df": 4}}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"sain.Vec.clear": {"tf": 1}, "sain.collections.Vec.clear": {"tf": 1}, "sain.collections.Bytes.clear": {"tf": 1}, "sain.collections.buf.Bytes.clear": {"tf": 1}, "sain.collections.vec.Vec.clear": {"tf": 1}, "sain.sync.Once.clear": {"tf": 1}, "sain.sync.AsyncOnce.clear": {"tf": 1}}, "df": 7}}}}, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"sain.Iterator.collect": {"tf": 1}, "sain.iter.Iterator.collect": {"tf": 1}}, "df": 2}}}}}, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.Iterator.copied": {"tf": 1}, "sain.iter.Iterator.copied": {"tf": 1}, "sain.iter.Copied": {"tf": 1}, "sain.iter.Copied.__init__": {"tf": 1}}, "df": 4}}}, "y": {"docs": {"sain.Vec.copy": {"tf": 1}, "sain.collections.Vec.copy": {"tf": 1}, "sain.collections.Bytes.copy": {"tf": 1}, "sain.collections.buf.Bytes.copy": {"tf": 1}, "sain.collections.vec.Vec.copy": {"tf": 1}}, "df": 5}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"sain.Iterator.count": {"tf": 1}, "sain.Vec.count": {"tf": 1}, "sain.collections.Vec.count": {"tf": 1}, "sain.collections.Bytes.count": {"tf": 1}, "sain.collections.buf.Bytes.count": {"tf": 1}, "sain.collections.vec.Vec.count": {"tf": 1}, "sain.iter.Iterator.count": {"tf": 1}, "sain.iter.Empty.count": {"tf": 1}}, "df": 8}}}}, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"sain.Vec.with_capacity": {"tf": 1}, "sain.Vec.capacity": {"tf": 1}, "sain.Vec.push_within_capacity": {"tf": 1}, "sain.collections.Vec.with_capacity": {"tf": 1}, "sain.collections.Vec.capacity": {"tf": 1}, "sain.collections.Vec.push_within_capacity": {"tf": 1}, "sain.collections.vec.Vec.with_capacity": {"tf": 1}, "sain.collections.vec.Vec.capacity": {"tf": 1}, "sain.collections.vec.Vec.push_within_capacity": {"tf": 1}}, "df": 9}}}}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {"sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}}, "df": 2}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {"sain.Some.and_ok": {"tf": 1}, "sain.Some.and_then": {"tf": 1}, "sain.Some.is_some_and": {"tf": 1}, "sain.Ok.is_ok_and": {"tf": 1}, "sain.Ok.is_err_and": {"tf": 1}, "sain.Err.is_ok_and": {"tf": 1}, "sain.Err.is_err_and": {"tf": 1}, "sain.option.Some.and_ok": {"tf": 1}, "sain.option.Some.and_then": {"tf": 1}, "sain.option.Some.is_some_and": {"tf": 1}, "sain.result.Ok.is_ok_and": {"tf": 1}, "sain.result.Ok.is_err_and": {"tf": 1}, "sain.result.Err.is_ok_and": {"tf": 1}, "sain.result.Err.is_err_and": {"tf": 1}}, "df": 14}, "y": {"docs": {"sain.Iterator.any": {"tf": 1}, "sain.iter.Iterator.any": {"tf": 1}, "sain.iter.Empty.any": {"tf": 1}}, "df": 3}}, "s": {"docs": {"sain.Some.as_ref": {"tf": 1}, "sain.Some.as_mut": {"tf": 1}, "sain.Vec.as_ref": {"tf": 1}, "sain.collections.Vec.as_ref": {"tf": 1}, "sain.collections.Bytes.as_bytes": {"tf": 1}, "sain.collections.Bytes.as_ref": {"tf": 1}, "sain.collections.Bytes.as_mut": {"tf": 1}, "sain.collections.buf.Bytes.as_bytes": {"tf": 1}, "sain.collections.buf.Bytes.as_ref": {"tf": 1}, "sain.collections.buf.Bytes.as_mut": {"tf": 1}, "sain.collections.vec.Vec.as_ref": {"tf": 1}, "sain.option.Some.as_ref": {"tf": 1}, "sain.option.Some.as_mut": {"tf": 1}}, "df": 13, "y": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {"sain.Iterator.async_for_each": {"tf": 1}, "sain.iter.Iterator.async_for_each": {"tf": 1}}, "df": 2, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sain.sync.AsyncOnce": {"tf": 1}, "sain.sync.AsyncOnce.is_set": {"tf": 1}, "sain.sync.AsyncOnce.get": {"tf": 1}, "sain.sync.AsyncOnce.get_unchecked": {"tf": 1}, "sain.sync.AsyncOnce.set": {"tf": 1}, "sain.sync.AsyncOnce.clear": {"tf": 1}, "sain.sync.AsyncOnce.get_or": {"tf": 1}, "sain.sync.AsyncOnce.get_or_with": {"tf": 1}}, "df": 8}}}}}}}, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"sain.MaybeUninit.assume_init": {"tf": 1}}, "df": 1}}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"sain.Iterator.all": {"tf": 1}, "sain.iter.Iterator.all": {"tf": 1}, "sain.iter.Empty.all": {"tf": 1}}, "df": 3}}, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"sain.Vec.append": {"tf": 1}, "sain.collections.Vec.append": {"tf": 1}, "sain.collections.vec.Vec.append": {"tf": 1}}, "df": 3}}}}}, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {"sain.MaybeUninit.uninit_array": {"tf": 1}}, "df": 1}}}, "g": {"docs": {}, "df": 0, "s": {"docs": {"sain.collections.vec.from_args": {"tf": 1}}, "df": 1}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"sain.Default": {"tf": 1}, "sain.Default.__init__": {"tf": 1}, "sain.Default.default": {"tf": 1.4142135623730951}, "sain.Some.default": {"tf": 1}, "sain.Iterator.default": {"tf": 1}, "sain.default.Default": {"tf": 1}, "sain.default.Default.__init__": {"tf": 1}, "sain.default.Default.default": {"tf": 1.4142135623730951}, "sain.iter.Iterator.default": {"tf": 1}, "sain.option.Some.default": {"tf": 1}}, "df": 10}}}}}, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.deprecated": {"tf": 1}, "sain.macros.deprecated": {"tf": 1}}, "df": 2}}}}}}}}, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.Error.description": {"tf": 1}, "sain.error.Error.description": {"tf": 1}}, "df": 2}}}}}}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {"sain.Iterator.drop_while": {"tf": 1}, "sain.iter.Iterator.drop_while": {"tf": 1}}, "df": 2, "w": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sain.iter.DropWhile": {"tf": 1}, "sain.iter.DropWhile.__init__": {"tf": 1}}, "df": 2}}}}}}}}, "o": {"docs": {}, "df": 0, "c": {"docs": {"sain.doc": {"tf": 1}, "sain.macros.doc": {"tf": 1}}, "df": 2}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"sain.Default.__init__": {"tf": 1}, "sain.Some.__init__": {"tf": 1}, "sain.Iter.__init__": {"tf": 1}, "sain.Ok.__init__": {"tf": 1}, "sain.Err.__init__": {"tf": 1}, "sain.Vec.__init__": {"tf": 1}, "sain.Error.__init__": {"tf": 1}, "sain.Box.__init__": {"tf": 1}, "sain.MaybeUninit.__init__": {"tf": 1}, "sain.MaybeUninit.assume_init": {"tf": 1}, "sain.From.__init__": {"tf": 1}, "sain.TryFrom.__init__": {"tf": 1}, "sain.Into.__init__": {"tf": 1}, "sain.TryInto.__init__": {"tf": 1}, "sain.boxed.Box.__init__": {"tf": 1}, "sain.collections.Vec.__init__": {"tf": 1}, "sain.collections.Bytes.__init__": {"tf": 1}, "sain.collections.buf.Bytes.__init__": {"tf": 1}, "sain.collections.vec.Vec.__init__": {"tf": 1}, "sain.convert.From.__init__": {"tf": 1}, "sain.convert.TryFrom.__init__": {"tf": 1}, "sain.convert.Into.__init__": {"tf": 1}, "sain.convert.TryInto.__init__": {"tf": 1}, "sain.default.Default.__init__": {"tf": 1}, "sain.error.Error.__init__": {"tf": 1}, "sain.iter.Iter.__init__": {"tf": 1}, "sain.iter.Cloned.__init__": {"tf": 1}, "sain.iter.Copied.__init__": {"tf": 1}, "sain.iter.Take.__init__": {"tf": 1}, "sain.iter.Filter.__init__": {"tf": 1}, "sain.iter.Map.__init__": {"tf": 1}, "sain.iter.Skip.__init__": {"tf": 1}, "sain.iter.Enumerate.__init__": {"tf": 1}, "sain.iter.TakeWhile.__init__": {"tf": 1}, "sain.iter.DropWhile.__init__": {"tf": 1}, "sain.option.Some.__init__": {"tf": 1}, "sain.result.Ok.__init__": {"tf": 1}, "sain.result.Err.__init__": {"tf": 1}}, "df": 38, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.sync.Lazy.is_initialized": {"tf": 1}, "sain.sync.LazyFuture.is_initialized": {"tf": 1}}, "df": 2}}}}}}}}}, "t": {"docs": {}, "df": 0, "o": {"docs": {"sain.Some.into_inner": {"tf": 1}, "sain.Into": {"tf": 1}, "sain.Into.__init__": {"tf": 1}, "sain.Into.into": {"tf": 1.4142135623730951}, "sain.TryInto.try_into": {"tf": 1}, "sain.convert.Into": {"tf": 1}, "sain.convert.Into.__init__": {"tf": 1}, "sain.convert.Into.into": {"tf": 1.4142135623730951}, "sain.convert.TryInto.try_into": {"tf": 1}, "sain.iter.into_iter": {"tf": 1}, "sain.option.Some.into_inner": {"tf": 1}, "sain.sync.Once.into_inner": {"tf": 1}}, "df": 12}}, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sain.Some.into_inner": {"tf": 1}, "sain.option.Some.into_inner": {"tf": 1}, "sain.sync.Once.into_inner": {"tf": 1}}, "df": 3}}}, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"sain.Ok.inspect": {"tf": 1}, "sain.Ok.inspect_err": {"tf": 1}, "sain.Err.inspect": {"tf": 1}, "sain.Err.inspect_err": {"tf": 1}, "sain.result.Ok.inspect": {"tf": 1}, "sain.result.Ok.inspect_err": {"tf": 1}, "sain.result.Err.inspect": {"tf": 1}, "sain.result.Err.inspect_err": {"tf": 1}}, "df": 8}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"sain.Vec.insert": {"tf": 1}, "sain.collections.Vec.insert": {"tf": 1}, "sain.collections.Bytes.insert": {"tf": 1}, "sain.collections.buf.Bytes.insert": {"tf": 1}, "sain.collections.vec.Vec.insert": {"tf": 1}}, "df": 5}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {"sain.Vec.index": {"tf": 1}, "sain.collections.Vec.index": {"tf": 1}, "sain.collections.Bytes.index": {"tf": 1}, "sain.collections.buf.Bytes.index": {"tf": 1}, "sain.collections.vec.Vec.index": {"tf": 1}}, "df": 5}}}}, "f": {"docs": {"sain.Some.take_if": {"tf": 1}, "sain.option.Some.take_if": {"tf": 1}}, "df": 2}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sain.Some.iter": {"tf": 1}, "sain.Iter": {"tf": 1}, "sain.Iter.__init__": {"tf": 1}, "sain.Iter.clone": {"tf": 1}, "sain.Ok.iter": {"tf": 1}, "sain.Err.iter": {"tf": 1}, "sain.Vec.iter": {"tf": 1}, "sain.collections.Vec.iter": {"tf": 1}, "sain.collections.Bytes.iter": {"tf": 1}, "sain.collections.buf.Bytes.iter": {"tf": 1}, "sain.collections.vec.Vec.iter": {"tf": 1}, "sain.iter.Iter": {"tf": 1}, "sain.iter.Iter.__init__": {"tf": 1}, "sain.iter.Iter.clone": {"tf": 1}, "sain.iter.into_iter": {"tf": 1}, "sain.option.Some.iter": {"tf": 1}, "sain.result.Ok.iter": {"tf": 1}, "sain.result.Err.iter": {"tf": 1}}, "df": 18, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"sain.Iterator": {"tf": 1}, "sain.Iterator.default": {"tf": 1}, "sain.Iterator.collect": {"tf": 1}, "sain.Iterator.to_vec": {"tf": 1}, "sain.Iterator.sink": {"tf": 1}, "sain.Iterator.raw_parts": {"tf": 1}, "sain.Iterator.next": {"tf": 1}, "sain.Iterator.cloned": {"tf": 1}, "sain.Iterator.copied": {"tf": 1}, "sain.Iterator.map": {"tf": 1}, "sain.Iterator.filter": {"tf": 1}, "sain.Iterator.take": {"tf": 1}, "sain.Iterator.skip": {"tf": 1}, "sain.Iterator.enumerate": {"tf": 1}, "sain.Iterator.take_while": {"tf": 1}, "sain.Iterator.drop_while": {"tf": 1}, "sain.Iterator.all": {"tf": 1}, "sain.Iterator.any": {"tf": 1}, "sain.Iterator.zip": {"tf": 1}, "sain.Iterator.sort": {"tf": 1}, "sain.Iterator.reversed": {"tf": 1}, "sain.Iterator.union": {"tf": 1}, "sain.Iterator.first": {"tf": 1}, "sain.Iterator.last": {"tf": 1}, "sain.Iterator.count": {"tf": 1}, "sain.Iterator.for_each": {"tf": 1}, "sain.Iterator.async_for_each": {"tf": 1}, "sain.iter.Iterator": {"tf": 1}, "sain.iter.Iterator.default": {"tf": 1}, "sain.iter.Iterator.collect": {"tf": 1}, "sain.iter.Iterator.to_vec": {"tf": 1}, "sain.iter.Iterator.sink": {"tf": 1}, "sain.iter.Iterator.raw_parts": {"tf": 1}, "sain.iter.Iterator.next": {"tf": 1}, "sain.iter.Iterator.cloned": {"tf": 1}, "sain.iter.Iterator.copied": {"tf": 1}, "sain.iter.Iterator.map": {"tf": 1}, "sain.iter.Iterator.filter": {"tf": 1}, "sain.iter.Iterator.take": {"tf": 1}, "sain.iter.Iterator.skip": {"tf": 1}, "sain.iter.Iterator.enumerate": {"tf": 1}, "sain.iter.Iterator.take_while": {"tf": 1}, "sain.iter.Iterator.drop_while": {"tf": 1}, "sain.iter.Iterator.all": {"tf": 1}, "sain.iter.Iterator.any": {"tf": 1}, "sain.iter.Iterator.zip": {"tf": 1}, "sain.iter.Iterator.sort": {"tf": 1}, "sain.iter.Iterator.reversed": {"tf": 1}, "sain.iter.Iterator.union": {"tf": 1}, "sain.iter.Iterator.first": {"tf": 1}, "sain.iter.Iterator.last": {"tf": 1}, "sain.iter.Iterator.count": {"tf": 1}, "sain.iter.Iterator.for_each": {"tf": 1}, "sain.iter.Iterator.async_for_each": {"tf": 1}}, "df": 54}}}}}}}, "s": {"docs": {"sain.Some.is_some": {"tf": 1}, "sain.Some.is_some_and": {"tf": 1}, "sain.Some.is_none": {"tf": 1}, "sain.Ok.is_ok": {"tf": 1}, "sain.Ok.is_ok_and": {"tf": 1}, "sain.Ok.is_err": {"tf": 1}, "sain.Ok.is_err_and": {"tf": 1}, "sain.Err.is_ok": {"tf": 1}, "sain.Err.is_ok_and": {"tf": 1}, "sain.Err.is_err": {"tf": 1}, "sain.Err.is_err_and": {"tf": 1}, "sain.Vec.is_empty": {"tf": 1}, "sain.collections.Vec.is_empty": {"tf": 1}, "sain.collections.Bytes.is_empty": {"tf": 1}, "sain.collections.buf.Bytes.is_empty": {"tf": 1}, "sain.collections.vec.Vec.is_empty": {"tf": 1}, "sain.option.Some.is_some": {"tf": 1}, "sain.option.Some.is_some_and": {"tf": 1}, "sain.option.Some.is_none": {"tf": 1}, "sain.result.Ok.is_ok": {"tf": 1}, "sain.result.Ok.is_ok_and": {"tf": 1}, "sain.result.Ok.is_err": {"tf": 1}, "sain.result.Ok.is_err_and": {"tf": 1}, "sain.result.Err.is_ok": {"tf": 1}, "sain.result.Err.is_ok_and": {"tf": 1}, "sain.result.Err.is_err": {"tf": 1}, "sain.result.Err.is_err_and": {"tf": 1}, "sain.sync.Lazy.is_initialized": {"tf": 1}, "sain.sync.Once.is_set": {"tf": 1}, "sain.sync.LazyFuture.is_initialized": {"tf": 1}, "sain.sync.AsyncOnce.is_set": {"tf": 1}}, "df": 31}}, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"sain.Some": {"tf": 1}, "sain.Some.__init__": {"tf": 1}, "sain.Some.default": {"tf": 1}, "sain.Some.into_inner": {"tf": 1}, "sain.Some.unwrap": {"tf": 1}, "sain.Some.unwrap_or": {"tf": 1}, "sain.Some.unwrap_or_else": {"tf": 1}, "sain.Some.unwrap_unchecked": {"tf": 1}, "sain.Some.expect": {"tf": 1}, "sain.Some.map": {"tf": 1}, "sain.Some.map_or": {"tf": 1}, "sain.Some.map_or_else": {"tf": 1}, "sain.Some.filter": {"tf": 1}, "sain.Some.take": {"tf": 1}, "sain.Some.take_if": {"tf": 1}, "sain.Some.replace": {"tf": 1}, "sain.Some.and_ok": {"tf": 1}, "sain.Some.and_then": {"tf": 1}, "sain.Some.iter": {"tf": 1}, "sain.Some.as_ref": {"tf": 1}, "sain.Some.as_mut": {"tf": 1}, "sain.Some.is_some": {"tf": 1.4142135623730951}, "sain.Some.is_some_and": {"tf": 1.4142135623730951}, "sain.Some.is_none": {"tf": 1}, "sain.option.Some": {"tf": 1}, "sain.option.Some.__init__": {"tf": 1}, "sain.option.Some.default": {"tf": 1}, "sain.option.Some.into_inner": {"tf": 1}, "sain.option.Some.unwrap": {"tf": 1}, "sain.option.Some.unwrap_or": {"tf": 1}, "sain.option.Some.unwrap_or_else": {"tf": 1}, "sain.option.Some.unwrap_unchecked": {"tf": 1}, "sain.option.Some.expect": {"tf": 1}, "sain.option.Some.map": {"tf": 1}, "sain.option.Some.map_or": {"tf": 1}, "sain.option.Some.map_or_else": {"tf": 1}, "sain.option.Some.filter": {"tf": 1}, "sain.option.Some.take": {"tf": 1}, "sain.option.Some.take_if": {"tf": 1}, "sain.option.Some.replace": {"tf": 1}, "sain.option.Some.and_ok": {"tf": 1}, "sain.option.Some.and_then": {"tf": 1}, "sain.option.Some.iter": {"tf": 1}, "sain.option.Some.as_ref": {"tf": 1}, "sain.option.Some.as_mut": {"tf": 1}, "sain.option.Some.is_some": {"tf": 1.4142135623730951}, "sain.option.Some.is_some_and": {"tf": 1.4142135623730951}, "sain.option.Some.is_none": {"tf": 1}}, "df": 48}}, "r": {"docs": {}, "df": 0, "t": {"docs": {"sain.Iterator.sort": {"tf": 1}, "sain.Vec.sort": {"tf": 1}, "sain.collections.Vec.sort": {"tf": 1}, "sain.collections.vec.Vec.sort": {"tf": 1}, "sain.iter.Iterator.sort": {"tf": 1}}, "df": 5}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sain.Error.source": {"tf": 1}, "sain.error.Error.source": {"tf": 1}}, "df": 2}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "k": {"docs": {"sain.Iterator.sink": {"tf": 1}, "sain.iter.Iterator.sink": {"tf": 1}}, "df": 2}}, "z": {"docs": {}, "df": 0, "e": {"docs": {"sain.collections.Bytes.size": {"tf": 1}, "sain.collections.buf.Bytes.size": {"tf": 1}}, "df": 2}}}, "k": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {"sain.Iterator.skip": {"tf": 1}, "sain.iter.Iterator.skip": {"tf": 1}, "sain.iter.Skip": {"tf": 1}, "sain.iter.Skip.__init__": {"tf": 1}}, "df": 4}}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"sain.Vec.split_off": {"tf": 1}, "sain.Vec.split_first": {"tf": 1}, "sain.collections.Vec.split_off": {"tf": 1}, "sain.collections.Vec.split_first": {"tf": 1}, "sain.collections.vec.Vec.split_off": {"tf": 1}, "sain.collections.vec.Vec.split_first": {"tf": 1}}, "df": 6}}}, "a": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "n": {"docs": {"sain.futures.spawn": {"tf": 1}}, "df": 1}}}}, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {"sain.Vec.swap_remove": {"tf": 1}, "sain.collections.Vec.swap_remove": {"tf": 1}, "sain.collections.vec.Vec.swap_remove": {"tf": 1}}, "df": 3}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {"sain.collections.Bytes.from_str": {"tf": 1}, "sain.collections.Bytes.try_to_str": {"tf": 1}, "sain.collections.Bytes.to_str": {"tf": 1}, "sain.collections.Bytes.put_str": {"tf": 1}, "sain.collections.buf.Bytes.from_str": {"tf": 1}, "sain.collections.buf.Bytes.try_to_str": {"tf": 1}, "sain.collections.buf.Bytes.to_str": {"tf": 1}, "sain.collections.buf.Bytes.put_str": {"tf": 1}}, "df": 8}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"sain.collections.Bytes.from_static": {"tf": 1}, "sain.collections.buf.Bytes.from_static": {"tf": 1}}, "df": 2}}}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {"sain.sync.Lazy.set": {"tf": 1}, "sain.sync.Once.is_set": {"tf": 1}, "sain.sync.Once.set": {"tf": 1}, "sain.sync.LazyFuture.set": {"tf": 1}, "sain.sync.AsyncOnce.is_set": {"tf": 1}, "sain.sync.AsyncOnce.set": {"tf": 1}}, "df": 6}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {"sain.Some.unwrap": {"tf": 1}, "sain.Some.unwrap_or": {"tf": 1}, "sain.Some.unwrap_or_else": {"tf": 1}, "sain.Some.unwrap_unchecked": {"tf": 1}, "sain.Ok.unwrap": {"tf": 1}, "sain.Ok.unwrap_or": {"tf": 1}, "sain.Ok.unwrap_or_else": {"tf": 1}, "sain.Ok.unwrap_err": {"tf": 1}, "sain.Err.unwrap": {"tf": 1}, "sain.Err.unwrap_or": {"tf": 1}, "sain.Err.unwrap_or_else": {"tf": 1}, "sain.Err.unwrap_err": {"tf": 1}, "sain.option.Some.unwrap": {"tf": 1}, "sain.option.Some.unwrap_or": {"tf": 1}, "sain.option.Some.unwrap_or_else": {"tf": 1}, "sain.option.Some.unwrap_unchecked": {"tf": 1}, "sain.result.Ok.unwrap": {"tf": 1}, "sain.result.Ok.unwrap_or": {"tf": 1}, "sain.result.Ok.unwrap_or_else": {"tf": 1}, "sain.result.Ok.unwrap_err": {"tf": 1}, "sain.result.Err.unwrap": {"tf": 1}, "sain.result.Err.unwrap_or": {"tf": 1}, "sain.result.Err.unwrap_or_else": {"tf": 1}, "sain.result.Err.unwrap_err": {"tf": 1}}, "df": 24}}}}, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.Some.unwrap_unchecked": {"tf": 1}, "sain.option.Some.unwrap_unchecked": {"tf": 1}, "sain.sync.Lazy.get_unchecked": {"tf": 1}, "sain.sync.Once.get_unchecked": {"tf": 1}, "sain.sync.AsyncOnce.get_unchecked": {"tf": 1}}, "df": 5}}}}}}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.Iterator.union": {"tf": 1}, "sain.iter.Iterator.union": {"tf": 1}}, "df": 2}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.unimplemented": {"tf": 1}, "sain.macros.unimplemented": {"tf": 1}}, "df": 2}}}}}}}}}}, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"sain.MaybeUninit.uninit": {"tf": 1}, "sain.MaybeUninit.uninit_array": {"tf": 1}}, "df": 2}}}}, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "e": {"docs": {"sain.macros.unsafe": {"tf": 1}}, "df": 1}}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {"sain.Some.unwrap_or": {"tf": 1}, "sain.Some.unwrap_or_else": {"tf": 1}, "sain.Some.map_or": {"tf": 1}, "sain.Some.map_or_else": {"tf": 1}, "sain.Ok.unwrap_or": {"tf": 1}, "sain.Ok.unwrap_or_else": {"tf": 1}, "sain.Ok.map_or": {"tf": 1}, "sain.Ok.map_or_else": {"tf": 1}, "sain.Err.unwrap_or": {"tf": 1}, "sain.Err.unwrap_or_else": {"tf": 1}, "sain.Err.map_or": {"tf": 1}, "sain.Err.map_or_else": {"tf": 1}, "sain.option.Some.unwrap_or": {"tf": 1}, "sain.option.Some.unwrap_or_else": {"tf": 1}, "sain.option.Some.map_or": {"tf": 1}, "sain.option.Some.map_or_else": {"tf": 1}, "sain.result.Ok.unwrap_or": {"tf": 1}, "sain.result.Ok.unwrap_or_else": {"tf": 1}, "sain.result.Ok.map_or": {"tf": 1}, "sain.result.Ok.map_or_else": {"tf": 1}, "sain.result.Err.unwrap_or": {"tf": 1}, "sain.result.Err.unwrap_or_else": {"tf": 1}, "sain.result.Err.map_or": {"tf": 1}, "sain.result.Err.map_or_else": {"tf": 1}, "sain.sync.Once.get_or": {"tf": 1}, "sain.sync.Once.get_or_with": {"tf": 1}, "sain.sync.AsyncOnce.get_or": {"tf": 1}, "sain.sync.AsyncOnce.get_or_with": {"tf": 1}}, "df": 28}, "k": {"docs": {"sain.Some.and_ok": {"tf": 1}, "sain.Ok": {"tf": 1}, "sain.Ok.__init__": {"tf": 1}, "sain.Ok.is_ok": {"tf": 1.4142135623730951}, "sain.Ok.is_ok_and": {"tf": 1.4142135623730951}, "sain.Ok.is_err": {"tf": 1}, "sain.Ok.is_err_and": {"tf": 1}, "sain.Ok.expect": {"tf": 1}, "sain.Ok.unwrap": {"tf": 1}, "sain.Ok.unwrap_or": {"tf": 1}, "sain.Ok.unwrap_or_else": {"tf": 1}, "sain.Ok.unwrap_err": {"tf": 1}, "sain.Ok.ok": {"tf": 1.4142135623730951}, "sain.Ok.err": {"tf": 1}, "sain.Ok.inspect": {"tf": 1}, "sain.Ok.inspect_err": {"tf": 1}, "sain.Ok.map": {"tf": 1}, "sain.Ok.map_or": {"tf": 1}, "sain.Ok.map_or_else": {"tf": 1}, "sain.Ok.map_err": {"tf": 1}, "sain.Ok.iter": {"tf": 1}, "sain.Err.is_ok": {"tf": 1}, "sain.Err.is_ok_and": {"tf": 1}, "sain.Err.ok": {"tf": 1}, "sain.option.Some.and_ok": {"tf": 1}, "sain.result.Ok": {"tf": 1}, "sain.result.Ok.__init__": {"tf": 1}, "sain.result.Ok.is_ok": {"tf": 1.4142135623730951}, "sain.result.Ok.is_ok_and": {"tf": 1.4142135623730951}, "sain.result.Ok.is_err": {"tf": 1}, "sain.result.Ok.is_err_and": {"tf": 1}, "sain.result.Ok.expect": {"tf": 1}, "sain.result.Ok.unwrap": {"tf": 1}, "sain.result.Ok.unwrap_or": {"tf": 1}, "sain.result.Ok.unwrap_or_else": {"tf": 1}, "sain.result.Ok.unwrap_err": {"tf": 1}, "sain.result.Ok.ok": {"tf": 1.4142135623730951}, "sain.result.Ok.err": {"tf": 1}, "sain.result.Ok.inspect": {"tf": 1}, "sain.result.Ok.inspect_err": {"tf": 1}, "sain.result.Ok.map": {"tf": 1}, "sain.result.Ok.map_or": {"tf": 1}, "sain.result.Ok.map_or_else": {"tf": 1}, "sain.result.Ok.map_err": {"tf": 1}, "sain.result.Ok.iter": {"tf": 1}, "sain.result.Err.is_ok": {"tf": 1}, "sain.result.Err.is_ok_and": {"tf": 1}, "sain.result.Err.ok": {"tf": 1}}, "df": 48}, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.Option": {"tf": 1}, "sain.option.Option": {"tf": 1}}, "df": 2}}}}}, "f": {"docs": {}, "df": 0, "f": {"docs": {"sain.Vec.split_off": {"tf": 1}, "sain.collections.Vec.split_off": {"tf": 1}, "sain.collections.vec.Vec.split_off": {"tf": 1}}, "df": 3}}, "n": {"docs": {"sain.Box.on_expire": {"tf": 1}, "sain.boxed.Box.on_expire": {"tf": 1}}, "df": 2, "c": {"docs": {}, "df": 0, "e": {"docs": {"sain.iter.once": {"tf": 1}, "sain.sync.Once": {"tf": 1}, "sain.sync.Once.is_set": {"tf": 1}, "sain.sync.Once.get": {"tf": 1}, "sain.sync.Once.get_unchecked": {"tf": 1}, "sain.sync.Once.set": {"tf": 1}, "sain.sync.Once.clear": {"tf": 1}, "sain.sync.Once.get_or": {"tf": 1}, "sain.sync.Once.get_or_with": {"tf": 1}, "sain.sync.Once.into_inner": {"tf": 1}}, "df": 10}}}}, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"sain.Some.unwrap_or_else": {"tf": 1}, "sain.Some.map_or_else": {"tf": 1}, "sain.Ok.unwrap_or_else": {"tf": 1}, "sain.Ok.map_or_else": {"tf": 1}, "sain.Err.unwrap_or_else": {"tf": 1}, "sain.Err.map_or_else": {"tf": 1}, "sain.option.Some.unwrap_or_else": {"tf": 1}, "sain.option.Some.map_or_else": {"tf": 1}, "sain.result.Ok.unwrap_or_else": {"tf": 1}, "sain.result.Ok.map_or_else": {"tf": 1}, "sain.result.Err.unwrap_or_else": {"tf": 1}, "sain.result.Err.map_or_else": {"tf": 1}}, "df": 12}}}, "x": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"sain.Some.expect": {"tf": 1}, "sain.Ok.expect": {"tf": 1}, "sain.Err.expect": {"tf": 1}, "sain.Err.expect_err": {"tf": 1}, "sain.option.Some.expect": {"tf": 1}, "sain.result.Ok.expect": {"tf": 1}, "sain.result.Err.expect": {"tf": 1}, "sain.result.Err.expect_err": {"tf": 1}}, "df": 8}}}, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"sain.Box.on_expire": {"tf": 1}, "sain.boxed.Box.on_expire": {"tf": 1}}, "df": 2, "d": {"docs": {"sain.Box.has_expired": {"tf": 1}, "sain.boxed.Box.has_expired": {"tf": 1}}, "df": 2}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"sain.Vec.extend": {"tf": 1}, "sain.collections.Vec.extend": {"tf": 1}, "sain.collections.vec.Vec.extend": {"tf": 1}}, "df": 3}}}}}, "n": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"sain.Iterator.enumerate": {"tf": 1}, "sain.iter.Iterator.enumerate": {"tf": 1}, "sain.iter.Enumerate": {"tf": 1}, "sain.iter.Enumerate.__init__": {"tf": 1}}, "df": 4}}}}}}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"sain.Iterator.for_each": {"tf": 1}, "sain.Iterator.async_for_each": {"tf": 1}, "sain.iter.Iterator.for_each": {"tf": 1}, "sain.iter.Iterator.async_for_each": {"tf": 1}}, "df": 4}}}, "r": {"docs": {}, "df": 0, "r": {"docs": {"sain.Ok.is_err": {"tf": 1}, "sain.Ok.is_err_and": {"tf": 1}, "sain.Ok.unwrap_err": {"tf": 1}, "sain.Ok.err": {"tf": 1}, "sain.Ok.inspect_err": {"tf": 1}, "sain.Ok.map_err": {"tf": 1}, "sain.Err": {"tf": 1}, "sain.Err.__init__": {"tf": 1}, "sain.Err.is_ok": {"tf": 1}, "sain.Err.is_ok_and": {"tf": 1}, "sain.Err.is_err": {"tf": 1.4142135623730951}, "sain.Err.is_err_and": {"tf": 1.4142135623730951}, "sain.Err.expect": {"tf": 1}, "sain.Err.expect_err": {"tf": 1.4142135623730951}, "sain.Err.unwrap": {"tf": 1}, "sain.Err.unwrap_or": {"tf": 1}, "sain.Err.unwrap_or_else": {"tf": 1}, "sain.Err.unwrap_err": {"tf": 1.4142135623730951}, "sain.Err.inspect": {"tf": 1}, "sain.Err.inspect_err": {"tf": 1.4142135623730951}, "sain.Err.ok": {"tf": 1}, "sain.Err.err": {"tf": 1.4142135623730951}, "sain.Err.map": {"tf": 1}, "sain.Err.map_or": {"tf": 1}, "sain.Err.map_or_else": {"tf": 1}, "sain.Err.map_err": {"tf": 1.4142135623730951}, "sain.Err.iter": {"tf": 1}, "sain.result.Ok.is_err": {"tf": 1}, "sain.result.Ok.is_err_and": {"tf": 1}, "sain.result.Ok.unwrap_err": {"tf": 1}, "sain.result.Ok.err": {"tf": 1}, "sain.result.Ok.inspect_err": {"tf": 1}, "sain.result.Ok.map_err": {"tf": 1}, "sain.result.Err": {"tf": 1}, "sain.result.Err.__init__": {"tf": 1}, "sain.result.Err.is_ok": {"tf": 1}, "sain.result.Err.is_ok_and": {"tf": 1}, "sain.result.Err.is_err": {"tf": 1.4142135623730951}, "sain.result.Err.is_err_and": {"tf": 1.4142135623730951}, "sain.result.Err.expect": {"tf": 1}, "sain.result.Err.expect_err": {"tf": 1.4142135623730951}, "sain.result.Err.unwrap": {"tf": 1}, "sain.result.Err.unwrap_or": {"tf": 1}, "sain.result.Err.unwrap_or_else": {"tf": 1}, "sain.result.Err.unwrap_err": {"tf": 1.4142135623730951}, "sain.result.Err.inspect": {"tf": 1}, "sain.result.Err.inspect_err": {"tf": 1.4142135623730951}, "sain.result.Err.ok": {"tf": 1}, "sain.result.Err.err": {"tf": 1.4142135623730951}, "sain.result.Err.map": {"tf": 1}, "sain.result.Err.map_or": {"tf": 1}, "sain.result.Err.map_or_else": {"tf": 1}, "sain.result.Err.map_err": {"tf": 1.4142135623730951}, "sain.result.Err.iter": {"tf": 1}}, "df": 54, "o": {"docs": {}, "df": 0, "r": {"docs": {"sain.Error": {"tf": 1}, "sain.Error.__init__": {"tf": 1}, "sain.Error.message": {"tf": 1}, "sain.Error.source": {"tf": 1}, "sain.Error.description": {"tf": 1}, "sain.error.Error": {"tf": 1}, "sain.error.Error.__init__": {"tf": 1}, "sain.error.Error.message": {"tf": 1}, "sain.error.Error.source": {"tf": 1}, "sain.error.Error.description": {"tf": 1}}, "df": 10}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"sain.Vec.is_empty": {"tf": 1}, "sain.collections.Vec.is_empty": {"tf": 1}, "sain.collections.Bytes.is_empty": {"tf": 1}, "sain.collections.buf.Bytes.is_empty": {"tf": 1}, "sain.collections.vec.Vec.is_empty": {"tf": 1}, "sain.iter.Empty": {"tf": 1}, "sain.iter.Empty.next": {"tf": 1}, "sain.iter.Empty.count": {"tf": 1}, "sain.iter.Empty.any": {"tf": 1}, "sain.iter.Empty.all": {"tf": 1}, "sain.iter.empty": {"tf": 1}}, "df": 11}}}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {"sain.Some.map": {"tf": 1}, "sain.Some.map_or": {"tf": 1}, "sain.Some.map_or_else": {"tf": 1}, "sain.Iterator.map": {"tf": 1}, "sain.Ok.map": {"tf": 1}, "sain.Ok.map_or": {"tf": 1}, "sain.Ok.map_or_else": {"tf": 1}, "sain.Ok.map_err": {"tf": 1}, "sain.Err.map": {"tf": 1}, "sain.Err.map_or": {"tf": 1}, "sain.Err.map_or_else": {"tf": 1}, "sain.Err.map_err": {"tf": 1}, "sain.iter.Iterator.map": {"tf": 1}, "sain.iter.Map": {"tf": 1}, "sain.iter.Map.__init__": {"tf": 1}, "sain.option.Some.map": {"tf": 1}, "sain.option.Some.map_or": {"tf": 1}, "sain.option.Some.map_or_else": {"tf": 1}, "sain.result.Ok.map": {"tf": 1}, "sain.result.Ok.map_or": {"tf": 1}, "sain.result.Ok.map_or_else": {"tf": 1}, "sain.result.Ok.map_err": {"tf": 1}, "sain.result.Err.map": {"tf": 1}, "sain.result.Err.map_or": {"tf": 1}, "sain.result.Err.map_or_else": {"tf": 1}, "sain.result.Err.map_err": {"tf": 1}}, "df": 26}, "y": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"sain.MaybeUninit": {"tf": 1}, "sain.MaybeUninit.__init__": {"tf": 1}, "sain.MaybeUninit.uninit": {"tf": 1}, "sain.MaybeUninit.uninit_array": {"tf": 1}, "sain.MaybeUninit.assume_init": {"tf": 1}, "sain.MaybeUninit.write": {"tf": 1}}, "df": 6}}}}}}}}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {"sain.Some.as_mut": {"tf": 1}, "sain.collections.Bytes.as_mut": {"tf": 1}, "sain.collections.buf.Bytes.as_mut": {"tf": 1}, "sain.option.Some.as_mut": {"tf": 1}}, "df": 4}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"sain.Error.message": {"tf": 1}, "sain.error.Error.message": {"tf": 1}}, "df": 2}}}}}}}, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sain.Some.filter": {"tf": 1}, "sain.Iterator.filter": {"tf": 1}, "sain.iter.Iterator.filter": {"tf": 1}, "sain.iter.Filter": {"tf": 1}, "sain.iter.Filter.__init__": {"tf": 1}, "sain.option.Some.filter": {"tf": 1}}, "df": 6}}}}, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"sain.Iterator.first": {"tf": 1}, "sain.Vec.split_first": {"tf": 1}, "sain.Vec.first": {"tf": 1}, "sain.collections.Vec.split_first": {"tf": 1}, "sain.collections.Vec.first": {"tf": 1}, "sain.collections.vec.Vec.split_first": {"tf": 1}, "sain.collections.vec.Vec.first": {"tf": 1}, "sain.iter.Iterator.first": {"tf": 1}}, "df": 8}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {"sain.Iterator.for_each": {"tf": 1}, "sain.Iterator.async_for_each": {"tf": 1}, "sain.iter.Iterator.for_each": {"tf": 1}, "sain.iter.Iterator.async_for_each": {"tf": 1}}, "df": 4}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"sain.From": {"tf": 1}, "sain.From.__init__": {"tf": 1}, "sain.From.from_t": {"tf": 1.4142135623730951}, "sain.TryFrom.try_from": {"tf": 1}, "sain.collections.Bytes.from_str": {"tf": 1}, "sain.collections.Bytes.from_static": {"tf": 1}, "sain.collections.Bytes.from_bytes": {"tf": 1}, "sain.collections.Bytes.from_raw": {"tf": 1}, "sain.collections.buf.Bytes.from_str": {"tf": 1}, "sain.collections.buf.Bytes.from_static": {"tf": 1}, "sain.collections.buf.Bytes.from_bytes": {"tf": 1}, "sain.collections.buf.Bytes.from_raw": {"tf": 1}, "sain.collections.vec.from_args": {"tf": 1}, "sain.convert.From": {"tf": 1}, "sain.convert.From.__init__": {"tf": 1}, "sain.convert.From.from_t": {"tf": 1.4142135623730951}, "sain.convert.TryFrom.try_from": {"tf": 1}}, "df": 17}}}}, "t": {"docs": {"sain.From.from_t": {"tf": 1}, "sain.convert.From.from_t": {"tf": 1}}, "df": 2, "a": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {"sain.Some.take": {"tf": 1}, "sain.Some.take_if": {"tf": 1}, "sain.Iterator.take": {"tf": 1}, "sain.Iterator.take_while": {"tf": 1}, "sain.iter.Iterator.take": {"tf": 1}, "sain.iter.Iterator.take_while": {"tf": 1}, "sain.iter.Take": {"tf": 1}, "sain.iter.Take.__init__": {"tf": 1}, "sain.option.Some.take": {"tf": 1}, "sain.option.Some.take_if": {"tf": 1}}, "df": 10, "w": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sain.iter.TakeWhile": {"tf": 1}, "sain.iter.TakeWhile.__init__": {"tf": 1}}, "df": 2}}}}}}}}, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"sain.Some.and_then": {"tf": 1}, "sain.option.Some.and_then": {"tf": 1}}, "df": 2}}}, "o": {"docs": {"sain.Iterator.to_vec": {"tf": 1}, "sain.collections.Bytes.try_to_str": {"tf": 1}, "sain.collections.Bytes.to_str": {"tf": 1}, "sain.collections.buf.Bytes.try_to_str": {"tf": 1}, "sain.collections.buf.Bytes.to_str": {"tf": 1}, "sain.iter.Iterator.to_vec": {"tf": 1}}, "df": 6, "d": {"docs": {}, "df": 0, "o": {"docs": {"sain.todo": {"tf": 1}, "sain.macros.todo": {"tf": 1}}, "df": 2}}}, "r": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"sain.Vec.truncate": {"tf": 1}, "sain.collections.Vec.truncate": {"tf": 1}, "sain.collections.vec.Vec.truncate": {"tf": 1}}, "df": 3}}}}}}, "y": {"docs": {"sain.TryFrom.try_from": {"tf": 1}, "sain.TryInto.try_into": {"tf": 1}, "sain.collections.Bytes.try_to_str": {"tf": 1}, "sain.collections.buf.Bytes.try_to_str": {"tf": 1}, "sain.convert.TryFrom.try_from": {"tf": 1}, "sain.convert.TryInto.try_into": {"tf": 1}}, "df": 6, "f": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"sain.TryFrom": {"tf": 1}, "sain.TryFrom.__init__": {"tf": 1}, "sain.TryFrom.try_from": {"tf": 1}, "sain.convert.TryFrom": {"tf": 1}, "sain.convert.TryFrom.__init__": {"tf": 1}, "sain.convert.TryFrom.try_from": {"tf": 1}}, "df": 6}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {"sain.TryInto": {"tf": 1}, "sain.TryInto.__init__": {"tf": 1}, "sain.TryInto.try_into": {"tf": 1}, "sain.convert.TryInto": {"tf": 1}, "sain.convert.TryInto.__init__": {"tf": 1}, "sain.convert.TryInto.try_into": {"tf": 1}}, "df": 6}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sain.Some.replace": {"tf": 1}, "sain.option.Some.replace": {"tf": 1}}, "df": 2}}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"sain.iter.repeat": {"tf": 1}}, "df": 1}}}}, "f": {"docs": {"sain.Some.as_ref": {"tf": 1}, "sain.Vec.as_ref": {"tf": 1}, "sain.collections.Vec.as_ref": {"tf": 1}, "sain.collections.Bytes.as_ref": {"tf": 1}, "sain.collections.buf.Bytes.as_ref": {"tf": 1}, "sain.collections.vec.Vec.as_ref": {"tf": 1}, "sain.option.Some.as_ref": {"tf": 1}}, "df": 7}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.Iterator.reversed": {"tf": 1}, "sain.iter.Iterator.reversed": {"tf": 1}}, "df": 2}}}}}}, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"sain.Result": {"tf": 1}, "sain.result.Result": {"tf": 1}}, "df": 2}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"sain.Vec.reserve": {"tf": 1}, "sain.collections.Vec.reserve": {"tf": 1}, "sain.collections.vec.Vec.reserve": {"tf": 1}}, "df": 3}}}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"sain.Vec.retain": {"tf": 1}, "sain.collections.Vec.retain": {"tf": 1}, "sain.collections.vec.Vec.retain": {"tf": 1}}, "df": 3}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"sain.Vec.swap_remove": {"tf": 1}, "sain.Vec.remove": {"tf": 1}, "sain.collections.Vec.swap_remove": {"tf": 1}, "sain.collections.Vec.remove": {"tf": 1}, "sain.collections.vec.Vec.swap_remove": {"tf": 1}, "sain.collections.vec.Vec.remove": {"tf": 1}}, "df": 6}}}, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.Box.remaining": {"tf": 1}, "sain.boxed.Box.remaining": {"tf": 1}}, "df": 2}}}}}}}}, "a": {"docs": {}, "df": 0, "w": {"docs": {"sain.Iterator.raw_parts": {"tf": 1}, "sain.collections.Bytes.from_raw": {"tf": 1}, "sain.collections.Bytes.raw_parts": {"tf": 1}, "sain.collections.Bytes.put_raw": {"tf": 1}, "sain.collections.buf.Bytes.from_raw": {"tf": 1}, "sain.collections.buf.Bytes.raw_parts": {"tf": 1}, "sain.collections.buf.Bytes.put_raw": {"tf": 1}, "sain.iter.Iterator.raw_parts": {"tf": 1}}, "df": 8, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "h": {"docs": {"sain.collections.buf.Rawish": {"tf": 1}}, "df": 1}}}}}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"sain.Some.is_none": {"tf": 1}, "sain.option.Some.is_none": {"tf": 1}}, "df": 2}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.NOTHING": {"tf": 1}, "sain.option.NOTHING": {"tf": 1}}, "df": 2}}}}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "t": {"docs": {"sain.Iterator.next": {"tf": 1}, "sain.iter.Iterator.next": {"tf": 1}, "sain.iter.Empty.next": {"tf": 1}}, "df": 3}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {"sain.Iterator.to_vec": {"tf": 1}, "sain.Vec": {"tf": 1}, "sain.Vec.__init__": {"tf": 1}, "sain.Vec.with_capacity": {"tf": 1}, "sain.Vec.as_ref": {"tf": 1}, "sain.Vec.len": {"tf": 1}, "sain.Vec.capacity": {"tf": 1}, "sain.Vec.iter": {"tf": 1}, "sain.Vec.is_empty": {"tf": 1}, "sain.Vec.split_off": {"tf": 1}, "sain.Vec.split_first": {"tf": 1}, "sain.Vec.first": {"tf": 1}, "sain.Vec.truncate": {"tf": 1}, "sain.Vec.retain": {"tf": 1}, "sain.Vec.swap_remove": {"tf": 1}, "sain.Vec.push": {"tf": 1}, "sain.Vec.push_within_capacity": {"tf": 1}, "sain.Vec.reserve": {"tf": 1}, "sain.Vec.append": {"tf": 1}, "sain.Vec.get": {"tf": 1}, "sain.Vec.insert": {"tf": 1}, "sain.Vec.pop": {"tf": 1}, "sain.Vec.remove": {"tf": 1}, "sain.Vec.extend": {"tf": 1}, "sain.Vec.copy": {"tf": 1}, "sain.Vec.clear": {"tf": 1}, "sain.Vec.sort": {"tf": 1}, "sain.Vec.index": {"tf": 1}, "sain.Vec.count": {"tf": 1}, "sain.collections.Vec": {"tf": 1}, "sain.collections.Vec.__init__": {"tf": 1}, "sain.collections.Vec.with_capacity": {"tf": 1}, "sain.collections.Vec.as_ref": {"tf": 1}, "sain.collections.Vec.len": {"tf": 1}, "sain.collections.Vec.capacity": {"tf": 1}, "sain.collections.Vec.iter": {"tf": 1}, "sain.collections.Vec.is_empty": {"tf": 1}, "sain.collections.Vec.split_off": {"tf": 1}, "sain.collections.Vec.split_first": {"tf": 1}, "sain.collections.Vec.first": {"tf": 1}, "sain.collections.Vec.truncate": {"tf": 1}, "sain.collections.Vec.retain": {"tf": 1}, "sain.collections.Vec.swap_remove": {"tf": 1}, "sain.collections.Vec.push": {"tf": 1}, "sain.collections.Vec.push_within_capacity": {"tf": 1}, "sain.collections.Vec.reserve": {"tf": 1}, "sain.collections.Vec.append": {"tf": 1}, "sain.collections.Vec.get": {"tf": 1}, "sain.collections.Vec.insert": {"tf": 1}, "sain.collections.Vec.pop": {"tf": 1}, "sain.collections.Vec.remove": {"tf": 1}, "sain.collections.Vec.extend": {"tf": 1}, "sain.collections.Vec.copy": {"tf": 1}, "sain.collections.Vec.clear": {"tf": 1}, "sain.collections.Vec.sort": {"tf": 1}, "sain.collections.Vec.index": {"tf": 1}, "sain.collections.Vec.count": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1}, "sain.collections.vec.Vec.__init__": {"tf": 1}, "sain.collections.vec.Vec.with_capacity": {"tf": 1}, "sain.collections.vec.Vec.as_ref": {"tf": 1}, "sain.collections.vec.Vec.len": {"tf": 1}, "sain.collections.vec.Vec.capacity": {"tf": 1}, "sain.collections.vec.Vec.iter": {"tf": 1}, "sain.collections.vec.Vec.is_empty": {"tf": 1}, "sain.collections.vec.Vec.split_off": {"tf": 1}, "sain.collections.vec.Vec.split_first": {"tf": 1}, "sain.collections.vec.Vec.first": {"tf": 1}, "sain.collections.vec.Vec.truncate": {"tf": 1}, "sain.collections.vec.Vec.retain": {"tf": 1}, "sain.collections.vec.Vec.swap_remove": {"tf": 1}, "sain.collections.vec.Vec.push": {"tf": 1}, "sain.collections.vec.Vec.push_within_capacity": {"tf": 1}, "sain.collections.vec.Vec.reserve": {"tf": 1}, "sain.collections.vec.Vec.append": {"tf": 1}, "sain.collections.vec.Vec.get": {"tf": 1}, "sain.collections.vec.Vec.insert": {"tf": 1}, "sain.collections.vec.Vec.pop": {"tf": 1}, "sain.collections.vec.Vec.remove": {"tf": 1}, "sain.collections.vec.Vec.extend": {"tf": 1}, "sain.collections.vec.Vec.copy": {"tf": 1}, "sain.collections.vec.Vec.clear": {"tf": 1}, "sain.collections.vec.Vec.sort": {"tf": 1}, "sain.collections.vec.Vec.index": {"tf": 1}, "sain.collections.vec.Vec.count": {"tf": 1}, "sain.iter.Iterator.to_vec": {"tf": 1}}, "df": 86}}}, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"sain.Iterator.raw_parts": {"tf": 1}, "sain.collections.Bytes.raw_parts": {"tf": 1}, "sain.collections.buf.Bytes.raw_parts": {"tf": 1}, "sain.iter.Iterator.raw_parts": {"tf": 1}}, "df": 4}}}}, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "h": {"docs": {"sain.Vec.push": {"tf": 1}, "sain.Vec.push_within_capacity": {"tf": 1}, "sain.collections.Vec.push": {"tf": 1}, "sain.collections.Vec.push_within_capacity": {"tf": 1}, "sain.collections.vec.Vec.push": {"tf": 1}, "sain.collections.vec.Vec.push_within_capacity": {"tf": 1}}, "df": 6}}, "t": {"docs": {"sain.collections.Bytes.put": {"tf": 1}, "sain.collections.Bytes.put_raw": {"tf": 1}, "sain.collections.Bytes.put_bytes": {"tf": 1}, "sain.collections.Bytes.put_str": {"tf": 1}, "sain.collections.buf.Bytes.put": {"tf": 1}, "sain.collections.buf.Bytes.put_raw": {"tf": 1}, "sain.collections.buf.Bytes.put_bytes": {"tf": 1}, "sain.collections.buf.Bytes.put_str": {"tf": 1}}, "df": 8}}, "o": {"docs": {}, "df": 0, "p": {"docs": {"sain.Vec.pop": {"tf": 1}, "sain.collections.Vec.pop": {"tf": 1}, "sain.collections.Bytes.pop": {"tf": 1}, "sain.collections.buf.Bytes.pop": {"tf": 1}, "sain.collections.vec.Vec.pop": {"tf": 1}}, "df": 5}}}, "w": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sain.Iterator.take_while": {"tf": 1}, "sain.Iterator.drop_while": {"tf": 1}, "sain.iter.Iterator.take_while": {"tf": 1}, "sain.iter.Iterator.drop_while": {"tf": 1}}, "df": 4}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"sain.Vec.with_capacity": {"tf": 1}, "sain.collections.Vec.with_capacity": {"tf": 1}, "sain.collections.vec.Vec.with_capacity": {"tf": 1}, "sain.sync.Once.get_or_with": {"tf": 1}, "sain.sync.AsyncOnce.get_or_with": {"tf": 1}}, "df": 5, "i": {"docs": {}, "df": 0, "n": {"docs": {"sain.Vec.push_within_capacity": {"tf": 1}, "sain.collections.Vec.push_within_capacity": {"tf": 1}, "sain.collections.vec.Vec.push_within_capacity": {"tf": 1}}, "df": 3}}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"sain.MaybeUninit.write": {"tf": 1}}, "df": 1}}}}}, "z": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {"sain.Iterator.zip": {"tf": 1}, "sain.iter.Iterator.zip": {"tf": 1}}, "df": 2}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"sain.Iterator.last": {"tf": 1}, "sain.iter.Iterator.last": {"tf": 1}}, "df": 2}}, "z": {"docs": {}, "df": 0, "y": {"docs": {"sain.sync.Lazy": {"tf": 1}, "sain.sync.Lazy.is_initialized": {"tf": 1}, "sain.sync.Lazy.get": {"tf": 1}, "sain.sync.Lazy.get_unchecked": {"tf": 1}, "sain.sync.Lazy.set": {"tf": 1}}, "df": 5, "f": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"sain.sync.LazyFuture": {"tf": 1}, "sain.sync.LazyFuture.is_initialized": {"tf": 1}, "sain.sync.LazyFuture.get": {"tf": 1}, "sain.sync.LazyFuture.set": {"tf": 1}}, "df": 4}}}}}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {"sain.Vec.len": {"tf": 1}, "sain.collections.Vec.len": {"tf": 1}, "sain.collections.Bytes.len": {"tf": 1}, "sain.collections.buf.Bytes.len": {"tf": 1}, "sain.collections.vec.Vec.len": {"tf": 1}}, "df": 5}, "a": {"docs": {}, "df": 0, "k": {"docs": {"sain.collections.Bytes.leak": {"tf": 1}, "sain.collections.buf.Bytes.leak": {"tf": 1}}, "df": 2}}}, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {"sain.futures.loop": {"tf": 1}}, "df": 1}}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"sain.Vec.get": {"tf": 1}, "sain.Box.get": {"tf": 1}, "sain.boxed.Box.get": {"tf": 1}, "sain.collections.Vec.get": {"tf": 1}, "sain.collections.vec.Vec.get": {"tf": 1}, "sain.sync.Lazy.get": {"tf": 1}, "sain.sync.Lazy.get_unchecked": {"tf": 1}, "sain.sync.Once.get": {"tf": 1}, "sain.sync.Once.get_unchecked": {"tf": 1}, "sain.sync.Once.get_or": {"tf": 1}, "sain.sync.Once.get_or_with": {"tf": 1}, "sain.sync.LazyFuture.get": {"tf": 1}, "sain.sync.AsyncOnce.get": {"tf": 1}, "sain.sync.AsyncOnce.get_unchecked": {"tf": 1}, "sain.sync.AsyncOnce.get_or": {"tf": 1}, "sain.sync.AsyncOnce.get_or_with": {"tf": 1}}, "df": 16}}}, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "x": {"docs": {"sain.Box": {"tf": 1}, "sain.Box.__init__": {"tf": 1}, "sain.Box.has_expired": {"tf": 1}, "sain.Box.on_expire": {"tf": 1}, "sain.Box.remaining": {"tf": 1}, "sain.Box.get": {"tf": 1}, "sain.boxed.Box": {"tf": 1}, "sain.boxed.Box.__init__": {"tf": 1}, "sain.boxed.Box.has_expired": {"tf": 1}, "sain.boxed.Box.on_expire": {"tf": 1}, "sain.boxed.Box.remaining": {"tf": 1}, "sain.boxed.Box.get": {"tf": 1}}, "df": 12}}, "y": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"sain.collections.Bytes": {"tf": 1}, "sain.collections.Bytes.__init__": {"tf": 1}, "sain.collections.Bytes.from_str": {"tf": 1}, "sain.collections.Bytes.from_static": {"tf": 1}, "sain.collections.Bytes.from_bytes": {"tf": 1.4142135623730951}, "sain.collections.Bytes.from_raw": {"tf": 1}, "sain.collections.Bytes.try_to_str": {"tf": 1}, "sain.collections.Bytes.to_str": {"tf": 1}, "sain.collections.Bytes.leak": {"tf": 1}, "sain.collections.Bytes.as_bytes": {"tf": 1.4142135623730951}, "sain.collections.Bytes.as_ref": {"tf": 1}, "sain.collections.Bytes.as_mut": {"tf": 1}, "sain.collections.Bytes.raw_parts": {"tf": 1}, "sain.collections.Bytes.put": {"tf": 1}, "sain.collections.Bytes.put_raw": {"tf": 1}, "sain.collections.Bytes.put_bytes": {"tf": 1.4142135623730951}, "sain.collections.Bytes.put_str": {"tf": 1}, "sain.collections.Bytes.len": {"tf": 1}, "sain.collections.Bytes.size": {"tf": 1}, "sain.collections.Bytes.iter": {"tf": 1}, "sain.collections.Bytes.is_empty": {"tf": 1}, "sain.collections.Bytes.copy": {"tf": 1}, "sain.collections.Bytes.clear": {"tf": 1}, "sain.collections.Bytes.index": {"tf": 1}, "sain.collections.Bytes.count": {"tf": 1}, "sain.collections.Bytes.insert": {"tf": 1}, "sain.collections.Bytes.pop": {"tf": 1}, "sain.collections.buf.Bytes": {"tf": 1}, "sain.collections.buf.Bytes.__init__": {"tf": 1}, "sain.collections.buf.Bytes.from_str": {"tf": 1}, "sain.collections.buf.Bytes.from_static": {"tf": 1}, "sain.collections.buf.Bytes.from_bytes": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.from_raw": {"tf": 1}, "sain.collections.buf.Bytes.try_to_str": {"tf": 1}, "sain.collections.buf.Bytes.to_str": {"tf": 1}, "sain.collections.buf.Bytes.leak": {"tf": 1}, "sain.collections.buf.Bytes.as_bytes": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.as_ref": {"tf": 1}, "sain.collections.buf.Bytes.as_mut": {"tf": 1}, "sain.collections.buf.Bytes.raw_parts": {"tf": 1}, "sain.collections.buf.Bytes.put": {"tf": 1}, "sain.collections.buf.Bytes.put_raw": {"tf": 1}, "sain.collections.buf.Bytes.put_bytes": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.put_str": {"tf": 1}, "sain.collections.buf.Bytes.len": {"tf": 1}, "sain.collections.buf.Bytes.size": {"tf": 1}, "sain.collections.buf.Bytes.iter": {"tf": 1}, "sain.collections.buf.Bytes.is_empty": {"tf": 1}, "sain.collections.buf.Bytes.copy": {"tf": 1}, "sain.collections.buf.Bytes.clear": {"tf": 1}, "sain.collections.buf.Bytes.index": {"tf": 1}, "sain.collections.buf.Bytes.count": {"tf": 1}, "sain.collections.buf.Bytes.insert": {"tf": 1}, "sain.collections.buf.Bytes.pop": {"tf": 1}}, "df": 54}}}}, "u": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sain.collections.buf.Buffer": {"tf": 1}}, "df": 1}}}}}}, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {"sain.Box.has_expired": {"tf": 1}, "sain.boxed.Box.has_expired": {"tf": 1}}, "df": 2}}}}}, "fullname": {"root": {"docs": {"sain.Default.__init__": {"tf": 1}, "sain.Some.__init__": {"tf": 1}, "sain.Iter.__init__": {"tf": 1}, "sain.Ok.__init__": {"tf": 1}, "sain.Err.__init__": {"tf": 1}, "sain.Vec.__init__": {"tf": 1}, "sain.Error.__init__": {"tf": 1}, "sain.Box.__init__": {"tf": 1}, "sain.MaybeUninit.__init__": {"tf": 1}, "sain.From.__init__": {"tf": 1}, "sain.TryFrom.__init__": {"tf": 1}, "sain.Into.__init__": {"tf": 1}, "sain.TryInto.__init__": {"tf": 1}, "sain.boxed.Box.__init__": {"tf": 1}, "sain.collections.Vec.__init__": {"tf": 1}, "sain.collections.Bytes.__init__": {"tf": 1}, "sain.collections.buf.Bytes.__init__": {"tf": 1}, "sain.collections.vec.Vec.__init__": {"tf": 1}, "sain.convert.From.__init__": {"tf": 1}, "sain.convert.TryFrom.__init__": {"tf": 1}, "sain.convert.Into.__init__": {"tf": 1}, "sain.convert.TryInto.__init__": {"tf": 1}, "sain.default.Default.__init__": {"tf": 1}, "sain.error.Error.__init__": {"tf": 1}, "sain.iter.Iter.__init__": {"tf": 1}, "sain.iter.Cloned.__init__": {"tf": 1}, "sain.iter.Copied.__init__": {"tf": 1}, "sain.iter.Take.__init__": {"tf": 1}, "sain.iter.Filter.__init__": {"tf": 1}, "sain.iter.Map.__init__": {"tf": 1}, "sain.iter.Skip.__init__": {"tf": 1}, "sain.iter.Enumerate.__init__": {"tf": 1}, "sain.iter.TakeWhile.__init__": {"tf": 1}, "sain.iter.DropWhile.__init__": {"tf": 1}, "sain.option.Some.__init__": {"tf": 1}, "sain.result.Ok.__init__": {"tf": 1}, "sain.result.Err.__init__": {"tf": 1}}, "df": 37, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"sain": {"tf": 1}, "sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.Default": {"tf": 1}, "sain.Default.__init__": {"tf": 1}, "sain.Default.default": {"tf": 1}, "sain.Some": {"tf": 1}, "sain.Some.__init__": {"tf": 1}, "sain.Some.default": {"tf": 1}, "sain.Some.into_inner": {"tf": 1}, "sain.Some.unwrap": {"tf": 1}, "sain.Some.unwrap_or": {"tf": 1}, "sain.Some.unwrap_or_else": {"tf": 1}, "sain.Some.unwrap_unchecked": {"tf": 1}, "sain.Some.expect": {"tf": 1}, "sain.Some.map": {"tf": 1}, "sain.Some.map_or": {"tf": 1}, "sain.Some.map_or_else": {"tf": 1}, "sain.Some.filter": {"tf": 1}, "sain.Some.take": {"tf": 1}, "sain.Some.take_if": {"tf": 1}, "sain.Some.replace": {"tf": 1}, "sain.Some.and_ok": {"tf": 1}, "sain.Some.and_then": {"tf": 1}, "sain.Some.iter": {"tf": 1}, "sain.Some.as_ref": {"tf": 1}, "sain.Some.as_mut": {"tf": 1}, "sain.Some.is_some": {"tf": 1}, "sain.Some.is_some_and": {"tf": 1}, "sain.Some.is_none": {"tf": 1}, "sain.Option": {"tf": 1}, "sain.NOTHING": {"tf": 1}, "sain.Iter": {"tf": 1}, "sain.Iter.__init__": {"tf": 1}, "sain.Iter.clone": {"tf": 1}, "sain.Iterator": {"tf": 1}, "sain.Iterator.default": {"tf": 1}, "sain.Iterator.collect": {"tf": 1}, "sain.Iterator.to_vec": {"tf": 1}, "sain.Iterator.sink": {"tf": 1}, "sain.Iterator.raw_parts": {"tf": 1}, "sain.Iterator.next": {"tf": 1}, "sain.Iterator.cloned": {"tf": 1}, "sain.Iterator.copied": {"tf": 1}, "sain.Iterator.map": {"tf": 1}, "sain.Iterator.filter": {"tf": 1}, "sain.Iterator.take": {"tf": 1}, "sain.Iterator.skip": {"tf": 1}, "sain.Iterator.enumerate": {"tf": 1}, "sain.Iterator.take_while": {"tf": 1}, "sain.Iterator.drop_while": {"tf": 1}, "sain.Iterator.all": {"tf": 1}, "sain.Iterator.any": {"tf": 1}, "sain.Iterator.zip": {"tf": 1}, "sain.Iterator.sort": {"tf": 1}, "sain.Iterator.reversed": {"tf": 1}, "sain.Iterator.union": {"tf": 1}, "sain.Iterator.first": {"tf": 1}, "sain.Iterator.last": {"tf": 1}, "sain.Iterator.count": {"tf": 1}, "sain.Iterator.for_each": {"tf": 1}, "sain.Iterator.async_for_each": {"tf": 1}, "sain.todo": {"tf": 1}, "sain.deprecated": {"tf": 1}, "sain.unimplemented": {"tf": 1}, "sain.doc": {"tf": 1}, "sain.Ok": {"tf": 1}, "sain.Ok.__init__": {"tf": 1}, "sain.Ok.is_ok": {"tf": 1}, "sain.Ok.is_ok_and": {"tf": 1}, "sain.Ok.is_err": {"tf": 1}, "sain.Ok.is_err_and": {"tf": 1}, "sain.Ok.expect": {"tf": 1}, "sain.Ok.unwrap": {"tf": 1}, "sain.Ok.unwrap_or": {"tf": 1}, "sain.Ok.unwrap_or_else": {"tf": 1}, "sain.Ok.unwrap_err": {"tf": 1}, "sain.Ok.ok": {"tf": 1}, "sain.Ok.err": {"tf": 1}, "sain.Ok.inspect": {"tf": 1}, "sain.Ok.inspect_err": {"tf": 1}, "sain.Ok.map": {"tf": 1}, "sain.Ok.map_or": {"tf": 1}, "sain.Ok.map_or_else": {"tf": 1}, "sain.Ok.map_err": {"tf": 1}, "sain.Ok.iter": {"tf": 1}, "sain.Err": {"tf": 1}, "sain.Err.__init__": {"tf": 1}, "sain.Err.is_ok": {"tf": 1}, "sain.Err.is_ok_and": {"tf": 1}, "sain.Err.is_err": {"tf": 1}, "sain.Err.is_err_and": {"tf": 1}, "sain.Err.expect": {"tf": 1}, "sain.Err.expect_err": {"tf": 1}, "sain.Err.unwrap": {"tf": 1}, "sain.Err.unwrap_or": {"tf": 1}, "sain.Err.unwrap_or_else": {"tf": 1}, "sain.Err.unwrap_err": {"tf": 1}, "sain.Err.inspect": {"tf": 1}, "sain.Err.inspect_err": {"tf": 1}, "sain.Err.ok": {"tf": 1}, "sain.Err.err": {"tf": 1}, "sain.Err.map": {"tf": 1}, "sain.Err.map_or": {"tf": 1}, "sain.Err.map_or_else": {"tf": 1}, "sain.Err.map_err": {"tf": 1}, "sain.Err.iter": {"tf": 1}, "sain.Result": {"tf": 1}, "sain.Vec": {"tf": 1}, "sain.Vec.__init__": {"tf": 1}, "sain.Vec.with_capacity": {"tf": 1}, "sain.Vec.as_ref": {"tf": 1}, "sain.Vec.len": {"tf": 1}, "sain.Vec.capacity": {"tf": 1}, "sain.Vec.iter": {"tf": 1}, "sain.Vec.is_empty": {"tf": 1}, "sain.Vec.split_off": {"tf": 1}, "sain.Vec.split_first": {"tf": 1}, "sain.Vec.first": {"tf": 1}, "sain.Vec.truncate": {"tf": 1}, "sain.Vec.retain": {"tf": 1}, "sain.Vec.swap_remove": {"tf": 1}, "sain.Vec.push": {"tf": 1}, "sain.Vec.push_within_capacity": {"tf": 1}, "sain.Vec.reserve": {"tf": 1}, "sain.Vec.append": {"tf": 1}, "sain.Vec.get": {"tf": 1}, "sain.Vec.insert": {"tf": 1}, "sain.Vec.pop": {"tf": 1}, "sain.Vec.remove": {"tf": 1}, "sain.Vec.extend": {"tf": 1}, "sain.Vec.copy": {"tf": 1}, "sain.Vec.clear": {"tf": 1}, "sain.Vec.sort": {"tf": 1}, "sain.Vec.index": {"tf": 1}, "sain.Vec.count": {"tf": 1}, "sain.Error": {"tf": 1}, "sain.Error.__init__": {"tf": 1}, "sain.Error.message": {"tf": 1}, "sain.Error.source": {"tf": 1}, "sain.Error.description": {"tf": 1}, "sain.Box": {"tf": 1}, "sain.Box.__init__": {"tf": 1}, "sain.Box.has_expired": {"tf": 1}, "sain.Box.on_expire": {"tf": 1}, "sain.Box.remaining": {"tf": 1}, "sain.Box.get": {"tf": 1}, "sain.MaybeUninit": {"tf": 1}, "sain.MaybeUninit.__init__": {"tf": 1}, "sain.MaybeUninit.uninit": {"tf": 1}, "sain.MaybeUninit.uninit_array": {"tf": 1}, "sain.MaybeUninit.assume_init": {"tf": 1}, "sain.MaybeUninit.write": {"tf": 1}, "sain.From": {"tf": 1}, "sain.From.__init__": {"tf": 1}, "sain.From.from_t": {"tf": 1}, "sain.TryFrom": {"tf": 1}, "sain.TryFrom.__init__": {"tf": 1}, "sain.TryFrom.try_from": {"tf": 1}, "sain.Into": {"tf": 1}, "sain.Into.__init__": {"tf": 1}, "sain.Into.into": {"tf": 1}, "sain.TryInto": {"tf": 1}, "sain.TryInto.__init__": {"tf": 1}, "sain.TryInto.try_into": {"tf": 1}, "sain.boxed": {"tf": 1}, "sain.boxed.Box": {"tf": 1}, "sain.boxed.Box.__init__": {"tf": 1}, "sain.boxed.Box.has_expired": {"tf": 1}, "sain.boxed.Box.on_expire": {"tf": 1}, "sain.boxed.Box.remaining": {"tf": 1}, "sain.boxed.Box.get": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}, "sain.collections": {"tf": 1}, "sain.collections.Vec": {"tf": 1}, "sain.collections.Vec.__init__": {"tf": 1}, "sain.collections.Vec.with_capacity": {"tf": 1}, "sain.collections.Vec.as_ref": {"tf": 1}, "sain.collections.Vec.len": {"tf": 1}, "sain.collections.Vec.capacity": {"tf": 1}, "sain.collections.Vec.iter": {"tf": 1}, "sain.collections.Vec.is_empty": {"tf": 1}, "sain.collections.Vec.split_off": {"tf": 1}, "sain.collections.Vec.split_first": {"tf": 1}, "sain.collections.Vec.first": {"tf": 1}, "sain.collections.Vec.truncate": {"tf": 1}, "sain.collections.Vec.retain": {"tf": 1}, "sain.collections.Vec.swap_remove": {"tf": 1}, "sain.collections.Vec.push": {"tf": 1}, "sain.collections.Vec.push_within_capacity": {"tf": 1}, "sain.collections.Vec.reserve": {"tf": 1}, "sain.collections.Vec.append": {"tf": 1}, "sain.collections.Vec.get": {"tf": 1}, "sain.collections.Vec.insert": {"tf": 1}, "sain.collections.Vec.pop": {"tf": 1}, "sain.collections.Vec.remove": {"tf": 1}, "sain.collections.Vec.extend": {"tf": 1}, "sain.collections.Vec.copy": {"tf": 1}, "sain.collections.Vec.clear": {"tf": 1}, "sain.collections.Vec.sort": {"tf": 1}, "sain.collections.Vec.index": {"tf": 1}, "sain.collections.Vec.count": {"tf": 1}, "sain.collections.Bytes": {"tf": 1}, "sain.collections.Bytes.__init__": {"tf": 1}, "sain.collections.Bytes.from_str": {"tf": 1}, "sain.collections.Bytes.from_static": {"tf": 1}, "sain.collections.Bytes.from_bytes": {"tf": 1}, "sain.collections.Bytes.from_raw": {"tf": 1}, "sain.collections.Bytes.try_to_str": {"tf": 1}, "sain.collections.Bytes.to_str": {"tf": 1}, "sain.collections.Bytes.leak": {"tf": 1}, "sain.collections.Bytes.as_bytes": {"tf": 1}, "sain.collections.Bytes.as_ref": {"tf": 1}, "sain.collections.Bytes.as_mut": {"tf": 1}, "sain.collections.Bytes.raw_parts": {"tf": 1}, "sain.collections.Bytes.put": {"tf": 1}, "sain.collections.Bytes.put_raw": {"tf": 1}, "sain.collections.Bytes.put_bytes": {"tf": 1}, "sain.collections.Bytes.put_str": {"tf": 1}, "sain.collections.Bytes.len": {"tf": 1}, "sain.collections.Bytes.size": {"tf": 1}, "sain.collections.Bytes.iter": {"tf": 1}, "sain.collections.Bytes.is_empty": {"tf": 1}, "sain.collections.Bytes.copy": {"tf": 1}, "sain.collections.Bytes.clear": {"tf": 1}, "sain.collections.Bytes.index": {"tf": 1}, "sain.collections.Bytes.count": {"tf": 1}, "sain.collections.Bytes.insert": {"tf": 1}, "sain.collections.Bytes.pop": {"tf": 1}, "sain.collections.buf": {"tf": 1}, "sain.collections.buf.Bytes": {"tf": 1}, "sain.collections.buf.Bytes.__init__": {"tf": 1}, "sain.collections.buf.Bytes.from_str": {"tf": 1}, "sain.collections.buf.Bytes.from_static": {"tf": 1}, "sain.collections.buf.Bytes.from_bytes": {"tf": 1}, "sain.collections.buf.Bytes.from_raw": {"tf": 1}, "sain.collections.buf.Bytes.try_to_str": {"tf": 1}, "sain.collections.buf.Bytes.to_str": {"tf": 1}, "sain.collections.buf.Bytes.leak": {"tf": 1}, "sain.collections.buf.Bytes.as_bytes": {"tf": 1}, "sain.collections.buf.Bytes.as_ref": {"tf": 1}, "sain.collections.buf.Bytes.as_mut": {"tf": 1}, "sain.collections.buf.Bytes.raw_parts": {"tf": 1}, "sain.collections.buf.Bytes.put": {"tf": 1}, "sain.collections.buf.Bytes.put_raw": {"tf": 1}, "sain.collections.buf.Bytes.put_bytes": {"tf": 1}, "sain.collections.buf.Bytes.put_str": {"tf": 1}, "sain.collections.buf.Bytes.len": {"tf": 1}, "sain.collections.buf.Bytes.size": {"tf": 1}, "sain.collections.buf.Bytes.iter": {"tf": 1}, "sain.collections.buf.Bytes.is_empty": {"tf": 1}, "sain.collections.buf.Bytes.copy": {"tf": 1}, "sain.collections.buf.Bytes.clear": {"tf": 1}, "sain.collections.buf.Bytes.index": {"tf": 1}, "sain.collections.buf.Bytes.count": {"tf": 1}, "sain.collections.buf.Bytes.insert": {"tf": 1}, "sain.collections.buf.Bytes.pop": {"tf": 1}, "sain.collections.buf.Rawish": {"tf": 1}, "sain.collections.buf.Buffer": {"tf": 1}, "sain.collections.vec": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1}, "sain.collections.vec.Vec.__init__": {"tf": 1}, "sain.collections.vec.Vec.with_capacity": {"tf": 1}, "sain.collections.vec.Vec.as_ref": {"tf": 1}, "sain.collections.vec.Vec.len": {"tf": 1}, "sain.collections.vec.Vec.capacity": {"tf": 1}, "sain.collections.vec.Vec.iter": {"tf": 1}, "sain.collections.vec.Vec.is_empty": {"tf": 1}, "sain.collections.vec.Vec.split_off": {"tf": 1}, "sain.collections.vec.Vec.split_first": {"tf": 1}, "sain.collections.vec.Vec.first": {"tf": 1}, "sain.collections.vec.Vec.truncate": {"tf": 1}, "sain.collections.vec.Vec.retain": {"tf": 1}, "sain.collections.vec.Vec.swap_remove": {"tf": 1}, "sain.collections.vec.Vec.push": {"tf": 1}, "sain.collections.vec.Vec.push_within_capacity": {"tf": 1}, "sain.collections.vec.Vec.reserve": {"tf": 1}, "sain.collections.vec.Vec.append": {"tf": 1}, "sain.collections.vec.Vec.get": {"tf": 1}, "sain.collections.vec.Vec.insert": {"tf": 1}, "sain.collections.vec.Vec.pop": {"tf": 1}, "sain.collections.vec.Vec.remove": {"tf": 1}, "sain.collections.vec.Vec.extend": {"tf": 1}, "sain.collections.vec.Vec.copy": {"tf": 1}, "sain.collections.vec.Vec.clear": {"tf": 1}, "sain.collections.vec.Vec.sort": {"tf": 1}, "sain.collections.vec.Vec.index": {"tf": 1}, "sain.collections.vec.Vec.count": {"tf": 1}, "sain.collections.vec.from_args": {"tf": 1}, "sain.convert": {"tf": 1}, "sain.convert.From": {"tf": 1}, "sain.convert.From.__init__": {"tf": 1}, "sain.convert.From.from_t": {"tf": 1}, "sain.convert.TryFrom": {"tf": 1}, "sain.convert.TryFrom.__init__": {"tf": 1}, "sain.convert.TryFrom.try_from": {"tf": 1}, "sain.convert.Into": {"tf": 1}, "sain.convert.Into.__init__": {"tf": 1}, "sain.convert.Into.into": {"tf": 1}, "sain.convert.TryInto": {"tf": 1}, "sain.convert.TryInto.__init__": {"tf": 1}, "sain.convert.TryInto.try_into": {"tf": 1}, "sain.default": {"tf": 1}, "sain.default.Default": {"tf": 1}, "sain.default.Default.__init__": {"tf": 1}, "sain.default.Default.default": {"tf": 1}, "sain.error": {"tf": 1}, "sain.error.Error": {"tf": 1}, "sain.error.Error.__init__": {"tf": 1}, "sain.error.Error.message": {"tf": 1}, "sain.error.Error.source": {"tf": 1}, "sain.error.Error.description": {"tf": 1}, "sain.futures": {"tf": 1}, "sain.futures.spawn": {"tf": 1}, "sain.futures.loop": {"tf": 1}, "sain.iter": {"tf": 1}, "sain.iter.Iter": {"tf": 1}, "sain.iter.Iter.__init__": {"tf": 1}, "sain.iter.Iter.clone": {"tf": 1}, "sain.iter.Iterator": {"tf": 1}, "sain.iter.Iterator.default": {"tf": 1}, "sain.iter.Iterator.collect": {"tf": 1}, "sain.iter.Iterator.to_vec": {"tf": 1}, "sain.iter.Iterator.sink": {"tf": 1}, "sain.iter.Iterator.raw_parts": {"tf": 1}, "sain.iter.Iterator.next": {"tf": 1}, "sain.iter.Iterator.cloned": {"tf": 1}, "sain.iter.Iterator.copied": {"tf": 1}, "sain.iter.Iterator.map": {"tf": 1}, "sain.iter.Iterator.filter": {"tf": 1}, "sain.iter.Iterator.take": {"tf": 1}, "sain.iter.Iterator.skip": {"tf": 1}, "sain.iter.Iterator.enumerate": {"tf": 1}, "sain.iter.Iterator.take_while": {"tf": 1}, "sain.iter.Iterator.drop_while": {"tf": 1}, "sain.iter.Iterator.all": {"tf": 1}, "sain.iter.Iterator.any": {"tf": 1}, "sain.iter.Iterator.zip": {"tf": 1}, "sain.iter.Iterator.sort": {"tf": 1}, "sain.iter.Iterator.reversed": {"tf": 1}, "sain.iter.Iterator.union": {"tf": 1}, "sain.iter.Iterator.first": {"tf": 1}, "sain.iter.Iterator.last": {"tf": 1}, "sain.iter.Iterator.count": {"tf": 1}, "sain.iter.Iterator.for_each": {"tf": 1}, "sain.iter.Iterator.async_for_each": {"tf": 1}, "sain.iter.Cloned": {"tf": 1}, "sain.iter.Cloned.__init__": {"tf": 1}, "sain.iter.Copied": {"tf": 1}, "sain.iter.Copied.__init__": {"tf": 1}, "sain.iter.Take": {"tf": 1}, "sain.iter.Take.__init__": {"tf": 1}, "sain.iter.Filter": {"tf": 1}, "sain.iter.Filter.__init__": {"tf": 1}, "sain.iter.Map": {"tf": 1}, "sain.iter.Map.__init__": {"tf": 1}, "sain.iter.Skip": {"tf": 1}, "sain.iter.Skip.__init__": {"tf": 1}, "sain.iter.Enumerate": {"tf": 1}, "sain.iter.Enumerate.__init__": {"tf": 1}, "sain.iter.TakeWhile": {"tf": 1}, "sain.iter.TakeWhile.__init__": {"tf": 1}, "sain.iter.DropWhile": {"tf": 1}, "sain.iter.DropWhile.__init__": {"tf": 1}, "sain.iter.Empty": {"tf": 1}, "sain.iter.Empty.next": {"tf": 1}, "sain.iter.Empty.count": {"tf": 1}, "sain.iter.Empty.any": {"tf": 1}, "sain.iter.Empty.all": {"tf": 1}, "sain.iter.into_iter": {"tf": 1}, "sain.iter.empty": {"tf": 1}, "sain.iter.once": {"tf": 1}, "sain.iter.repeat": {"tf": 1}, "sain.macros": {"tf": 1}, "sain.macros.deprecated": {"tf": 1}, "sain.macros.unimplemented": {"tf": 1}, "sain.macros.todo": {"tf": 1}, "sain.macros.doc": {"tf": 1}, "sain.macros.unsafe": {"tf": 1}, "sain.option": {"tf": 1}, "sain.option.Some": {"tf": 1}, "sain.option.Some.__init__": {"tf": 1}, "sain.option.Some.default": {"tf": 1}, "sain.option.Some.into_inner": {"tf": 1}, "sain.option.Some.unwrap": {"tf": 1}, "sain.option.Some.unwrap_or": {"tf": 1}, "sain.option.Some.unwrap_or_else": {"tf": 1}, "sain.option.Some.unwrap_unchecked": {"tf": 1}, "sain.option.Some.expect": {"tf": 1}, "sain.option.Some.map": {"tf": 1}, "sain.option.Some.map_or": {"tf": 1}, "sain.option.Some.map_or_else": {"tf": 1}, "sain.option.Some.filter": {"tf": 1}, "sain.option.Some.take": {"tf": 1}, "sain.option.Some.take_if": {"tf": 1}, "sain.option.Some.replace": {"tf": 1}, "sain.option.Some.and_ok": {"tf": 1}, "sain.option.Some.and_then": {"tf": 1}, "sain.option.Some.iter": {"tf": 1}, "sain.option.Some.as_ref": {"tf": 1}, "sain.option.Some.as_mut": {"tf": 1}, "sain.option.Some.is_some": {"tf": 1}, "sain.option.Some.is_some_and": {"tf": 1}, "sain.option.Some.is_none": {"tf": 1}, "sain.option.Option": {"tf": 1}, "sain.option.NOTHING": {"tf": 1}, "sain.result": {"tf": 1}, "sain.result.Ok": {"tf": 1}, "sain.result.Ok.__init__": {"tf": 1}, "sain.result.Ok.is_ok": {"tf": 1}, "sain.result.Ok.is_ok_and": {"tf": 1}, "sain.result.Ok.is_err": {"tf": 1}, "sain.result.Ok.is_err_and": {"tf": 1}, "sain.result.Ok.expect": {"tf": 1}, "sain.result.Ok.unwrap": {"tf": 1}, "sain.result.Ok.unwrap_or": {"tf": 1}, "sain.result.Ok.unwrap_or_else": {"tf": 1}, "sain.result.Ok.unwrap_err": {"tf": 1}, "sain.result.Ok.ok": {"tf": 1}, "sain.result.Ok.err": {"tf": 1}, "sain.result.Ok.inspect": {"tf": 1}, "sain.result.Ok.inspect_err": {"tf": 1}, "sain.result.Ok.map": {"tf": 1}, "sain.result.Ok.map_or": {"tf": 1}, "sain.result.Ok.map_or_else": {"tf": 1}, "sain.result.Ok.map_err": {"tf": 1}, "sain.result.Ok.iter": {"tf": 1}, "sain.result.Err": {"tf": 1}, "sain.result.Err.__init__": {"tf": 1}, "sain.result.Err.is_ok": {"tf": 1}, "sain.result.Err.is_ok_and": {"tf": 1}, "sain.result.Err.is_err": {"tf": 1}, "sain.result.Err.is_err_and": {"tf": 1}, "sain.result.Err.expect": {"tf": 1}, "sain.result.Err.expect_err": {"tf": 1}, "sain.result.Err.unwrap": {"tf": 1}, "sain.result.Err.unwrap_or": {"tf": 1}, "sain.result.Err.unwrap_or_else": {"tf": 1}, "sain.result.Err.unwrap_err": {"tf": 1}, "sain.result.Err.inspect": {"tf": 1}, "sain.result.Err.inspect_err": {"tf": 1}, "sain.result.Err.ok": {"tf": 1}, "sain.result.Err.err": {"tf": 1}, "sain.result.Err.map": {"tf": 1}, "sain.result.Err.map_or": {"tf": 1}, "sain.result.Err.map_or_else": {"tf": 1}, "sain.result.Err.map_err": {"tf": 1}, "sain.result.Err.iter": {"tf": 1}, "sain.result.Result": {"tf": 1}, "sain.sync": {"tf": 1}, "sain.sync.Lazy": {"tf": 1}, "sain.sync.Lazy.is_initialized": {"tf": 1}, "sain.sync.Lazy.get": {"tf": 1}, "sain.sync.Lazy.get_unchecked": {"tf": 1}, "sain.sync.Lazy.set": {"tf": 1}, "sain.sync.Once": {"tf": 1}, "sain.sync.Once.is_set": {"tf": 1}, "sain.sync.Once.get": {"tf": 1}, "sain.sync.Once.get_unchecked": {"tf": 1}, "sain.sync.Once.set": {"tf": 1}, "sain.sync.Once.clear": {"tf": 1}, "sain.sync.Once.get_or": {"tf": 1}, "sain.sync.Once.get_or_with": {"tf": 1}, "sain.sync.Once.into_inner": {"tf": 1}, "sain.sync.LazyFuture": {"tf": 1}, "sain.sync.LazyFuture.is_initialized": {"tf": 1}, "sain.sync.LazyFuture.get": {"tf": 1}, "sain.sync.LazyFuture.set": {"tf": 1}, "sain.sync.AsyncOnce": {"tf": 1}, "sain.sync.AsyncOnce.is_set": {"tf": 1}, "sain.sync.AsyncOnce.get": {"tf": 1}, "sain.sync.AsyncOnce.get_unchecked": {"tf": 1}, "sain.sync.AsyncOnce.set": {"tf": 1}, "sain.sync.AsyncOnce.clear": {"tf": 1}, "sain.sync.AsyncOnce.get_or": {"tf": 1}, "sain.sync.AsyncOnce.get_or_with": {"tf": 1}}, "df": 477}}}, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"sain.Some": {"tf": 1}, "sain.Some.__init__": {"tf": 1}, "sain.Some.default": {"tf": 1}, "sain.Some.into_inner": {"tf": 1}, "sain.Some.unwrap": {"tf": 1}, "sain.Some.unwrap_or": {"tf": 1}, "sain.Some.unwrap_or_else": {"tf": 1}, "sain.Some.unwrap_unchecked": {"tf": 1}, "sain.Some.expect": {"tf": 1}, "sain.Some.map": {"tf": 1}, "sain.Some.map_or": {"tf": 1}, "sain.Some.map_or_else": {"tf": 1}, "sain.Some.filter": {"tf": 1}, "sain.Some.take": {"tf": 1}, "sain.Some.take_if": {"tf": 1}, "sain.Some.replace": {"tf": 1}, "sain.Some.and_ok": {"tf": 1}, "sain.Some.and_then": {"tf": 1}, "sain.Some.iter": {"tf": 1}, "sain.Some.as_ref": {"tf": 1}, "sain.Some.as_mut": {"tf": 1}, "sain.Some.is_some": {"tf": 1.4142135623730951}, "sain.Some.is_some_and": {"tf": 1.4142135623730951}, "sain.Some.is_none": {"tf": 1}, "sain.option.Some": {"tf": 1}, "sain.option.Some.__init__": {"tf": 1}, "sain.option.Some.default": {"tf": 1}, "sain.option.Some.into_inner": {"tf": 1}, "sain.option.Some.unwrap": {"tf": 1}, "sain.option.Some.unwrap_or": {"tf": 1}, "sain.option.Some.unwrap_or_else": {"tf": 1}, "sain.option.Some.unwrap_unchecked": {"tf": 1}, "sain.option.Some.expect": {"tf": 1}, "sain.option.Some.map": {"tf": 1}, "sain.option.Some.map_or": {"tf": 1}, "sain.option.Some.map_or_else": {"tf": 1}, "sain.option.Some.filter": {"tf": 1}, "sain.option.Some.take": {"tf": 1}, "sain.option.Some.take_if": {"tf": 1}, "sain.option.Some.replace": {"tf": 1}, "sain.option.Some.and_ok": {"tf": 1}, "sain.option.Some.and_then": {"tf": 1}, "sain.option.Some.iter": {"tf": 1}, "sain.option.Some.as_ref": {"tf": 1}, "sain.option.Some.as_mut": {"tf": 1}, "sain.option.Some.is_some": {"tf": 1.4142135623730951}, "sain.option.Some.is_some_and": {"tf": 1.4142135623730951}, "sain.option.Some.is_none": {"tf": 1}}, "df": 48}}, "r": {"docs": {}, "df": 0, "t": {"docs": {"sain.Iterator.sort": {"tf": 1}, "sain.Vec.sort": {"tf": 1}, "sain.collections.Vec.sort": {"tf": 1}, "sain.collections.vec.Vec.sort": {"tf": 1}, "sain.iter.Iterator.sort": {"tf": 1}}, "df": 5}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sain.Error.source": {"tf": 1}, "sain.error.Error.source": {"tf": 1}}, "df": 2}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "k": {"docs": {"sain.Iterator.sink": {"tf": 1}, "sain.iter.Iterator.sink": {"tf": 1}}, "df": 2}}, "z": {"docs": {}, "df": 0, "e": {"docs": {"sain.collections.Bytes.size": {"tf": 1}, "sain.collections.buf.Bytes.size": {"tf": 1}}, "df": 2}}}, "k": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {"sain.Iterator.skip": {"tf": 1}, "sain.iter.Iterator.skip": {"tf": 1}, "sain.iter.Skip": {"tf": 1}, "sain.iter.Skip.__init__": {"tf": 1}}, "df": 4}}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"sain.Vec.split_off": {"tf": 1}, "sain.Vec.split_first": {"tf": 1}, "sain.collections.Vec.split_off": {"tf": 1}, "sain.collections.Vec.split_first": {"tf": 1}, "sain.collections.vec.Vec.split_off": {"tf": 1}, "sain.collections.vec.Vec.split_first": {"tf": 1}}, "df": 6}}}, "a": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "n": {"docs": {"sain.futures.spawn": {"tf": 1}}, "df": 1}}}}, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {"sain.Vec.swap_remove": {"tf": 1}, "sain.collections.Vec.swap_remove": {"tf": 1}, "sain.collections.vec.Vec.swap_remove": {"tf": 1}}, "df": 3}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {"sain.collections.Bytes.from_str": {"tf": 1}, "sain.collections.Bytes.try_to_str": {"tf": 1}, "sain.collections.Bytes.to_str": {"tf": 1}, "sain.collections.Bytes.put_str": {"tf": 1}, "sain.collections.buf.Bytes.from_str": {"tf": 1}, "sain.collections.buf.Bytes.try_to_str": {"tf": 1}, "sain.collections.buf.Bytes.to_str": {"tf": 1}, "sain.collections.buf.Bytes.put_str": {"tf": 1}}, "df": 8}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"sain.collections.Bytes.from_static": {"tf": 1}, "sain.collections.buf.Bytes.from_static": {"tf": 1}}, "df": 2}}}}}, "y": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {"sain.sync": {"tf": 1}, "sain.sync.Lazy": {"tf": 1}, "sain.sync.Lazy.is_initialized": {"tf": 1}, "sain.sync.Lazy.get": {"tf": 1}, "sain.sync.Lazy.get_unchecked": {"tf": 1}, "sain.sync.Lazy.set": {"tf": 1}, "sain.sync.Once": {"tf": 1}, "sain.sync.Once.is_set": {"tf": 1}, "sain.sync.Once.get": {"tf": 1}, "sain.sync.Once.get_unchecked": {"tf": 1}, "sain.sync.Once.set": {"tf": 1}, "sain.sync.Once.clear": {"tf": 1}, "sain.sync.Once.get_or": {"tf": 1}, "sain.sync.Once.get_or_with": {"tf": 1}, "sain.sync.Once.into_inner": {"tf": 1}, "sain.sync.LazyFuture": {"tf": 1}, "sain.sync.LazyFuture.is_initialized": {"tf": 1}, "sain.sync.LazyFuture.get": {"tf": 1}, "sain.sync.LazyFuture.set": {"tf": 1}, "sain.sync.AsyncOnce": {"tf": 1}, "sain.sync.AsyncOnce.is_set": {"tf": 1}, "sain.sync.AsyncOnce.get": {"tf": 1}, "sain.sync.AsyncOnce.get_unchecked": {"tf": 1}, "sain.sync.AsyncOnce.set": {"tf": 1}, "sain.sync.AsyncOnce.clear": {"tf": 1}, "sain.sync.AsyncOnce.get_or": {"tf": 1}, "sain.sync.AsyncOnce.get_or_with": {"tf": 1}}, "df": 27}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {"sain.sync.Lazy.set": {"tf": 1}, "sain.sync.Once.is_set": {"tf": 1}, "sain.sync.Once.set": {"tf": 1}, "sain.sync.LazyFuture.set": {"tf": 1}, "sain.sync.AsyncOnce.is_set": {"tf": 1}, "sain.sync.AsyncOnce.set": {"tf": 1}}, "df": 6}}}, "c": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "g": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1.4142135623730951}, "sain.cfg.cfg": {"tf": 1.4142135623730951}}, "df": 4}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"sain.Iter.clone": {"tf": 1}, "sain.iter.Iter.clone": {"tf": 1}}, "df": 2, "d": {"docs": {"sain.Iterator.cloned": {"tf": 1}, "sain.iter.Iterator.cloned": {"tf": 1}, "sain.iter.Cloned": {"tf": 1}, "sain.iter.Cloned.__init__": {"tf": 1}}, "df": 4}}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"sain.Vec.clear": {"tf": 1}, "sain.collections.Vec.clear": {"tf": 1}, "sain.collections.Bytes.clear": {"tf": 1}, "sain.collections.buf.Bytes.clear": {"tf": 1}, "sain.collections.vec.Vec.clear": {"tf": 1}, "sain.sync.Once.clear": {"tf": 1}, "sain.sync.AsyncOnce.clear": {"tf": 1}}, "df": 7}}}}, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"sain.Iterator.collect": {"tf": 1}, "sain.iter.Iterator.collect": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"sain.collections": {"tf": 1}, "sain.collections.Vec": {"tf": 1}, "sain.collections.Vec.__init__": {"tf": 1}, "sain.collections.Vec.with_capacity": {"tf": 1}, "sain.collections.Vec.as_ref": {"tf": 1}, "sain.collections.Vec.len": {"tf": 1}, "sain.collections.Vec.capacity": {"tf": 1}, "sain.collections.Vec.iter": {"tf": 1}, "sain.collections.Vec.is_empty": {"tf": 1}, "sain.collections.Vec.split_off": {"tf": 1}, "sain.collections.Vec.split_first": {"tf": 1}, "sain.collections.Vec.first": {"tf": 1}, "sain.collections.Vec.truncate": {"tf": 1}, "sain.collections.Vec.retain": {"tf": 1}, "sain.collections.Vec.swap_remove": {"tf": 1}, "sain.collections.Vec.push": {"tf": 1}, "sain.collections.Vec.push_within_capacity": {"tf": 1}, "sain.collections.Vec.reserve": {"tf": 1}, "sain.collections.Vec.append": {"tf": 1}, "sain.collections.Vec.get": {"tf": 1}, "sain.collections.Vec.insert": {"tf": 1}, "sain.collections.Vec.pop": {"tf": 1}, "sain.collections.Vec.remove": {"tf": 1}, "sain.collections.Vec.extend": {"tf": 1}, "sain.collections.Vec.copy": {"tf": 1}, "sain.collections.Vec.clear": {"tf": 1}, "sain.collections.Vec.sort": {"tf": 1}, "sain.collections.Vec.index": {"tf": 1}, "sain.collections.Vec.count": {"tf": 1}, "sain.collections.Bytes": {"tf": 1}, "sain.collections.Bytes.__init__": {"tf": 1}, "sain.collections.Bytes.from_str": {"tf": 1}, "sain.collections.Bytes.from_static": {"tf": 1}, "sain.collections.Bytes.from_bytes": {"tf": 1}, "sain.collections.Bytes.from_raw": {"tf": 1}, "sain.collections.Bytes.try_to_str": {"tf": 1}, "sain.collections.Bytes.to_str": {"tf": 1}, "sain.collections.Bytes.leak": {"tf": 1}, "sain.collections.Bytes.as_bytes": {"tf": 1}, "sain.collections.Bytes.as_ref": {"tf": 1}, "sain.collections.Bytes.as_mut": {"tf": 1}, "sain.collections.Bytes.raw_parts": {"tf": 1}, "sain.collections.Bytes.put": {"tf": 1}, "sain.collections.Bytes.put_raw": {"tf": 1}, "sain.collections.Bytes.put_bytes": {"tf": 1}, "sain.collections.Bytes.put_str": {"tf": 1}, "sain.collections.Bytes.len": {"tf": 1}, "sain.collections.Bytes.size": {"tf": 1}, "sain.collections.Bytes.iter": {"tf": 1}, "sain.collections.Bytes.is_empty": {"tf": 1}, "sain.collections.Bytes.copy": {"tf": 1}, "sain.collections.Bytes.clear": {"tf": 1}, "sain.collections.Bytes.index": {"tf": 1}, "sain.collections.Bytes.count": {"tf": 1}, "sain.collections.Bytes.insert": {"tf": 1}, "sain.collections.Bytes.pop": {"tf": 1}, "sain.collections.buf": {"tf": 1}, "sain.collections.buf.Bytes": {"tf": 1}, "sain.collections.buf.Bytes.__init__": {"tf": 1}, "sain.collections.buf.Bytes.from_str": {"tf": 1}, "sain.collections.buf.Bytes.from_static": {"tf": 1}, "sain.collections.buf.Bytes.from_bytes": {"tf": 1}, "sain.collections.buf.Bytes.from_raw": {"tf": 1}, "sain.collections.buf.Bytes.try_to_str": {"tf": 1}, "sain.collections.buf.Bytes.to_str": {"tf": 1}, "sain.collections.buf.Bytes.leak": {"tf": 1}, "sain.collections.buf.Bytes.as_bytes": {"tf": 1}, "sain.collections.buf.Bytes.as_ref": {"tf": 1}, "sain.collections.buf.Bytes.as_mut": {"tf": 1}, "sain.collections.buf.Bytes.raw_parts": {"tf": 1}, "sain.collections.buf.Bytes.put": {"tf": 1}, "sain.collections.buf.Bytes.put_raw": {"tf": 1}, "sain.collections.buf.Bytes.put_bytes": {"tf": 1}, "sain.collections.buf.Bytes.put_str": {"tf": 1}, "sain.collections.buf.Bytes.len": {"tf": 1}, "sain.collections.buf.Bytes.size": {"tf": 1}, "sain.collections.buf.Bytes.iter": {"tf": 1}, "sain.collections.buf.Bytes.is_empty": {"tf": 1}, "sain.collections.buf.Bytes.copy": {"tf": 1}, "sain.collections.buf.Bytes.clear": {"tf": 1}, "sain.collections.buf.Bytes.index": {"tf": 1}, "sain.collections.buf.Bytes.count": {"tf": 1}, "sain.collections.buf.Bytes.insert": {"tf": 1}, "sain.collections.buf.Bytes.pop": {"tf": 1}, "sain.collections.buf.Rawish": {"tf": 1}, "sain.collections.buf.Buffer": {"tf": 1}, "sain.collections.vec": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1}, "sain.collections.vec.Vec.__init__": {"tf": 1}, "sain.collections.vec.Vec.with_capacity": {"tf": 1}, "sain.collections.vec.Vec.as_ref": {"tf": 1}, "sain.collections.vec.Vec.len": {"tf": 1}, "sain.collections.vec.Vec.capacity": {"tf": 1}, "sain.collections.vec.Vec.iter": {"tf": 1}, "sain.collections.vec.Vec.is_empty": {"tf": 1}, "sain.collections.vec.Vec.split_off": {"tf": 1}, "sain.collections.vec.Vec.split_first": {"tf": 1}, "sain.collections.vec.Vec.first": {"tf": 1}, "sain.collections.vec.Vec.truncate": {"tf": 1}, "sain.collections.vec.Vec.retain": {"tf": 1}, "sain.collections.vec.Vec.swap_remove": {"tf": 1}, "sain.collections.vec.Vec.push": {"tf": 1}, "sain.collections.vec.Vec.push_within_capacity": {"tf": 1}, "sain.collections.vec.Vec.reserve": {"tf": 1}, "sain.collections.vec.Vec.append": {"tf": 1}, "sain.collections.vec.Vec.get": {"tf": 1}, "sain.collections.vec.Vec.insert": {"tf": 1}, "sain.collections.vec.Vec.pop": {"tf": 1}, "sain.collections.vec.Vec.remove": {"tf": 1}, "sain.collections.vec.Vec.extend": {"tf": 1}, "sain.collections.vec.Vec.copy": {"tf": 1}, "sain.collections.vec.Vec.clear": {"tf": 1}, "sain.collections.vec.Vec.sort": {"tf": 1}, "sain.collections.vec.Vec.index": {"tf": 1}, "sain.collections.vec.Vec.count": {"tf": 1}, "sain.collections.vec.from_args": {"tf": 1}}, "df": 116}}}}}}}}}, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.Iterator.copied": {"tf": 1}, "sain.iter.Iterator.copied": {"tf": 1}, "sain.iter.Copied": {"tf": 1}, "sain.iter.Copied.__init__": {"tf": 1}}, "df": 4}}}, "y": {"docs": {"sain.Vec.copy": {"tf": 1}, "sain.collections.Vec.copy": {"tf": 1}, "sain.collections.Bytes.copy": {"tf": 1}, "sain.collections.buf.Bytes.copy": {"tf": 1}, "sain.collections.vec.Vec.copy": {"tf": 1}}, "df": 5}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"sain.Iterator.count": {"tf": 1}, "sain.Vec.count": {"tf": 1}, "sain.collections.Vec.count": {"tf": 1}, "sain.collections.Bytes.count": {"tf": 1}, "sain.collections.buf.Bytes.count": {"tf": 1}, "sain.collections.vec.Vec.count": {"tf": 1}, "sain.iter.Iterator.count": {"tf": 1}, "sain.iter.Empty.count": {"tf": 1}}, "df": 8}}}, "n": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"sain.convert": {"tf": 1}, "sain.convert.From": {"tf": 1}, "sain.convert.From.__init__": {"tf": 1}, "sain.convert.From.from_t": {"tf": 1}, "sain.convert.TryFrom": {"tf": 1}, "sain.convert.TryFrom.__init__": {"tf": 1}, "sain.convert.TryFrom.try_from": {"tf": 1}, "sain.convert.Into": {"tf": 1}, "sain.convert.Into.__init__": {"tf": 1}, "sain.convert.Into.into": {"tf": 1}, "sain.convert.TryInto": {"tf": 1}, "sain.convert.TryInto.__init__": {"tf": 1}, "sain.convert.TryInto.try_into": {"tf": 1}}, "df": 13}}}}}}, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"sain.Vec.with_capacity": {"tf": 1}, "sain.Vec.capacity": {"tf": 1}, "sain.Vec.push_within_capacity": {"tf": 1}, "sain.collections.Vec.with_capacity": {"tf": 1}, "sain.collections.Vec.capacity": {"tf": 1}, "sain.collections.Vec.push_within_capacity": {"tf": 1}, "sain.collections.vec.Vec.with_capacity": {"tf": 1}, "sain.collections.vec.Vec.capacity": {"tf": 1}, "sain.collections.vec.Vec.push_within_capacity": {"tf": 1}}, "df": 9}}}}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {"sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}}, "df": 2}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {"sain.Some.and_ok": {"tf": 1}, "sain.Some.and_then": {"tf": 1}, "sain.Some.is_some_and": {"tf": 1}, "sain.Ok.is_ok_and": {"tf": 1}, "sain.Ok.is_err_and": {"tf": 1}, "sain.Err.is_ok_and": {"tf": 1}, "sain.Err.is_err_and": {"tf": 1}, "sain.option.Some.and_ok": {"tf": 1}, "sain.option.Some.and_then": {"tf": 1}, "sain.option.Some.is_some_and": {"tf": 1}, "sain.result.Ok.is_ok_and": {"tf": 1}, "sain.result.Ok.is_err_and": {"tf": 1}, "sain.result.Err.is_ok_and": {"tf": 1}, "sain.result.Err.is_err_and": {"tf": 1}}, "df": 14}, "y": {"docs": {"sain.Iterator.any": {"tf": 1}, "sain.iter.Iterator.any": {"tf": 1}, "sain.iter.Empty.any": {"tf": 1}}, "df": 3}}, "s": {"docs": {"sain.Some.as_ref": {"tf": 1}, "sain.Some.as_mut": {"tf": 1}, "sain.Vec.as_ref": {"tf": 1}, "sain.collections.Vec.as_ref": {"tf": 1}, "sain.collections.Bytes.as_bytes": {"tf": 1}, "sain.collections.Bytes.as_ref": {"tf": 1}, "sain.collections.Bytes.as_mut": {"tf": 1}, "sain.collections.buf.Bytes.as_bytes": {"tf": 1}, "sain.collections.buf.Bytes.as_ref": {"tf": 1}, "sain.collections.buf.Bytes.as_mut": {"tf": 1}, "sain.collections.vec.Vec.as_ref": {"tf": 1}, "sain.option.Some.as_ref": {"tf": 1}, "sain.option.Some.as_mut": {"tf": 1}}, "df": 13, "y": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {"sain.Iterator.async_for_each": {"tf": 1}, "sain.iter.Iterator.async_for_each": {"tf": 1}}, "df": 2, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sain.sync.AsyncOnce": {"tf": 1}, "sain.sync.AsyncOnce.is_set": {"tf": 1}, "sain.sync.AsyncOnce.get": {"tf": 1}, "sain.sync.AsyncOnce.get_unchecked": {"tf": 1}, "sain.sync.AsyncOnce.set": {"tf": 1}, "sain.sync.AsyncOnce.clear": {"tf": 1}, "sain.sync.AsyncOnce.get_or": {"tf": 1}, "sain.sync.AsyncOnce.get_or_with": {"tf": 1}}, "df": 8}}}}}}}, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"sain.MaybeUninit.assume_init": {"tf": 1}}, "df": 1}}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"sain.Iterator.all": {"tf": 1}, "sain.iter.Iterator.all": {"tf": 1}, "sain.iter.Empty.all": {"tf": 1}}, "df": 3}}, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"sain.Vec.append": {"tf": 1}, "sain.collections.Vec.append": {"tf": 1}, "sain.collections.vec.Vec.append": {"tf": 1}}, "df": 3}}}}}, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {"sain.MaybeUninit.uninit_array": {"tf": 1}}, "df": 1}}}, "g": {"docs": {}, "df": 0, "s": {"docs": {"sain.collections.vec.from_args": {"tf": 1}}, "df": 1}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"sain.Default": {"tf": 1}, "sain.Default.__init__": {"tf": 1}, "sain.Default.default": {"tf": 1.4142135623730951}, "sain.Some.default": {"tf": 1}, "sain.Iterator.default": {"tf": 1}, "sain.default": {"tf": 1}, "sain.default.Default": {"tf": 1.4142135623730951}, "sain.default.Default.__init__": {"tf": 1.4142135623730951}, "sain.default.Default.default": {"tf": 1.7320508075688772}, "sain.iter.Iterator.default": {"tf": 1}, "sain.option.Some.default": {"tf": 1}}, "df": 11}}}}}, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.deprecated": {"tf": 1}, "sain.macros.deprecated": {"tf": 1}}, "df": 2}}}}}}}}, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.Error.description": {"tf": 1}, "sain.error.Error.description": {"tf": 1}}, "df": 2}}}}}}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {"sain.Iterator.drop_while": {"tf": 1}, "sain.iter.Iterator.drop_while": {"tf": 1}}, "df": 2, "w": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sain.iter.DropWhile": {"tf": 1}, "sain.iter.DropWhile.__init__": {"tf": 1}}, "df": 2}}}}}}}}, "o": {"docs": {}, "df": 0, "c": {"docs": {"sain.doc": {"tf": 1}, "sain.macros.doc": {"tf": 1}}, "df": 2}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"sain.Default.__init__": {"tf": 1}, "sain.Some.__init__": {"tf": 1}, "sain.Iter.__init__": {"tf": 1}, "sain.Ok.__init__": {"tf": 1}, "sain.Err.__init__": {"tf": 1}, "sain.Vec.__init__": {"tf": 1}, "sain.Error.__init__": {"tf": 1}, "sain.Box.__init__": {"tf": 1}, "sain.MaybeUninit.__init__": {"tf": 1}, "sain.MaybeUninit.assume_init": {"tf": 1}, "sain.From.__init__": {"tf": 1}, "sain.TryFrom.__init__": {"tf": 1}, "sain.Into.__init__": {"tf": 1}, "sain.TryInto.__init__": {"tf": 1}, "sain.boxed.Box.__init__": {"tf": 1}, "sain.collections.Vec.__init__": {"tf": 1}, "sain.collections.Bytes.__init__": {"tf": 1}, "sain.collections.buf.Bytes.__init__": {"tf": 1}, "sain.collections.vec.Vec.__init__": {"tf": 1}, "sain.convert.From.__init__": {"tf": 1}, "sain.convert.TryFrom.__init__": {"tf": 1}, "sain.convert.Into.__init__": {"tf": 1}, "sain.convert.TryInto.__init__": {"tf": 1}, "sain.default.Default.__init__": {"tf": 1}, "sain.error.Error.__init__": {"tf": 1}, "sain.iter.Iter.__init__": {"tf": 1}, "sain.iter.Cloned.__init__": {"tf": 1}, "sain.iter.Copied.__init__": {"tf": 1}, "sain.iter.Take.__init__": {"tf": 1}, "sain.iter.Filter.__init__": {"tf": 1}, "sain.iter.Map.__init__": {"tf": 1}, "sain.iter.Skip.__init__": {"tf": 1}, "sain.iter.Enumerate.__init__": {"tf": 1}, "sain.iter.TakeWhile.__init__": {"tf": 1}, "sain.iter.DropWhile.__init__": {"tf": 1}, "sain.option.Some.__init__": {"tf": 1}, "sain.result.Ok.__init__": {"tf": 1}, "sain.result.Err.__init__": {"tf": 1}}, "df": 38, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.sync.Lazy.is_initialized": {"tf": 1}, "sain.sync.LazyFuture.is_initialized": {"tf": 1}}, "df": 2}}}}}}}}}, "t": {"docs": {}, "df": 0, "o": {"docs": {"sain.Some.into_inner": {"tf": 1}, "sain.Into": {"tf": 1}, "sain.Into.__init__": {"tf": 1}, "sain.Into.into": {"tf": 1.4142135623730951}, "sain.TryInto.try_into": {"tf": 1}, "sain.convert.Into": {"tf": 1}, "sain.convert.Into.__init__": {"tf": 1}, "sain.convert.Into.into": {"tf": 1.4142135623730951}, "sain.convert.TryInto.try_into": {"tf": 1}, "sain.iter.into_iter": {"tf": 1}, "sain.option.Some.into_inner": {"tf": 1}, "sain.sync.Once.into_inner": {"tf": 1}}, "df": 12}}, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sain.Some.into_inner": {"tf": 1}, "sain.option.Some.into_inner": {"tf": 1}, "sain.sync.Once.into_inner": {"tf": 1}}, "df": 3}}}, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"sain.Ok.inspect": {"tf": 1}, "sain.Ok.inspect_err": {"tf": 1}, "sain.Err.inspect": {"tf": 1}, "sain.Err.inspect_err": {"tf": 1}, "sain.result.Ok.inspect": {"tf": 1}, "sain.result.Ok.inspect_err": {"tf": 1}, "sain.result.Err.inspect": {"tf": 1}, "sain.result.Err.inspect_err": {"tf": 1}}, "df": 8}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"sain.Vec.insert": {"tf": 1}, "sain.collections.Vec.insert": {"tf": 1}, "sain.collections.Bytes.insert": {"tf": 1}, "sain.collections.buf.Bytes.insert": {"tf": 1}, "sain.collections.vec.Vec.insert": {"tf": 1}}, "df": 5}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {"sain.Vec.index": {"tf": 1}, "sain.collections.Vec.index": {"tf": 1}, "sain.collections.Bytes.index": {"tf": 1}, "sain.collections.buf.Bytes.index": {"tf": 1}, "sain.collections.vec.Vec.index": {"tf": 1}}, "df": 5}}}}, "f": {"docs": {"sain.Some.take_if": {"tf": 1}, "sain.option.Some.take_if": {"tf": 1}}, "df": 2}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sain.Some.iter": {"tf": 1}, "sain.Iter": {"tf": 1}, "sain.Iter.__init__": {"tf": 1}, "sain.Iter.clone": {"tf": 1}, "sain.Ok.iter": {"tf": 1}, "sain.Err.iter": {"tf": 1}, "sain.Vec.iter": {"tf": 1}, "sain.collections.Vec.iter": {"tf": 1}, "sain.collections.Bytes.iter": {"tf": 1}, "sain.collections.buf.Bytes.iter": {"tf": 1}, "sain.collections.vec.Vec.iter": {"tf": 1}, "sain.iter": {"tf": 1}, "sain.iter.Iter": {"tf": 1.4142135623730951}, "sain.iter.Iter.__init__": {"tf": 1.4142135623730951}, "sain.iter.Iter.clone": {"tf": 1.4142135623730951}, "sain.iter.Iterator": {"tf": 1}, "sain.iter.Iterator.default": {"tf": 1}, "sain.iter.Iterator.collect": {"tf": 1}, "sain.iter.Iterator.to_vec": {"tf": 1}, "sain.iter.Iterator.sink": {"tf": 1}, "sain.iter.Iterator.raw_parts": {"tf": 1}, "sain.iter.Iterator.next": {"tf": 1}, "sain.iter.Iterator.cloned": {"tf": 1}, "sain.iter.Iterator.copied": {"tf": 1}, "sain.iter.Iterator.map": {"tf": 1}, "sain.iter.Iterator.filter": {"tf": 1}, "sain.iter.Iterator.take": {"tf": 1}, "sain.iter.Iterator.skip": {"tf": 1}, "sain.iter.Iterator.enumerate": {"tf": 1}, "sain.iter.Iterator.take_while": {"tf": 1}, "sain.iter.Iterator.drop_while": {"tf": 1}, "sain.iter.Iterator.all": {"tf": 1}, "sain.iter.Iterator.any": {"tf": 1}, "sain.iter.Iterator.zip": {"tf": 1}, "sain.iter.Iterator.sort": {"tf": 1}, "sain.iter.Iterator.reversed": {"tf": 1}, "sain.iter.Iterator.union": {"tf": 1}, "sain.iter.Iterator.first": {"tf": 1}, "sain.iter.Iterator.last": {"tf": 1}, "sain.iter.Iterator.count": {"tf": 1}, "sain.iter.Iterator.for_each": {"tf": 1}, "sain.iter.Iterator.async_for_each": {"tf": 1}, "sain.iter.Cloned": {"tf": 1}, "sain.iter.Cloned.__init__": {"tf": 1}, "sain.iter.Copied": {"tf": 1}, "sain.iter.Copied.__init__": {"tf": 1}, "sain.iter.Take": {"tf": 1}, "sain.iter.Take.__init__": {"tf": 1}, "sain.iter.Filter": {"tf": 1}, "sain.iter.Filter.__init__": {"tf": 1}, "sain.iter.Map": {"tf": 1}, "sain.iter.Map.__init__": {"tf": 1}, "sain.iter.Skip": {"tf": 1}, "sain.iter.Skip.__init__": {"tf": 1}, "sain.iter.Enumerate": {"tf": 1}, "sain.iter.Enumerate.__init__": {"tf": 1}, "sain.iter.TakeWhile": {"tf": 1}, "sain.iter.TakeWhile.__init__": {"tf": 1}, "sain.iter.DropWhile": {"tf": 1}, "sain.iter.DropWhile.__init__": {"tf": 1}, "sain.iter.Empty": {"tf": 1}, "sain.iter.Empty.next": {"tf": 1}, "sain.iter.Empty.count": {"tf": 1}, "sain.iter.Empty.any": {"tf": 1}, "sain.iter.Empty.all": {"tf": 1}, "sain.iter.into_iter": {"tf": 1.4142135623730951}, "sain.iter.empty": {"tf": 1}, "sain.iter.once": {"tf": 1}, "sain.iter.repeat": {"tf": 1}, "sain.option.Some.iter": {"tf": 1}, "sain.result.Ok.iter": {"tf": 1}, "sain.result.Err.iter": {"tf": 1}}, "df": 72, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"sain.Iterator": {"tf": 1}, "sain.Iterator.default": {"tf": 1}, "sain.Iterator.collect": {"tf": 1}, "sain.Iterator.to_vec": {"tf": 1}, "sain.Iterator.sink": {"tf": 1}, "sain.Iterator.raw_parts": {"tf": 1}, "sain.Iterator.next": {"tf": 1}, "sain.Iterator.cloned": {"tf": 1}, "sain.Iterator.copied": {"tf": 1}, "sain.Iterator.map": {"tf": 1}, "sain.Iterator.filter": {"tf": 1}, "sain.Iterator.take": {"tf": 1}, "sain.Iterator.skip": {"tf": 1}, "sain.Iterator.enumerate": {"tf": 1}, "sain.Iterator.take_while": {"tf": 1}, "sain.Iterator.drop_while": {"tf": 1}, "sain.Iterator.all": {"tf": 1}, "sain.Iterator.any": {"tf": 1}, "sain.Iterator.zip": {"tf": 1}, "sain.Iterator.sort": {"tf": 1}, "sain.Iterator.reversed": {"tf": 1}, "sain.Iterator.union": {"tf": 1}, "sain.Iterator.first": {"tf": 1}, "sain.Iterator.last": {"tf": 1}, "sain.Iterator.count": {"tf": 1}, "sain.Iterator.for_each": {"tf": 1}, "sain.Iterator.async_for_each": {"tf": 1}, "sain.iter.Iterator": {"tf": 1}, "sain.iter.Iterator.default": {"tf": 1}, "sain.iter.Iterator.collect": {"tf": 1}, "sain.iter.Iterator.to_vec": {"tf": 1}, "sain.iter.Iterator.sink": {"tf": 1}, "sain.iter.Iterator.raw_parts": {"tf": 1}, "sain.iter.Iterator.next": {"tf": 1}, "sain.iter.Iterator.cloned": {"tf": 1}, "sain.iter.Iterator.copied": {"tf": 1}, "sain.iter.Iterator.map": {"tf": 1}, "sain.iter.Iterator.filter": {"tf": 1}, "sain.iter.Iterator.take": {"tf": 1}, "sain.iter.Iterator.skip": {"tf": 1}, "sain.iter.Iterator.enumerate": {"tf": 1}, "sain.iter.Iterator.take_while": {"tf": 1}, "sain.iter.Iterator.drop_while": {"tf": 1}, "sain.iter.Iterator.all": {"tf": 1}, "sain.iter.Iterator.any": {"tf": 1}, "sain.iter.Iterator.zip": {"tf": 1}, "sain.iter.Iterator.sort": {"tf": 1}, "sain.iter.Iterator.reversed": {"tf": 1}, "sain.iter.Iterator.union": {"tf": 1}, "sain.iter.Iterator.first": {"tf": 1}, "sain.iter.Iterator.last": {"tf": 1}, "sain.iter.Iterator.count": {"tf": 1}, "sain.iter.Iterator.for_each": {"tf": 1}, "sain.iter.Iterator.async_for_each": {"tf": 1}}, "df": 54}}}}}}}, "s": {"docs": {"sain.Some.is_some": {"tf": 1}, "sain.Some.is_some_and": {"tf": 1}, "sain.Some.is_none": {"tf": 1}, "sain.Ok.is_ok": {"tf": 1}, "sain.Ok.is_ok_and": {"tf": 1}, "sain.Ok.is_err": {"tf": 1}, "sain.Ok.is_err_and": {"tf": 1}, "sain.Err.is_ok": {"tf": 1}, "sain.Err.is_ok_and": {"tf": 1}, "sain.Err.is_err": {"tf": 1}, "sain.Err.is_err_and": {"tf": 1}, "sain.Vec.is_empty": {"tf": 1}, "sain.collections.Vec.is_empty": {"tf": 1}, "sain.collections.Bytes.is_empty": {"tf": 1}, "sain.collections.buf.Bytes.is_empty": {"tf": 1}, "sain.collections.vec.Vec.is_empty": {"tf": 1}, "sain.option.Some.is_some": {"tf": 1}, "sain.option.Some.is_some_and": {"tf": 1}, "sain.option.Some.is_none": {"tf": 1}, "sain.result.Ok.is_ok": {"tf": 1}, "sain.result.Ok.is_ok_and": {"tf": 1}, "sain.result.Ok.is_err": {"tf": 1}, "sain.result.Ok.is_err_and": {"tf": 1}, "sain.result.Err.is_ok": {"tf": 1}, "sain.result.Err.is_ok_and": {"tf": 1}, "sain.result.Err.is_err": {"tf": 1}, "sain.result.Err.is_err_and": {"tf": 1}, "sain.sync.Lazy.is_initialized": {"tf": 1}, "sain.sync.Once.is_set": {"tf": 1}, "sain.sync.LazyFuture.is_initialized": {"tf": 1}, "sain.sync.AsyncOnce.is_set": {"tf": 1}}, "df": 31}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {"sain.Some.unwrap": {"tf": 1}, "sain.Some.unwrap_or": {"tf": 1}, "sain.Some.unwrap_or_else": {"tf": 1}, "sain.Some.unwrap_unchecked": {"tf": 1}, "sain.Ok.unwrap": {"tf": 1}, "sain.Ok.unwrap_or": {"tf": 1}, "sain.Ok.unwrap_or_else": {"tf": 1}, "sain.Ok.unwrap_err": {"tf": 1}, "sain.Err.unwrap": {"tf": 1}, "sain.Err.unwrap_or": {"tf": 1}, "sain.Err.unwrap_or_else": {"tf": 1}, "sain.Err.unwrap_err": {"tf": 1}, "sain.option.Some.unwrap": {"tf": 1}, "sain.option.Some.unwrap_or": {"tf": 1}, "sain.option.Some.unwrap_or_else": {"tf": 1}, "sain.option.Some.unwrap_unchecked": {"tf": 1}, "sain.result.Ok.unwrap": {"tf": 1}, "sain.result.Ok.unwrap_or": {"tf": 1}, "sain.result.Ok.unwrap_or_else": {"tf": 1}, "sain.result.Ok.unwrap_err": {"tf": 1}, "sain.result.Err.unwrap": {"tf": 1}, "sain.result.Err.unwrap_or": {"tf": 1}, "sain.result.Err.unwrap_or_else": {"tf": 1}, "sain.result.Err.unwrap_err": {"tf": 1}}, "df": 24}}}}, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.Some.unwrap_unchecked": {"tf": 1}, "sain.option.Some.unwrap_unchecked": {"tf": 1}, "sain.sync.Lazy.get_unchecked": {"tf": 1}, "sain.sync.Once.get_unchecked": {"tf": 1}, "sain.sync.AsyncOnce.get_unchecked": {"tf": 1}}, "df": 5}}}}}}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.Iterator.union": {"tf": 1}, "sain.iter.Iterator.union": {"tf": 1}}, "df": 2}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.unimplemented": {"tf": 1}, "sain.macros.unimplemented": {"tf": 1}}, "df": 2}}}}}}}}}}, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"sain.MaybeUninit.uninit": {"tf": 1}, "sain.MaybeUninit.uninit_array": {"tf": 1}}, "df": 2}}}}, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "e": {"docs": {"sain.macros.unsafe": {"tf": 1}}, "df": 1}}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {"sain.Some.unwrap_or": {"tf": 1}, "sain.Some.unwrap_or_else": {"tf": 1}, "sain.Some.map_or": {"tf": 1}, "sain.Some.map_or_else": {"tf": 1}, "sain.Ok.unwrap_or": {"tf": 1}, "sain.Ok.unwrap_or_else": {"tf": 1}, "sain.Ok.map_or": {"tf": 1}, "sain.Ok.map_or_else": {"tf": 1}, "sain.Err.unwrap_or": {"tf": 1}, "sain.Err.unwrap_or_else": {"tf": 1}, "sain.Err.map_or": {"tf": 1}, "sain.Err.map_or_else": {"tf": 1}, "sain.option.Some.unwrap_or": {"tf": 1}, "sain.option.Some.unwrap_or_else": {"tf": 1}, "sain.option.Some.map_or": {"tf": 1}, "sain.option.Some.map_or_else": {"tf": 1}, "sain.result.Ok.unwrap_or": {"tf": 1}, "sain.result.Ok.unwrap_or_else": {"tf": 1}, "sain.result.Ok.map_or": {"tf": 1}, "sain.result.Ok.map_or_else": {"tf": 1}, "sain.result.Err.unwrap_or": {"tf": 1}, "sain.result.Err.unwrap_or_else": {"tf": 1}, "sain.result.Err.map_or": {"tf": 1}, "sain.result.Err.map_or_else": {"tf": 1}, "sain.sync.Once.get_or": {"tf": 1}, "sain.sync.Once.get_or_with": {"tf": 1}, "sain.sync.AsyncOnce.get_or": {"tf": 1}, "sain.sync.AsyncOnce.get_or_with": {"tf": 1}}, "df": 28}, "k": {"docs": {"sain.Some.and_ok": {"tf": 1}, "sain.Ok": {"tf": 1}, "sain.Ok.__init__": {"tf": 1}, "sain.Ok.is_ok": {"tf": 1.4142135623730951}, "sain.Ok.is_ok_and": {"tf": 1.4142135623730951}, "sain.Ok.is_err": {"tf": 1}, "sain.Ok.is_err_and": {"tf": 1}, "sain.Ok.expect": {"tf": 1}, "sain.Ok.unwrap": {"tf": 1}, "sain.Ok.unwrap_or": {"tf": 1}, "sain.Ok.unwrap_or_else": {"tf": 1}, "sain.Ok.unwrap_err": {"tf": 1}, "sain.Ok.ok": {"tf": 1.4142135623730951}, "sain.Ok.err": {"tf": 1}, "sain.Ok.inspect": {"tf": 1}, "sain.Ok.inspect_err": {"tf": 1}, "sain.Ok.map": {"tf": 1}, "sain.Ok.map_or": {"tf": 1}, "sain.Ok.map_or_else": {"tf": 1}, "sain.Ok.map_err": {"tf": 1}, "sain.Ok.iter": {"tf": 1}, "sain.Err.is_ok": {"tf": 1}, "sain.Err.is_ok_and": {"tf": 1}, "sain.Err.ok": {"tf": 1}, "sain.option.Some.and_ok": {"tf": 1}, "sain.result.Ok": {"tf": 1}, "sain.result.Ok.__init__": {"tf": 1}, "sain.result.Ok.is_ok": {"tf": 1.4142135623730951}, "sain.result.Ok.is_ok_and": {"tf": 1.4142135623730951}, "sain.result.Ok.is_err": {"tf": 1}, "sain.result.Ok.is_err_and": {"tf": 1}, "sain.result.Ok.expect": {"tf": 1}, "sain.result.Ok.unwrap": {"tf": 1}, "sain.result.Ok.unwrap_or": {"tf": 1}, "sain.result.Ok.unwrap_or_else": {"tf": 1}, "sain.result.Ok.unwrap_err": {"tf": 1}, "sain.result.Ok.ok": {"tf": 1.4142135623730951}, "sain.result.Ok.err": {"tf": 1}, "sain.result.Ok.inspect": {"tf": 1}, "sain.result.Ok.inspect_err": {"tf": 1}, "sain.result.Ok.map": {"tf": 1}, "sain.result.Ok.map_or": {"tf": 1}, "sain.result.Ok.map_or_else": {"tf": 1}, "sain.result.Ok.map_err": {"tf": 1}, "sain.result.Ok.iter": {"tf": 1}, "sain.result.Err.is_ok": {"tf": 1}, "sain.result.Err.is_ok_and": {"tf": 1}, "sain.result.Err.ok": {"tf": 1}}, "df": 48}, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.Option": {"tf": 1}, "sain.option": {"tf": 1}, "sain.option.Some": {"tf": 1}, "sain.option.Some.__init__": {"tf": 1}, "sain.option.Some.default": {"tf": 1}, "sain.option.Some.into_inner": {"tf": 1}, "sain.option.Some.unwrap": {"tf": 1}, "sain.option.Some.unwrap_or": {"tf": 1}, "sain.option.Some.unwrap_or_else": {"tf": 1}, "sain.option.Some.unwrap_unchecked": {"tf": 1}, "sain.option.Some.expect": {"tf": 1}, "sain.option.Some.map": {"tf": 1}, "sain.option.Some.map_or": {"tf": 1}, "sain.option.Some.map_or_else": {"tf": 1}, "sain.option.Some.filter": {"tf": 1}, "sain.option.Some.take": {"tf": 1}, "sain.option.Some.take_if": {"tf": 1}, "sain.option.Some.replace": {"tf": 1}, "sain.option.Some.and_ok": {"tf": 1}, "sain.option.Some.and_then": {"tf": 1}, "sain.option.Some.iter": {"tf": 1}, "sain.option.Some.as_ref": {"tf": 1}, "sain.option.Some.as_mut": {"tf": 1}, "sain.option.Some.is_some": {"tf": 1}, "sain.option.Some.is_some_and": {"tf": 1}, "sain.option.Some.is_none": {"tf": 1}, "sain.option.Option": {"tf": 1.4142135623730951}, "sain.option.NOTHING": {"tf": 1}}, "df": 28}}}}}, "f": {"docs": {}, "df": 0, "f": {"docs": {"sain.Vec.split_off": {"tf": 1}, "sain.collections.Vec.split_off": {"tf": 1}, "sain.collections.vec.Vec.split_off": {"tf": 1}}, "df": 3}}, "n": {"docs": {"sain.Box.on_expire": {"tf": 1}, "sain.boxed.Box.on_expire": {"tf": 1}}, "df": 2, "c": {"docs": {}, "df": 0, "e": {"docs": {"sain.iter.once": {"tf": 1}, "sain.sync.Once": {"tf": 1}, "sain.sync.Once.is_set": {"tf": 1}, "sain.sync.Once.get": {"tf": 1}, "sain.sync.Once.get_unchecked": {"tf": 1}, "sain.sync.Once.set": {"tf": 1}, "sain.sync.Once.clear": {"tf": 1}, "sain.sync.Once.get_or": {"tf": 1}, "sain.sync.Once.get_or_with": {"tf": 1}, "sain.sync.Once.into_inner": {"tf": 1}}, "df": 10}}}}, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"sain.Some.unwrap_or_else": {"tf": 1}, "sain.Some.map_or_else": {"tf": 1}, "sain.Ok.unwrap_or_else": {"tf": 1}, "sain.Ok.map_or_else": {"tf": 1}, "sain.Err.unwrap_or_else": {"tf": 1}, "sain.Err.map_or_else": {"tf": 1}, "sain.option.Some.unwrap_or_else": {"tf": 1}, "sain.option.Some.map_or_else": {"tf": 1}, "sain.result.Ok.unwrap_or_else": {"tf": 1}, "sain.result.Ok.map_or_else": {"tf": 1}, "sain.result.Err.unwrap_or_else": {"tf": 1}, "sain.result.Err.map_or_else": {"tf": 1}}, "df": 12}}}, "x": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"sain.Some.expect": {"tf": 1}, "sain.Ok.expect": {"tf": 1}, "sain.Err.expect": {"tf": 1}, "sain.Err.expect_err": {"tf": 1}, "sain.option.Some.expect": {"tf": 1}, "sain.result.Ok.expect": {"tf": 1}, "sain.result.Err.expect": {"tf": 1}, "sain.result.Err.expect_err": {"tf": 1}}, "df": 8}}}, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"sain.Box.on_expire": {"tf": 1}, "sain.boxed.Box.on_expire": {"tf": 1}}, "df": 2, "d": {"docs": {"sain.Box.has_expired": {"tf": 1}, "sain.boxed.Box.has_expired": {"tf": 1}}, "df": 2}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"sain.Vec.extend": {"tf": 1}, "sain.collections.Vec.extend": {"tf": 1}, "sain.collections.vec.Vec.extend": {"tf": 1}}, "df": 3}}}}}, "n": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"sain.Iterator.enumerate": {"tf": 1}, "sain.iter.Iterator.enumerate": {"tf": 1}, "sain.iter.Enumerate": {"tf": 1}, "sain.iter.Enumerate.__init__": {"tf": 1}}, "df": 4}}}}}}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"sain.Iterator.for_each": {"tf": 1}, "sain.Iterator.async_for_each": {"tf": 1}, "sain.iter.Iterator.for_each": {"tf": 1}, "sain.iter.Iterator.async_for_each": {"tf": 1}}, "df": 4}}}, "r": {"docs": {}, "df": 0, "r": {"docs": {"sain.Ok.is_err": {"tf": 1}, "sain.Ok.is_err_and": {"tf": 1}, "sain.Ok.unwrap_err": {"tf": 1}, "sain.Ok.err": {"tf": 1}, "sain.Ok.inspect_err": {"tf": 1}, "sain.Ok.map_err": {"tf": 1}, "sain.Err": {"tf": 1}, "sain.Err.__init__": {"tf": 1}, "sain.Err.is_ok": {"tf": 1}, "sain.Err.is_ok_and": {"tf": 1}, "sain.Err.is_err": {"tf": 1.4142135623730951}, "sain.Err.is_err_and": {"tf": 1.4142135623730951}, "sain.Err.expect": {"tf": 1}, "sain.Err.expect_err": {"tf": 1.4142135623730951}, "sain.Err.unwrap": {"tf": 1}, "sain.Err.unwrap_or": {"tf": 1}, "sain.Err.unwrap_or_else": {"tf": 1}, "sain.Err.unwrap_err": {"tf": 1.4142135623730951}, "sain.Err.inspect": {"tf": 1}, "sain.Err.inspect_err": {"tf": 1.4142135623730951}, "sain.Err.ok": {"tf": 1}, "sain.Err.err": {"tf": 1.4142135623730951}, "sain.Err.map": {"tf": 1}, "sain.Err.map_or": {"tf": 1}, "sain.Err.map_or_else": {"tf": 1}, "sain.Err.map_err": {"tf": 1.4142135623730951}, "sain.Err.iter": {"tf": 1}, "sain.result.Ok.is_err": {"tf": 1}, "sain.result.Ok.is_err_and": {"tf": 1}, "sain.result.Ok.unwrap_err": {"tf": 1}, "sain.result.Ok.err": {"tf": 1}, "sain.result.Ok.inspect_err": {"tf": 1}, "sain.result.Ok.map_err": {"tf": 1}, "sain.result.Err": {"tf": 1}, "sain.result.Err.__init__": {"tf": 1}, "sain.result.Err.is_ok": {"tf": 1}, "sain.result.Err.is_ok_and": {"tf": 1}, "sain.result.Err.is_err": {"tf": 1.4142135623730951}, "sain.result.Err.is_err_and": {"tf": 1.4142135623730951}, "sain.result.Err.expect": {"tf": 1}, "sain.result.Err.expect_err": {"tf": 1.4142135623730951}, "sain.result.Err.unwrap": {"tf": 1}, "sain.result.Err.unwrap_or": {"tf": 1}, "sain.result.Err.unwrap_or_else": {"tf": 1}, "sain.result.Err.unwrap_err": {"tf": 1.4142135623730951}, "sain.result.Err.inspect": {"tf": 1}, "sain.result.Err.inspect_err": {"tf": 1.4142135623730951}, "sain.result.Err.ok": {"tf": 1}, "sain.result.Err.err": {"tf": 1.4142135623730951}, "sain.result.Err.map": {"tf": 1}, "sain.result.Err.map_or": {"tf": 1}, "sain.result.Err.map_or_else": {"tf": 1}, "sain.result.Err.map_err": {"tf": 1.4142135623730951}, "sain.result.Err.iter": {"tf": 1}}, "df": 54, "o": {"docs": {}, "df": 0, "r": {"docs": {"sain.Error": {"tf": 1}, "sain.Error.__init__": {"tf": 1}, "sain.Error.message": {"tf": 1}, "sain.Error.source": {"tf": 1}, "sain.Error.description": {"tf": 1}, "sain.error": {"tf": 1}, "sain.error.Error": {"tf": 1.4142135623730951}, "sain.error.Error.__init__": {"tf": 1.4142135623730951}, "sain.error.Error.message": {"tf": 1.4142135623730951}, "sain.error.Error.source": {"tf": 1.4142135623730951}, "sain.error.Error.description": {"tf": 1.4142135623730951}}, "df": 11}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"sain.Vec.is_empty": {"tf": 1}, "sain.collections.Vec.is_empty": {"tf": 1}, "sain.collections.Bytes.is_empty": {"tf": 1}, "sain.collections.buf.Bytes.is_empty": {"tf": 1}, "sain.collections.vec.Vec.is_empty": {"tf": 1}, "sain.iter.Empty": {"tf": 1}, "sain.iter.Empty.next": {"tf": 1}, "sain.iter.Empty.count": {"tf": 1}, "sain.iter.Empty.any": {"tf": 1}, "sain.iter.Empty.all": {"tf": 1}, "sain.iter.empty": {"tf": 1}}, "df": 11}}}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {"sain.Some.map": {"tf": 1}, "sain.Some.map_or": {"tf": 1}, "sain.Some.map_or_else": {"tf": 1}, "sain.Iterator.map": {"tf": 1}, "sain.Ok.map": {"tf": 1}, "sain.Ok.map_or": {"tf": 1}, "sain.Ok.map_or_else": {"tf": 1}, "sain.Ok.map_err": {"tf": 1}, "sain.Err.map": {"tf": 1}, "sain.Err.map_or": {"tf": 1}, "sain.Err.map_or_else": {"tf": 1}, "sain.Err.map_err": {"tf": 1}, "sain.iter.Iterator.map": {"tf": 1}, "sain.iter.Map": {"tf": 1}, "sain.iter.Map.__init__": {"tf": 1}, "sain.option.Some.map": {"tf": 1}, "sain.option.Some.map_or": {"tf": 1}, "sain.option.Some.map_or_else": {"tf": 1}, "sain.result.Ok.map": {"tf": 1}, "sain.result.Ok.map_or": {"tf": 1}, "sain.result.Ok.map_or_else": {"tf": 1}, "sain.result.Ok.map_err": {"tf": 1}, "sain.result.Err.map": {"tf": 1}, "sain.result.Err.map_or": {"tf": 1}, "sain.result.Err.map_or_else": {"tf": 1}, "sain.result.Err.map_err": {"tf": 1}}, "df": 26}, "y": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"sain.MaybeUninit": {"tf": 1}, "sain.MaybeUninit.__init__": {"tf": 1}, "sain.MaybeUninit.uninit": {"tf": 1}, "sain.MaybeUninit.uninit_array": {"tf": 1}, "sain.MaybeUninit.assume_init": {"tf": 1}, "sain.MaybeUninit.write": {"tf": 1}}, "df": 6}}}}}}}}}, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {"sain.macros": {"tf": 1}, "sain.macros.deprecated": {"tf": 1}, "sain.macros.unimplemented": {"tf": 1}, "sain.macros.todo": {"tf": 1}, "sain.macros.doc": {"tf": 1}, "sain.macros.unsafe": {"tf": 1}}, "df": 6}}}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {"sain.Some.as_mut": {"tf": 1}, "sain.collections.Bytes.as_mut": {"tf": 1}, "sain.collections.buf.Bytes.as_mut": {"tf": 1}, "sain.option.Some.as_mut": {"tf": 1}}, "df": 4}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"sain.Error.message": {"tf": 1}, "sain.error.Error.message": {"tf": 1}}, "df": 2}}}}}}}, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sain.Some.filter": {"tf": 1}, "sain.Iterator.filter": {"tf": 1}, "sain.iter.Iterator.filter": {"tf": 1}, "sain.iter.Filter": {"tf": 1}, "sain.iter.Filter.__init__": {"tf": 1}, "sain.option.Some.filter": {"tf": 1}}, "df": 6}}}}, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"sain.Iterator.first": {"tf": 1}, "sain.Vec.split_first": {"tf": 1}, "sain.Vec.first": {"tf": 1}, "sain.collections.Vec.split_first": {"tf": 1}, "sain.collections.Vec.first": {"tf": 1}, "sain.collections.vec.Vec.split_first": {"tf": 1}, "sain.collections.vec.Vec.first": {"tf": 1}, "sain.iter.Iterator.first": {"tf": 1}}, "df": 8}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {"sain.Iterator.for_each": {"tf": 1}, "sain.Iterator.async_for_each": {"tf": 1}, "sain.iter.Iterator.for_each": {"tf": 1}, "sain.iter.Iterator.async_for_each": {"tf": 1}}, "df": 4}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"sain.From": {"tf": 1}, "sain.From.__init__": {"tf": 1}, "sain.From.from_t": {"tf": 1.4142135623730951}, "sain.TryFrom.try_from": {"tf": 1}, "sain.collections.Bytes.from_str": {"tf": 1}, "sain.collections.Bytes.from_static": {"tf": 1}, "sain.collections.Bytes.from_bytes": {"tf": 1}, "sain.collections.Bytes.from_raw": {"tf": 1}, "sain.collections.buf.Bytes.from_str": {"tf": 1}, "sain.collections.buf.Bytes.from_static": {"tf": 1}, "sain.collections.buf.Bytes.from_bytes": {"tf": 1}, "sain.collections.buf.Bytes.from_raw": {"tf": 1}, "sain.collections.vec.from_args": {"tf": 1}, "sain.convert.From": {"tf": 1}, "sain.convert.From.__init__": {"tf": 1}, "sain.convert.From.from_t": {"tf": 1.4142135623730951}, "sain.convert.TryFrom.try_from": {"tf": 1}}, "df": 17}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"sain.futures": {"tf": 1}, "sain.futures.spawn": {"tf": 1}, "sain.futures.loop": {"tf": 1}}, "df": 3}}}}}}}, "t": {"docs": {"sain.From.from_t": {"tf": 1}, "sain.convert.From.from_t": {"tf": 1}}, "df": 2, "a": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {"sain.Some.take": {"tf": 1}, "sain.Some.take_if": {"tf": 1}, "sain.Iterator.take": {"tf": 1}, "sain.Iterator.take_while": {"tf": 1}, "sain.iter.Iterator.take": {"tf": 1}, "sain.iter.Iterator.take_while": {"tf": 1}, "sain.iter.Take": {"tf": 1}, "sain.iter.Take.__init__": {"tf": 1}, "sain.option.Some.take": {"tf": 1}, "sain.option.Some.take_if": {"tf": 1}}, "df": 10, "w": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sain.iter.TakeWhile": {"tf": 1}, "sain.iter.TakeWhile.__init__": {"tf": 1}}, "df": 2}}}}}}}}, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"sain.Some.and_then": {"tf": 1}, "sain.option.Some.and_then": {"tf": 1}}, "df": 2}}}, "o": {"docs": {"sain.Iterator.to_vec": {"tf": 1}, "sain.collections.Bytes.try_to_str": {"tf": 1}, "sain.collections.Bytes.to_str": {"tf": 1}, "sain.collections.buf.Bytes.try_to_str": {"tf": 1}, "sain.collections.buf.Bytes.to_str": {"tf": 1}, "sain.iter.Iterator.to_vec": {"tf": 1}}, "df": 6, "d": {"docs": {}, "df": 0, "o": {"docs": {"sain.todo": {"tf": 1}, "sain.macros.todo": {"tf": 1}}, "df": 2}}}, "r": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"sain.Vec.truncate": {"tf": 1}, "sain.collections.Vec.truncate": {"tf": 1}, "sain.collections.vec.Vec.truncate": {"tf": 1}}, "df": 3}}}}}}, "y": {"docs": {"sain.TryFrom.try_from": {"tf": 1}, "sain.TryInto.try_into": {"tf": 1}, "sain.collections.Bytes.try_to_str": {"tf": 1}, "sain.collections.buf.Bytes.try_to_str": {"tf": 1}, "sain.convert.TryFrom.try_from": {"tf": 1}, "sain.convert.TryInto.try_into": {"tf": 1}}, "df": 6, "f": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"sain.TryFrom": {"tf": 1}, "sain.TryFrom.__init__": {"tf": 1}, "sain.TryFrom.try_from": {"tf": 1}, "sain.convert.TryFrom": {"tf": 1}, "sain.convert.TryFrom.__init__": {"tf": 1}, "sain.convert.TryFrom.try_from": {"tf": 1}}, "df": 6}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {"sain.TryInto": {"tf": 1}, "sain.TryInto.__init__": {"tf": 1}, "sain.TryInto.try_into": {"tf": 1}, "sain.convert.TryInto": {"tf": 1}, "sain.convert.TryInto.__init__": {"tf": 1}, "sain.convert.TryInto.try_into": {"tf": 1}}, "df": 6}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sain.Some.replace": {"tf": 1}, "sain.option.Some.replace": {"tf": 1}}, "df": 2}}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"sain.iter.repeat": {"tf": 1}}, "df": 1}}}}, "f": {"docs": {"sain.Some.as_ref": {"tf": 1}, "sain.Vec.as_ref": {"tf": 1}, "sain.collections.Vec.as_ref": {"tf": 1}, "sain.collections.Bytes.as_ref": {"tf": 1}, "sain.collections.buf.Bytes.as_ref": {"tf": 1}, "sain.collections.vec.Vec.as_ref": {"tf": 1}, "sain.option.Some.as_ref": {"tf": 1}}, "df": 7}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.Iterator.reversed": {"tf": 1}, "sain.iter.Iterator.reversed": {"tf": 1}}, "df": 2}}}}}}, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"sain.Result": {"tf": 1}, "sain.result": {"tf": 1}, "sain.result.Ok": {"tf": 1}, "sain.result.Ok.__init__": {"tf": 1}, "sain.result.Ok.is_ok": {"tf": 1}, "sain.result.Ok.is_ok_and": {"tf": 1}, "sain.result.Ok.is_err": {"tf": 1}, "sain.result.Ok.is_err_and": {"tf": 1}, "sain.result.Ok.expect": {"tf": 1}, "sain.result.Ok.unwrap": {"tf": 1}, "sain.result.Ok.unwrap_or": {"tf": 1}, "sain.result.Ok.unwrap_or_else": {"tf": 1}, "sain.result.Ok.unwrap_err": {"tf": 1}, "sain.result.Ok.ok": {"tf": 1}, "sain.result.Ok.err": {"tf": 1}, "sain.result.Ok.inspect": {"tf": 1}, "sain.result.Ok.inspect_err": {"tf": 1}, "sain.result.Ok.map": {"tf": 1}, "sain.result.Ok.map_or": {"tf": 1}, "sain.result.Ok.map_or_else": {"tf": 1}, "sain.result.Ok.map_err": {"tf": 1}, "sain.result.Ok.iter": {"tf": 1}, "sain.result.Err": {"tf": 1}, "sain.result.Err.__init__": {"tf": 1}, "sain.result.Err.is_ok": {"tf": 1}, "sain.result.Err.is_ok_and": {"tf": 1}, "sain.result.Err.is_err": {"tf": 1}, "sain.result.Err.is_err_and": {"tf": 1}, "sain.result.Err.expect": {"tf": 1}, "sain.result.Err.expect_err": {"tf": 1}, "sain.result.Err.unwrap": {"tf": 1}, "sain.result.Err.unwrap_or": {"tf": 1}, "sain.result.Err.unwrap_or_else": {"tf": 1}, "sain.result.Err.unwrap_err": {"tf": 1}, "sain.result.Err.inspect": {"tf": 1}, "sain.result.Err.inspect_err": {"tf": 1}, "sain.result.Err.ok": {"tf": 1}, "sain.result.Err.err": {"tf": 1}, "sain.result.Err.map": {"tf": 1}, "sain.result.Err.map_or": {"tf": 1}, "sain.result.Err.map_or_else": {"tf": 1}, "sain.result.Err.map_err": {"tf": 1}, "sain.result.Err.iter": {"tf": 1}, "sain.result.Result": {"tf": 1.4142135623730951}}, "df": 44}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"sain.Vec.reserve": {"tf": 1}, "sain.collections.Vec.reserve": {"tf": 1}, "sain.collections.vec.Vec.reserve": {"tf": 1}}, "df": 3}}}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"sain.Vec.retain": {"tf": 1}, "sain.collections.Vec.retain": {"tf": 1}, "sain.collections.vec.Vec.retain": {"tf": 1}}, "df": 3}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"sain.Vec.swap_remove": {"tf": 1}, "sain.Vec.remove": {"tf": 1}, "sain.collections.Vec.swap_remove": {"tf": 1}, "sain.collections.Vec.remove": {"tf": 1}, "sain.collections.vec.Vec.swap_remove": {"tf": 1}, "sain.collections.vec.Vec.remove": {"tf": 1}}, "df": 6}}}, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.Box.remaining": {"tf": 1}, "sain.boxed.Box.remaining": {"tf": 1}}, "df": 2}}}}}}}}, "a": {"docs": {}, "df": 0, "w": {"docs": {"sain.Iterator.raw_parts": {"tf": 1}, "sain.collections.Bytes.from_raw": {"tf": 1}, "sain.collections.Bytes.raw_parts": {"tf": 1}, "sain.collections.Bytes.put_raw": {"tf": 1}, "sain.collections.buf.Bytes.from_raw": {"tf": 1}, "sain.collections.buf.Bytes.raw_parts": {"tf": 1}, "sain.collections.buf.Bytes.put_raw": {"tf": 1}, "sain.iter.Iterator.raw_parts": {"tf": 1}}, "df": 8, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "h": {"docs": {"sain.collections.buf.Rawish": {"tf": 1}}, "df": 1}}}}}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"sain.Some.is_none": {"tf": 1}, "sain.option.Some.is_none": {"tf": 1}}, "df": 2}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.NOTHING": {"tf": 1}, "sain.option.NOTHING": {"tf": 1}}, "df": 2}}}}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "t": {"docs": {"sain.Iterator.next": {"tf": 1}, "sain.iter.Iterator.next": {"tf": 1}, "sain.iter.Empty.next": {"tf": 1}}, "df": 3}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {"sain.Iterator.to_vec": {"tf": 1}, "sain.Vec": {"tf": 1}, "sain.Vec.__init__": {"tf": 1}, "sain.Vec.with_capacity": {"tf": 1}, "sain.Vec.as_ref": {"tf": 1}, "sain.Vec.len": {"tf": 1}, "sain.Vec.capacity": {"tf": 1}, "sain.Vec.iter": {"tf": 1}, "sain.Vec.is_empty": {"tf": 1}, "sain.Vec.split_off": {"tf": 1}, "sain.Vec.split_first": {"tf": 1}, "sain.Vec.first": {"tf": 1}, "sain.Vec.truncate": {"tf": 1}, "sain.Vec.retain": {"tf": 1}, "sain.Vec.swap_remove": {"tf": 1}, "sain.Vec.push": {"tf": 1}, "sain.Vec.push_within_capacity": {"tf": 1}, "sain.Vec.reserve": {"tf": 1}, "sain.Vec.append": {"tf": 1}, "sain.Vec.get": {"tf": 1}, "sain.Vec.insert": {"tf": 1}, "sain.Vec.pop": {"tf": 1}, "sain.Vec.remove": {"tf": 1}, "sain.Vec.extend": {"tf": 1}, "sain.Vec.copy": {"tf": 1}, "sain.Vec.clear": {"tf": 1}, "sain.Vec.sort": {"tf": 1}, "sain.Vec.index": {"tf": 1}, "sain.Vec.count": {"tf": 1}, "sain.collections.Vec": {"tf": 1}, "sain.collections.Vec.__init__": {"tf": 1}, "sain.collections.Vec.with_capacity": {"tf": 1}, "sain.collections.Vec.as_ref": {"tf": 1}, "sain.collections.Vec.len": {"tf": 1}, "sain.collections.Vec.capacity": {"tf": 1}, "sain.collections.Vec.iter": {"tf": 1}, "sain.collections.Vec.is_empty": {"tf": 1}, "sain.collections.Vec.split_off": {"tf": 1}, "sain.collections.Vec.split_first": {"tf": 1}, "sain.collections.Vec.first": {"tf": 1}, "sain.collections.Vec.truncate": {"tf": 1}, "sain.collections.Vec.retain": {"tf": 1}, "sain.collections.Vec.swap_remove": {"tf": 1}, "sain.collections.Vec.push": {"tf": 1}, "sain.collections.Vec.push_within_capacity": {"tf": 1}, "sain.collections.Vec.reserve": {"tf": 1}, "sain.collections.Vec.append": {"tf": 1}, "sain.collections.Vec.get": {"tf": 1}, "sain.collections.Vec.insert": {"tf": 1}, "sain.collections.Vec.pop": {"tf": 1}, "sain.collections.Vec.remove": {"tf": 1}, "sain.collections.Vec.extend": {"tf": 1}, "sain.collections.Vec.copy": {"tf": 1}, "sain.collections.Vec.clear": {"tf": 1}, "sain.collections.Vec.sort": {"tf": 1}, "sain.collections.Vec.index": {"tf": 1}, "sain.collections.Vec.count": {"tf": 1}, "sain.collections.vec": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.__init__": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.with_capacity": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.as_ref": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.len": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.capacity": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.iter": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.is_empty": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.split_off": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.split_first": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.first": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.truncate": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.retain": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.swap_remove": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.push": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.push_within_capacity": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.reserve": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.append": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.get": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.insert": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.pop": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.remove": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.extend": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.copy": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.clear": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.sort": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.index": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.count": {"tf": 1.4142135623730951}, "sain.collections.vec.from_args": {"tf": 1}, "sain.iter.Iterator.to_vec": {"tf": 1}}, "df": 88}}}, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"sain.Iterator.raw_parts": {"tf": 1}, "sain.collections.Bytes.raw_parts": {"tf": 1}, "sain.collections.buf.Bytes.raw_parts": {"tf": 1}, "sain.iter.Iterator.raw_parts": {"tf": 1}}, "df": 4}}}}, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "h": {"docs": {"sain.Vec.push": {"tf": 1}, "sain.Vec.push_within_capacity": {"tf": 1}, "sain.collections.Vec.push": {"tf": 1}, "sain.collections.Vec.push_within_capacity": {"tf": 1}, "sain.collections.vec.Vec.push": {"tf": 1}, "sain.collections.vec.Vec.push_within_capacity": {"tf": 1}}, "df": 6}}, "t": {"docs": {"sain.collections.Bytes.put": {"tf": 1}, "sain.collections.Bytes.put_raw": {"tf": 1}, "sain.collections.Bytes.put_bytes": {"tf": 1}, "sain.collections.Bytes.put_str": {"tf": 1}, "sain.collections.buf.Bytes.put": {"tf": 1}, "sain.collections.buf.Bytes.put_raw": {"tf": 1}, "sain.collections.buf.Bytes.put_bytes": {"tf": 1}, "sain.collections.buf.Bytes.put_str": {"tf": 1}}, "df": 8}}, "o": {"docs": {}, "df": 0, "p": {"docs": {"sain.Vec.pop": {"tf": 1}, "sain.collections.Vec.pop": {"tf": 1}, "sain.collections.Bytes.pop": {"tf": 1}, "sain.collections.buf.Bytes.pop": {"tf": 1}, "sain.collections.vec.Vec.pop": {"tf": 1}}, "df": 5}}}, "w": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sain.Iterator.take_while": {"tf": 1}, "sain.Iterator.drop_while": {"tf": 1}, "sain.iter.Iterator.take_while": {"tf": 1}, "sain.iter.Iterator.drop_while": {"tf": 1}}, "df": 4}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"sain.Vec.with_capacity": {"tf": 1}, "sain.collections.Vec.with_capacity": {"tf": 1}, "sain.collections.vec.Vec.with_capacity": {"tf": 1}, "sain.sync.Once.get_or_with": {"tf": 1}, "sain.sync.AsyncOnce.get_or_with": {"tf": 1}}, "df": 5, "i": {"docs": {}, "df": 0, "n": {"docs": {"sain.Vec.push_within_capacity": {"tf": 1}, "sain.collections.Vec.push_within_capacity": {"tf": 1}, "sain.collections.vec.Vec.push_within_capacity": {"tf": 1}}, "df": 3}}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"sain.MaybeUninit.write": {"tf": 1}}, "df": 1}}}}}, "z": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {"sain.Iterator.zip": {"tf": 1}, "sain.iter.Iterator.zip": {"tf": 1}}, "df": 2}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"sain.Iterator.last": {"tf": 1}, "sain.iter.Iterator.last": {"tf": 1}}, "df": 2}}, "z": {"docs": {}, "df": 0, "y": {"docs": {"sain.sync.Lazy": {"tf": 1}, "sain.sync.Lazy.is_initialized": {"tf": 1}, "sain.sync.Lazy.get": {"tf": 1}, "sain.sync.Lazy.get_unchecked": {"tf": 1}, "sain.sync.Lazy.set": {"tf": 1}}, "df": 5, "f": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"sain.sync.LazyFuture": {"tf": 1}, "sain.sync.LazyFuture.is_initialized": {"tf": 1}, "sain.sync.LazyFuture.get": {"tf": 1}, "sain.sync.LazyFuture.set": {"tf": 1}}, "df": 4}}}}}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {"sain.Vec.len": {"tf": 1}, "sain.collections.Vec.len": {"tf": 1}, "sain.collections.Bytes.len": {"tf": 1}, "sain.collections.buf.Bytes.len": {"tf": 1}, "sain.collections.vec.Vec.len": {"tf": 1}}, "df": 5}, "a": {"docs": {}, "df": 0, "k": {"docs": {"sain.collections.Bytes.leak": {"tf": 1}, "sain.collections.buf.Bytes.leak": {"tf": 1}}, "df": 2}}}, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {"sain.futures.loop": {"tf": 1}}, "df": 1}}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"sain.Vec.get": {"tf": 1}, "sain.Box.get": {"tf": 1}, "sain.boxed.Box.get": {"tf": 1}, "sain.collections.Vec.get": {"tf": 1}, "sain.collections.vec.Vec.get": {"tf": 1}, "sain.sync.Lazy.get": {"tf": 1}, "sain.sync.Lazy.get_unchecked": {"tf": 1}, "sain.sync.Once.get": {"tf": 1}, "sain.sync.Once.get_unchecked": {"tf": 1}, "sain.sync.Once.get_or": {"tf": 1}, "sain.sync.Once.get_or_with": {"tf": 1}, "sain.sync.LazyFuture.get": {"tf": 1}, "sain.sync.AsyncOnce.get": {"tf": 1}, "sain.sync.AsyncOnce.get_unchecked": {"tf": 1}, "sain.sync.AsyncOnce.get_or": {"tf": 1}, "sain.sync.AsyncOnce.get_or_with": {"tf": 1}}, "df": 16}}}, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "x": {"docs": {"sain.Box": {"tf": 1}, "sain.Box.__init__": {"tf": 1}, "sain.Box.has_expired": {"tf": 1}, "sain.Box.on_expire": {"tf": 1}, "sain.Box.remaining": {"tf": 1}, "sain.Box.get": {"tf": 1}, "sain.boxed.Box": {"tf": 1}, "sain.boxed.Box.__init__": {"tf": 1}, "sain.boxed.Box.has_expired": {"tf": 1}, "sain.boxed.Box.on_expire": {"tf": 1}, "sain.boxed.Box.remaining": {"tf": 1}, "sain.boxed.Box.get": {"tf": 1}}, "df": 12, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.boxed": {"tf": 1}, "sain.boxed.Box": {"tf": 1}, "sain.boxed.Box.__init__": {"tf": 1}, "sain.boxed.Box.has_expired": {"tf": 1}, "sain.boxed.Box.on_expire": {"tf": 1}, "sain.boxed.Box.remaining": {"tf": 1}, "sain.boxed.Box.get": {"tf": 1}}, "df": 7}}}}, "y": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"sain.collections.Bytes": {"tf": 1}, "sain.collections.Bytes.__init__": {"tf": 1}, "sain.collections.Bytes.from_str": {"tf": 1}, "sain.collections.Bytes.from_static": {"tf": 1}, "sain.collections.Bytes.from_bytes": {"tf": 1.4142135623730951}, "sain.collections.Bytes.from_raw": {"tf": 1}, "sain.collections.Bytes.try_to_str": {"tf": 1}, "sain.collections.Bytes.to_str": {"tf": 1}, "sain.collections.Bytes.leak": {"tf": 1}, "sain.collections.Bytes.as_bytes": {"tf": 1.4142135623730951}, "sain.collections.Bytes.as_ref": {"tf": 1}, "sain.collections.Bytes.as_mut": {"tf": 1}, "sain.collections.Bytes.raw_parts": {"tf": 1}, "sain.collections.Bytes.put": {"tf": 1}, "sain.collections.Bytes.put_raw": {"tf": 1}, "sain.collections.Bytes.put_bytes": {"tf": 1.4142135623730951}, "sain.collections.Bytes.put_str": {"tf": 1}, "sain.collections.Bytes.len": {"tf": 1}, "sain.collections.Bytes.size": {"tf": 1}, "sain.collections.Bytes.iter": {"tf": 1}, "sain.collections.Bytes.is_empty": {"tf": 1}, "sain.collections.Bytes.copy": {"tf": 1}, "sain.collections.Bytes.clear": {"tf": 1}, "sain.collections.Bytes.index": {"tf": 1}, "sain.collections.Bytes.count": {"tf": 1}, "sain.collections.Bytes.insert": {"tf": 1}, "sain.collections.Bytes.pop": {"tf": 1}, "sain.collections.buf.Bytes": {"tf": 1}, "sain.collections.buf.Bytes.__init__": {"tf": 1}, "sain.collections.buf.Bytes.from_str": {"tf": 1}, "sain.collections.buf.Bytes.from_static": {"tf": 1}, "sain.collections.buf.Bytes.from_bytes": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.from_raw": {"tf": 1}, "sain.collections.buf.Bytes.try_to_str": {"tf": 1}, "sain.collections.buf.Bytes.to_str": {"tf": 1}, "sain.collections.buf.Bytes.leak": {"tf": 1}, "sain.collections.buf.Bytes.as_bytes": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.as_ref": {"tf": 1}, "sain.collections.buf.Bytes.as_mut": {"tf": 1}, "sain.collections.buf.Bytes.raw_parts": {"tf": 1}, "sain.collections.buf.Bytes.put": {"tf": 1}, "sain.collections.buf.Bytes.put_raw": {"tf": 1}, "sain.collections.buf.Bytes.put_bytes": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.put_str": {"tf": 1}, "sain.collections.buf.Bytes.len": {"tf": 1}, "sain.collections.buf.Bytes.size": {"tf": 1}, "sain.collections.buf.Bytes.iter": {"tf": 1}, "sain.collections.buf.Bytes.is_empty": {"tf": 1}, "sain.collections.buf.Bytes.copy": {"tf": 1}, "sain.collections.buf.Bytes.clear": {"tf": 1}, "sain.collections.buf.Bytes.index": {"tf": 1}, "sain.collections.buf.Bytes.count": {"tf": 1}, "sain.collections.buf.Bytes.insert": {"tf": 1}, "sain.collections.buf.Bytes.pop": {"tf": 1}}, "df": 54}}}}, "u": {"docs": {}, "df": 0, "f": {"docs": {"sain.collections.buf": {"tf": 1}, "sain.collections.buf.Bytes": {"tf": 1}, "sain.collections.buf.Bytes.__init__": {"tf": 1}, "sain.collections.buf.Bytes.from_str": {"tf": 1}, "sain.collections.buf.Bytes.from_static": {"tf": 1}, "sain.collections.buf.Bytes.from_bytes": {"tf": 1}, "sain.collections.buf.Bytes.from_raw": {"tf": 1}, "sain.collections.buf.Bytes.try_to_str": {"tf": 1}, "sain.collections.buf.Bytes.to_str": {"tf": 1}, "sain.collections.buf.Bytes.leak": {"tf": 1}, "sain.collections.buf.Bytes.as_bytes": {"tf": 1}, "sain.collections.buf.Bytes.as_ref": {"tf": 1}, "sain.collections.buf.Bytes.as_mut": {"tf": 1}, "sain.collections.buf.Bytes.raw_parts": {"tf": 1}, "sain.collections.buf.Bytes.put": {"tf": 1}, "sain.collections.buf.Bytes.put_raw": {"tf": 1}, "sain.collections.buf.Bytes.put_bytes": {"tf": 1}, "sain.collections.buf.Bytes.put_str": {"tf": 1}, "sain.collections.buf.Bytes.len": {"tf": 1}, "sain.collections.buf.Bytes.size": {"tf": 1}, "sain.collections.buf.Bytes.iter": {"tf": 1}, "sain.collections.buf.Bytes.is_empty": {"tf": 1}, "sain.collections.buf.Bytes.copy": {"tf": 1}, "sain.collections.buf.Bytes.clear": {"tf": 1}, "sain.collections.buf.Bytes.index": {"tf": 1}, "sain.collections.buf.Bytes.count": {"tf": 1}, "sain.collections.buf.Bytes.insert": {"tf": 1}, "sain.collections.buf.Bytes.pop": {"tf": 1}, "sain.collections.buf.Rawish": {"tf": 1}, "sain.collections.buf.Buffer": {"tf": 1}}, "df": 30, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sain.collections.buf.Buffer": {"tf": 1}}, "df": 1}}}}}}, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {"sain.Box.has_expired": {"tf": 1}, "sain.boxed.Box.has_expired": {"tf": 1}}, "df": 2}}}}}, "annotation": {"root": {"docs": {"sain.Box.has_expired": {"tf": 1}, "sain.boxed.Box.has_expired": {"tf": 1}, "sain.collections.buf.Rawish": {"tf": 1}, "sain.collections.buf.Buffer": {"tf": 1}, "sain.option.NOTHING": {"tf": 1}, "sain.result.Result": {"tf": 1}, "sain.sync.Lazy.is_initialized": {"tf": 1}, "sain.sync.Once.is_set": {"tf": 1}, "sain.sync.LazyFuture.is_initialized": {"tf": 1}, "sain.sync.AsyncOnce.is_set": {"tf": 1}}, "df": 10, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"sain.Box.has_expired": {"tf": 1}, "sain.boxed.Box.has_expired": {"tf": 1}, "sain.sync.Lazy.is_initialized": {"tf": 1}, "sain.sync.Once.is_set": {"tf": 1}, "sain.sync.LazyFuture.is_initialized": {"tf": 1}, "sain.sync.AsyncOnce.is_set": {"tf": 1}}, "df": 6}}}}, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {"sain.collections.buf.Rawish": {"tf": 1}, "sain.collections.buf.Buffer": {"tf": 1}, "sain.result.Result": {"tf": 1}}, "df": 3}}}}}}}}}, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"sain.option.NOTHING": {"tf": 1}}, "df": 1}}}}}}}}}}}}}, "default_value": {"root": {"docs": {"sain.collections.buf.Rawish": {"tf": 2}, "sain.collections.buf.Buffer": {"tf": 1.4142135623730951}}, "df": 2, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"sain.Option": {"tf": 1}, "sain.Result": {"tf": 1}, "sain.option.Option": {"tf": 1}, "sain.result.Result": {"tf": 1}}, "df": 4}}}, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "~": {"docs": {}, "df": 0, "t": {"docs": {"sain.Option": {"tf": 1}, "sain.option.Option": {"tf": 1}}, "df": 2}}}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {"sain.collections.buf.Rawish": {"tf": 1}}, "df": 1}}}}}}}}, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.Option": {"tf": 1}, "sain.option.Option": {"tf": 1}}, "df": 2}}}}}, "k": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "~": {"docs": {}, "df": 0, "t": {"docs": {"sain.Result": {"tf": 1}, "sain.result.Result": {"tf": 1}}, "df": 2}}}}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"sain.NOTHING": {"tf": 1}, "sain.option.NOTHING": {"tf": 1}}, "df": 2}}}}, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.Result": {"tf": 1}}, "df": 1}}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"sain.Result": {"tf": 1}, "sain.result.Result": {"tf": 1}}, "df": 2}}}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"sain.Result": {"tf": 1.4142135623730951}, "sain.result.Result": {"tf": 1.4142135623730951}}, "df": 2}}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "~": {"docs": {}, "df": 0, "e": {"docs": {"sain.Result": {"tf": 1}, "sain.result.Result": {"tf": 1}}, "df": 2}}}}}}, "i": {"docs": {}, "df": 0, "o": {"docs": {"sain.collections.buf.Rawish": {"tf": 1.7320508075688772}}, "df": 1}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"sain.collections.buf.Buffer": {"tf": 1}}, "df": 1}}}}}}}}}}}}, "b": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"sain.collections.buf.Buffer": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "o": {"docs": {"sain.collections.buf.Rawish": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {"sain.collections.buf.Buffer": {"tf": 1}}, "df": 1}}}}}}}}, "u": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sain.collections.buf.Rawish": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "w": {"docs": {"sain.collections.buf.Rawish": {"tf": 1}}, "df": 1}}}}}}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"sain.collections.buf.Buffer": {"tf": 1}}, "df": 1}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "c": {"docs": {"sain.collections.buf.Buffer": {"tf": 1}}, "df": 1}}}}}, "signature": {"root": {"0": {"docs": {"sain.Iterator.enumerate": {"tf": 1}, "sain.Vec.index": {"tf": 1}, "sain.collections.Vec.index": {"tf": 1}, "sain.collections.Bytes.index": {"tf": 1}, "sain.collections.buf.Bytes.index": {"tf": 1}, "sain.collections.vec.Vec.index": {"tf": 1}, "sain.iter.Iterator.enumerate": {"tf": 1}, "sain.iter.Empty.count": {"tf": 1}}, "df": 8}, "1": {"docs": {"sain.Vec.pop": {"tf": 1}, "sain.collections.Vec.pop": {"tf": 1}, "sain.collections.Bytes.pop": {"tf": 1}, "sain.collections.buf.Bytes.pop": {"tf": 1}, "sain.collections.vec.Vec.pop": {"tf": 1}}, "df": 5}, "3": {"9": {"docs": {"sain.cfg": {"tf": 5.477225575051661}, "sain.cfg_attr": {"tf": 5.477225575051661}, "sain.Iterator.next": {"tf": 1.4142135623730951}, "sain.Iterator.sort": {"tf": 1.4142135623730951}, "sain.Iterator.first": {"tf": 1.4142135623730951}, "sain.Iterator.last": {"tf": 1.4142135623730951}, "sain.deprecated": {"tf": 1.4142135623730951}, "sain.unimplemented": {"tf": 1.4142135623730951}, "sain.doc": {"tf": 2}, "sain.Vec.with_capacity": {"tf": 1.4142135623730951}, "sain.Vec.push_within_capacity": {"tf": 1.4142135623730951}, "sain.Vec.sort": {"tf": 1.4142135623730951}, "sain.Error.__init__": {"tf": 1.4142135623730951}, "sain.cfg.cfg_attr": {"tf": 1.4142135623730951}, "sain.collections.Vec.with_capacity": {"tf": 1.4142135623730951}, "sain.collections.Vec.push_within_capacity": {"tf": 1.4142135623730951}, "sain.collections.Vec.sort": {"tf": 1.4142135623730951}, "sain.collections.Bytes.raw_parts": {"tf": 2}, "sain.collections.buf.Bytes.raw_parts": {"tf": 2}, "sain.collections.vec.Vec.with_capacity": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.push_within_capacity": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.sort": {"tf": 1.4142135623730951}, "sain.error.Error.__init__": {"tf": 1.4142135623730951}, "sain.iter.Iterator.next": {"tf": 1.4142135623730951}, "sain.iter.Iterator.sort": {"tf": 1.4142135623730951}, "sain.iter.Iterator.first": {"tf": 1.4142135623730951}, "sain.iter.Iterator.last": {"tf": 1.4142135623730951}, "sain.iter.Empty.next": {"tf": 1.4142135623730951}, "sain.macros.deprecated": {"tf": 1.4142135623730951}, "sain.macros.unimplemented": {"tf": 1.4142135623730951}, "sain.macros.doc": {"tf": 2}, "sain.macros.unsafe": {"tf": 2}, "sain.option.Some.__init__": {"tf": 1.4142135623730951}, "sain.option.Some.into_inner": {"tf": 1.4142135623730951}, "sain.option.Some.unwrap": {"tf": 1.4142135623730951}, "sain.option.Some.unwrap_or": {"tf": 2}, "sain.option.Some.unwrap_or_else": {"tf": 2}, "sain.option.Some.unwrap_unchecked": {"tf": 1.4142135623730951}, "sain.option.Some.expect": {"tf": 1.4142135623730951}, "sain.option.Some.map": {"tf": 2}, "sain.option.Some.map_or": {"tf": 2.449489742783178}, "sain.option.Some.map_or_else": {"tf": 2.449489742783178}, "sain.option.Some.filter": {"tf": 2}, "sain.option.Some.take": {"tf": 1.4142135623730951}, "sain.option.Some.take_if": {"tf": 2}, "sain.option.Some.replace": {"tf": 2}, "sain.option.Some.and_ok": {"tf": 2}, "sain.option.Some.and_then": {"tf": 2}, "sain.option.Some.iter": {"tf": 1.4142135623730951}, "sain.option.Some.as_ref": {"tf": 1.4142135623730951}, "sain.option.Some.as_mut": {"tf": 1.4142135623730951}, "sain.option.Some.is_some_and": {"tf": 1.4142135623730951}}, "df": 52}, "docs": {}, "df": 0}, "6": {"4": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}}, "df": 2}, "docs": {}, "df": 0}, "9": {"2": {"2": {"3": {"3": {"7": {"2": {"0": {"3": {"6": {"8": {"5": {"4": {"7": {"7": {"5": {"8": {"0": {"7": {"docs": {"sain.Vec.index": {"tf": 1}, "sain.collections.Vec.index": {"tf": 1}, "sain.collections.Bytes.index": {"tf": 1}, "sain.collections.buf.Bytes.index": {"tf": 1}, "sain.collections.vec.Vec.index": {"tf": 1}}, "df": 5}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {"sain.cfg": {"tf": 14.212670403551895}, "sain.cfg_attr": {"tf": 15.165750888103101}, "sain.Default.__init__": {"tf": 4}, "sain.Default.default": {"tf": 3.4641016151377544}, "sain.Some.__init__": {"tf": 4.898979485566356}, "sain.Some.default": {"tf": 4.69041575982343}, "sain.Some.into_inner": {"tf": 4.358898943540674}, "sain.Some.unwrap": {"tf": 3.7416573867739413}, "sain.Some.unwrap_or": {"tf": 5.385164807134504}, "sain.Some.unwrap_or_else": {"tf": 6.6332495807108}, "sain.Some.unwrap_unchecked": {"tf": 3.7416573867739413}, "sain.Some.expect": {"tf": 5.196152422706632}, "sain.Some.map": {"tf": 7.874007874011811}, "sain.Some.map_or": {"tf": 7.681145747868608}, "sain.Some.map_or_else": {"tf": 8.831760866327848}, "sain.Some.filter": {"tf": 7.54983443527075}, "sain.Some.take": {"tf": 5.196152422706632}, "sain.Some.take_if": {"tf": 7.54983443527075}, "sain.Some.replace": {"tf": 6.082762530298219}, "sain.Some.and_ok": {"tf": 7.0710678118654755}, "sain.Some.and_then": {"tf": 8.366600265340756}, "sain.Some.iter": {"tf": 5.196152422706632}, "sain.Some.as_ref": {"tf": 6.164414002968976}, "sain.Some.as_mut": {"tf": 6.164414002968976}, "sain.Some.is_some": {"tf": 3.4641016151377544}, "sain.Some.is_some_and": {"tf": 6.324555320336759}, "sain.Some.is_none": {"tf": 3.4641016151377544}, "sain.Iter.__init__": {"tf": 5.196152422706632}, "sain.Iter.clone": {"tf": 3.4641016151377544}, "sain.Iterator.default": {"tf": 4.898979485566356}, "sain.Iterator.collect": {"tf": 9.797958971132712}, "sain.Iterator.to_vec": {"tf": 5.5677643628300215}, "sain.Iterator.sink": {"tf": 3.4641016151377544}, "sain.Iterator.raw_parts": {"tf": 6.082762530298219}, "sain.Iterator.next": {"tf": 3.7416573867739413}, "sain.Iterator.cloned": {"tf": 5.196152422706632}, "sain.Iterator.copied": {"tf": 5.196152422706632}, "sain.Iterator.map": {"tf": 8.12403840463596}, "sain.Iterator.filter": {"tf": 7.54983443527075}, "sain.Iterator.take": {"tf": 5.916079783099616}, "sain.Iterator.skip": {"tf": 5.916079783099616}, "sain.Iterator.enumerate": {"tf": 6.782329983125268}, "sain.Iterator.take_while": {"tf": 7.54983443527075}, "sain.Iterator.drop_while": {"tf": 7.54983443527075}, "sain.Iterator.all": {"tf": 6.324555320336759}, "sain.Iterator.any": {"tf": 6.324555320336759}, "sain.Iterator.zip": {"tf": 7.874007874011811}, "sain.Iterator.sort": {"tf": 7.745966692414834}, "sain.Iterator.reversed": {"tf": 5.196152422706632}, "sain.Iterator.union": {"tf": 7.211102550927978}, "sain.Iterator.first": {"tf": 3.7416573867739413}, "sain.Iterator.last": {"tf": 3.7416573867739413}, "sain.Iterator.count": {"tf": 3.4641016151377544}, "sain.Iterator.for_each": {"tf": 6.6332495807108}, "sain.Iterator.async_for_each": {"tf": 11.045361017187261}, "sain.todo": {"tf": 5.196152422706632}, "sain.deprecated": {"tf": 9.797958971132712}, "sain.unimplemented": {"tf": 7.483314773547883}, "sain.doc": {"tf": 4.58257569495584}, "sain.Ok.__init__": {"tf": 3.872983346207417}, "sain.Ok.is_ok": {"tf": 4.123105625617661}, "sain.Ok.is_ok_and": {"tf": 6.324555320336759}, "sain.Ok.is_err": {"tf": 4.123105625617661}, "sain.Ok.is_err_and": {"tf": 6.708203932499369}, "sain.Ok.expect": {"tf": 5.196152422706632}, "sain.Ok.unwrap": {"tf": 3.7416573867739413}, "sain.Ok.unwrap_or": {"tf": 5.385164807134504}, "sain.Ok.unwrap_or_else": {"tf": 6.6332495807108}, "sain.Ok.unwrap_err": {"tf": 3.4641016151377544}, "sain.Ok.ok": {"tf": 5.196152422706632}, "sain.Ok.err": {"tf": 5}, "sain.Ok.inspect": {"tf": 6.6332495807108}, "sain.Ok.inspect_err": {"tf": 6.6332495807108}, "sain.Ok.map": {"tf": 7.874007874011811}, "sain.Ok.map_or": {"tf": 7.681145747868608}, "sain.Ok.map_or_else": {"tf": 9.1104335791443}, "sain.Ok.map_err": {"tf": 6.855654600401044}, "sain.Ok.iter": {"tf": 5.196152422706632}, "sain.Err.__init__": {"tf": 3.872983346207417}, "sain.Err.is_ok": {"tf": 4.123105625617661}, "sain.Err.is_ok_and": {"tf": 6.708203932499369}, "sain.Err.is_err": {"tf": 4.123105625617661}, "sain.Err.is_err_and": {"tf": 6.324555320336759}, "sain.Err.expect": {"tf": 4.47213595499958}, "sain.Err.expect_err": {"tf": 3.7416573867739413}, "sain.Err.unwrap": {"tf": 3.4641016151377544}, "sain.Err.unwrap_or": {"tf": 5.477225575051661}, "sain.Err.unwrap_or_else": {"tf": 6.6332495807108}, "sain.Err.unwrap_err": {"tf": 3.7416573867739413}, "sain.Err.inspect": {"tf": 6.6332495807108}, "sain.Err.inspect_err": {"tf": 6.6332495807108}, "sain.Err.ok": {"tf": 5}, "sain.Err.err": {"tf": 5.196152422706632}, "sain.Err.map": {"tf": 6.48074069840786}, "sain.Err.map_or": {"tf": 7.681145747868608}, "sain.Err.map_or_else": {"tf": 9.1104335791443}, "sain.Err.map_err": {"tf": 7.54983443527075}, "sain.Err.iter": {"tf": 5.385164807134504}, "sain.Vec.__init__": {"tf": 6.164414002968976}, "sain.Vec.with_capacity": {"tf": 4.69041575982343}, "sain.Vec.as_ref": {"tf": 5.196152422706632}, "sain.Vec.len": {"tf": 3.4641016151377544}, "sain.Vec.capacity": {"tf": 3.4641016151377544}, "sain.Vec.iter": {"tf": 5.196152422706632}, "sain.Vec.is_empty": {"tf": 3.4641016151377544}, "sain.Vec.split_off": {"tf": 6.244997998398398}, "sain.Vec.split_first": {"tf": 6.928203230275509}, "sain.Vec.first": {"tf": 5.196152422706632}, "sain.Vec.truncate": {"tf": 4.47213595499958}, "sain.Vec.retain": {"tf": 6.324555320336759}, "sain.Vec.swap_remove": {"tf": 4.898979485566356}, "sain.Vec.push": {"tf": 4.69041575982343}, "sain.Vec.push_within_capacity": {"tf": 4.898979485566356}, "sain.Vec.reserve": {"tf": 4.47213595499958}, "sain.Vec.append": {"tf": 4.69041575982343}, "sain.Vec.get": {"tf": 5.916079783099616}, "sain.Vec.insert": {"tf": 5.477225575051661}, "sain.Vec.pop": {"tf": 6.6332495807108}, "sain.Vec.remove": {"tf": 4.69041575982343}, "sain.Vec.extend": {"tf": 5.916079783099616}, "sain.Vec.copy": {"tf": 5.5677643628300215}, "sain.Vec.clear": {"tf": 3.4641016151377544}, "sain.Vec.sort": {"tf": 7.211102550927978}, "sain.Vec.index": {"tf": 6.48074069840786}, "sain.Vec.count": {"tf": 4.69041575982343}, "sain.Error.__init__": {"tf": 4.47213595499958}, "sain.Error.source": {"tf": 6}, "sain.Error.description": {"tf": 3.4641016151377544}, "sain.Box.__init__": {"tf": 6}, "sain.Box.on_expire": {"tf": 6.6332495807108}, "sain.Box.remaining": {"tf": 3.4641016151377544}, "sain.Box.get": {"tf": 5.196152422706632}, "sain.MaybeUninit.__init__": {"tf": 5}, "sain.MaybeUninit.uninit": {"tf": 3.4641016151377544}, "sain.MaybeUninit.uninit_array": {"tf": 6.082762530298219}, "sain.MaybeUninit.assume_init": {"tf": 3.7416573867739413}, "sain.MaybeUninit.write": {"tf": 4.898979485566356}, "sain.From.__init__": {"tf": 4}, "sain.From.from_t": {"tf": 4.795831523312719}, "sain.TryFrom.__init__": {"tf": 4}, "sain.TryFrom.try_from": {"tf": 7.54983443527075}, "sain.Into.__init__": {"tf": 4}, "sain.Into.into": {"tf": 3.7416573867739413}, "sain.TryInto.__init__": {"tf": 4}, "sain.TryInto.try_into": {"tf": 6.928203230275509}, "sain.boxed.Box.__init__": {"tf": 6}, "sain.boxed.Box.on_expire": {"tf": 6.6332495807108}, "sain.boxed.Box.remaining": {"tf": 3.4641016151377544}, "sain.boxed.Box.get": {"tf": 5.196152422706632}, "sain.cfg.cfg_attr": {"tf": 11.445523142259598}, "sain.cfg.cfg": {"tf": 11.357816691600547}, "sain.collections.Vec.__init__": {"tf": 6.164414002968976}, "sain.collections.Vec.with_capacity": {"tf": 4.69041575982343}, "sain.collections.Vec.as_ref": {"tf": 5.196152422706632}, "sain.collections.Vec.len": {"tf": 3.4641016151377544}, "sain.collections.Vec.capacity": {"tf": 3.4641016151377544}, "sain.collections.Vec.iter": {"tf": 5.196152422706632}, "sain.collections.Vec.is_empty": {"tf": 3.4641016151377544}, "sain.collections.Vec.split_off": {"tf": 6.244997998398398}, "sain.collections.Vec.split_first": {"tf": 6.928203230275509}, "sain.collections.Vec.first": {"tf": 5.196152422706632}, "sain.collections.Vec.truncate": {"tf": 4.47213595499958}, "sain.collections.Vec.retain": {"tf": 6.324555320336759}, "sain.collections.Vec.swap_remove": {"tf": 4.898979485566356}, "sain.collections.Vec.push": {"tf": 4.69041575982343}, "sain.collections.Vec.push_within_capacity": {"tf": 4.898979485566356}, "sain.collections.Vec.reserve": {"tf": 4.47213595499958}, "sain.collections.Vec.append": {"tf": 4.69041575982343}, "sain.collections.Vec.get": {"tf": 5.916079783099616}, "sain.collections.Vec.insert": {"tf": 5.477225575051661}, "sain.collections.Vec.pop": {"tf": 6.6332495807108}, "sain.collections.Vec.remove": {"tf": 4.69041575982343}, "sain.collections.Vec.extend": {"tf": 5.916079783099616}, "sain.collections.Vec.copy": {"tf": 5.5677643628300215}, "sain.collections.Vec.clear": {"tf": 3.4641016151377544}, "sain.collections.Vec.sort": {"tf": 7.211102550927978}, "sain.collections.Vec.index": {"tf": 6.48074069840786}, "sain.collections.Vec.count": {"tf": 4.69041575982343}, "sain.collections.Bytes.__init__": {"tf": 2}, "sain.collections.Bytes.from_str": {"tf": 4.47213595499958}, "sain.collections.Bytes.from_static": {"tf": 5.385164807134504}, "sain.collections.Bytes.from_bytes": {"tf": 6.557438524302}, "sain.collections.Bytes.from_raw": {"tf": 7.211102550927978}, "sain.collections.Bytes.try_to_str": {"tf": 6.6332495807108}, "sain.collections.Bytes.to_str": {"tf": 3.4641016151377544}, "sain.collections.Bytes.leak": {"tf": 5.656854249492381}, "sain.collections.Bytes.as_bytes": {"tf": 3.4641016151377544}, "sain.collections.Bytes.as_ref": {"tf": 5}, "sain.collections.Bytes.as_mut": {"tf": 5}, "sain.collections.Bytes.raw_parts": {"tf": 7.14142842854285}, "sain.collections.Bytes.put": {"tf": 4.47213595499958}, "sain.collections.Bytes.put_raw": {"tf": 7.211102550927978}, "sain.collections.Bytes.put_bytes": {"tf": 6.557438524302}, "sain.collections.Bytes.put_str": {"tf": 4.47213595499958}, "sain.collections.Bytes.len": {"tf": 3.4641016151377544}, "sain.collections.Bytes.size": {"tf": 3.4641016151377544}, "sain.collections.Bytes.iter": {"tf": 5}, "sain.collections.Bytes.is_empty": {"tf": 3.4641016151377544}, "sain.collections.Bytes.copy": {"tf": 3.4641016151377544}, "sain.collections.Bytes.clear": {"tf": 3.4641016151377544}, "sain.collections.Bytes.index": {"tf": 6.928203230275509}, "sain.collections.Bytes.count": {"tf": 4.47213595499958}, "sain.collections.Bytes.insert": {"tf": 5.291502622129181}, "sain.collections.Bytes.pop": {"tf": 6.48074069840786}, "sain.collections.buf.Bytes.__init__": {"tf": 2}, "sain.collections.buf.Bytes.from_str": {"tf": 4.47213595499958}, "sain.collections.buf.Bytes.from_static": {"tf": 5.385164807134504}, "sain.collections.buf.Bytes.from_bytes": {"tf": 6.557438524302}, "sain.collections.buf.Bytes.from_raw": {"tf": 7.211102550927978}, "sain.collections.buf.Bytes.try_to_str": {"tf": 6.6332495807108}, "sain.collections.buf.Bytes.to_str": {"tf": 3.4641016151377544}, "sain.collections.buf.Bytes.leak": {"tf": 5.656854249492381}, "sain.collections.buf.Bytes.as_bytes": {"tf": 3.4641016151377544}, "sain.collections.buf.Bytes.as_ref": {"tf": 5}, "sain.collections.buf.Bytes.as_mut": {"tf": 5}, "sain.collections.buf.Bytes.raw_parts": {"tf": 7.14142842854285}, "sain.collections.buf.Bytes.put": {"tf": 4.47213595499958}, "sain.collections.buf.Bytes.put_raw": {"tf": 7.211102550927978}, "sain.collections.buf.Bytes.put_bytes": {"tf": 6.557438524302}, "sain.collections.buf.Bytes.put_str": {"tf": 4.47213595499958}, "sain.collections.buf.Bytes.len": {"tf": 3.4641016151377544}, "sain.collections.buf.Bytes.size": {"tf": 3.4641016151377544}, "sain.collections.buf.Bytes.iter": {"tf": 5}, "sain.collections.buf.Bytes.is_empty": {"tf": 3.4641016151377544}, "sain.collections.buf.Bytes.copy": {"tf": 3.4641016151377544}, "sain.collections.buf.Bytes.clear": {"tf": 3.4641016151377544}, "sain.collections.buf.Bytes.index": {"tf": 6.928203230275509}, "sain.collections.buf.Bytes.count": {"tf": 4.47213595499958}, "sain.collections.buf.Bytes.insert": {"tf": 5.291502622129181}, "sain.collections.buf.Bytes.pop": {"tf": 6.48074069840786}, "sain.collections.vec.Vec.__init__": {"tf": 6.164414002968976}, "sain.collections.vec.Vec.with_capacity": {"tf": 4.69041575982343}, "sain.collections.vec.Vec.as_ref": {"tf": 5.196152422706632}, "sain.collections.vec.Vec.len": {"tf": 3.4641016151377544}, "sain.collections.vec.Vec.capacity": {"tf": 3.4641016151377544}, "sain.collections.vec.Vec.iter": {"tf": 5.196152422706632}, "sain.collections.vec.Vec.is_empty": {"tf": 3.4641016151377544}, "sain.collections.vec.Vec.split_off": {"tf": 6.244997998398398}, "sain.collections.vec.Vec.split_first": {"tf": 6.928203230275509}, "sain.collections.vec.Vec.first": {"tf": 5.196152422706632}, "sain.collections.vec.Vec.truncate": {"tf": 4.47213595499958}, "sain.collections.vec.Vec.retain": {"tf": 6.324555320336759}, "sain.collections.vec.Vec.swap_remove": {"tf": 4.898979485566356}, "sain.collections.vec.Vec.push": {"tf": 4.69041575982343}, "sain.collections.vec.Vec.push_within_capacity": {"tf": 4.898979485566356}, "sain.collections.vec.Vec.reserve": {"tf": 4.47213595499958}, "sain.collections.vec.Vec.append": {"tf": 4.69041575982343}, "sain.collections.vec.Vec.get": {"tf": 5.916079783099616}, "sain.collections.vec.Vec.insert": {"tf": 5.477225575051661}, "sain.collections.vec.Vec.pop": {"tf": 6.6332495807108}, "sain.collections.vec.Vec.remove": {"tf": 4.69041575982343}, "sain.collections.vec.Vec.extend": {"tf": 5.916079783099616}, "sain.collections.vec.Vec.copy": {"tf": 5.5677643628300215}, "sain.collections.vec.Vec.clear": {"tf": 3.4641016151377544}, "sain.collections.vec.Vec.sort": {"tf": 7.211102550927978}, "sain.collections.vec.Vec.index": {"tf": 6.48074069840786}, "sain.collections.vec.Vec.count": {"tf": 4.69041575982343}, "sain.collections.vec.from_args": {"tf": 6.244997998398398}, "sain.convert.From.__init__": {"tf": 4}, "sain.convert.From.from_t": {"tf": 4.795831523312719}, "sain.convert.TryFrom.__init__": {"tf": 4}, "sain.convert.TryFrom.try_from": {"tf": 7.54983443527075}, "sain.convert.Into.__init__": {"tf": 4}, "sain.convert.Into.into": {"tf": 3.7416573867739413}, "sain.convert.TryInto.__init__": {"tf": 4}, "sain.convert.TryInto.try_into": {"tf": 6.928203230275509}, "sain.default.Default.__init__": {"tf": 4}, "sain.default.Default.default": {"tf": 3.4641016151377544}, "sain.error.Error.__init__": {"tf": 4.47213595499958}, "sain.error.Error.source": {"tf": 6}, "sain.error.Error.description": {"tf": 3.4641016151377544}, "sain.futures.spawn": {"tf": 10.344080432788601}, "sain.futures.loop": {"tf": 4.123105625617661}, "sain.iter.Iter.__init__": {"tf": 5.196152422706632}, "sain.iter.Iter.clone": {"tf": 3.4641016151377544}, "sain.iter.Iterator.default": {"tf": 4.898979485566356}, "sain.iter.Iterator.collect": {"tf": 9.797958971132712}, "sain.iter.Iterator.to_vec": {"tf": 5.5677643628300215}, "sain.iter.Iterator.sink": {"tf": 3.4641016151377544}, "sain.iter.Iterator.raw_parts": {"tf": 6.082762530298219}, "sain.iter.Iterator.next": {"tf": 3.7416573867739413}, "sain.iter.Iterator.cloned": {"tf": 5.196152422706632}, "sain.iter.Iterator.copied": {"tf": 5.196152422706632}, "sain.iter.Iterator.map": {"tf": 8.12403840463596}, "sain.iter.Iterator.filter": {"tf": 7.54983443527075}, "sain.iter.Iterator.take": {"tf": 5.916079783099616}, "sain.iter.Iterator.skip": {"tf": 5.916079783099616}, "sain.iter.Iterator.enumerate": {"tf": 6.782329983125268}, "sain.iter.Iterator.take_while": {"tf": 7.54983443527075}, "sain.iter.Iterator.drop_while": {"tf": 7.54983443527075}, "sain.iter.Iterator.all": {"tf": 6.324555320336759}, "sain.iter.Iterator.any": {"tf": 6.324555320336759}, "sain.iter.Iterator.zip": {"tf": 7.874007874011811}, "sain.iter.Iterator.sort": {"tf": 7.745966692414834}, "sain.iter.Iterator.reversed": {"tf": 5.196152422706632}, "sain.iter.Iterator.union": {"tf": 7.211102550927978}, "sain.iter.Iterator.first": {"tf": 3.7416573867739413}, "sain.iter.Iterator.last": {"tf": 3.7416573867739413}, "sain.iter.Iterator.count": {"tf": 3.4641016151377544}, "sain.iter.Iterator.for_each": {"tf": 6.6332495807108}, "sain.iter.Iterator.async_for_each": {"tf": 11.045361017187261}, "sain.iter.Cloned.__init__": {"tf": 5.196152422706632}, "sain.iter.Copied.__init__": {"tf": 5.196152422706632}, "sain.iter.Take.__init__": {"tf": 5.916079783099616}, "sain.iter.Filter.__init__": {"tf": 7.54983443527075}, "sain.iter.Map.__init__": {"tf": 7.681145747868608}, "sain.iter.Skip.__init__": {"tf": 5.916079783099616}, "sain.iter.Enumerate.__init__": {"tf": 5.916079783099616}, "sain.iter.TakeWhile.__init__": {"tf": 7.54983443527075}, "sain.iter.DropWhile.__init__": {"tf": 7.54983443527075}, "sain.iter.Empty.next": {"tf": 3.7416573867739413}, "sain.iter.Empty.count": {"tf": 4.123105625617661}, "sain.iter.Empty.any": {"tf": 6.855654600401044}, "sain.iter.Empty.all": {"tf": 6.855654600401044}, "sain.iter.into_iter": {"tf": 6.782329983125268}, "sain.iter.empty": {"tf": 4.898979485566356}, "sain.iter.once": {"tf": 5.744562646538029}, "sain.iter.repeat": {"tf": 6.4031242374328485}, "sain.macros.deprecated": {"tf": 9.797958971132712}, "sain.macros.unimplemented": {"tf": 7.483314773547883}, "sain.macros.todo": {"tf": 5.196152422706632}, "sain.macros.doc": {"tf": 4.58257569495584}, "sain.macros.unsafe": {"tf": 4.47213595499958}, "sain.option.Some.__init__": {"tf": 4.47213595499958}, "sain.option.Some.default": {"tf": 3.7416573867739413}, "sain.option.Some.into_inner": {"tf": 3.872983346207417}, "sain.option.Some.unwrap": {"tf": 4.47213595499958}, "sain.option.Some.unwrap_or": {"tf": 4.898979485566356}, "sain.option.Some.unwrap_or_else": {"tf": 4.898979485566356}, "sain.option.Some.unwrap_unchecked": {"tf": 3.7416573867739413}, "sain.option.Some.expect": {"tf": 4.69041575982343}, "sain.option.Some.map": {"tf": 4.898979485566356}, "sain.option.Some.map_or": {"tf": 5.830951894845301}, "sain.option.Some.map_or_else": {"tf": 5.830951894845301}, "sain.option.Some.filter": {"tf": 4.898979485566356}, "sain.option.Some.take": {"tf": 3.7416573867739413}, "sain.option.Some.take_if": {"tf": 4.898979485566356}, "sain.option.Some.replace": {"tf": 4.898979485566356}, "sain.option.Some.and_ok": {"tf": 4.898979485566356}, "sain.option.Some.and_then": {"tf": 4.898979485566356}, "sain.option.Some.iter": {"tf": 3.7416573867739413}, "sain.option.Some.as_ref": {"tf": 3.7416573867739413}, "sain.option.Some.as_mut": {"tf": 3.7416573867739413}, "sain.option.Some.is_some": {"tf": 3.4641016151377544}, "sain.option.Some.is_some_and": {"tf": 4.69041575982343}, "sain.option.Some.is_none": {"tf": 3.4641016151377544}, "sain.result.Ok.__init__": {"tf": 3.872983346207417}, "sain.result.Ok.is_ok": {"tf": 4.123105625617661}, "sain.result.Ok.is_ok_and": {"tf": 6.324555320336759}, "sain.result.Ok.is_err": {"tf": 4.123105625617661}, "sain.result.Ok.is_err_and": {"tf": 6.708203932499369}, "sain.result.Ok.expect": {"tf": 5.196152422706632}, "sain.result.Ok.unwrap": {"tf": 3.7416573867739413}, "sain.result.Ok.unwrap_or": {"tf": 5.385164807134504}, "sain.result.Ok.unwrap_or_else": {"tf": 6.6332495807108}, "sain.result.Ok.unwrap_err": {"tf": 3.4641016151377544}, "sain.result.Ok.ok": {"tf": 5.196152422706632}, "sain.result.Ok.err": {"tf": 5}, "sain.result.Ok.inspect": {"tf": 6.6332495807108}, "sain.result.Ok.inspect_err": {"tf": 6.6332495807108}, "sain.result.Ok.map": {"tf": 7.874007874011811}, "sain.result.Ok.map_or": {"tf": 7.681145747868608}, "sain.result.Ok.map_or_else": {"tf": 9.1104335791443}, "sain.result.Ok.map_err": {"tf": 6.855654600401044}, "sain.result.Ok.iter": {"tf": 5.196152422706632}, "sain.result.Err.__init__": {"tf": 3.872983346207417}, "sain.result.Err.is_ok": {"tf": 4.123105625617661}, "sain.result.Err.is_ok_and": {"tf": 6.708203932499369}, "sain.result.Err.is_err": {"tf": 4.123105625617661}, "sain.result.Err.is_err_and": {"tf": 6.324555320336759}, "sain.result.Err.expect": {"tf": 4.47213595499958}, "sain.result.Err.expect_err": {"tf": 3.7416573867739413}, "sain.result.Err.unwrap": {"tf": 3.4641016151377544}, "sain.result.Err.unwrap_or": {"tf": 5.477225575051661}, "sain.result.Err.unwrap_or_else": {"tf": 6.6332495807108}, "sain.result.Err.unwrap_err": {"tf": 3.7416573867739413}, "sain.result.Err.inspect": {"tf": 6.6332495807108}, "sain.result.Err.inspect_err": {"tf": 6.6332495807108}, "sain.result.Err.ok": {"tf": 5}, "sain.result.Err.err": {"tf": 5.196152422706632}, "sain.result.Err.map": {"tf": 6.48074069840786}, "sain.result.Err.map_or": {"tf": 7.681145747868608}, "sain.result.Err.map_or_else": {"tf": 9.1104335791443}, "sain.result.Err.map_err": {"tf": 7.54983443527075}, "sain.result.Err.iter": {"tf": 5.385164807134504}, "sain.sync.Lazy.get": {"tf": 5.196152422706632}, "sain.sync.Lazy.get_unchecked": {"tf": 3.7416573867739413}, "sain.sync.Lazy.set": {"tf": 5.385164807134504}, "sain.sync.Once.get": {"tf": 5.196152422706632}, "sain.sync.Once.get_unchecked": {"tf": 3.7416573867739413}, "sain.sync.Once.set": {"tf": 7.483314773547883}, "sain.sync.Once.clear": {"tf": 3.4641016151377544}, "sain.sync.Once.get_or": {"tf": 4.898979485566356}, "sain.sync.Once.get_or_with": {"tf": 6.6332495807108}, "sain.sync.Once.into_inner": {"tf": 4.358898943540674}, "sain.sync.LazyFuture.get": {"tf": 5.196152422706632}, "sain.sync.LazyFuture.set": {"tf": 5.385164807134504}, "sain.sync.AsyncOnce.get": {"tf": 5.196152422706632}, "sain.sync.AsyncOnce.get_unchecked": {"tf": 3.7416573867739413}, "sain.sync.AsyncOnce.set": {"tf": 7.483314773547883}, "sain.sync.AsyncOnce.clear": {"tf": 3.4641016151377544}, "sain.sync.AsyncOnce.get_or": {"tf": 4.898979485566356}, "sain.sync.AsyncOnce.get_or_with": {"tf": 6.6332495807108}}, "df": 403, "t": {"docs": {"sain.Default.default": {"tf": 1}, "sain.Some.__init__": {"tf": 1}, "sain.Some.into_inner": {"tf": 1}, "sain.Some.unwrap": {"tf": 1}, "sain.Some.unwrap_or": {"tf": 1.4142135623730951}, "sain.Some.unwrap_or_else": {"tf": 1.4142135623730951}, "sain.Some.unwrap_unchecked": {"tf": 1}, "sain.Some.expect": {"tf": 1}, "sain.Some.map": {"tf": 1}, "sain.Some.map_or": {"tf": 1}, "sain.Some.map_or_else": {"tf": 1}, "sain.Some.filter": {"tf": 1.4142135623730951}, "sain.Some.take": {"tf": 1}, "sain.Some.take_if": {"tf": 1.4142135623730951}, "sain.Some.replace": {"tf": 1.4142135623730951}, "sain.Some.and_ok": {"tf": 1.4142135623730951}, "sain.Some.and_then": {"tf": 1.7320508075688772}, "sain.Some.iter": {"tf": 1}, "sain.Some.as_ref": {"tf": 1}, "sain.Some.as_mut": {"tf": 1}, "sain.Some.is_some_and": {"tf": 1}, "sain.Ok.__init__": {"tf": 1}, "sain.Ok.is_ok_and": {"tf": 1}, "sain.Ok.is_err_and": {"tf": 1}, "sain.Ok.expect": {"tf": 1}, "sain.Ok.unwrap": {"tf": 1}, "sain.Ok.unwrap_or": {"tf": 1.4142135623730951}, "sain.Ok.unwrap_or_else": {"tf": 1.4142135623730951}, "sain.Ok.ok": {"tf": 1}, "sain.Ok.inspect": {"tf": 1}, "sain.Ok.map": {"tf": 1}, "sain.Ok.map_or": {"tf": 1}, "sain.Ok.map_or_else": {"tf": 1}, "sain.Ok.iter": {"tf": 1}, "sain.Err.unwrap_or": {"tf": 1.4142135623730951}, "sain.Err.unwrap_or_else": {"tf": 1.4142135623730951}, "sain.Err.inspect": {"tf": 1}, "sain.Err.map_or_else": {"tf": 1}, "sain.Vec.__init__": {"tf": 1}, "sain.Vec.as_ref": {"tf": 1}, "sain.Vec.iter": {"tf": 1}, "sain.Vec.split_off": {"tf": 1}, "sain.Vec.split_first": {"tf": 1.4142135623730951}, "sain.Vec.first": {"tf": 1}, "sain.Vec.retain": {"tf": 1}, "sain.Vec.swap_remove": {"tf": 1.4142135623730951}, "sain.Vec.push": {"tf": 1}, "sain.Vec.push_within_capacity": {"tf": 1.4142135623730951}, "sain.Vec.append": {"tf": 1}, "sain.Vec.get": {"tf": 1}, "sain.Vec.insert": {"tf": 1}, "sain.Vec.pop": {"tf": 1}, "sain.Vec.remove": {"tf": 1}, "sain.Vec.extend": {"tf": 1}, "sain.Vec.copy": {"tf": 1}, "sain.Vec.index": {"tf": 1}, "sain.Vec.count": {"tf": 1}, "sain.Box.__init__": {"tf": 1}, "sain.Box.on_expire": {"tf": 1}, "sain.Box.get": {"tf": 1}, "sain.MaybeUninit.__init__": {"tf": 1}, "sain.MaybeUninit.assume_init": {"tf": 1}, "sain.MaybeUninit.write": {"tf": 1.4142135623730951}, "sain.From.from_t": {"tf": 1}, "sain.TryFrom.try_from": {"tf": 1}, "sain.Into.into": {"tf": 1}, "sain.TryInto.try_into": {"tf": 1}, "sain.boxed.Box.__init__": {"tf": 1}, "sain.boxed.Box.on_expire": {"tf": 1}, "sain.boxed.Box.get": {"tf": 1}, "sain.collections.Vec.__init__": {"tf": 1}, "sain.collections.Vec.as_ref": {"tf": 1}, "sain.collections.Vec.iter": {"tf": 1}, "sain.collections.Vec.split_off": {"tf": 1}, "sain.collections.Vec.split_first": {"tf": 1.4142135623730951}, "sain.collections.Vec.first": {"tf": 1}, "sain.collections.Vec.retain": {"tf": 1}, "sain.collections.Vec.swap_remove": {"tf": 1.4142135623730951}, "sain.collections.Vec.push": {"tf": 1}, "sain.collections.Vec.push_within_capacity": {"tf": 1.4142135623730951}, "sain.collections.Vec.append": {"tf": 1}, "sain.collections.Vec.get": {"tf": 1}, "sain.collections.Vec.insert": {"tf": 1}, "sain.collections.Vec.pop": {"tf": 1}, "sain.collections.Vec.remove": {"tf": 1}, "sain.collections.Vec.extend": {"tf": 1}, "sain.collections.Vec.copy": {"tf": 1}, "sain.collections.Vec.index": {"tf": 1}, "sain.collections.Vec.count": {"tf": 1}, "sain.collections.vec.Vec.__init__": {"tf": 1}, "sain.collections.vec.Vec.as_ref": {"tf": 1}, "sain.collections.vec.Vec.iter": {"tf": 1}, "sain.collections.vec.Vec.split_off": {"tf": 1}, "sain.collections.vec.Vec.split_first": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.first": {"tf": 1}, "sain.collections.vec.Vec.retain": {"tf": 1}, "sain.collections.vec.Vec.swap_remove": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.push": {"tf": 1}, "sain.collections.vec.Vec.push_within_capacity": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.append": {"tf": 1}, "sain.collections.vec.Vec.get": {"tf": 1}, "sain.collections.vec.Vec.insert": {"tf": 1}, "sain.collections.vec.Vec.pop": {"tf": 1}, "sain.collections.vec.Vec.remove": {"tf": 1}, "sain.collections.vec.Vec.extend": {"tf": 1}, "sain.collections.vec.Vec.copy": {"tf": 1}, "sain.collections.vec.Vec.index": {"tf": 1}, "sain.collections.vec.Vec.count": {"tf": 1}, "sain.collections.vec.from_args": {"tf": 1.4142135623730951}, "sain.convert.From.from_t": {"tf": 1}, "sain.convert.TryFrom.try_from": {"tf": 1}, "sain.convert.Into.into": {"tf": 1}, "sain.convert.TryInto.try_into": {"tf": 1}, "sain.default.Default.default": {"tf": 1}, "sain.futures.spawn": {"tf": 1.4142135623730951}, "sain.option.Some.__init__": {"tf": 1}, "sain.option.Some.into_inner": {"tf": 1}, "sain.option.Some.unwrap": {"tf": 1}, "sain.option.Some.unwrap_or": {"tf": 1.4142135623730951}, "sain.option.Some.unwrap_or_else": {"tf": 1}, "sain.option.Some.unwrap_unchecked": {"tf": 1}, "sain.option.Some.expect": {"tf": 1}, "sain.option.Some.replace": {"tf": 1}, "sain.result.Ok.__init__": {"tf": 1}, "sain.result.Ok.is_ok_and": {"tf": 1}, "sain.result.Ok.is_err_and": {"tf": 1}, "sain.result.Ok.expect": {"tf": 1}, "sain.result.Ok.unwrap": {"tf": 1}, "sain.result.Ok.unwrap_or": {"tf": 1.4142135623730951}, "sain.result.Ok.unwrap_or_else": {"tf": 1.4142135623730951}, "sain.result.Ok.ok": {"tf": 1}, "sain.result.Ok.inspect": {"tf": 1}, "sain.result.Ok.map": {"tf": 1}, "sain.result.Ok.map_or": {"tf": 1}, "sain.result.Ok.map_or_else": {"tf": 1}, "sain.result.Ok.iter": {"tf": 1}, "sain.result.Err.unwrap_or": {"tf": 1.4142135623730951}, "sain.result.Err.unwrap_or_else": {"tf": 1.4142135623730951}, "sain.result.Err.inspect": {"tf": 1}, "sain.result.Err.map_or_else": {"tf": 1}, "sain.sync.Lazy.get": {"tf": 1}, "sain.sync.Lazy.get_unchecked": {"tf": 1}, "sain.sync.Lazy.set": {"tf": 1.4142135623730951}, "sain.sync.Once.get": {"tf": 1}, "sain.sync.Once.get_unchecked": {"tf": 1}, "sain.sync.Once.set": {"tf": 1.4142135623730951}, "sain.sync.Once.get_or": {"tf": 1.4142135623730951}, "sain.sync.Once.get_or_with": {"tf": 1.4142135623730951}, "sain.sync.Once.into_inner": {"tf": 1}, "sain.sync.LazyFuture.get": {"tf": 1}, "sain.sync.LazyFuture.set": {"tf": 1.4142135623730951}, "sain.sync.AsyncOnce.get": {"tf": 1}, "sain.sync.AsyncOnce.get_unchecked": {"tf": 1}, "sain.sync.AsyncOnce.set": {"tf": 1.4142135623730951}, "sain.sync.AsyncOnce.get_or": {"tf": 1.4142135623730951}, "sain.sync.AsyncOnce.get_or_with": {"tf": 1.4142135623730951}}, "df": 156, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"sain.cfg": {"tf": 1.4142135623730951}, "sain.cfg_attr": {"tf": 1.4142135623730951}, "sain.cfg.cfg_attr": {"tf": 1.4142135623730951}, "sain.cfg.cfg": {"tf": 1.4142135623730951}}, "df": 4}}}}, "k": {"docs": {}, "df": 0, "e": {"docs": {"sain.Iterator.take": {"tf": 1}, "sain.iter.Iterator.take": {"tf": 1}}, "df": 2, "w": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sain.Iterator.take_while": {"tf": 1}, "sain.iter.Iterator.take_while": {"tf": 1}}, "df": 2}}}}}}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.Iterator.zip": {"tf": 1}, "sain.Vec.split_first": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}, "sain.collections.Vec.split_first": {"tf": 1}, "sain.collections.Bytes.raw_parts": {"tf": 1}, "sain.collections.buf.Bytes.raw_parts": {"tf": 1}, "sain.collections.vec.Vec.split_first": {"tf": 1}, "sain.iter.Iterator.zip": {"tf": 1}}, "df": 11}}}}, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"sain.Error.source": {"tf": 1}, "sain.error.Error.source": {"tf": 1}}, "df": 2, "s": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.Iterator.sort": {"tf": 1}, "sain.iter.Iterator.sort": {"tf": 1}}, "df": 2}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.Iterator.for_each": {"tf": 1}, "sain.Iterator.async_for_each": {"tf": 1}, "sain.Ok.inspect": {"tf": 1}, "sain.Ok.inspect_err": {"tf": 1}, "sain.Err.inspect": {"tf": 1}, "sain.Err.inspect_err": {"tf": 1}, "sain.Err.iter": {"tf": 1}, "sain.Box.on_expire": {"tf": 1}, "sain.MaybeUninit.uninit_array": {"tf": 1}, "sain.boxed.Box.on_expire": {"tf": 1}, "sain.collections.Bytes.raw_parts": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.raw_parts": {"tf": 1.4142135623730951}, "sain.iter.Iterator.for_each": {"tf": 1}, "sain.iter.Iterator.async_for_each": {"tf": 1}, "sain.option.Some.unwrap": {"tf": 1}, "sain.result.Ok.inspect": {"tf": 1}, "sain.result.Ok.inspect_err": {"tf": 1}, "sain.result.Err.inspect": {"tf": 1}, "sain.result.Err.inspect_err": {"tf": 1}, "sain.result.Err.iter": {"tf": 1}}, "df": 20}}}}}, "r": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"sain.Ok.is_ok": {"tf": 1}, "sain.Err.is_err": {"tf": 1}, "sain.result.Ok.is_ok": {"tf": 1}, "sain.result.Err.is_err": {"tf": 1}}, "df": 4}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"sain.Box.__init__": {"tf": 1}, "sain.boxed.Box.__init__": {"tf": 1}}, "df": 2}}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"sain.futures.spawn": {"tf": 1}}, "df": 1}}}}}}}, "o": {"docs": {}, "df": 0, "s": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 4}, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.Some.default": {"tf": 1}, "sain.Some.map": {"tf": 1}, "sain.Some.filter": {"tf": 1}, "sain.Some.take": {"tf": 1}, "sain.Some.take_if": {"tf": 1}, "sain.Some.replace": {"tf": 1}, "sain.Some.and_ok": {"tf": 1.4142135623730951}, "sain.Some.and_then": {"tf": 1.4142135623730951}, "sain.Some.as_ref": {"tf": 1}, "sain.Some.as_mut": {"tf": 1}, "sain.Ok.ok": {"tf": 1}, "sain.Ok.err": {"tf": 1}, "sain.Err.ok": {"tf": 1}, "sain.Err.err": {"tf": 1}, "sain.Vec.split_first": {"tf": 1}, "sain.Vec.first": {"tf": 1}, "sain.Vec.get": {"tf": 1}, "sain.Vec.pop": {"tf": 1}, "sain.Error.source": {"tf": 1}, "sain.Box.get": {"tf": 1}, "sain.boxed.Box.get": {"tf": 1}, "sain.collections.Vec.split_first": {"tf": 1}, "sain.collections.Vec.first": {"tf": 1}, "sain.collections.Vec.get": {"tf": 1}, "sain.collections.Vec.pop": {"tf": 1}, "sain.collections.Bytes.leak": {"tf": 1}, "sain.collections.Bytes.pop": {"tf": 1}, "sain.collections.buf.Bytes.leak": {"tf": 1}, "sain.collections.buf.Bytes.pop": {"tf": 1}, "sain.collections.vec.Vec.split_first": {"tf": 1}, "sain.collections.vec.Vec.first": {"tf": 1}, "sain.collections.vec.Vec.get": {"tf": 1}, "sain.collections.vec.Vec.pop": {"tf": 1}, "sain.error.Error.source": {"tf": 1}, "sain.option.Some.default": {"tf": 1}, "sain.option.Some.as_ref": {"tf": 1}, "sain.option.Some.as_mut": {"tf": 1}, "sain.result.Ok.ok": {"tf": 1}, "sain.result.Ok.err": {"tf": 1}, "sain.result.Err.ok": {"tf": 1}, "sain.result.Err.err": {"tf": 1}, "sain.sync.Lazy.get": {"tf": 1}, "sain.sync.Once.get": {"tf": 1}, "sain.sync.LazyFuture.get": {"tf": 1}, "sain.sync.AsyncOnce.get": {"tf": 1}}, "df": 45, "a": {"docs": {}, "df": 0, "l": {"docs": {"sain.cfg": {"tf": 1.7320508075688772}, "sain.cfg_attr": {"tf": 1.7320508075688772}, "sain.Some.__init__": {"tf": 1}, "sain.Some.into_inner": {"tf": 1}, "sain.todo": {"tf": 1}, "sain.deprecated": {"tf": 2}, "sain.unimplemented": {"tf": 1.4142135623730951}, "sain.MaybeUninit.__init__": {"tf": 1}, "sain.macros.deprecated": {"tf": 2}, "sain.macros.unimplemented": {"tf": 1.4142135623730951}, "sain.macros.todo": {"tf": 1}, "sain.sync.Once.into_inner": {"tf": 1}}, "df": 12}}, "[": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {"sain.Iterator.next": {"tf": 1}, "sain.Iterator.first": {"tf": 1}, "sain.Iterator.last": {"tf": 1}, "sain.iter.Iterator.next": {"tf": 1}, "sain.iter.Iterator.first": {"tf": 1}, "sain.iter.Iterator.last": {"tf": 1}, "sain.iter.Empty.next": {"tf": 1}}, "df": 7}}}}, "u": {"docs": {"sain.option.Some.map": {"tf": 1}, "sain.option.Some.and_ok": {"tf": 1}, "sain.option.Some.and_then": {"tf": 1.4142135623730951}}, "df": 3}, "t": {"docs": {"sain.option.Some.filter": {"tf": 1}, "sain.option.Some.take": {"tf": 1}, "sain.option.Some.take_if": {"tf": 1}, "sain.option.Some.replace": {"tf": 1}, "sain.option.Some.and_ok": {"tf": 1}}, "df": 5}}}}}, "b": {"docs": {"sain.Some.and_ok": {"tf": 1}, "sain.option.Some.and_ok": {"tf": 1}}, "df": 2}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sain.Iterator.zip": {"tf": 1}, "sain.Iterator.union": {"tf": 1}, "sain.iter.Iterator.zip": {"tf": 1}, "sain.iter.Iterator.union": {"tf": 1}}, "df": 4, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {"sain.Iterator.collect": {"tf": 1.4142135623730951}, "sain.Iterator.map": {"tf": 1.4142135623730951}, "sain.Iterator.zip": {"tf": 1.4142135623730951}, "sain.Iterator.async_for_each": {"tf": 1.4142135623730951}, "sain.iter.Iterator.collect": {"tf": 1.4142135623730951}, "sain.iter.Iterator.map": {"tf": 1.4142135623730951}, "sain.iter.Iterator.zip": {"tf": 1.4142135623730951}, "sain.iter.Iterator.async_for_each": {"tf": 1.4142135623730951}, "sain.iter.Map.__init__": {"tf": 1}}, "df": 9}}}}}}}}, "k": {"docs": {"sain.Iterator.async_for_each": {"tf": 1}, "sain.Ok.map": {"tf": 1}, "sain.TryFrom.try_from": {"tf": 1}, "sain.TryInto.try_into": {"tf": 1}, "sain.collections.Bytes.try_to_str": {"tf": 1}, "sain.collections.buf.Bytes.try_to_str": {"tf": 1}, "sain.convert.TryFrom.try_from": {"tf": 1}, "sain.convert.TryInto.try_into": {"tf": 1}, "sain.futures.spawn": {"tf": 1}, "sain.iter.Iterator.async_for_each": {"tf": 1}, "sain.result.Ok.map": {"tf": 1}, "sain.sync.Once.set": {"tf": 1}, "sain.sync.AsyncOnce.set": {"tf": 1}}, "df": 13}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"sain.cfg": {"tf": 1.7320508075688772}, "sain.cfg_attr": {"tf": 1.7320508075688772}, "sain.Ok.is_ok": {"tf": 1}, "sain.Ok.is_err": {"tf": 1}, "sain.Ok.is_err_and": {"tf": 1}, "sain.Err.is_ok": {"tf": 1}, "sain.Err.is_ok_and": {"tf": 1}, "sain.Err.is_err": {"tf": 1}, "sain.iter.Empty.count": {"tf": 1}, "sain.iter.Empty.any": {"tf": 1}, "sain.iter.Empty.all": {"tf": 1}, "sain.result.Ok.is_ok": {"tf": 1}, "sain.result.Ok.is_err": {"tf": 1}, "sain.result.Ok.is_err_and": {"tf": 1}, "sain.result.Err.is_ok": {"tf": 1}, "sain.result.Err.is_ok_and": {"tf": 1}, "sain.result.Err.is_err": {"tf": 1}}, "df": 17, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.todo": {"tf": 1}, "sain.deprecated": {"tf": 2}, "sain.unimplemented": {"tf": 1.4142135623730951}, "sain.macros.deprecated": {"tf": 2}, "sain.macros.unimplemented": {"tf": 1.4142135623730951}, "sain.macros.todo": {"tf": 1}}, "df": 6}}}}}}}}}}}, "n": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "x": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}}, "df": 2}}}}, "t": {"docs": {"sain.Vec.index": {"tf": 1}, "sain.collections.Vec.index": {"tf": 1}, "sain.collections.vec.Vec.index": {"tf": 1}}, "df": 3}, "e": {"docs": {}, "df": 0, "n": {"docs": {"sain.collections.Bytes.raw_parts": {"tf": 1}, "sain.collections.buf.Bytes.raw_parts": {"tf": 1}}, "df": 2}}}, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"3": {"2": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}}, "df": 2}, "docs": {}, "df": 0}, "docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "s": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}}, "df": 2}}}}}}}, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}}, "df": 2}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"sain.Box.__init__": {"tf": 1}, "sain.boxed.Box.__init__": {"tf": 1}}, "df": 2}}}}}}}, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"sain.Some.unwrap_or": {"tf": 1}, "sain.Some.map_or": {"tf": 1}, "sain.Some.map_or_else": {"tf": 1}, "sain.Ok.unwrap_or": {"tf": 1}, "sain.Ok.map_or": {"tf": 1}, "sain.Ok.map_or_else": {"tf": 1}, "sain.Err.unwrap_or": {"tf": 1}, "sain.Err.map_or": {"tf": 1}, "sain.Err.map_or_else": {"tf": 1}, "sain.option.Some.unwrap_or": {"tf": 1}, "sain.option.Some.map_or": {"tf": 1}, "sain.option.Some.map_or_else": {"tf": 1}, "sain.result.Ok.unwrap_or": {"tf": 1}, "sain.result.Ok.map_or": {"tf": 1}, "sain.result.Ok.map_or_else": {"tf": 1}, "sain.result.Err.unwrap_or": {"tf": 1}, "sain.result.Err.map_or": {"tf": 1}, "sain.result.Err.map_or_else": {"tf": 1}}, "df": 18}}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sain.Iterator.drop_while": {"tf": 1}, "sain.iter.Iterator.drop_while": {"tf": 1}}, "df": 2}}}}}}}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}}, "df": 2}}}, "p": {"docs": {"sain.Iterator.map": {"tf": 1}, "sain.iter.Iterator.map": {"tf": 1}}, "df": 2}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"sain.Some.expect": {"tf": 1}, "sain.todo": {"tf": 1}, "sain.unimplemented": {"tf": 1}, "sain.Ok.expect": {"tf": 1}, "sain.Error.__init__": {"tf": 1}, "sain.error.Error.__init__": {"tf": 1}, "sain.macros.unimplemented": {"tf": 1}, "sain.macros.todo": {"tf": 1}, "sain.option.Some.expect": {"tf": 1}, "sain.result.Ok.expect": {"tf": 1}}, "df": 10}}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "w": {"docs": {"sain.collections.Bytes.from_raw": {"tf": 1}, "sain.collections.Bytes.put_raw": {"tf": 1}, "sain.collections.buf.Bytes.from_raw": {"tf": 1}, "sain.collections.buf.Bytes.put_raw": {"tf": 1}}, "df": 4}}}}}}}}}, "s": {"docs": {}, "df": 0, "g": {"docs": {"sain.Err.expect": {"tf": 1}, "sain.result.Err.expect": {"tf": 1}}, "df": 2}}, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sain.collections.Bytes.as_mut": {"tf": 1}, "sain.collections.buf.Bytes.as_mut": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}, "u": {"docs": {"sain.Some.map": {"tf": 1.4142135623730951}, "sain.Some.map_or": {"tf": 1.7320508075688772}, "sain.Some.map_or_else": {"tf": 1.7320508075688772}, "sain.deprecated": {"tf": 1.4142135623730951}, "sain.unimplemented": {"tf": 1.4142135623730951}, "sain.doc": {"tf": 1.4142135623730951}, "sain.Ok.map": {"tf": 1.4142135623730951}, "sain.Ok.map_or": {"tf": 1.7320508075688772}, "sain.Ok.map_or_else": {"tf": 1.7320508075688772}, "sain.Ok.map_err": {"tf": 1}, "sain.Err.map": {"tf": 1}, "sain.Err.map_or": {"tf": 1.7320508075688772}, "sain.Err.map_or_else": {"tf": 1.7320508075688772}, "sain.Err.map_err": {"tf": 1.4142135623730951}, "sain.macros.deprecated": {"tf": 1.4142135623730951}, "sain.macros.unimplemented": {"tf": 1.4142135623730951}, "sain.macros.doc": {"tf": 1.4142135623730951}, "sain.macros.unsafe": {"tf": 1.4142135623730951}, "sain.option.Some.map": {"tf": 1}, "sain.option.Some.map_or": {"tf": 1.7320508075688772}, "sain.option.Some.map_or_else": {"tf": 1.4142135623730951}, "sain.result.Ok.map": {"tf": 1.4142135623730951}, "sain.result.Ok.map_or": {"tf": 1.7320508075688772}, "sain.result.Ok.map_or_else": {"tf": 1.7320508075688772}, "sain.result.Ok.map_err": {"tf": 1}, "sain.result.Err.map": {"tf": 1}, "sain.result.Err.map_or": {"tf": 1.7320508075688772}, "sain.result.Err.map_or_else": {"tf": 1.7320508075688772}, "sain.result.Err.map_err": {"tf": 1.4142135623730951}}, "df": 29, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "x": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}}, "df": 2}, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.Iterator.async_for_each": {"tf": 1}, "sain.TryFrom.try_from": {"tf": 1}, "sain.TryInto.try_into": {"tf": 1}, "sain.collections.Bytes.try_to_str": {"tf": 1}, "sain.collections.buf.Bytes.try_to_str": {"tf": 1}, "sain.convert.TryFrom.try_from": {"tf": 1}, "sain.convert.TryInto.try_into": {"tf": 1}, "sain.futures.spawn": {"tf": 1}, "sain.iter.Iterator.async_for_each": {"tf": 1}, "sain.sync.Once.set": {"tf": 1}, "sain.sync.AsyncOnce.set": {"tf": 1}}, "df": 11}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {"sain.deprecated": {"tf": 1}, "sain.macros.deprecated": {"tf": 1}}, "df": 2}}}, "i": {"docs": {"sain.collections.Bytes.pop": {"tf": 1}, "sain.collections.buf.Bytes.pop": {"tf": 1}}, "df": 2, "o": {"docs": {"sain.collections.Bytes.from_raw": {"tf": 1.7320508075688772}, "sain.collections.Bytes.put_raw": {"tf": 1.7320508075688772}, "sain.collections.buf.Bytes.from_raw": {"tf": 1.7320508075688772}, "sain.collections.buf.Bytes.put_raw": {"tf": 1.7320508075688772}}, "df": 4, "s": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}}, "df": 2}}, "n": {"docs": {"sain.deprecated": {"tf": 1}, "sain.unimplemented": {"tf": 1}, "sain.Box.__init__": {"tf": 1}, "sain.boxed.Box.__init__": {"tf": 1}, "sain.macros.deprecated": {"tf": 1}, "sain.macros.unimplemented": {"tf": 1}}, "df": 6, "t": {"docs": {"sain.cfg": {"tf": 1.7320508075688772}, "sain.cfg_attr": {"tf": 1.7320508075688772}, "sain.Iterator.take": {"tf": 1}, "sain.Iterator.skip": {"tf": 1}, "sain.Iterator.enumerate": {"tf": 1}, "sain.Iterator.count": {"tf": 1}, "sain.Vec.with_capacity": {"tf": 1}, "sain.Vec.len": {"tf": 1}, "sain.Vec.capacity": {"tf": 1}, "sain.Vec.split_off": {"tf": 1}, "sain.Vec.truncate": {"tf": 1}, "sain.Vec.reserve": {"tf": 1}, "sain.Vec.get": {"tf": 1}, "sain.Vec.insert": {"tf": 1}, "sain.Vec.pop": {"tf": 1}, "sain.Vec.index": {"tf": 1.4142135623730951}, "sain.Vec.count": {"tf": 1}, "sain.Box.__init__": {"tf": 1}, "sain.MaybeUninit.uninit_array": {"tf": 1}, "sain.boxed.Box.__init__": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1.7320508075688772}, "sain.cfg.cfg": {"tf": 1.7320508075688772}, "sain.collections.Vec.with_capacity": {"tf": 1}, "sain.collections.Vec.len": {"tf": 1}, "sain.collections.Vec.capacity": {"tf": 1}, "sain.collections.Vec.split_off": {"tf": 1}, "sain.collections.Vec.truncate": {"tf": 1}, "sain.collections.Vec.reserve": {"tf": 1}, "sain.collections.Vec.get": {"tf": 1}, "sain.collections.Vec.insert": {"tf": 1}, "sain.collections.Vec.pop": {"tf": 1}, "sain.collections.Vec.index": {"tf": 1.4142135623730951}, "sain.collections.Vec.count": {"tf": 1}, "sain.collections.Bytes.from_static": {"tf": 1}, "sain.collections.Bytes.from_bytes": {"tf": 1}, "sain.collections.Bytes.leak": {"tf": 1}, "sain.collections.Bytes.as_ref": {"tf": 1}, "sain.collections.Bytes.as_mut": {"tf": 1}, "sain.collections.Bytes.raw_parts": {"tf": 1.4142135623730951}, "sain.collections.Bytes.put": {"tf": 1}, "sain.collections.Bytes.put_bytes": {"tf": 1}, "sain.collections.Bytes.len": {"tf": 1}, "sain.collections.Bytes.size": {"tf": 1}, "sain.collections.Bytes.iter": {"tf": 1}, "sain.collections.Bytes.index": {"tf": 2}, "sain.collections.Bytes.count": {"tf": 1.4142135623730951}, "sain.collections.Bytes.insert": {"tf": 1.4142135623730951}, "sain.collections.Bytes.pop": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.from_static": {"tf": 1}, "sain.collections.buf.Bytes.from_bytes": {"tf": 1}, "sain.collections.buf.Bytes.leak": {"tf": 1}, "sain.collections.buf.Bytes.as_ref": {"tf": 1}, "sain.collections.buf.Bytes.as_mut": {"tf": 1}, "sain.collections.buf.Bytes.raw_parts": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.put": {"tf": 1}, "sain.collections.buf.Bytes.put_bytes": {"tf": 1}, "sain.collections.buf.Bytes.len": {"tf": 1}, "sain.collections.buf.Bytes.size": {"tf": 1}, "sain.collections.buf.Bytes.iter": {"tf": 1}, "sain.collections.buf.Bytes.index": {"tf": 2}, "sain.collections.buf.Bytes.count": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.insert": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.pop": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.with_capacity": {"tf": 1}, "sain.collections.vec.Vec.len": {"tf": 1}, "sain.collections.vec.Vec.capacity": {"tf": 1}, "sain.collections.vec.Vec.split_off": {"tf": 1}, "sain.collections.vec.Vec.truncate": {"tf": 1}, "sain.collections.vec.Vec.reserve": {"tf": 1}, "sain.collections.vec.Vec.get": {"tf": 1}, "sain.collections.vec.Vec.insert": {"tf": 1}, "sain.collections.vec.Vec.pop": {"tf": 1}, "sain.collections.vec.Vec.index": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.count": {"tf": 1}, "sain.iter.Iterator.take": {"tf": 1}, "sain.iter.Iterator.skip": {"tf": 1}, "sain.iter.Iterator.enumerate": {"tf": 1}, "sain.iter.Iterator.count": {"tf": 1}, "sain.iter.Take.__init__": {"tf": 1}, "sain.iter.Skip.__init__": {"tf": 1}, "sain.iter.Enumerate.__init__": {"tf": 1}, "sain.iter.repeat": {"tf": 1}}, "df": 82}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {"sain.deprecated": {"tf": 1}, "sain.macros.deprecated": {"tf": 1}}, "df": 2}}}}}, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sain.Ok.__init__": {"tf": 1}, "sain.Err.__init__": {"tf": 1}, "sain.result.Ok.__init__": {"tf": 1}, "sain.result.Err.__init__": {"tf": 1}}, "df": 4}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {"sain.Vec.get": {"tf": 1}, "sain.Vec.insert": {"tf": 1}, "sain.Vec.pop": {"tf": 1}, "sain.collections.Vec.get": {"tf": 1}, "sain.collections.Vec.insert": {"tf": 1}, "sain.collections.Vec.pop": {"tf": 1}, "sain.collections.Bytes.insert": {"tf": 1}, "sain.collections.buf.Bytes.insert": {"tf": 1}, "sain.collections.vec.Vec.get": {"tf": 1}, "sain.collections.vec.Vec.insert": {"tf": 1}, "sain.collections.vec.Vec.pop": {"tf": 1}}, "df": 11}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {"sain.sync.Once.get_or": {"tf": 1}, "sain.sync.AsyncOnce.get_or": {"tf": 1}}, "df": 2}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 4}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}}, "df": 2}}}}}}}}}, "t": {"docs": {"sain.iter.Cloned.__init__": {"tf": 1}, "sain.iter.Copied.__init__": {"tf": 1}, "sain.iter.Take.__init__": {"tf": 1}, "sain.iter.Filter.__init__": {"tf": 1}, "sain.iter.Map.__init__": {"tf": 1}, "sain.iter.Skip.__init__": {"tf": 1}, "sain.iter.Enumerate.__init__": {"tf": 1}, "sain.iter.TakeWhile.__init__": {"tf": 1}, "sain.iter.DropWhile.__init__": {"tf": 1}}, "df": 9, "e": {"docs": {}, "df": 0, "r": {"docs": {"sain.Some.iter": {"tf": 1}, "sain.Iterator.default": {"tf": 1}, "sain.Iterator.cloned": {"tf": 1}, "sain.Iterator.copied": {"tf": 1}, "sain.Iterator.map": {"tf": 1}, "sain.Iterator.filter": {"tf": 1}, "sain.Iterator.take": {"tf": 1}, "sain.Iterator.skip": {"tf": 1}, "sain.Iterator.enumerate": {"tf": 1}, "sain.Iterator.take_while": {"tf": 1}, "sain.Iterator.drop_while": {"tf": 1}, "sain.Iterator.zip": {"tf": 1}, "sain.Iterator.sort": {"tf": 1}, "sain.Iterator.reversed": {"tf": 1}, "sain.Iterator.union": {"tf": 1}, "sain.Ok.iter": {"tf": 1}, "sain.Err.iter": {"tf": 1}, "sain.Vec.iter": {"tf": 1}, "sain.collections.Vec.iter": {"tf": 1}, "sain.collections.Bytes.iter": {"tf": 1}, "sain.collections.buf.Bytes.iter": {"tf": 1}, "sain.collections.vec.Vec.iter": {"tf": 1}, "sain.iter.Iterator.default": {"tf": 1}, "sain.iter.Iterator.cloned": {"tf": 1}, "sain.iter.Iterator.copied": {"tf": 1}, "sain.iter.Iterator.map": {"tf": 1}, "sain.iter.Iterator.filter": {"tf": 1}, "sain.iter.Iterator.take": {"tf": 1}, "sain.iter.Iterator.skip": {"tf": 1}, "sain.iter.Iterator.enumerate": {"tf": 1}, "sain.iter.Iterator.take_while": {"tf": 1}, "sain.iter.Iterator.drop_while": {"tf": 1}, "sain.iter.Iterator.zip": {"tf": 1}, "sain.iter.Iterator.sort": {"tf": 1}, "sain.iter.Iterator.reversed": {"tf": 1}, "sain.iter.Iterator.union": {"tf": 1}, "sain.iter.Cloned.__init__": {"tf": 1}, "sain.iter.Copied.__init__": {"tf": 1}, "sain.iter.Take.__init__": {"tf": 1}, "sain.iter.Filter.__init__": {"tf": 1}, "sain.iter.Map.__init__": {"tf": 1}, "sain.iter.Skip.__init__": {"tf": 1}, "sain.iter.Enumerate.__init__": {"tf": 1}, "sain.iter.TakeWhile.__init__": {"tf": 1}, "sain.iter.DropWhile.__init__": {"tf": 1}, "sain.iter.into_iter": {"tf": 1}, "sain.iter.empty": {"tf": 1}, "sain.iter.once": {"tf": 1}, "sain.iter.repeat": {"tf": 1}, "sain.result.Ok.iter": {"tf": 1}, "sain.result.Err.iter": {"tf": 1}}, "df": 51, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"sain.Some.iter": {"tf": 1}, "sain.Iterator.zip": {"tf": 1}, "sain.Iterator.sort": {"tf": 1}, "sain.Iterator.reversed": {"tf": 1}, "sain.Iterator.union": {"tf": 1}, "sain.Ok.iter": {"tf": 1}, "sain.Err.iter": {"tf": 1}, "sain.Vec.iter": {"tf": 1}, "sain.collections.Vec.iter": {"tf": 1}, "sain.collections.Bytes.iter": {"tf": 1}, "sain.collections.buf.Bytes.iter": {"tf": 1}, "sain.collections.vec.Vec.iter": {"tf": 1}, "sain.iter.Iterator.zip": {"tf": 1}, "sain.iter.Iterator.sort": {"tf": 1}, "sain.iter.Iterator.reversed": {"tf": 1}, "sain.iter.Iterator.union": {"tf": 1}, "sain.iter.Cloned.__init__": {"tf": 1}, "sain.iter.Copied.__init__": {"tf": 1}, "sain.iter.Take.__init__": {"tf": 1}, "sain.iter.Filter.__init__": {"tf": 1}, "sain.iter.Map.__init__": {"tf": 1}, "sain.iter.Skip.__init__": {"tf": 1}, "sain.iter.Enumerate.__init__": {"tf": 1}, "sain.iter.TakeWhile.__init__": {"tf": 1}, "sain.iter.DropWhile.__init__": {"tf": 1}, "sain.iter.into_iter": {"tf": 1}, "sain.iter.once": {"tf": 1}, "sain.iter.repeat": {"tf": 1}, "sain.result.Ok.iter": {"tf": 1}, "sain.result.Err.iter": {"tf": 1}}, "df": 30}}}, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sain.Iter.__init__": {"tf": 1.4142135623730951}, "sain.Iterator.zip": {"tf": 1}, "sain.Iterator.union": {"tf": 1}, "sain.Vec.__init__": {"tf": 1.4142135623730951}, "sain.Vec.extend": {"tf": 1.4142135623730951}, "sain.collections.Vec.__init__": {"tf": 1.4142135623730951}, "sain.collections.Vec.extend": {"tf": 1.4142135623730951}, "sain.collections.Bytes.from_bytes": {"tf": 1}, "sain.collections.Bytes.put_bytes": {"tf": 1}, "sain.collections.buf.Bytes.from_bytes": {"tf": 1}, "sain.collections.buf.Bytes.put_bytes": {"tf": 1}, "sain.collections.vec.Vec.__init__": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.extend": {"tf": 1.4142135623730951}, "sain.iter.Iter.__init__": {"tf": 1.4142135623730951}, "sain.iter.Iterator.zip": {"tf": 1}, "sain.iter.Iterator.union": {"tf": 1}, "sain.iter.into_iter": {"tf": 1.4142135623730951}}, "df": 17}}}}, "[": {"docs": {}, "df": 0, "t": {"docs": {"sain.option.Some.iter": {"tf": 1}}, "df": 1}}}, "m": {"docs": {"sain.Iter.__init__": {"tf": 1}, "sain.Iterator.default": {"tf": 1}, "sain.Iterator.collect": {"tf": 1.4142135623730951}, "sain.Iterator.to_vec": {"tf": 1}, "sain.Iterator.raw_parts": {"tf": 1}, "sain.Iterator.cloned": {"tf": 1}, "sain.Iterator.copied": {"tf": 1}, "sain.Iterator.map": {"tf": 1.4142135623730951}, "sain.Iterator.filter": {"tf": 1.4142135623730951}, "sain.Iterator.take": {"tf": 1}, "sain.Iterator.skip": {"tf": 1}, "sain.Iterator.enumerate": {"tf": 1}, "sain.Iterator.take_while": {"tf": 1.4142135623730951}, "sain.Iterator.drop_while": {"tf": 1.4142135623730951}, "sain.Iterator.all": {"tf": 1}, "sain.Iterator.any": {"tf": 1}, "sain.Iterator.zip": {"tf": 1}, "sain.Iterator.sort": {"tf": 1}, "sain.Iterator.reversed": {"tf": 1}, "sain.Iterator.union": {"tf": 1.4142135623730951}, "sain.Iterator.for_each": {"tf": 1}, "sain.Iterator.async_for_each": {"tf": 1}, "sain.Vec.swap_remove": {"tf": 1}, "sain.Vec.push": {"tf": 1}, "sain.Vec.append": {"tf": 1}, "sain.Vec.remove": {"tf": 1}, "sain.Vec.index": {"tf": 1}, "sain.Vec.count": {"tf": 1}, "sain.collections.Vec.swap_remove": {"tf": 1}, "sain.collections.Vec.push": {"tf": 1}, "sain.collections.Vec.append": {"tf": 1}, "sain.collections.Vec.remove": {"tf": 1}, "sain.collections.Vec.index": {"tf": 1}, "sain.collections.Vec.count": {"tf": 1}, "sain.collections.vec.Vec.swap_remove": {"tf": 1}, "sain.collections.vec.Vec.push": {"tf": 1}, "sain.collections.vec.Vec.append": {"tf": 1}, "sain.collections.vec.Vec.remove": {"tf": 1}, "sain.collections.vec.Vec.index": {"tf": 1}, "sain.collections.vec.Vec.count": {"tf": 1}, "sain.iter.Iter.__init__": {"tf": 1}, "sain.iter.Iterator.default": {"tf": 1}, "sain.iter.Iterator.collect": {"tf": 1.4142135623730951}, "sain.iter.Iterator.to_vec": {"tf": 1}, "sain.iter.Iterator.raw_parts": {"tf": 1}, "sain.iter.Iterator.cloned": {"tf": 1}, "sain.iter.Iterator.copied": {"tf": 1}, "sain.iter.Iterator.map": {"tf": 1.4142135623730951}, "sain.iter.Iterator.filter": {"tf": 1.4142135623730951}, "sain.iter.Iterator.take": {"tf": 1}, "sain.iter.Iterator.skip": {"tf": 1}, "sain.iter.Iterator.enumerate": {"tf": 1}, "sain.iter.Iterator.take_while": {"tf": 1.4142135623730951}, "sain.iter.Iterator.drop_while": {"tf": 1.4142135623730951}, "sain.iter.Iterator.all": {"tf": 1}, "sain.iter.Iterator.any": {"tf": 1}, "sain.iter.Iterator.zip": {"tf": 1}, "sain.iter.Iterator.sort": {"tf": 1}, "sain.iter.Iterator.reversed": {"tf": 1}, "sain.iter.Iterator.union": {"tf": 1.4142135623730951}, "sain.iter.Iterator.for_each": {"tf": 1}, "sain.iter.Iterator.async_for_each": {"tf": 1}, "sain.iter.Cloned.__init__": {"tf": 1}, "sain.iter.Copied.__init__": {"tf": 1}, "sain.iter.Take.__init__": {"tf": 1}, "sain.iter.Filter.__init__": {"tf": 1.4142135623730951}, "sain.iter.Map.__init__": {"tf": 1.4142135623730951}, "sain.iter.Skip.__init__": {"tf": 1}, "sain.iter.Enumerate.__init__": {"tf": 1}, "sain.iter.TakeWhile.__init__": {"tf": 1.4142135623730951}, "sain.iter.DropWhile.__init__": {"tf": 1.4142135623730951}, "sain.iter.Empty.any": {"tf": 1}, "sain.iter.Empty.all": {"tf": 1}, "sain.iter.into_iter": {"tf": 1.4142135623730951}, "sain.iter.empty": {"tf": 1}, "sain.iter.once": {"tf": 1.7320508075688772}, "sain.iter.repeat": {"tf": 1.4142135623730951}}, "df": 77}}}}, "n": {"docs": {"sain.MaybeUninit.uninit_array": {"tf": 1}}, "df": 1, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"sain.cfg": {"tf": 2.23606797749979}, "sain.cfg_attr": {"tf": 2.23606797749979}, "sain.Iterator.collect": {"tf": 1.4142135623730951}, "sain.Iterator.sink": {"tf": 1}, "sain.Iterator.raw_parts": {"tf": 1.4142135623730951}, "sain.Iterator.for_each": {"tf": 1}, "sain.Iterator.async_for_each": {"tf": 1}, "sain.todo": {"tf": 1}, "sain.deprecated": {"tf": 2}, "sain.unimplemented": {"tf": 1.4142135623730951}, "sain.Ok.inspect": {"tf": 1}, "sain.Ok.inspect_err": {"tf": 1}, "sain.Err.inspect": {"tf": 1}, "sain.Err.inspect_err": {"tf": 1}, "sain.Vec.__init__": {"tf": 1.4142135623730951}, "sain.Vec.truncate": {"tf": 1}, "sain.Vec.retain": {"tf": 1}, "sain.Vec.push": {"tf": 1}, "sain.Vec.reserve": {"tf": 1}, "sain.Vec.append": {"tf": 1}, "sain.Vec.insert": {"tf": 1}, "sain.Vec.remove": {"tf": 1}, "sain.Vec.extend": {"tf": 1}, "sain.Vec.clear": {"tf": 1}, "sain.Vec.sort": {"tf": 1.7320508075688772}, "sain.MaybeUninit.__init__": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 2.23606797749979}, "sain.cfg.cfg": {"tf": 2.23606797749979}, "sain.collections.Vec.__init__": {"tf": 1.4142135623730951}, "sain.collections.Vec.truncate": {"tf": 1}, "sain.collections.Vec.retain": {"tf": 1}, "sain.collections.Vec.push": {"tf": 1}, "sain.collections.Vec.reserve": {"tf": 1}, "sain.collections.Vec.append": {"tf": 1}, "sain.collections.Vec.insert": {"tf": 1}, "sain.collections.Vec.remove": {"tf": 1}, "sain.collections.Vec.extend": {"tf": 1}, "sain.collections.Vec.clear": {"tf": 1}, "sain.collections.Vec.sort": {"tf": 1.7320508075688772}, "sain.collections.Bytes.put": {"tf": 1}, "sain.collections.Bytes.put_raw": {"tf": 1}, "sain.collections.Bytes.put_bytes": {"tf": 1}, "sain.collections.Bytes.put_str": {"tf": 1}, "sain.collections.Bytes.clear": {"tf": 1}, "sain.collections.Bytes.insert": {"tf": 1}, "sain.collections.buf.Bytes.put": {"tf": 1}, "sain.collections.buf.Bytes.put_raw": {"tf": 1}, "sain.collections.buf.Bytes.put_bytes": {"tf": 1}, "sain.collections.buf.Bytes.put_str": {"tf": 1}, "sain.collections.buf.Bytes.clear": {"tf": 1}, "sain.collections.buf.Bytes.insert": {"tf": 1}, "sain.collections.vec.Vec.__init__": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.truncate": {"tf": 1}, "sain.collections.vec.Vec.retain": {"tf": 1}, "sain.collections.vec.Vec.push": {"tf": 1}, "sain.collections.vec.Vec.reserve": {"tf": 1}, "sain.collections.vec.Vec.append": {"tf": 1}, "sain.collections.vec.Vec.insert": {"tf": 1}, "sain.collections.vec.Vec.remove": {"tf": 1}, "sain.collections.vec.Vec.extend": {"tf": 1}, "sain.collections.vec.Vec.clear": {"tf": 1}, "sain.collections.vec.Vec.sort": {"tf": 1.7320508075688772}, "sain.futures.spawn": {"tf": 1.4142135623730951}, "sain.iter.Iterator.collect": {"tf": 1.4142135623730951}, "sain.iter.Iterator.sink": {"tf": 1}, "sain.iter.Iterator.raw_parts": {"tf": 1.4142135623730951}, "sain.iter.Iterator.for_each": {"tf": 1}, "sain.iter.Iterator.async_for_each": {"tf": 1}, "sain.macros.deprecated": {"tf": 2}, "sain.macros.unimplemented": {"tf": 1.4142135623730951}, "sain.macros.todo": {"tf": 1}, "sain.option.Some.__init__": {"tf": 1}, "sain.option.Some.default": {"tf": 1}, "sain.option.Some.into_inner": {"tf": 1}, "sain.result.Ok.inspect": {"tf": 1}, "sain.result.Ok.inspect_err": {"tf": 1}, "sain.result.Err.inspect": {"tf": 1}, "sain.result.Err.inspect_err": {"tf": 1}, "sain.sync.Once.clear": {"tf": 1}, "sain.sync.AsyncOnce.clear": {"tf": 1}}, "df": 80, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"sain.Some.default": {"tf": 1}, "sain.Ok.err": {"tf": 1}, "sain.Err.ok": {"tf": 1}, "sain.result.Ok.err": {"tf": 1}, "sain.result.Err.ok": {"tf": 1}, "sain.sync.Once.set": {"tf": 1}, "sain.sync.AsyncOnce.set": {"tf": 1}}, "df": 7}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {"sain.todo": {"tf": 1}, "sain.Ok.unwrap_err": {"tf": 1}, "sain.Err.expect": {"tf": 1}, "sain.Err.unwrap": {"tf": 1}, "sain.macros.todo": {"tf": 1}, "sain.option.Some.unwrap": {"tf": 1}, "sain.result.Ok.unwrap_err": {"tf": 1}, "sain.result.Err.expect": {"tf": 1}, "sain.result.Err.unwrap": {"tf": 1}}, "df": 9}}}}}}}, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sain.Err.iter": {"tf": 1}, "sain.result.Err.iter": {"tf": 1}}, "df": 2}}}}}, "p": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1.4142135623730951}, "sain.cfg.cfg": {"tf": 1.4142135623730951}}, "df": 4}}}}, "p": {"docs": {}, "df": 0, "y": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}}, "df": 2}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"sain.Some.filter": {"tf": 1}, "sain.Some.take_if": {"tf": 1}, "sain.Some.is_some_and": {"tf": 1}, "sain.Iterator.filter": {"tf": 1}, "sain.Iterator.all": {"tf": 1}, "sain.Iterator.any": {"tf": 1}, "sain.iter.Iterator.filter": {"tf": 1}, "sain.iter.Iterator.all": {"tf": 1}, "sain.iter.Iterator.any": {"tf": 1}, "sain.iter.TakeWhile.__init__": {"tf": 1}, "sain.iter.DropWhile.__init__": {"tf": 1}, "sain.iter.Empty.any": {"tf": 1}, "sain.iter.Empty.all": {"tf": 1}, "sain.option.Some.filter": {"tf": 1}, "sain.option.Some.take_if": {"tf": 1}, "sain.option.Some.is_some_and": {"tf": 1}}, "df": 16}}}}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"sain.doc": {"tf": 1}, "sain.macros.doc": {"tf": 1}}, "df": 2}}}}, "v": {"docs": {"sain.collections.Bytes.index": {"tf": 1}, "sain.collections.buf.Bytes.index": {"tf": 1}, "sain.sync.Once.set": {"tf": 1}, "sain.sync.AsyncOnce.set": {"tf": 1}}, "df": 4, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 4}}}}}, "c": {"docs": {"sain.Iterator.to_vec": {"tf": 1.4142135623730951}, "sain.Vec.split_off": {"tf": 1.4142135623730951}, "sain.Vec.copy": {"tf": 1.4142135623730951}, "sain.collections.Vec.split_off": {"tf": 1.4142135623730951}, "sain.collections.Vec.copy": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.split_off": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.copy": {"tf": 1.4142135623730951}, "sain.collections.vec.from_args": {"tf": 1.4142135623730951}, "sain.iter.Iterator.to_vec": {"tf": 1.4142135623730951}}, "df": 9}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"sain.Some.__init__": {"tf": 1}, "sain.Some.replace": {"tf": 1}, "sain.Vec.insert": {"tf": 1}, "sain.Box.__init__": {"tf": 1}, "sain.MaybeUninit.__init__": {"tf": 1}, "sain.MaybeUninit.write": {"tf": 1}, "sain.From.from_t": {"tf": 1}, "sain.TryFrom.try_from": {"tf": 1}, "sain.boxed.Box.__init__": {"tf": 1}, "sain.collections.Vec.insert": {"tf": 1}, "sain.collections.Bytes.insert": {"tf": 1}, "sain.collections.buf.Bytes.insert": {"tf": 1}, "sain.collections.vec.Vec.insert": {"tf": 1}, "sain.convert.From.from_t": {"tf": 1}, "sain.convert.TryFrom.try_from": {"tf": 1}, "sain.option.Some.__init__": {"tf": 1}, "sain.option.Some.replace": {"tf": 1}, "sain.sync.Lazy.set": {"tf": 1}, "sain.sync.LazyFuture.set": {"tf": 1}}, "df": 19}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1.4142135623730951}, "sain.cfg.cfg": {"tf": 1.4142135623730951}}, "df": 4}}, "m": {"6": {"4": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}}, "df": 2}, "docs": {}, "df": 0}, "docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}}, "df": 2}, "g": {"docs": {}, "df": 0, "s": {"docs": {"sain.Default.__init__": {"tf": 1}, "sain.From.__init__": {"tf": 1}, "sain.TryFrom.__init__": {"tf": 1}, "sain.Into.__init__": {"tf": 1}, "sain.TryInto.__init__": {"tf": 1}, "sain.convert.From.__init__": {"tf": 1}, "sain.convert.TryFrom.__init__": {"tf": 1}, "sain.convert.Into.__init__": {"tf": 1}, "sain.convert.TryInto.__init__": {"tf": 1}, "sain.default.Default.__init__": {"tf": 1}}, "df": 10}}, "r": {"docs": {"sain.collections.Bytes.from_static": {"tf": 1}, "sain.collections.buf.Bytes.from_static": {"tf": 1}}, "df": 2, "a": {"docs": {}, "df": 0, "y": {"docs": {"sain.collections.Bytes.from_static": {"tf": 1.4142135623730951}, "sain.collections.Bytes.leak": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.from_static": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.leak": {"tf": 1.4142135623730951}}, "df": 4}}}}, "b": {"docs": {}, "df": 0, "c": {"docs": {"sain.cfg_attr": {"tf": 1}, "sain.Some.unwrap_or_else": {"tf": 1}, "sain.Some.map": {"tf": 1}, "sain.Some.map_or": {"tf": 1}, "sain.Some.map_or_else": {"tf": 1.4142135623730951}, "sain.Some.filter": {"tf": 1}, "sain.Some.take_if": {"tf": 1}, "sain.Some.and_then": {"tf": 1}, "sain.Some.is_some_and": {"tf": 1}, "sain.Iter.__init__": {"tf": 1}, "sain.Iterator.collect": {"tf": 1.7320508075688772}, "sain.Iterator.raw_parts": {"tf": 1}, "sain.Iterator.map": {"tf": 1}, "sain.Iterator.filter": {"tf": 1}, "sain.Iterator.take_while": {"tf": 1}, "sain.Iterator.drop_while": {"tf": 1}, "sain.Iterator.all": {"tf": 1}, "sain.Iterator.any": {"tf": 1}, "sain.Iterator.zip": {"tf": 1}, "sain.Iterator.union": {"tf": 1}, "sain.Iterator.for_each": {"tf": 1}, "sain.Iterator.async_for_each": {"tf": 1.7320508075688772}, "sain.Ok.is_ok_and": {"tf": 1}, "sain.Ok.is_err_and": {"tf": 1}, "sain.Ok.unwrap_or_else": {"tf": 1}, "sain.Ok.inspect": {"tf": 1}, "sain.Ok.inspect_err": {"tf": 1}, "sain.Ok.map": {"tf": 1}, "sain.Ok.map_or": {"tf": 1}, "sain.Ok.map_or_else": {"tf": 1.4142135623730951}, "sain.Ok.map_err": {"tf": 1}, "sain.Err.is_ok_and": {"tf": 1}, "sain.Err.is_err_and": {"tf": 1}, "sain.Err.unwrap_or_else": {"tf": 1}, "sain.Err.inspect": {"tf": 1}, "sain.Err.inspect_err": {"tf": 1}, "sain.Err.map": {"tf": 1}, "sain.Err.map_or": {"tf": 1}, "sain.Err.map_or_else": {"tf": 1.4142135623730951}, "sain.Err.map_err": {"tf": 1}, "sain.Vec.__init__": {"tf": 1}, "sain.Vec.as_ref": {"tf": 1}, "sain.Vec.split_first": {"tf": 1}, "sain.Vec.retain": {"tf": 1}, "sain.Vec.extend": {"tf": 1}, "sain.Box.on_expire": {"tf": 1}, "sain.MaybeUninit.uninit_array": {"tf": 1}, "sain.boxed.Box.on_expire": {"tf": 1}, "sain.collections.Vec.__init__": {"tf": 1}, "sain.collections.Vec.as_ref": {"tf": 1}, "sain.collections.Vec.split_first": {"tf": 1}, "sain.collections.Vec.retain": {"tf": 1}, "sain.collections.Vec.extend": {"tf": 1}, "sain.collections.Bytes.from_bytes": {"tf": 1}, "sain.collections.Bytes.as_ref": {"tf": 1}, "sain.collections.Bytes.as_mut": {"tf": 1}, "sain.collections.Bytes.put_bytes": {"tf": 1}, "sain.collections.buf.Bytes.from_bytes": {"tf": 1}, "sain.collections.buf.Bytes.as_ref": {"tf": 1}, "sain.collections.buf.Bytes.as_mut": {"tf": 1}, "sain.collections.buf.Bytes.put_bytes": {"tf": 1}, "sain.collections.vec.Vec.__init__": {"tf": 1}, "sain.collections.vec.Vec.as_ref": {"tf": 1}, "sain.collections.vec.Vec.split_first": {"tf": 1}, "sain.collections.vec.Vec.retain": {"tf": 1}, "sain.collections.vec.Vec.extend": {"tf": 1}, "sain.futures.spawn": {"tf": 1.4142135623730951}, "sain.iter.Iter.__init__": {"tf": 1}, "sain.iter.Iterator.collect": {"tf": 1.7320508075688772}, "sain.iter.Iterator.raw_parts": {"tf": 1}, "sain.iter.Iterator.map": {"tf": 1}, "sain.iter.Iterator.filter": {"tf": 1}, "sain.iter.Iterator.take_while": {"tf": 1}, "sain.iter.Iterator.drop_while": {"tf": 1}, "sain.iter.Iterator.all": {"tf": 1}, "sain.iter.Iterator.any": {"tf": 1}, "sain.iter.Iterator.zip": {"tf": 1}, "sain.iter.Iterator.union": {"tf": 1}, "sain.iter.Iterator.for_each": {"tf": 1}, "sain.iter.Iterator.async_for_each": {"tf": 1.7320508075688772}, "sain.iter.Filter.__init__": {"tf": 1}, "sain.iter.Map.__init__": {"tf": 1}, "sain.iter.TakeWhile.__init__": {"tf": 1}, "sain.iter.DropWhile.__init__": {"tf": 1}, "sain.iter.Empty.any": {"tf": 1}, "sain.iter.Empty.all": {"tf": 1}, "sain.iter.into_iter": {"tf": 1}, "sain.result.Ok.is_ok_and": {"tf": 1}, "sain.result.Ok.is_err_and": {"tf": 1}, "sain.result.Ok.unwrap_or_else": {"tf": 1}, "sain.result.Ok.inspect": {"tf": 1}, "sain.result.Ok.inspect_err": {"tf": 1}, "sain.result.Ok.map": {"tf": 1}, "sain.result.Ok.map_or": {"tf": 1}, "sain.result.Ok.map_or_else": {"tf": 1.4142135623730951}, "sain.result.Ok.map_err": {"tf": 1}, "sain.result.Err.is_ok_and": {"tf": 1}, "sain.result.Err.is_err_and": {"tf": 1}, "sain.result.Err.unwrap_or_else": {"tf": 1}, "sain.result.Err.inspect": {"tf": 1}, "sain.result.Err.inspect_err": {"tf": 1}, "sain.result.Err.map": {"tf": 1}, "sain.result.Err.map_or": {"tf": 1}, "sain.result.Err.map_or_else": {"tf": 1.4142135623730951}, "sain.result.Err.map_err": {"tf": 1}, "sain.sync.Once.get_or_with": {"tf": 1}, "sain.sync.AsyncOnce.get_or_with": {"tf": 1}}, "df": 107}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {"sain.futures.loop": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}, "n": {"docs": {}, "df": 0, "y": {"docs": {"sain.Iterator.for_each": {"tf": 1}, "sain.Iterator.async_for_each": {"tf": 1}, "sain.Ok.inspect": {"tf": 1}, "sain.Ok.inspect_err": {"tf": 1}, "sain.Err.inspect": {"tf": 1}, "sain.Err.inspect_err": {"tf": 1}, "sain.Box.on_expire": {"tf": 1}, "sain.boxed.Box.on_expire": {"tf": 1}, "sain.iter.Iterator.for_each": {"tf": 1}, "sain.iter.Iterator.async_for_each": {"tf": 1}, "sain.result.Ok.inspect": {"tf": 1}, "sain.result.Ok.inspect_err": {"tf": 1}, "sain.result.Err.inspect": {"tf": 1}, "sain.result.Err.inspect_err": {"tf": 1}}, "df": 14}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.collections.Bytes.raw_parts": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.raw_parts": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sain.unimplemented": {"tf": 1}, "sain.macros.unimplemented": {"tf": 1}}, "df": 2}}}}}}}}, "t": {"docs": {"sain.Vec.split_off": {"tf": 1}, "sain.collections.Vec.split_off": {"tf": 1}, "sain.collections.vec.Vec.split_off": {"tf": 1}}, "df": 3}, "d": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"sain.Vec.reserve": {"tf": 1}, "sain.collections.Vec.reserve": {"tf": 1}, "sain.collections.vec.Vec.reserve": {"tf": 1}}, "df": 3}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"sain.collections.Bytes.raw_parts": {"tf": 1}, "sain.collections.buf.Bytes.raw_parts": {"tf": 1}}, "df": 2}}}}}}, "w": {"docs": {}, "df": 0, "s": {"docs": {"sain.futures.spawn": {"tf": 1}}, "df": 1}, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sain.futures.spawn": {"tf": 1}}, "df": 1}}}}}}}}, "s": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {"sain.futures.loop": {"tf": 1}}, "df": 1}}}}}}}, "x": {"2": {"7": {"docs": {"sain.Vec.index": {"tf": 1.4142135623730951}, "sain.collections.Vec.index": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.index": {"tf": 1.4142135623730951}}, "df": 3}, "docs": {}, "df": 0}, "8": {"6": {"docs": {"sain.cfg": {"tf": 1.4142135623730951}, "sain.cfg_attr": {"tf": 1.4142135623730951}}, "df": 2}, "docs": {}, "df": 0}, "docs": {"sain.Vec.push_within_capacity": {"tf": 1}, "sain.collections.Vec.push_within_capacity": {"tf": 1}, "sain.collections.Bytes.count": {"tf": 1}, "sain.collections.buf.Bytes.count": {"tf": 1}, "sain.collections.vec.Vec.push_within_capacity": {"tf": 1}}, "df": 5}, "c": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}}, "df": 2}}}}}}, "o": {"docs": {"sain.Default.default": {"tf": 1}, "sain.From.from_t": {"tf": 1}, "sain.TryFrom.try_from": {"tf": 1}, "sain.convert.From.from_t": {"tf": 1}, "sain.convert.TryFrom.try_from": {"tf": 1}, "sain.default.Default.default": {"tf": 1}, "sain.futures.spawn": {"tf": 1.4142135623730951}}, "df": 7, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.Vec.as_ref": {"tf": 1}, "sain.collections.Vec.as_ref": {"tf": 1}, "sain.collections.vec.Vec.as_ref": {"tf": 1}}, "df": 3, "s": {"docs": {"sain.cfg_attr": {"tf": 1}, "sain.Some.unwrap_or_else": {"tf": 1}, "sain.Some.map": {"tf": 1}, "sain.Some.map_or": {"tf": 1}, "sain.Some.map_or_else": {"tf": 1.4142135623730951}, "sain.Some.filter": {"tf": 1}, "sain.Some.take_if": {"tf": 1}, "sain.Some.and_then": {"tf": 1}, "sain.Some.is_some_and": {"tf": 1}, "sain.Iter.__init__": {"tf": 1}, "sain.Iterator.collect": {"tf": 1.7320508075688772}, "sain.Iterator.to_vec": {"tf": 1}, "sain.Iterator.raw_parts": {"tf": 1}, "sain.Iterator.map": {"tf": 1}, "sain.Iterator.filter": {"tf": 1}, "sain.Iterator.take_while": {"tf": 1}, "sain.Iterator.drop_while": {"tf": 1}, "sain.Iterator.all": {"tf": 1}, "sain.Iterator.any": {"tf": 1}, "sain.Iterator.zip": {"tf": 1}, "sain.Iterator.sort": {"tf": 1}, "sain.Iterator.union": {"tf": 1}, "sain.Iterator.for_each": {"tf": 1}, "sain.Iterator.async_for_each": {"tf": 1.7320508075688772}, "sain.deprecated": {"tf": 1.4142135623730951}, "sain.unimplemented": {"tf": 1.4142135623730951}, "sain.doc": {"tf": 1.4142135623730951}, "sain.Ok.is_ok_and": {"tf": 1}, "sain.Ok.is_err_and": {"tf": 1}, "sain.Ok.unwrap_or_else": {"tf": 1}, "sain.Ok.inspect": {"tf": 1}, "sain.Ok.inspect_err": {"tf": 1}, "sain.Ok.map": {"tf": 1}, "sain.Ok.map_or": {"tf": 1}, "sain.Ok.map_or_else": {"tf": 1.4142135623730951}, "sain.Ok.map_err": {"tf": 1}, "sain.Err.is_ok_and": {"tf": 1}, "sain.Err.is_err_and": {"tf": 1}, "sain.Err.unwrap_or_else": {"tf": 1}, "sain.Err.inspect": {"tf": 1}, "sain.Err.inspect_err": {"tf": 1}, "sain.Err.map": {"tf": 1}, "sain.Err.map_or": {"tf": 1}, "sain.Err.map_or_else": {"tf": 1.4142135623730951}, "sain.Err.map_err": {"tf": 1}, "sain.Vec.__init__": {"tf": 1}, "sain.Vec.as_ref": {"tf": 1}, "sain.Vec.split_off": {"tf": 1}, "sain.Vec.split_first": {"tf": 1}, "sain.Vec.retain": {"tf": 1}, "sain.Vec.extend": {"tf": 1}, "sain.Vec.copy": {"tf": 1}, "sain.Vec.sort": {"tf": 1}, "sain.Box.on_expire": {"tf": 1}, "sain.MaybeUninit.uninit_array": {"tf": 1}, "sain.boxed.Box.on_expire": {"tf": 1}, "sain.collections.Vec.__init__": {"tf": 1}, "sain.collections.Vec.as_ref": {"tf": 1}, "sain.collections.Vec.split_off": {"tf": 1}, "sain.collections.Vec.split_first": {"tf": 1}, "sain.collections.Vec.retain": {"tf": 1}, "sain.collections.Vec.extend": {"tf": 1}, "sain.collections.Vec.copy": {"tf": 1}, "sain.collections.Vec.sort": {"tf": 1}, "sain.collections.Bytes.from_bytes": {"tf": 1}, "sain.collections.Bytes.as_ref": {"tf": 1}, "sain.collections.Bytes.as_mut": {"tf": 1}, "sain.collections.Bytes.put_bytes": {"tf": 1}, "sain.collections.buf.Bytes.from_bytes": {"tf": 1}, "sain.collections.buf.Bytes.as_ref": {"tf": 1}, "sain.collections.buf.Bytes.as_mut": {"tf": 1}, "sain.collections.buf.Bytes.put_bytes": {"tf": 1}, "sain.collections.vec.Vec.__init__": {"tf": 1}, "sain.collections.vec.Vec.as_ref": {"tf": 1}, "sain.collections.vec.Vec.split_off": {"tf": 1}, "sain.collections.vec.Vec.split_first": {"tf": 1}, "sain.collections.vec.Vec.retain": {"tf": 1}, "sain.collections.vec.Vec.extend": {"tf": 1}, "sain.collections.vec.Vec.copy": {"tf": 1}, "sain.collections.vec.Vec.sort": {"tf": 1}, "sain.collections.vec.from_args": {"tf": 1}, "sain.futures.spawn": {"tf": 1.4142135623730951}, "sain.iter.Iter.__init__": {"tf": 1}, "sain.iter.Iterator.collect": {"tf": 1.7320508075688772}, "sain.iter.Iterator.to_vec": {"tf": 1}, "sain.iter.Iterator.raw_parts": {"tf": 1}, "sain.iter.Iterator.map": {"tf": 1}, "sain.iter.Iterator.filter": {"tf": 1}, "sain.iter.Iterator.take_while": {"tf": 1}, "sain.iter.Iterator.drop_while": {"tf": 1}, "sain.iter.Iterator.all": {"tf": 1}, "sain.iter.Iterator.any": {"tf": 1}, "sain.iter.Iterator.zip": {"tf": 1}, "sain.iter.Iterator.sort": {"tf": 1}, "sain.iter.Iterator.union": {"tf": 1}, "sain.iter.Iterator.for_each": {"tf": 1}, "sain.iter.Iterator.async_for_each": {"tf": 1.7320508075688772}, "sain.iter.Filter.__init__": {"tf": 1}, "sain.iter.Map.__init__": {"tf": 1}, "sain.iter.TakeWhile.__init__": {"tf": 1}, "sain.iter.DropWhile.__init__": {"tf": 1}, "sain.iter.Empty.any": {"tf": 1}, "sain.iter.Empty.all": {"tf": 1}, "sain.iter.into_iter": {"tf": 1}, "sain.macros.deprecated": {"tf": 1.4142135623730951}, "sain.macros.unimplemented": {"tf": 1.4142135623730951}, "sain.macros.doc": {"tf": 1.4142135623730951}, "sain.macros.unsafe": {"tf": 1.4142135623730951}, "sain.result.Ok.is_ok_and": {"tf": 1}, "sain.result.Ok.is_err_and": {"tf": 1}, "sain.result.Ok.unwrap_or_else": {"tf": 1}, "sain.result.Ok.inspect": {"tf": 1}, "sain.result.Ok.inspect_err": {"tf": 1}, "sain.result.Ok.map": {"tf": 1}, "sain.result.Ok.map_or": {"tf": 1}, "sain.result.Ok.map_or_else": {"tf": 1.4142135623730951}, "sain.result.Ok.map_err": {"tf": 1}, "sain.result.Err.is_ok_and": {"tf": 1}, "sain.result.Err.is_err_and": {"tf": 1}, "sain.result.Err.unwrap_or_else": {"tf": 1}, "sain.result.Err.inspect": {"tf": 1}, "sain.result.Err.inspect_err": {"tf": 1}, "sain.result.Err.map": {"tf": 1}, "sain.result.Err.map_or": {"tf": 1}, "sain.result.Err.map_or_else": {"tf": 1.4142135623730951}, "sain.result.Err.map_err": {"tf": 1}, "sain.sync.Once.get_or_with": {"tf": 1}, "sain.sync.AsyncOnce.get_or_with": {"tf": 1}}, "df": 128}}}}}}}}}, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.Iterator.copied": {"tf": 1}, "sain.iter.Iterator.copied": {"tf": 1}}, "df": 2}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"sain.Iterator.take": {"tf": 1}, "sain.Iterator.skip": {"tf": 1}, "sain.iter.Iterator.take": {"tf": 1}, "sain.iter.Iterator.skip": {"tf": 1}, "sain.iter.Take.__init__": {"tf": 1}, "sain.iter.Skip.__init__": {"tf": 1}, "sain.iter.repeat": {"tf": 1}}, "df": 7}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"sain.Iterator.async_for_each": {"tf": 1}, "sain.iter.Iterator.async_for_each": {"tf": 1}}, "df": 2}}}}}}}, "v": {"docs": {"sain.Into.into": {"tf": 1}, "sain.convert.Into.into": {"tf": 1}}, "df": 2}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"sain.iter.Filter.__init__": {"tf": 1}, "sain.iter.Map.__init__": {"tf": 1}}, "df": 2, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sain.cfg_attr": {"tf": 1}, "sain.Some.unwrap_or_else": {"tf": 1}, "sain.Some.map": {"tf": 1}, "sain.Some.map_or": {"tf": 1}, "sain.Some.map_or_else": {"tf": 1.4142135623730951}, "sain.Some.filter": {"tf": 1}, "sain.Some.take_if": {"tf": 1}, "sain.Some.and_then": {"tf": 1}, "sain.Some.is_some_and": {"tf": 1}, "sain.Iterator.collect": {"tf": 1}, "sain.Iterator.map": {"tf": 1}, "sain.Iterator.filter": {"tf": 1}, "sain.Iterator.take_while": {"tf": 1}, "sain.Iterator.drop_while": {"tf": 1}, "sain.Iterator.all": {"tf": 1}, "sain.Iterator.any": {"tf": 1}, "sain.Iterator.for_each": {"tf": 1}, "sain.Iterator.async_for_each": {"tf": 1}, "sain.Ok.is_ok_and": {"tf": 1}, "sain.Ok.is_err_and": {"tf": 1}, "sain.Ok.unwrap_or_else": {"tf": 1}, "sain.Ok.inspect": {"tf": 1}, "sain.Ok.inspect_err": {"tf": 1}, "sain.Ok.map": {"tf": 1}, "sain.Ok.map_or": {"tf": 1}, "sain.Ok.map_or_else": {"tf": 1.4142135623730951}, "sain.Ok.map_err": {"tf": 1}, "sain.Err.is_ok_and": {"tf": 1}, "sain.Err.is_err_and": {"tf": 1}, "sain.Err.unwrap_or_else": {"tf": 1}, "sain.Err.inspect": {"tf": 1}, "sain.Err.inspect_err": {"tf": 1}, "sain.Err.map": {"tf": 1}, "sain.Err.map_or": {"tf": 1}, "sain.Err.map_or_else": {"tf": 1.4142135623730951}, "sain.Err.map_err": {"tf": 1}, "sain.Vec.retain": {"tf": 1}, "sain.Box.on_expire": {"tf": 1}, "sain.boxed.Box.on_expire": {"tf": 1}, "sain.collections.Vec.retain": {"tf": 1}, "sain.collections.vec.Vec.retain": {"tf": 1}, "sain.iter.Iterator.collect": {"tf": 1}, "sain.iter.Iterator.map": {"tf": 1}, "sain.iter.Iterator.filter": {"tf": 1}, "sain.iter.Iterator.take_while": {"tf": 1}, "sain.iter.Iterator.drop_while": {"tf": 1}, "sain.iter.Iterator.all": {"tf": 1}, "sain.iter.Iterator.any": {"tf": 1}, "sain.iter.Iterator.for_each": {"tf": 1}, "sain.iter.Iterator.async_for_each": {"tf": 1}, "sain.iter.Filter.__init__": {"tf": 1}, "sain.iter.Map.__init__": {"tf": 1}, "sain.iter.TakeWhile.__init__": {"tf": 1}, "sain.iter.DropWhile.__init__": {"tf": 1}, "sain.iter.Empty.any": {"tf": 1}, "sain.iter.Empty.all": {"tf": 1}, "sain.result.Ok.is_ok_and": {"tf": 1}, "sain.result.Ok.is_err_and": {"tf": 1}, "sain.result.Ok.unwrap_or_else": {"tf": 1}, "sain.result.Ok.inspect": {"tf": 1}, "sain.result.Ok.inspect_err": {"tf": 1}, "sain.result.Ok.map": {"tf": 1}, "sain.result.Ok.map_or": {"tf": 1}, "sain.result.Ok.map_or_else": {"tf": 1.4142135623730951}, "sain.result.Ok.map_err": {"tf": 1}, "sain.result.Err.is_ok_and": {"tf": 1}, "sain.result.Err.is_err_and": {"tf": 1}, "sain.result.Err.unwrap_or_else": {"tf": 1}, "sain.result.Err.inspect": {"tf": 1}, "sain.result.Err.inspect_err": {"tf": 1}, "sain.result.Err.map": {"tf": 1}, "sain.result.Err.map_or": {"tf": 1}, "sain.result.Err.map_or_else": {"tf": 1.4142135623730951}, "sain.result.Err.map_err": {"tf": 1}, "sain.sync.Once.get_or_with": {"tf": 1}, "sain.sync.AsyncOnce.get_or_with": {"tf": 1}}, "df": 76, "[": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {"sain.Iterator.sort": {"tf": 1}, "sain.iter.Iterator.sort": {"tf": 1}}, "df": 2}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"sain.deprecated": {"tf": 1}, "sain.unimplemented": {"tf": 1}, "sain.doc": {"tf": 1}, "sain.macros.deprecated": {"tf": 1}, "sain.macros.unimplemented": {"tf": 1}, "sain.macros.doc": {"tf": 1}}, "df": 6}}}}}}}}}}}, "t": {"docs": {"sain.Vec.sort": {"tf": 1}, "sain.collections.Vec.sort": {"tf": 1}, "sain.collections.vec.Vec.sort": {"tf": 1}}, "df": 3}, "f": {"docs": {"sain.cfg.cfg_attr": {"tf": 1}}, "df": 1}}, "p": {"docs": {"sain.deprecated": {"tf": 1.4142135623730951}, "sain.unimplemented": {"tf": 1.4142135623730951}, "sain.doc": {"tf": 1.4142135623730951}, "sain.macros.deprecated": {"tf": 1.4142135623730951}, "sain.macros.unimplemented": {"tf": 1.4142135623730951}, "sain.macros.doc": {"tf": 1.4142135623730951}, "sain.macros.unsafe": {"tf": 1.4142135623730951}}, "df": 7}}}}}}, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {"sain.Box.on_expire": {"tf": 1}, "sain.boxed.Box.on_expire": {"tf": 1}}, "df": 2}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"sain.Iterator.collect": {"tf": 1}, "sain.iter.Iterator.collect": {"tf": 1}}, "df": 2}}, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"sain.Vec.with_capacity": {"tf": 1}, "sain.collections.Vec.with_capacity": {"tf": 1}, "sain.collections.vec.Vec.with_capacity": {"tf": 1}}, "df": 3}}}}}}}, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"sain.Some.as_ref": {"tf": 1.4142135623730951}, "sain.Some.as_mut": {"tf": 1}}, "df": 2, "[": {"docs": {}, "df": 0, "t": {"docs": {"sain.option.Some.as_ref": {"tf": 1}}, "df": 1}}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.Iterator.cloned": {"tf": 1}, "sain.iter.Iterator.cloned": {"tf": 1}}, "df": 2}}}}, "s": {"docs": {"sain.Vec.with_capacity": {"tf": 1}, "sain.MaybeUninit.uninit": {"tf": 1}, "sain.MaybeUninit.uninit_array": {"tf": 1}, "sain.From.from_t": {"tf": 1}, "sain.TryFrom.try_from": {"tf": 1}, "sain.collections.Vec.with_capacity": {"tf": 1}, "sain.collections.Bytes.from_str": {"tf": 1}, "sain.collections.Bytes.from_static": {"tf": 1}, "sain.collections.Bytes.from_bytes": {"tf": 1}, "sain.collections.Bytes.from_raw": {"tf": 1}, "sain.collections.buf.Bytes.from_str": {"tf": 1}, "sain.collections.buf.Bytes.from_static": {"tf": 1}, "sain.collections.buf.Bytes.from_bytes": {"tf": 1}, "sain.collections.buf.Bytes.from_raw": {"tf": 1}, "sain.collections.vec.Vec.with_capacity": {"tf": 1}, "sain.convert.From.from_t": {"tf": 1}, "sain.convert.TryFrom.try_from": {"tf": 1}}, "df": 17}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"sain.Vec.index": {"tf": 1}, "sain.collections.Vec.index": {"tf": 1}, "sain.collections.vec.Vec.index": {"tf": 1}}, "df": 3}}}}}, "j": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}}, "df": 2}}}}}}, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"sain.cfg": {"tf": 1}, "sain.Some.filter": {"tf": 1}, "sain.Some.take_if": {"tf": 1}, "sain.Some.is_some": {"tf": 1}, "sain.Some.is_some_and": {"tf": 1.4142135623730951}, "sain.Some.is_none": {"tf": 1}, "sain.Iterator.filter": {"tf": 1}, "sain.Iterator.take_while": {"tf": 1}, "sain.Iterator.drop_while": {"tf": 1}, "sain.Iterator.all": {"tf": 1.4142135623730951}, "sain.Iterator.any": {"tf": 1.4142135623730951}, "sain.Iterator.sort": {"tf": 1}, "sain.Ok.is_ok_and": {"tf": 1.4142135623730951}, "sain.Ok.is_err_and": {"tf": 1}, "sain.Err.is_ok_and": {"tf": 1}, "sain.Err.is_err_and": {"tf": 1.4142135623730951}, "sain.Vec.is_empty": {"tf": 1}, "sain.Vec.retain": {"tf": 1}, "sain.Vec.sort": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}, "sain.collections.Vec.is_empty": {"tf": 1}, "sain.collections.Vec.retain": {"tf": 1}, "sain.collections.Vec.sort": {"tf": 1}, "sain.collections.Bytes.is_empty": {"tf": 1}, "sain.collections.buf.Bytes.is_empty": {"tf": 1}, "sain.collections.vec.Vec.is_empty": {"tf": 1}, "sain.collections.vec.Vec.retain": {"tf": 1}, "sain.collections.vec.Vec.sort": {"tf": 1}, "sain.iter.Iterator.filter": {"tf": 1}, "sain.iter.Iterator.take_while": {"tf": 1}, "sain.iter.Iterator.drop_while": {"tf": 1}, "sain.iter.Iterator.all": {"tf": 1.4142135623730951}, "sain.iter.Iterator.any": {"tf": 1.4142135623730951}, "sain.iter.Iterator.sort": {"tf": 1}, "sain.iter.Filter.__init__": {"tf": 1}, "sain.iter.TakeWhile.__init__": {"tf": 1}, "sain.iter.DropWhile.__init__": {"tf": 1}, "sain.iter.Empty.any": {"tf": 1}, "sain.iter.Empty.all": {"tf": 1}, "sain.option.Some.filter": {"tf": 1}, "sain.option.Some.take_if": {"tf": 1}, "sain.option.Some.is_some": {"tf": 1}, "sain.option.Some.is_some_and": {"tf": 1.4142135623730951}, "sain.option.Some.is_none": {"tf": 1}, "sain.result.Ok.is_ok_and": {"tf": 1.4142135623730951}, "sain.result.Ok.is_err_and": {"tf": 1}, "sain.result.Err.is_ok_and": {"tf": 1}, "sain.result.Err.is_err_and": {"tf": 1.4142135623730951}}, "df": 48}}}, "u": {"docs": {}, "df": 0, "f": {"docs": {"sain.collections.Bytes.from_bytes": {"tf": 1}, "sain.collections.buf.Bytes.from_bytes": {"tf": 1}}, "df": 2, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sain.collections.Bytes.from_raw": {"tf": 1}, "sain.collections.Bytes.put_raw": {"tf": 1}, "sain.collections.buf.Bytes.from_raw": {"tf": 1}, "sain.collections.buf.Bytes.put_raw": {"tf": 1}}, "df": 4}}}}}}}}}}}}}, "y": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"sain.collections.Bytes.from_bytes": {"tf": 1}, "sain.collections.Bytes.try_to_str": {"tf": 1}, "sain.collections.Bytes.as_bytes": {"tf": 1}, "sain.collections.Bytes.put_bytes": {"tf": 1}, "sain.collections.buf.Bytes.from_bytes": {"tf": 1}, "sain.collections.buf.Bytes.try_to_str": {"tf": 1}, "sain.collections.buf.Bytes.as_bytes": {"tf": 1}, "sain.collections.buf.Bytes.put_bytes": {"tf": 1}}, "df": 8, "i": {"docs": {}, "df": 0, "o": {"docs": {"sain.collections.Bytes.from_raw": {"tf": 1}, "sain.collections.Bytes.put_raw": {"tf": 1}, "sain.collections.buf.Bytes.from_raw": {"tf": 1}, "sain.collections.buf.Bytes.put_raw": {"tf": 1}}, "df": 4}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {"sain.collections.Bytes.from_bytes": {"tf": 1}, "sain.collections.Bytes.put_bytes": {"tf": 1}, "sain.collections.buf.Bytes.from_bytes": {"tf": 1}, "sain.collections.buf.Bytes.put_bytes": {"tf": 1}}, "df": 4}}}}}}}}}, "f": {"docs": {"sain.cfg_attr": {"tf": 1.4142135623730951}, "sain.Some.unwrap_or_else": {"tf": 1}, "sain.Some.map": {"tf": 1}, "sain.Some.map_or": {"tf": 1}, "sain.Some.map_or_else": {"tf": 1}, "sain.Some.and_then": {"tf": 1}, "sain.Iterator.take_while": {"tf": 1}, "sain.Iterator.drop_while": {"tf": 1}, "sain.Ok.is_ok_and": {"tf": 1}, "sain.Ok.is_err_and": {"tf": 1}, "sain.Ok.unwrap_or_else": {"tf": 1}, "sain.Ok.inspect": {"tf": 1}, "sain.Ok.inspect_err": {"tf": 1}, "sain.Ok.map": {"tf": 1}, "sain.Ok.map_or": {"tf": 1}, "sain.Ok.map_or_else": {"tf": 1}, "sain.Ok.map_err": {"tf": 1}, "sain.Err.is_ok_and": {"tf": 1}, "sain.Err.is_err_and": {"tf": 1}, "sain.Err.unwrap_or_else": {"tf": 1}, "sain.Err.inspect": {"tf": 1}, "sain.Err.inspect_err": {"tf": 1}, "sain.Err.map": {"tf": 1}, "sain.Err.map_or": {"tf": 1}, "sain.Err.map_or_else": {"tf": 1}, "sain.Err.map_err": {"tf": 1}, "sain.Vec.retain": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.collections.Vec.retain": {"tf": 1}, "sain.collections.vec.Vec.retain": {"tf": 1}, "sain.iter.Iterator.take_while": {"tf": 1}, "sain.iter.Iterator.drop_while": {"tf": 1}, "sain.option.Some.unwrap_or_else": {"tf": 1}, "sain.option.Some.map": {"tf": 1}, "sain.option.Some.map_or": {"tf": 1}, "sain.option.Some.map_or_else": {"tf": 1}, "sain.option.Some.and_then": {"tf": 1}, "sain.result.Ok.is_ok_and": {"tf": 1}, "sain.result.Ok.is_err_and": {"tf": 1}, "sain.result.Ok.unwrap_or_else": {"tf": 1}, "sain.result.Ok.inspect": {"tf": 1}, "sain.result.Ok.inspect_err": {"tf": 1}, "sain.result.Ok.map": {"tf": 1}, "sain.result.Ok.map_or": {"tf": 1}, "sain.result.Ok.map_or_else": {"tf": 1}, "sain.result.Ok.map_err": {"tf": 1}, "sain.result.Err.is_ok_and": {"tf": 1}, "sain.result.Err.is_err_and": {"tf": 1}, "sain.result.Err.unwrap_or_else": {"tf": 1}, "sain.result.Err.inspect": {"tf": 1}, "sain.result.Err.inspect_err": {"tf": 1}, "sain.result.Err.map": {"tf": 1}, "sain.result.Err.map_or": {"tf": 1}, "sain.result.Err.map_or_else": {"tf": 1}, "sain.result.Err.map_err": {"tf": 1}, "sain.sync.Once.get_or_with": {"tf": 1}, "sain.sync.AsyncOnce.get_or_with": {"tf": 1}}, "df": 57, "n": {"docs": {"sain.Iterator.map": {"tf": 1}, "sain.iter.Iterator.map": {"tf": 1}, "sain.macros.unsafe": {"tf": 1}}, "df": 3, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "t": {"docs": {"sain.option.Some.unwrap_or_else": {"tf": 1}}, "df": 1}, "u": {"docs": {"sain.option.Some.map_or_else": {"tf": 1}}, "df": 1}}}}}}, "[": {"docs": {}, "df": 0, "t": {"docs": {"sain.option.Some.map": {"tf": 1}, "sain.option.Some.map_or": {"tf": 1}, "sain.option.Some.map_or_else": {"tf": 1}, "sain.option.Some.filter": {"tf": 1}, "sain.option.Some.take_if": {"tf": 1}, "sain.option.Some.and_then": {"tf": 1}, "sain.option.Some.is_some_and": {"tf": 1}}, "df": 7}}}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sain.Iterator.filter": {"tf": 1}, "sain.iter.Iterator.filter": {"tf": 1}}, "df": 2}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"sain.Iterator.sort": {"tf": 1}, "sain.Ok.is_err": {"tf": 1}, "sain.Ok.is_err_and": {"tf": 1}, "sain.Err.is_ok": {"tf": 1}, "sain.Err.is_ok_and": {"tf": 1}, "sain.Vec.sort": {"tf": 1}, "sain.collections.Vec.sort": {"tf": 1}, "sain.collections.vec.Vec.sort": {"tf": 1}, "sain.iter.Iterator.sort": {"tf": 1}, "sain.iter.Empty.any": {"tf": 1}, "sain.iter.Empty.all": {"tf": 1}, "sain.result.Ok.is_err": {"tf": 1}, "sain.result.Ok.is_err_and": {"tf": 1}, "sain.result.Err.is_ok": {"tf": 1}, "sain.result.Err.is_ok_and": {"tf": 1}}, "df": 15}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {"sain.Iterator.for_each": {"tf": 1}, "sain.Iterator.async_for_each": {"tf": 1}, "sain.iter.Iterator.for_each": {"tf": 1}, "sain.iter.Iterator.async_for_each": {"tf": 1}}, "df": 4}}, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"sain.Iterator.async_for_each": {"tf": 1}, "sain.futures.spawn": {"tf": 1}, "sain.iter.Iterator.async_for_each": {"tf": 1}}, "df": 3}}}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"sain.Box.__init__": {"tf": 1}, "sain.Box.remaining": {"tf": 1}, "sain.boxed.Box.__init__": {"tf": 1}, "sain.boxed.Box.remaining": {"tf": 1}, "sain.futures.spawn": {"tf": 1}}, "df": 5}}}}}, "k": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "s": {"docs": {"sain.Default.__init__": {"tf": 1}, "sain.From.__init__": {"tf": 1}, "sain.TryFrom.__init__": {"tf": 1}, "sain.Into.__init__": {"tf": 1}, "sain.TryInto.__init__": {"tf": 1}, "sain.convert.From.__init__": {"tf": 1}, "sain.convert.TryFrom.__init__": {"tf": 1}, "sain.convert.Into.__init__": {"tf": 1}, "sain.convert.TryInto.__init__": {"tf": 1}, "sain.default.Default.__init__": {"tf": 1}}, "df": 10}}}}}, "e": {"docs": {}, "df": 0, "y": {"docs": {"sain.Iterator.sort": {"tf": 1}, "sain.Vec.sort": {"tf": 1}, "sain.collections.Vec.sort": {"tf": 1}, "sain.collections.vec.Vec.sort": {"tf": 1}, "sain.iter.Iterator.sort": {"tf": 1}}, "df": 5}}}, "s": {"docs": {"sain.collections.Bytes.from_str": {"tf": 1}, "sain.collections.Bytes.put_str": {"tf": 1}, "sain.collections.buf.Bytes.from_str": {"tf": 1}, "sain.collections.buf.Bytes.put_str": {"tf": 1}}, "df": 4, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"sain.Some.default": {"tf": 1}, "sain.Some.map": {"tf": 1}, "sain.Some.filter": {"tf": 1}, "sain.Some.take": {"tf": 1}, "sain.Some.take_if": {"tf": 1}, "sain.Some.replace": {"tf": 1}, "sain.Some.and_ok": {"tf": 1.4142135623730951}, "sain.Some.and_then": {"tf": 1.4142135623730951}, "sain.Some.iter": {"tf": 1}, "sain.Some.as_ref": {"tf": 1.4142135623730951}, "sain.Some.as_mut": {"tf": 1.4142135623730951}, "sain.Iterator.default": {"tf": 1}, "sain.Iterator.to_vec": {"tf": 1}, "sain.Iterator.cloned": {"tf": 1}, "sain.Iterator.copied": {"tf": 1}, "sain.Iterator.map": {"tf": 1}, "sain.Iterator.filter": {"tf": 1}, "sain.Iterator.take": {"tf": 1}, "sain.Iterator.skip": {"tf": 1}, "sain.Iterator.enumerate": {"tf": 1}, "sain.Iterator.take_while": {"tf": 1}, "sain.Iterator.drop_while": {"tf": 1}, "sain.Iterator.zip": {"tf": 1}, "sain.Iterator.sort": {"tf": 1}, "sain.Iterator.reversed": {"tf": 1}, "sain.Iterator.union": {"tf": 1}, "sain.Iterator.async_for_each": {"tf": 1.7320508075688772}, "sain.Ok.ok": {"tf": 1}, "sain.Ok.err": {"tf": 1}, "sain.Ok.map": {"tf": 1}, "sain.Ok.iter": {"tf": 1}, "sain.Err.ok": {"tf": 1}, "sain.Err.err": {"tf": 1}, "sain.Err.map_err": {"tf": 1}, "sain.Err.iter": {"tf": 1}, "sain.Vec.iter": {"tf": 1}, "sain.Vec.split_off": {"tf": 1}, "sain.Vec.split_first": {"tf": 1}, "sain.Vec.first": {"tf": 1}, "sain.Vec.get": {"tf": 1}, "sain.Vec.pop": {"tf": 1}, "sain.Vec.copy": {"tf": 1}, "sain.Error.source": {"tf": 1.4142135623730951}, "sain.Box.get": {"tf": 1}, "sain.TryFrom.try_from": {"tf": 1.4142135623730951}, "sain.TryInto.try_into": {"tf": 1.4142135623730951}, "sain.boxed.Box.get": {"tf": 1}, "sain.collections.Vec.iter": {"tf": 1}, "sain.collections.Vec.split_off": {"tf": 1}, "sain.collections.Vec.split_first": {"tf": 1}, "sain.collections.Vec.first": {"tf": 1}, "sain.collections.Vec.get": {"tf": 1}, "sain.collections.Vec.pop": {"tf": 1}, "sain.collections.Vec.copy": {"tf": 1}, "sain.collections.Bytes.try_to_str": {"tf": 1.4142135623730951}, "sain.collections.Bytes.leak": {"tf": 1}, "sain.collections.Bytes.iter": {"tf": 1}, "sain.collections.Bytes.pop": {"tf": 1}, "sain.collections.buf.Bytes.try_to_str": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.leak": {"tf": 1}, "sain.collections.buf.Bytes.iter": {"tf": 1}, "sain.collections.buf.Bytes.pop": {"tf": 1}, "sain.collections.vec.Vec.iter": {"tf": 1}, "sain.collections.vec.Vec.split_off": {"tf": 1}, "sain.collections.vec.Vec.split_first": {"tf": 1}, "sain.collections.vec.Vec.first": {"tf": 1}, "sain.collections.vec.Vec.get": {"tf": 1}, "sain.collections.vec.Vec.pop": {"tf": 1}, "sain.collections.vec.Vec.copy": {"tf": 1}, "sain.collections.vec.from_args": {"tf": 1}, "sain.convert.TryFrom.try_from": {"tf": 1.4142135623730951}, "sain.convert.TryInto.try_into": {"tf": 1.4142135623730951}, "sain.error.Error.source": {"tf": 1.4142135623730951}, "sain.futures.spawn": {"tf": 1.7320508075688772}, "sain.iter.Iterator.default": {"tf": 1}, "sain.iter.Iterator.to_vec": {"tf": 1}, "sain.iter.Iterator.cloned": {"tf": 1}, "sain.iter.Iterator.copied": {"tf": 1}, "sain.iter.Iterator.map": {"tf": 1}, "sain.iter.Iterator.filter": {"tf": 1}, "sain.iter.Iterator.take": {"tf": 1}, "sain.iter.Iterator.skip": {"tf": 1}, "sain.iter.Iterator.enumerate": {"tf": 1}, "sain.iter.Iterator.take_while": {"tf": 1}, "sain.iter.Iterator.drop_while": {"tf": 1}, "sain.iter.Iterator.zip": {"tf": 1}, "sain.iter.Iterator.sort": {"tf": 1}, "sain.iter.Iterator.reversed": {"tf": 1}, "sain.iter.Iterator.union": {"tf": 1}, "sain.iter.Iterator.async_for_each": {"tf": 1.7320508075688772}, "sain.iter.Cloned.__init__": {"tf": 1}, "sain.iter.Copied.__init__": {"tf": 1}, "sain.iter.Take.__init__": {"tf": 1}, "sain.iter.Filter.__init__": {"tf": 1}, "sain.iter.Map.__init__": {"tf": 1}, "sain.iter.Skip.__init__": {"tf": 1}, "sain.iter.Enumerate.__init__": {"tf": 1}, "sain.iter.TakeWhile.__init__": {"tf": 1}, "sain.iter.DropWhile.__init__": {"tf": 1}, "sain.iter.into_iter": {"tf": 1}, "sain.iter.empty": {"tf": 1}, "sain.iter.once": {"tf": 1}, "sain.iter.repeat": {"tf": 1}, "sain.result.Ok.ok": {"tf": 1}, "sain.result.Ok.err": {"tf": 1}, "sain.result.Ok.map": {"tf": 1}, "sain.result.Ok.iter": {"tf": 1}, "sain.result.Err.ok": {"tf": 1}, "sain.result.Err.err": {"tf": 1}, "sain.result.Err.map_err": {"tf": 1}, "sain.result.Err.iter": {"tf": 1}, "sain.sync.Lazy.get": {"tf": 1}, "sain.sync.Once.get": {"tf": 1}, "sain.sync.Once.set": {"tf": 1.4142135623730951}, "sain.sync.LazyFuture.get": {"tf": 1}, "sain.sync.AsyncOnce.get": {"tf": 1}, "sain.sync.AsyncOnce.set": {"tf": 1.4142135623730951}}, "df": 117}}}, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"sain.Some.default": {"tf": 1}, "sain.Some.map": {"tf": 1}, "sain.Some.filter": {"tf": 1}, "sain.Some.take": {"tf": 1}, "sain.Some.take_if": {"tf": 1}, "sain.Some.replace": {"tf": 1}, "sain.Some.and_ok": {"tf": 1.4142135623730951}, "sain.Some.and_then": {"tf": 1.4142135623730951}, "sain.Some.as_ref": {"tf": 1}, "sain.Some.as_mut": {"tf": 1}, "sain.Ok.ok": {"tf": 1}, "sain.Ok.err": {"tf": 1}, "sain.Err.ok": {"tf": 1}, "sain.Err.err": {"tf": 1}, "sain.Vec.split_first": {"tf": 1}, "sain.Vec.first": {"tf": 1}, "sain.Vec.get": {"tf": 1}, "sain.Vec.pop": {"tf": 1}, "sain.Error.source": {"tf": 1}, "sain.Box.get": {"tf": 1}, "sain.boxed.Box.get": {"tf": 1}, "sain.collections.Vec.split_first": {"tf": 1}, "sain.collections.Vec.first": {"tf": 1}, "sain.collections.Vec.get": {"tf": 1}, "sain.collections.Vec.pop": {"tf": 1}, "sain.collections.Bytes.leak": {"tf": 1}, "sain.collections.Bytes.pop": {"tf": 1}, "sain.collections.buf.Bytes.leak": {"tf": 1}, "sain.collections.buf.Bytes.pop": {"tf": 1}, "sain.collections.vec.Vec.split_first": {"tf": 1}, "sain.collections.vec.Vec.first": {"tf": 1}, "sain.collections.vec.Vec.get": {"tf": 1}, "sain.collections.vec.Vec.pop": {"tf": 1}, "sain.error.Error.source": {"tf": 1}, "sain.result.Ok.ok": {"tf": 1}, "sain.result.Ok.err": {"tf": 1}, "sain.result.Err.ok": {"tf": 1}, "sain.result.Err.err": {"tf": 1}, "sain.sync.Lazy.get": {"tf": 1}, "sain.sync.Once.get": {"tf": 1}, "sain.sync.LazyFuture.get": {"tf": 1}, "sain.sync.AsyncOnce.get": {"tf": 1}}, "df": 42}}}, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "f": {"docs": {"sain.Some.into_inner": {"tf": 1}, "sain.Some.unwrap": {"tf": 1}, "sain.Some.unwrap_or": {"tf": 1}, "sain.Some.unwrap_or_else": {"tf": 1}, "sain.Some.unwrap_unchecked": {"tf": 1}, "sain.Some.expect": {"tf": 1}, "sain.Some.map": {"tf": 1}, "sain.Some.map_or": {"tf": 1}, "sain.Some.map_or_else": {"tf": 1}, "sain.Some.filter": {"tf": 1}, "sain.Some.take": {"tf": 1}, "sain.Some.take_if": {"tf": 1}, "sain.Some.replace": {"tf": 1}, "sain.Some.and_ok": {"tf": 1}, "sain.Some.and_then": {"tf": 1}, "sain.Some.iter": {"tf": 1}, "sain.Some.as_ref": {"tf": 1}, "sain.Some.as_mut": {"tf": 1}, "sain.Some.is_some": {"tf": 1}, "sain.Some.is_some_and": {"tf": 1}, "sain.Some.is_none": {"tf": 1}, "sain.Iter.clone": {"tf": 1.4142135623730951}, "sain.Iterator.collect": {"tf": 1}, "sain.Iterator.to_vec": {"tf": 1}, "sain.Iterator.sink": {"tf": 1}, "sain.Iterator.raw_parts": {"tf": 1}, "sain.Iterator.next": {"tf": 1}, "sain.Iterator.cloned": {"tf": 1}, "sain.Iterator.copied": {"tf": 1}, "sain.Iterator.map": {"tf": 1}, "sain.Iterator.filter": {"tf": 1}, "sain.Iterator.take": {"tf": 1}, "sain.Iterator.skip": {"tf": 1}, "sain.Iterator.enumerate": {"tf": 1}, "sain.Iterator.take_while": {"tf": 1}, "sain.Iterator.drop_while": {"tf": 1}, "sain.Iterator.all": {"tf": 1}, "sain.Iterator.any": {"tf": 1}, "sain.Iterator.zip": {"tf": 1}, "sain.Iterator.sort": {"tf": 1}, "sain.Iterator.reversed": {"tf": 1}, "sain.Iterator.union": {"tf": 1}, "sain.Iterator.first": {"tf": 1}, "sain.Iterator.last": {"tf": 1}, "sain.Iterator.count": {"tf": 1}, "sain.Iterator.for_each": {"tf": 1}, "sain.Iterator.async_for_each": {"tf": 1}, "sain.Ok.is_ok": {"tf": 1}, "sain.Ok.is_ok_and": {"tf": 1}, "sain.Ok.is_err": {"tf": 1}, "sain.Ok.is_err_and": {"tf": 1}, "sain.Ok.expect": {"tf": 1}, "sain.Ok.unwrap": {"tf": 1}, "sain.Ok.unwrap_or": {"tf": 1}, "sain.Ok.unwrap_or_else": {"tf": 1}, "sain.Ok.unwrap_err": {"tf": 1}, "sain.Ok.ok": {"tf": 1}, "sain.Ok.err": {"tf": 1}, "sain.Ok.inspect": {"tf": 1}, "sain.Ok.inspect_err": {"tf": 1}, "sain.Ok.map": {"tf": 1}, "sain.Ok.map_or": {"tf": 1}, "sain.Ok.map_or_else": {"tf": 1}, "sain.Ok.map_err": {"tf": 1.4142135623730951}, "sain.Ok.iter": {"tf": 1}, "sain.Err.is_ok": {"tf": 1}, "sain.Err.is_ok_and": {"tf": 1}, "sain.Err.is_err": {"tf": 1}, "sain.Err.is_err_and": {"tf": 1}, "sain.Err.expect": {"tf": 1}, "sain.Err.expect_err": {"tf": 1}, "sain.Err.unwrap": {"tf": 1}, "sain.Err.unwrap_or": {"tf": 1}, "sain.Err.unwrap_or_else": {"tf": 1}, "sain.Err.unwrap_err": {"tf": 1}, "sain.Err.inspect": {"tf": 1}, "sain.Err.inspect_err": {"tf": 1}, "sain.Err.ok": {"tf": 1}, "sain.Err.err": {"tf": 1}, "sain.Err.map": {"tf": 1.4142135623730951}, "sain.Err.map_or": {"tf": 1}, "sain.Err.map_or_else": {"tf": 1}, "sain.Err.map_err": {"tf": 1}, "sain.Err.iter": {"tf": 1}, "sain.Vec.with_capacity": {"tf": 1}, "sain.Vec.as_ref": {"tf": 1}, "sain.Vec.len": {"tf": 1}, "sain.Vec.capacity": {"tf": 1}, "sain.Vec.iter": {"tf": 1}, "sain.Vec.is_empty": {"tf": 1}, "sain.Vec.split_off": {"tf": 1}, "sain.Vec.split_first": {"tf": 1}, "sain.Vec.first": {"tf": 1}, "sain.Vec.truncate": {"tf": 1}, "sain.Vec.retain": {"tf": 1}, "sain.Vec.swap_remove": {"tf": 1}, "sain.Vec.push": {"tf": 1}, "sain.Vec.push_within_capacity": {"tf": 1}, "sain.Vec.reserve": {"tf": 1}, "sain.Vec.append": {"tf": 1}, "sain.Vec.get": {"tf": 1}, "sain.Vec.insert": {"tf": 1}, "sain.Vec.pop": {"tf": 1}, "sain.Vec.remove": {"tf": 1}, "sain.Vec.extend": {"tf": 1}, "sain.Vec.copy": {"tf": 1}, "sain.Vec.clear": {"tf": 1}, "sain.Vec.sort": {"tf": 1}, "sain.Vec.index": {"tf": 1}, "sain.Vec.count": {"tf": 1}, "sain.Error.source": {"tf": 1}, "sain.Error.description": {"tf": 1}, "sain.Box.on_expire": {"tf": 1.4142135623730951}, "sain.Box.remaining": {"tf": 1}, "sain.Box.get": {"tf": 1}, "sain.MaybeUninit.uninit": {"tf": 1}, "sain.MaybeUninit.uninit_array": {"tf": 1}, "sain.MaybeUninit.assume_init": {"tf": 1}, "sain.MaybeUninit.write": {"tf": 1}, "sain.From.from_t": {"tf": 1}, "sain.TryFrom.try_from": {"tf": 1}, "sain.Into.into": {"tf": 1}, "sain.TryInto.try_into": {"tf": 1}, "sain.boxed.Box.on_expire": {"tf": 1.4142135623730951}, "sain.boxed.Box.remaining": {"tf": 1}, "sain.boxed.Box.get": {"tf": 1}, "sain.collections.Vec.with_capacity": {"tf": 1}, "sain.collections.Vec.as_ref": {"tf": 1}, "sain.collections.Vec.len": {"tf": 1}, "sain.collections.Vec.capacity": {"tf": 1}, "sain.collections.Vec.iter": {"tf": 1}, "sain.collections.Vec.is_empty": {"tf": 1}, "sain.collections.Vec.split_off": {"tf": 1}, "sain.collections.Vec.split_first": {"tf": 1}, "sain.collections.Vec.first": {"tf": 1}, "sain.collections.Vec.truncate": {"tf": 1}, "sain.collections.Vec.retain": {"tf": 1}, "sain.collections.Vec.swap_remove": {"tf": 1}, "sain.collections.Vec.push": {"tf": 1}, "sain.collections.Vec.push_within_capacity": {"tf": 1}, "sain.collections.Vec.reserve": {"tf": 1}, "sain.collections.Vec.append": {"tf": 1}, "sain.collections.Vec.get": {"tf": 1}, "sain.collections.Vec.insert": {"tf": 1}, "sain.collections.Vec.pop": {"tf": 1}, "sain.collections.Vec.remove": {"tf": 1}, "sain.collections.Vec.extend": {"tf": 1}, "sain.collections.Vec.copy": {"tf": 1}, "sain.collections.Vec.clear": {"tf": 1}, "sain.collections.Vec.sort": {"tf": 1}, "sain.collections.Vec.index": {"tf": 1}, "sain.collections.Vec.count": {"tf": 1}, "sain.collections.Bytes.from_str": {"tf": 1}, "sain.collections.Bytes.from_static": {"tf": 1}, "sain.collections.Bytes.from_bytes": {"tf": 1}, "sain.collections.Bytes.from_raw": {"tf": 1}, "sain.collections.Bytes.try_to_str": {"tf": 1}, "sain.collections.Bytes.to_str": {"tf": 1}, "sain.collections.Bytes.leak": {"tf": 1}, "sain.collections.Bytes.as_bytes": {"tf": 1}, "sain.collections.Bytes.as_ref": {"tf": 1}, "sain.collections.Bytes.as_mut": {"tf": 1}, "sain.collections.Bytes.raw_parts": {"tf": 1}, "sain.collections.Bytes.put": {"tf": 1}, "sain.collections.Bytes.put_raw": {"tf": 1}, "sain.collections.Bytes.put_bytes": {"tf": 1}, "sain.collections.Bytes.put_str": {"tf": 1}, "sain.collections.Bytes.len": {"tf": 1}, "sain.collections.Bytes.size": {"tf": 1}, "sain.collections.Bytes.iter": {"tf": 1}, "sain.collections.Bytes.is_empty": {"tf": 1}, "sain.collections.Bytes.copy": {"tf": 1.4142135623730951}, "sain.collections.Bytes.clear": {"tf": 1}, "sain.collections.Bytes.index": {"tf": 1}, "sain.collections.Bytes.count": {"tf": 1}, "sain.collections.Bytes.insert": {"tf": 1}, "sain.collections.Bytes.pop": {"tf": 1}, "sain.collections.buf.Bytes.from_str": {"tf": 1}, "sain.collections.buf.Bytes.from_static": {"tf": 1}, "sain.collections.buf.Bytes.from_bytes": {"tf": 1}, "sain.collections.buf.Bytes.from_raw": {"tf": 1}, "sain.collections.buf.Bytes.try_to_str": {"tf": 1}, "sain.collections.buf.Bytes.to_str": {"tf": 1}, "sain.collections.buf.Bytes.leak": {"tf": 1}, "sain.collections.buf.Bytes.as_bytes": {"tf": 1}, "sain.collections.buf.Bytes.as_ref": {"tf": 1}, "sain.collections.buf.Bytes.as_mut": {"tf": 1}, "sain.collections.buf.Bytes.raw_parts": {"tf": 1}, "sain.collections.buf.Bytes.put": {"tf": 1}, "sain.collections.buf.Bytes.put_raw": {"tf": 1}, "sain.collections.buf.Bytes.put_bytes": {"tf": 1}, "sain.collections.buf.Bytes.put_str": {"tf": 1}, "sain.collections.buf.Bytes.len": {"tf": 1}, "sain.collections.buf.Bytes.size": {"tf": 1}, "sain.collections.buf.Bytes.iter": {"tf": 1}, "sain.collections.buf.Bytes.is_empty": {"tf": 1}, "sain.collections.buf.Bytes.copy": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.clear": {"tf": 1}, "sain.collections.buf.Bytes.index": {"tf": 1}, "sain.collections.buf.Bytes.count": {"tf": 1}, "sain.collections.buf.Bytes.insert": {"tf": 1}, "sain.collections.buf.Bytes.pop": {"tf": 1}, "sain.collections.vec.Vec.with_capacity": {"tf": 1}, "sain.collections.vec.Vec.as_ref": {"tf": 1}, "sain.collections.vec.Vec.len": {"tf": 1}, "sain.collections.vec.Vec.capacity": {"tf": 1}, "sain.collections.vec.Vec.iter": {"tf": 1}, "sain.collections.vec.Vec.is_empty": {"tf": 1}, "sain.collections.vec.Vec.split_off": {"tf": 1}, "sain.collections.vec.Vec.split_first": {"tf": 1}, "sain.collections.vec.Vec.first": {"tf": 1}, "sain.collections.vec.Vec.truncate": {"tf": 1}, "sain.collections.vec.Vec.retain": {"tf": 1}, "sain.collections.vec.Vec.swap_remove": {"tf": 1}, "sain.collections.vec.Vec.push": {"tf": 1}, "sain.collections.vec.Vec.push_within_capacity": {"tf": 1}, "sain.collections.vec.Vec.reserve": {"tf": 1}, "sain.collections.vec.Vec.append": {"tf": 1}, "sain.collections.vec.Vec.get": {"tf": 1}, "sain.collections.vec.Vec.insert": {"tf": 1}, "sain.collections.vec.Vec.pop": {"tf": 1}, "sain.collections.vec.Vec.remove": {"tf": 1}, "sain.collections.vec.Vec.extend": {"tf": 1}, "sain.collections.vec.Vec.copy": {"tf": 1}, "sain.collections.vec.Vec.clear": {"tf": 1}, "sain.collections.vec.Vec.sort": {"tf": 1}, "sain.collections.vec.Vec.index": {"tf": 1}, "sain.collections.vec.Vec.count": {"tf": 1}, "sain.convert.From.from_t": {"tf": 1}, "sain.convert.TryFrom.try_from": {"tf": 1}, "sain.convert.Into.into": {"tf": 1}, "sain.convert.TryInto.try_into": {"tf": 1}, "sain.error.Error.source": {"tf": 1}, "sain.error.Error.description": {"tf": 1}, "sain.iter.Iter.clone": {"tf": 1.4142135623730951}, "sain.iter.Iterator.collect": {"tf": 1}, "sain.iter.Iterator.to_vec": {"tf": 1}, "sain.iter.Iterator.sink": {"tf": 1}, "sain.iter.Iterator.raw_parts": {"tf": 1}, "sain.iter.Iterator.next": {"tf": 1}, "sain.iter.Iterator.cloned": {"tf": 1}, "sain.iter.Iterator.copied": {"tf": 1}, "sain.iter.Iterator.map": {"tf": 1}, "sain.iter.Iterator.filter": {"tf": 1}, "sain.iter.Iterator.take": {"tf": 1}, "sain.iter.Iterator.skip": {"tf": 1}, "sain.iter.Iterator.enumerate": {"tf": 1}, "sain.iter.Iterator.take_while": {"tf": 1}, "sain.iter.Iterator.drop_while": {"tf": 1}, "sain.iter.Iterator.all": {"tf": 1}, "sain.iter.Iterator.any": {"tf": 1}, "sain.iter.Iterator.zip": {"tf": 1}, "sain.iter.Iterator.sort": {"tf": 1}, "sain.iter.Iterator.reversed": {"tf": 1}, "sain.iter.Iterator.union": {"tf": 1}, "sain.iter.Iterator.first": {"tf": 1}, "sain.iter.Iterator.last": {"tf": 1}, "sain.iter.Iterator.count": {"tf": 1}, "sain.iter.Iterator.for_each": {"tf": 1}, "sain.iter.Iterator.async_for_each": {"tf": 1}, "sain.iter.Empty.next": {"tf": 1}, "sain.iter.Empty.count": {"tf": 1}, "sain.iter.Empty.any": {"tf": 1}, "sain.iter.Empty.all": {"tf": 1}, "sain.option.Some.into_inner": {"tf": 1}, "sain.option.Some.unwrap": {"tf": 1}, "sain.option.Some.unwrap_or": {"tf": 1}, "sain.option.Some.unwrap_or_else": {"tf": 1}, "sain.option.Some.unwrap_unchecked": {"tf": 1}, "sain.option.Some.expect": {"tf": 1}, "sain.option.Some.map": {"tf": 1}, "sain.option.Some.map_or": {"tf": 1}, "sain.option.Some.map_or_else": {"tf": 1}, "sain.option.Some.filter": {"tf": 1}, "sain.option.Some.take": {"tf": 1}, "sain.option.Some.take_if": {"tf": 1}, "sain.option.Some.replace": {"tf": 1}, "sain.option.Some.and_ok": {"tf": 1}, "sain.option.Some.and_then": {"tf": 1}, "sain.option.Some.iter": {"tf": 1}, "sain.option.Some.as_ref": {"tf": 1}, "sain.option.Some.as_mut": {"tf": 1}, "sain.option.Some.is_some": {"tf": 1}, "sain.option.Some.is_some_and": {"tf": 1}, "sain.option.Some.is_none": {"tf": 1}, "sain.result.Ok.is_ok": {"tf": 1}, "sain.result.Ok.is_ok_and": {"tf": 1}, "sain.result.Ok.is_err": {"tf": 1}, "sain.result.Ok.is_err_and": {"tf": 1}, "sain.result.Ok.expect": {"tf": 1}, "sain.result.Ok.unwrap": {"tf": 1}, "sain.result.Ok.unwrap_or": {"tf": 1}, "sain.result.Ok.unwrap_or_else": {"tf": 1}, "sain.result.Ok.unwrap_err": {"tf": 1}, "sain.result.Ok.ok": {"tf": 1}, "sain.result.Ok.err": {"tf": 1}, "sain.result.Ok.inspect": {"tf": 1}, "sain.result.Ok.inspect_err": {"tf": 1}, "sain.result.Ok.map": {"tf": 1}, "sain.result.Ok.map_or": {"tf": 1}, "sain.result.Ok.map_or_else": {"tf": 1}, "sain.result.Ok.map_err": {"tf": 1.4142135623730951}, "sain.result.Ok.iter": {"tf": 1}, "sain.result.Err.is_ok": {"tf": 1}, "sain.result.Err.is_ok_and": {"tf": 1}, "sain.result.Err.is_err": {"tf": 1}, "sain.result.Err.is_err_and": {"tf": 1}, "sain.result.Err.expect": {"tf": 1}, "sain.result.Err.expect_err": {"tf": 1}, "sain.result.Err.unwrap": {"tf": 1}, "sain.result.Err.unwrap_or": {"tf": 1}, "sain.result.Err.unwrap_or_else": {"tf": 1}, "sain.result.Err.unwrap_err": {"tf": 1}, "sain.result.Err.inspect": {"tf": 1}, "sain.result.Err.inspect_err": {"tf": 1}, "sain.result.Err.ok": {"tf": 1}, "sain.result.Err.err": {"tf": 1}, "sain.result.Err.map": {"tf": 1.4142135623730951}, "sain.result.Err.map_or": {"tf": 1}, "sain.result.Err.map_or_else": {"tf": 1}, "sain.result.Err.map_err": {"tf": 1}, "sain.result.Err.iter": {"tf": 1}, "sain.sync.Lazy.get": {"tf": 1}, "sain.sync.Lazy.get_unchecked": {"tf": 1}, "sain.sync.Lazy.set": {"tf": 1}, "sain.sync.Once.get": {"tf": 1}, "sain.sync.Once.get_unchecked": {"tf": 1}, "sain.sync.Once.set": {"tf": 1}, "sain.sync.Once.clear": {"tf": 1}, "sain.sync.Once.get_or": {"tf": 1}, "sain.sync.Once.get_or_with": {"tf": 1}, "sain.sync.Once.into_inner": {"tf": 1}, "sain.sync.LazyFuture.get": {"tf": 1}, "sain.sync.LazyFuture.set": {"tf": 1}, "sain.sync.AsyncOnce.get": {"tf": 1}, "sain.sync.AsyncOnce.get_unchecked": {"tf": 1}, "sain.sync.AsyncOnce.set": {"tf": 1}, "sain.sync.AsyncOnce.clear": {"tf": 1}, "sain.sync.AsyncOnce.get_or": {"tf": 1}, "sain.sync.AsyncOnce.get_or_with": {"tf": 1}}, "df": 340}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sain.Iterator.collect": {"tf": 1.4142135623730951}, "sain.Iterator.async_for_each": {"tf": 1}, "sain.Vec.split_first": {"tf": 1}, "sain.MaybeUninit.uninit_array": {"tf": 1}, "sain.collections.Vec.split_first": {"tf": 1}, "sain.collections.Bytes.as_ref": {"tf": 1}, "sain.collections.buf.Bytes.as_ref": {"tf": 1}, "sain.collections.vec.Vec.split_first": {"tf": 1}, "sain.futures.spawn": {"tf": 1}, "sain.iter.Iterator.collect": {"tf": 1.4142135623730951}, "sain.iter.Iterator.async_for_each": {"tf": 1}}, "df": 11}}}}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {"sain.Some.expect": {"tf": 1}, "sain.Ok.expect": {"tf": 1}, "sain.Err.expect": {"tf": 1}, "sain.Error.__init__": {"tf": 1}, "sain.Error.description": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}, "sain.collections.Bytes.from_str": {"tf": 1}, "sain.collections.Bytes.try_to_str": {"tf": 1}, "sain.collections.Bytes.to_str": {"tf": 1}, "sain.collections.Bytes.put_str": {"tf": 1}, "sain.collections.buf.Bytes.from_str": {"tf": 1}, "sain.collections.buf.Bytes.try_to_str": {"tf": 1}, "sain.collections.buf.Bytes.to_str": {"tf": 1}, "sain.collections.buf.Bytes.put_str": {"tf": 1}, "sain.error.Error.__init__": {"tf": 1}, "sain.error.Error.description": {"tf": 1}, "sain.option.Some.expect": {"tf": 1}, "sain.result.Ok.expect": {"tf": 1}, "sain.result.Err.expect": {"tf": 1}}, "df": 20, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {"sain.collections.Bytes.from_raw": {"tf": 1}, "sain.collections.Bytes.put_raw": {"tf": 1}, "sain.collections.buf.Bytes.from_raw": {"tf": 1}, "sain.collections.buf.Bytes.put_raw": {"tf": 1}}, "df": 4}}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"sain.Iterator.enumerate": {"tf": 1}, "sain.Vec.index": {"tf": 1}, "sain.collections.Vec.index": {"tf": 1}, "sain.collections.Bytes.index": {"tf": 1}, "sain.collections.buf.Bytes.index": {"tf": 1}, "sain.collections.vec.Vec.index": {"tf": 1}, "sain.iter.Iterator.enumerate": {"tf": 1}, "sain.iter.Enumerate.__init__": {"tf": 1}}, "df": 8}}}, "o": {"docs": {}, "df": 0, "p": {"docs": {"sain.collections.Bytes.index": {"tf": 1}, "sain.collections.buf.Bytes.index": {"tf": 1}}, "df": 2}}}, "k": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {"sain.Iterator.skip": {"tf": 1}, "sain.iter.Iterator.skip": {"tf": 1}}, "df": 2}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.Iterator.sort": {"tf": 1}, "sain.Vec.sort": {"tf": 1}, "sain.collections.Vec.sort": {"tf": 1}, "sain.collections.vec.Vec.sort": {"tf": 1}, "sain.iter.Iterator.sort": {"tf": 1}}, "df": 5}}}}}}}}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {"sain.Vec.index": {"tf": 1}, "sain.collections.Vec.index": {"tf": 1}, "sain.collections.vec.Vec.index": {"tf": 1}}, "df": 3}}}}}}}}}}}}, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"sain.Iterator.async_for_each": {"tf": 1}, "sain.futures.spawn": {"tf": 1}, "sain.iter.Iterator.async_for_each": {"tf": 1}}, "df": 3}}}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sain.deprecated": {"tf": 1}, "sain.macros.deprecated": {"tf": 1}}, "df": 2}}}, "z": {"docs": {}, "df": 0, "e": {"docs": {"sain.Vec.truncate": {"tf": 1}, "sain.collections.Vec.truncate": {"tf": 1}, "sain.collections.vec.Vec.truncate": {"tf": 1}}, "df": 3}}}, "y": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {"sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 2}}}}}, "r": {"docs": {}, "df": 0, "c": {"docs": {"sain.collections.Bytes.put": {"tf": 1}, "sain.collections.Bytes.put_raw": {"tf": 1}, "sain.collections.Bytes.put_bytes": {"tf": 1}, "sain.collections.buf.Bytes.put": {"tf": 1}, "sain.collections.buf.Bytes.put_raw": {"tf": 1}, "sain.collections.buf.Bytes.put_bytes": {"tf": 1}}, "df": 6}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {"sain.option.Some.as_ref": {"tf": 1}, "sain.option.Some.as_mut": {"tf": 1}}, "df": 2, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"sain.Some.as_mut": {"tf": 1}}, "df": 1, "[": {"docs": {}, "df": 0, "t": {"docs": {"sain.option.Some.as_mut": {"tf": 1}}, "df": 1}}}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"sain.Iterator.sort": {"tf": 1}, "sain.Vec.sort": {"tf": 1}, "sain.collections.Vec.sort": {"tf": 1}, "sain.collections.vec.Vec.sort": {"tf": 1}, "sain.iter.Iterator.sort": {"tf": 1}}, "df": 5}}}}}, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"sain.Iterator.async_for_each": {"tf": 1.4142135623730951}, "sain.Ok.map": {"tf": 1}, "sain.Err.map_err": {"tf": 1}, "sain.TryFrom.try_from": {"tf": 1.4142135623730951}, "sain.TryInto.try_into": {"tf": 1.4142135623730951}, "sain.collections.Bytes.try_to_str": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.try_to_str": {"tf": 1.4142135623730951}, "sain.convert.TryFrom.try_from": {"tf": 1.4142135623730951}, "sain.convert.TryInto.try_into": {"tf": 1.4142135623730951}, "sain.futures.spawn": {"tf": 1.4142135623730951}, "sain.iter.Iterator.async_for_each": {"tf": 1.4142135623730951}, "sain.result.Ok.map": {"tf": 1}, "sain.result.Err.map_err": {"tf": 1}, "sain.sync.Once.set": {"tf": 1.4142135623730951}, "sain.sync.AsyncOnce.set": {"tf": 1.4142135623730951}}, "df": 15, "[": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"sain.Vec.push_within_capacity": {"tf": 1}, "sain.collections.Vec.push_within_capacity": {"tf": 1}, "sain.collections.vec.Vec.push_within_capacity": {"tf": 1}}, "df": 3}}}}}}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.deprecated": {"tf": 1}, "sain.macros.deprecated": {"tf": 1}}, "df": 2}}}}}, "a": {"docs": {}, "df": 0, "d": {"docs": {"sain.doc": {"tf": 1}, "sain.macros.doc": {"tf": 1}}, "df": 2}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 2}}}}}}}, "a": {"docs": {}, "df": 0, "w": {"docs": {"sain.collections.Bytes.from_raw": {"tf": 1}, "sain.collections.buf.Bytes.from_raw": {"tf": 1}}, "df": 2}}}, "e": {"docs": {"sain.Ok.unwrap_or_else": {"tf": 1}, "sain.Ok.inspect_err": {"tf": 1}, "sain.Ok.map_or_else": {"tf": 1}, "sain.Ok.map_err": {"tf": 1}, "sain.Err.__init__": {"tf": 1}, "sain.Err.is_ok_and": {"tf": 1}, "sain.Err.is_err_and": {"tf": 1}, "sain.Err.expect_err": {"tf": 1}, "sain.Err.unwrap_or_else": {"tf": 1}, "sain.Err.unwrap_err": {"tf": 1}, "sain.Err.inspect_err": {"tf": 1}, "sain.Err.err": {"tf": 1}, "sain.Err.map": {"tf": 1}, "sain.Err.map_or": {"tf": 1}, "sain.Err.map_or_else": {"tf": 1}, "sain.Err.map_err": {"tf": 1}, "sain.TryFrom.try_from": {"tf": 1}, "sain.TryInto.try_into": {"tf": 1}, "sain.convert.TryFrom.try_from": {"tf": 1}, "sain.convert.TryInto.try_into": {"tf": 1}, "sain.result.Ok.unwrap_or_else": {"tf": 1}, "sain.result.Ok.inspect_err": {"tf": 1}, "sain.result.Ok.map_or_else": {"tf": 1}, "sain.result.Ok.map_err": {"tf": 1}, "sain.result.Err.__init__": {"tf": 1}, "sain.result.Err.is_ok_and": {"tf": 1}, "sain.result.Err.is_err_and": {"tf": 1}, "sain.result.Err.expect_err": {"tf": 1}, "sain.result.Err.unwrap_or_else": {"tf": 1}, "sain.result.Err.unwrap_err": {"tf": 1}, "sain.result.Err.inspect_err": {"tf": 1}, "sain.result.Err.err": {"tf": 1}, "sain.result.Err.map": {"tf": 1}, "sain.result.Err.map_or": {"tf": 1}, "sain.result.Err.map_or_else": {"tf": 1}, "sain.result.Err.map_err": {"tf": 1}}, "df": 36, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"sain.Iterator.default": {"tf": 1}, "sain.iter.Iterator.default": {"tf": 1}, "sain.iter.empty": {"tf": 1}}, "df": 3}}}}, "n": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"sain.Iterator.enumerate": {"tf": 1}, "sain.iter.Iterator.enumerate": {"tf": 1}}, "df": 2}}}}}}}, "d": {"docs": {"sain.Vec.index": {"tf": 1}, "sain.collections.Vec.index": {"tf": 1}, "sain.collections.vec.Vec.index": {"tf": 1}}, "df": 3}}, "r": {"docs": {}, "df": 0, "r": {"docs": {"sain.Iterator.async_for_each": {"tf": 1}, "sain.Err.unwrap_or": {"tf": 1}, "sain.Err.map_err": {"tf": 1}, "sain.TryFrom.try_from": {"tf": 1}, "sain.TryInto.try_into": {"tf": 1}, "sain.collections.Bytes.try_to_str": {"tf": 1}, "sain.collections.buf.Bytes.try_to_str": {"tf": 1}, "sain.convert.TryFrom.try_from": {"tf": 1}, "sain.convert.TryInto.try_into": {"tf": 1}, "sain.futures.spawn": {"tf": 1}, "sain.iter.Iterator.async_for_each": {"tf": 1}, "sain.result.Err.unwrap_or": {"tf": 1}, "sain.result.Err.map_err": {"tf": 1}, "sain.sync.Once.set": {"tf": 1}, "sain.sync.AsyncOnce.set": {"tf": 1}}, "df": 15, "o": {"docs": {}, "df": 0, "r": {"docs": {"sain.Error.source": {"tf": 1.4142135623730951}, "sain.error.Error.source": {"tf": 1.4142135623730951}}, "df": 2}}}}, "x": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"sain.Box.__init__": {"tf": 1}, "sain.boxed.Box.__init__": {"tf": 1}}, "df": 2}}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {"sain.cfg.cfg_attr": {"tf": 2.23606797749979}, "sain.cfg.cfg": {"tf": 2.23606797749979}}, "df": 2}}}}}}, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"sain.iter.repeat": {"tf": 1}}, "df": 1, "s": {"docs": {"sain.collections.vec.from_args": {"tf": 1}}, "df": 1}}}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"sain.futures.loop": {"tf": 1}}, "df": 1}}}}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"sain.Iterator.raw_parts": {"tf": 1}, "sain.iter.Iterator.raw_parts": {"tf": 1}}, "df": 2}}}}}}}}, "t": {"docs": {"sain.Vec.index": {"tf": 1}, "sain.collections.Vec.index": {"tf": 1}, "sain.collections.vec.Vec.index": {"tf": 1}}, "df": 3}}, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"sain.deprecated": {"tf": 1}, "sain.macros.deprecated": {"tf": 1}}, "df": 2}}}}}}, "bases": {"root": {"docs": {"sain.Some": {"tf": 1}, "sain.option.Some": {"tf": 1}}, "df": 2, "t": {"docs": {"sain.Default": {"tf": 1}, "sain.From": {"tf": 1}, "sain.TryFrom": {"tf": 1}, "sain.convert.From": {"tf": 1}, "sain.convert.TryFrom": {"tf": 1}, "sain.default.Default": {"tf": 1}}, "df": 6, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.Default": {"tf": 1}, "sain.Some": {"tf": 1}, "sain.Iterator": {"tf": 1}, "sain.Ok": {"tf": 1}, "sain.Err": {"tf": 1}, "sain.Vec": {"tf": 1}, "sain.Error": {"tf": 1}, "sain.Box": {"tf": 1}, "sain.MaybeUninit": {"tf": 1}, "sain.From": {"tf": 1}, "sain.TryFrom": {"tf": 1}, "sain.Into": {"tf": 1}, "sain.TryInto": {"tf": 1}, "sain.boxed.Box": {"tf": 1}, "sain.collections.Vec": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1}, "sain.convert.From": {"tf": 1}, "sain.convert.TryFrom": {"tf": 1}, "sain.convert.Into": {"tf": 1}, "sain.convert.TryInto": {"tf": 1}, "sain.default.Default": {"tf": 1}, "sain.error.Error": {"tf": 1}, "sain.iter.Iterator": {"tf": 1}, "sain.iter.Cloned": {"tf": 1}, "sain.iter.Copied": {"tf": 1}, "sain.iter.Take": {"tf": 1}, "sain.iter.Filter": {"tf": 1}, "sain.iter.Map": {"tf": 1}, "sain.iter.Skip": {"tf": 1}, "sain.iter.Enumerate": {"tf": 1}, "sain.iter.TakeWhile": {"tf": 1}, "sain.iter.DropWhile": {"tf": 1}, "sain.iter.Empty": {"tf": 1}, "sain.option.Some": {"tf": 1}, "sain.result.Ok": {"tf": 1}, "sain.result.Err": {"tf": 1}, "sain.sync.Lazy": {"tf": 1}, "sain.sync.Once": {"tf": 1}, "sain.sync.LazyFuture": {"tf": 1}, "sain.sync.AsyncOnce": {"tf": 1}}, "df": 40}}}}}}, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"sain.Default": {"tf": 1}, "sain.Error": {"tf": 1}, "sain.From": {"tf": 1}, "sain.TryFrom": {"tf": 1}, "sain.convert.From": {"tf": 1}, "sain.convert.TryFrom": {"tf": 1}, "sain.default.Default": {"tf": 1}, "sain.error.Error": {"tf": 1}}, "df": 8, "[": {"docs": {}, "df": 0, "+": {"docs": {}, "df": 0, "t": {"docs": {"sain.Into": {"tf": 1}, "sain.convert.Into": {"tf": 1}}, "df": 2}}, "~": {"docs": {}, "df": 0, "t": {"docs": {"sain.TryInto": {"tf": 1}, "sain.convert.TryInto": {"tf": 1}}, "df": 2}}}}}}}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {"sain.Default": {"tf": 1}, "sain.From": {"tf": 1}, "sain.TryFrom": {"tf": 1}, "sain.convert.From": {"tf": 1}, "sain.convert.TryFrom": {"tf": 1}, "sain.default.Default": {"tf": 1}}, "df": 6, "v": {"docs": {"sain.Into": {"tf": 1}, "sain.convert.Into": {"tf": 1}}, "df": 2}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "~": {"docs": {}, "df": 0, "t": {"docs": {"sain.Some": {"tf": 1}, "sain.Ok": {"tf": 1}, "sain.Vec": {"tf": 1}, "sain.MaybeUninit": {"tf": 1}, "sain.collections.Vec": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1}, "sain.option.Some": {"tf": 1}, "sain.result.Ok": {"tf": 1}, "sain.sync.Lazy": {"tf": 1}, "sain.sync.Once": {"tf": 1}, "sain.sync.LazyFuture": {"tf": 1}, "sain.sync.AsyncOnce": {"tf": 1}}, "df": 12}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {"sain.Iterator": {"tf": 1}, "sain.iter.Iterator": {"tf": 1}, "sain.iter.Cloned": {"tf": 1}, "sain.iter.Copied": {"tf": 1}, "sain.iter.Take": {"tf": 1}, "sain.iter.Filter": {"tf": 1}, "sain.iter.Map": {"tf": 1}, "sain.iter.Skip": {"tf": 1}, "sain.iter.Enumerate": {"tf": 1}, "sain.iter.TakeWhile": {"tf": 1}, "sain.iter.DropWhile": {"tf": 1}, "sain.iter.Empty": {"tf": 1}}, "df": 12}}}}, "e": {"docs": {"sain.Err": {"tf": 1}, "sain.result.Err": {"tf": 1}}, "df": 2}}, "+": {"docs": {}, "df": 0, "t": {"docs": {"sain.Box": {"tf": 1}, "sain.boxed.Box": {"tf": 1}}, "df": 2}}}}}}}}}}, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"sain.Some": {"tf": 1}, "sain.Iter": {"tf": 1}, "sain.Iterator": {"tf": 1}, "sain.iter.Iter": {"tf": 1}, "sain.iter.Iterator": {"tf": 1}, "sain.iter.Cloned": {"tf": 1}, "sain.iter.Copied": {"tf": 1}, "sain.iter.Take": {"tf": 1}, "sain.iter.Filter": {"tf": 1}, "sain.iter.Map": {"tf": 1}, "sain.iter.Skip": {"tf": 1}, "sain.iter.Enumerate": {"tf": 1}, "sain.iter.TakeWhile": {"tf": 1}, "sain.iter.DropWhile": {"tf": 1}, "sain.iter.Empty": {"tf": 1}, "sain.option.Some": {"tf": 1}}, "df": 16}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"sain.Some": {"tf": 1}, "sain.Iterator": {"tf": 1}, "sain.iter.Iterator": {"tf": 1}, "sain.option.Some": {"tf": 1}}, "df": 4, "[": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {"sain.Some": {"tf": 1}, "sain.option.Some": {"tf": 1}}, "df": 2}}}}}}}}}}, "~": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {"sain.Iterator": {"tf": 1}, "sain.iter.Iterator": {"tf": 1}}, "df": 2}}}}}}}}}}}}}, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"sain.Some": {"tf": 1}, "sain.option.Some": {"tf": 1}}, "df": 2}}}}}}}}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {"sain.iter.Map": {"tf": 1}}, "df": 1}}}}}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sain.Iter": {"tf": 1}, "sain.iter.Iter": {"tf": 1}, "sain.iter.Cloned": {"tf": 1}, "sain.iter.Copied": {"tf": 1}, "sain.iter.Take": {"tf": 1}, "sain.iter.Filter": {"tf": 1}, "sain.iter.Map": {"tf": 1}, "sain.iter.Skip": {"tf": 1}, "sain.iter.Enumerate": {"tf": 1}, "sain.iter.TakeWhile": {"tf": 1}, "sain.iter.DropWhile": {"tf": 1}, "sain.iter.Empty": {"tf": 1}}, "df": 12, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "~": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {"sain.Iter": {"tf": 1}, "sain.iter.Iter": {"tf": 1}, "sain.iter.Cloned": {"tf": 1}, "sain.iter.Copied": {"tf": 1}, "sain.iter.Take": {"tf": 1}, "sain.iter.Filter": {"tf": 1}, "sain.iter.Map": {"tf": 1}, "sain.iter.Skip": {"tf": 1}, "sain.iter.TakeWhile": {"tf": 1}, "sain.iter.DropWhile": {"tf": 1}, "sain.iter.Empty": {"tf": 1}}, "df": 11}}}}}, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"sain.iter.Enumerate": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}, "m": {"docs": {"sain.iter.Enumerate": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "c": {"docs": {"sain.Iterator": {"tf": 1.4142135623730951}, "sain.iter.Iterator": {"tf": 1.4142135623730951}}, "df": 2}}}, "e": {"docs": {"sain.TryFrom": {"tf": 1}, "sain.TryInto": {"tf": 1}, "sain.convert.TryFrom": {"tf": 1}, "sain.convert.TryInto": {"tf": 1}}, "df": 4}}}, "doc": {"root": {"0": {"docs": {"sain.Some.map": {"tf": 1.7320508075688772}, "sain.Some.map_or": {"tf": 2}, "sain.Some.map_or_else": {"tf": 1}, "sain.Some.as_ref": {"tf": 1.7320508075688772}, "sain.Some.as_mut": {"tf": 1.4142135623730951}, "sain.Iter": {"tf": 1}, "sain.Iterator": {"tf": 1}, "sain.Iterator.collect": {"tf": 1.4142135623730951}, "sain.Iterator.to_vec": {"tf": 1.4142135623730951}, "sain.Iterator.raw_parts": {"tf": 1}, "sain.Iterator.copied": {"tf": 1}, "sain.Iterator.enumerate": {"tf": 1}, "sain.deprecated": {"tf": 2}, "sain.Ok.unwrap_or_else": {"tf": 1}, "sain.Ok.ok": {"tf": 1}, "sain.Ok.err": {"tf": 1}, "sain.Ok.map": {"tf": 1.4142135623730951}, "sain.Ok.map_err": {"tf": 1}, "sain.Ok.iter": {"tf": 1}, "sain.Vec": {"tf": 1}, "sain.Vec.with_capacity": {"tf": 1}, "sain.Vec.capacity": {"tf": 1}, "sain.Vec.get": {"tf": 1}, "sain.Vec.insert": {"tf": 1}, "sain.Vec.clear": {"tf": 1}, "sain.Vec.count": {"tf": 1}, "sain.Error": {"tf": 1}, "sain.MaybeUninit.assume_init": {"tf": 1}, "sain.collections.Vec": {"tf": 1}, "sain.collections.Vec.with_capacity": {"tf": 1}, "sain.collections.Vec.capacity": {"tf": 1}, "sain.collections.Vec.get": {"tf": 1}, "sain.collections.Vec.insert": {"tf": 1}, "sain.collections.Vec.clear": {"tf": 1}, "sain.collections.Vec.count": {"tf": 1}, "sain.collections.Bytes.from_raw": {"tf": 1}, "sain.collections.Bytes.try_to_str": {"tf": 1}, "sain.collections.Bytes.to_str": {"tf": 1}, "sain.collections.Bytes.put": {"tf": 1}, "sain.collections.Bytes.copy": {"tf": 1}, "sain.collections.buf.Bytes.from_raw": {"tf": 1}, "sain.collections.buf.Bytes.try_to_str": {"tf": 1}, "sain.collections.buf.Bytes.to_str": {"tf": 1}, "sain.collections.buf.Bytes.put": {"tf": 1}, "sain.collections.buf.Bytes.copy": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1}, "sain.collections.vec.Vec.with_capacity": {"tf": 1}, "sain.collections.vec.Vec.capacity": {"tf": 1}, "sain.collections.vec.Vec.get": {"tf": 1}, "sain.collections.vec.Vec.insert": {"tf": 1}, "sain.collections.vec.Vec.clear": {"tf": 1}, "sain.collections.vec.Vec.count": {"tf": 1}, "sain.convert": {"tf": 1.4142135623730951}, "sain.error.Error": {"tf": 1}, "sain.iter.Iter": {"tf": 1}, "sain.iter.Iterator": {"tf": 1}, "sain.iter.Iterator.collect": {"tf": 1.4142135623730951}, "sain.iter.Iterator.to_vec": {"tf": 1.4142135623730951}, "sain.iter.Iterator.raw_parts": {"tf": 1}, "sain.iter.Iterator.copied": {"tf": 1}, "sain.iter.Iterator.enumerate": {"tf": 1}, "sain.macros.deprecated": {"tf": 2}, "sain.option.Some.map": {"tf": 1.7320508075688772}, "sain.option.Some.map_or": {"tf": 2}, "sain.option.Some.map_or_else": {"tf": 1}, "sain.option.Some.as_ref": {"tf": 1.7320508075688772}, "sain.option.Some.as_mut": {"tf": 1.4142135623730951}, "sain.result.Ok.unwrap_or_else": {"tf": 1}, "sain.result.Ok.ok": {"tf": 1}, "sain.result.Ok.err": {"tf": 1}, "sain.result.Ok.map": {"tf": 1.4142135623730951}, "sain.result.Ok.map_err": {"tf": 1}, "sain.result.Ok.iter": {"tf": 1}, "sain.sync.Lazy.get_unchecked": {"tf": 1}, "sain.sync.Once.get_unchecked": {"tf": 1}, "sain.sync.Once.get_or_with": {"tf": 1}, "sain.sync.AsyncOnce.get_unchecked": {"tf": 1}, "sain.sync.AsyncOnce.get_or": {"tf": 1}, "sain.sync.AsyncOnce.get_or_with": {"tf": 1}}, "df": 79}, "1": {"0": {"0": {"docs": {"sain.Iterator": {"tf": 1}, "sain.collections.Bytes.put_bytes": {"tf": 1}, "sain.collections.buf.Bytes.put_bytes": {"tf": 1}, "sain.iter.Iterator": {"tf": 1}}, "df": 4}, "1": {"docs": {"sain.collections.Bytes": {"tf": 1}, "sain.collections.Bytes.as_ref": {"tf": 1}, "sain.collections.Bytes.as_mut": {"tf": 1}, "sain.collections.buf.Bytes": {"tf": 1}, "sain.collections.buf.Bytes.as_ref": {"tf": 1}, "sain.collections.buf.Bytes.as_mut": {"tf": 1}}, "df": 6}, "8": {"docs": {"sain.collections.Bytes": {"tf": 1.4142135623730951}, "sain.collections.Bytes.as_ref": {"tf": 1.4142135623730951}, "sain.collections.Bytes.as_mut": {"tf": 1.4142135623730951}, "sain.collections.Bytes.put_bytes": {"tf": 1}, "sain.collections.buf.Bytes": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.as_ref": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.as_mut": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.put_bytes": {"tf": 1}}, "df": 8}, "docs": {"sain.Some": {"tf": 1.4142135623730951}, "sain.Some.unwrap_or": {"tf": 1.7320508075688772}, "sain.Some.unwrap_or_else": {"tf": 1}, "sain.Some.map": {"tf": 1}, "sain.Some.and_ok": {"tf": 1}, "sain.Some.and_then": {"tf": 1.4142135623730951}, "sain.futures.spawn": {"tf": 1.4142135623730951}, "sain.option.Some.unwrap_or": {"tf": 1.7320508075688772}, "sain.option.Some.unwrap_or_else": {"tf": 1}, "sain.option.Some.map": {"tf": 1}, "sain.option.Some.and_ok": {"tf": 1}, "sain.option.Some.and_then": {"tf": 1.4142135623730951}}, "df": 12}, "1": {"1": {"docs": {"sain.collections.Bytes": {"tf": 1}, "sain.collections.Bytes.as_ref": {"tf": 1}, "sain.collections.Bytes.as_mut": {"tf": 1}, "sain.collections.Bytes.put_bytes": {"tf": 1}, "sain.collections.buf.Bytes": {"tf": 1}, "sain.collections.buf.Bytes.as_ref": {"tf": 1}, "sain.collections.buf.Bytes.as_mut": {"tf": 1}, "sain.collections.buf.Bytes.put_bytes": {"tf": 1}}, "df": 8}, "4": {"docs": {"sain.collections.Bytes.put_bytes": {"tf": 1}, "sain.collections.buf.Bytes.put_bytes": {"tf": 1}}, "df": 2}, "9": {"docs": {"sain.collections.Bytes.put_bytes": {"tf": 1}, "sain.collections.buf.Bytes.put_bytes": {"tf": 1}}, "df": 2}, "docs": {}, "df": 0}, "2": {"3": {"4": {"docs": {"sain.collections.Bytes": {"tf": 1}, "sain.collections.buf.Bytes": {"tf": 1}}, "df": 2}, "docs": {}, "df": 0}, "8": {"docs": {"sain.collections.Bytes.from_str": {"tf": 1}, "sain.collections.buf.Bytes.from_str": {"tf": 1}, "sain.convert": {"tf": 1}}, "df": 3}, "docs": {}, "df": 0}, "4": {"6": {"docs": {"sain.collections.Bytes.from_str": {"tf": 1}, "sain.collections.Bytes.try_to_str": {"tf": 1.4142135623730951}, "sain.collections.Bytes.to_str": {"tf": 1.4142135623730951}, "sain.collections.Bytes.size": {"tf": 1}, "sain.collections.buf.Bytes.from_str": {"tf": 1}, "sain.collections.buf.Bytes.try_to_str": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.to_str": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.size": {"tf": 1}}, "df": 8}, "docs": {}, "df": 0}, "5": {"0": {"docs": {"sain.collections.Bytes.try_to_str": {"tf": 1.4142135623730951}, "sain.collections.Bytes.to_str": {"tf": 1.4142135623730951}, "sain.collections.Bytes.size": {"tf": 1}, "sain.collections.buf.Bytes.try_to_str": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.to_str": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.size": {"tf": 1}}, "df": 6}, "9": {"docs": {"sain.collections.Bytes.from_str": {"tf": 1}, "sain.collections.Bytes.try_to_str": {"tf": 1.4142135623730951}, "sain.collections.Bytes.to_str": {"tf": 1.4142135623730951}, "sain.collections.Bytes.size": {"tf": 1}, "sain.collections.buf.Bytes.from_str": {"tf": 1}, "sain.collections.buf.Bytes.try_to_str": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.to_str": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.size": {"tf": 1}}, "df": 8}, "docs": {}, "df": 0}, "docs": {"sain.Some.unwrap_unchecked": {"tf": 1.4142135623730951}, "sain.Some.filter": {"tf": 2.23606797749979}, "sain.Some.take_if": {"tf": 1}, "sain.Iter": {"tf": 2}, "sain.Iter.clone": {"tf": 1}, "sain.Iterator.collect": {"tf": 1.4142135623730951}, "sain.Iterator.sink": {"tf": 1}, "sain.Iterator.next": {"tf": 1.4142135623730951}, "sain.Iterator.cloned": {"tf": 1.4142135623730951}, "sain.Iterator.copied": {"tf": 1}, "sain.Iterator.map": {"tf": 1}, "sain.Iterator.skip": {"tf": 1}, "sain.Iterator.enumerate": {"tf": 1.7320508075688772}, "sain.Iterator.all": {"tf": 1}, "sain.Iterator.any": {"tf": 1}, "sain.Iterator.zip": {"tf": 1.4142135623730951}, "sain.Iterator.sort": {"tf": 1.4142135623730951}, "sain.Iterator.reversed": {"tf": 1.4142135623730951}, "sain.Iterator.union": {"tf": 1.4142135623730951}, "sain.Iterator.first": {"tf": 1}, "sain.Iterator.last": {"tf": 1}, "sain.Iterator.for_each": {"tf": 1.4142135623730951}, "sain.deprecated": {"tf": 1}, "sain.Ok.map": {"tf": 1.4142135623730951}, "sain.Ok.map_err": {"tf": 1}, "sain.Vec": {"tf": 2.8284271247461903}, "sain.Vec.with_capacity": {"tf": 1}, "sain.Vec.as_ref": {"tf": 1.4142135623730951}, "sain.Vec.len": {"tf": 1}, "sain.Vec.capacity": {"tf": 1}, "sain.Vec.iter": {"tf": 1}, "sain.Vec.split_off": {"tf": 1.7320508075688772}, "sain.Vec.split_first": {"tf": 1.4142135623730951}, "sain.Vec.first": {"tf": 1.4142135623730951}, "sain.Vec.truncate": {"tf": 1.7320508075688772}, "sain.Vec.retain": {"tf": 1.4142135623730951}, "sain.Vec.push": {"tf": 1.4142135623730951}, "sain.Vec.push_within_capacity": {"tf": 1}, "sain.Vec.reserve": {"tf": 1}, "sain.Vec.get": {"tf": 1.4142135623730951}, "sain.Vec.insert": {"tf": 1.4142135623730951}, "sain.Vec.pop": {"tf": 1.4142135623730951}, "sain.Vec.extend": {"tf": 1.4142135623730951}, "sain.Vec.copy": {"tf": 1.4142135623730951}, "sain.Vec.clear": {"tf": 1}, "sain.Vec.sort": {"tf": 1.4142135623730951}, "sain.Vec.index": {"tf": 1.4142135623730951}, "sain.Vec.count": {"tf": 1}, "sain.Box.remaining": {"tf": 1}, "sain.Box.get": {"tf": 1.4142135623730951}, "sain.boxed.Box.remaining": {"tf": 1}, "sain.boxed.Box.get": {"tf": 1.4142135623730951}, "sain.collections.Vec": {"tf": 2.8284271247461903}, "sain.collections.Vec.with_capacity": {"tf": 1}, "sain.collections.Vec.as_ref": {"tf": 1.4142135623730951}, "sain.collections.Vec.len": {"tf": 1}, "sain.collections.Vec.capacity": {"tf": 1}, "sain.collections.Vec.iter": {"tf": 1}, "sain.collections.Vec.split_off": {"tf": 1.7320508075688772}, "sain.collections.Vec.split_first": {"tf": 1.4142135623730951}, "sain.collections.Vec.first": {"tf": 1.4142135623730951}, "sain.collections.Vec.truncate": {"tf": 1.7320508075688772}, "sain.collections.Vec.retain": {"tf": 1.4142135623730951}, "sain.collections.Vec.push": {"tf": 1.4142135623730951}, "sain.collections.Vec.push_within_capacity": {"tf": 1}, "sain.collections.Vec.reserve": {"tf": 1}, "sain.collections.Vec.get": {"tf": 1.4142135623730951}, "sain.collections.Vec.insert": {"tf": 1.4142135623730951}, "sain.collections.Vec.pop": {"tf": 1.4142135623730951}, "sain.collections.Vec.extend": {"tf": 1.4142135623730951}, "sain.collections.Vec.copy": {"tf": 1.4142135623730951}, "sain.collections.Vec.clear": {"tf": 1}, "sain.collections.Vec.sort": {"tf": 1.4142135623730951}, "sain.collections.Vec.index": {"tf": 1.4142135623730951}, "sain.collections.Vec.count": {"tf": 1}, "sain.collections.Bytes.len": {"tf": 1}, "sain.collections.Bytes.size": {"tf": 1}, "sain.collections.Bytes.iter": {"tf": 1}, "sain.collections.buf.Bytes.len": {"tf": 1}, "sain.collections.buf.Bytes.size": {"tf": 1}, "sain.collections.buf.Bytes.iter": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 2.8284271247461903}, "sain.collections.vec.Vec.with_capacity": {"tf": 1}, "sain.collections.vec.Vec.as_ref": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.len": {"tf": 1}, "sain.collections.vec.Vec.capacity": {"tf": 1}, "sain.collections.vec.Vec.iter": {"tf": 1}, "sain.collections.vec.Vec.split_off": {"tf": 1.7320508075688772}, "sain.collections.vec.Vec.split_first": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.first": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.truncate": {"tf": 1.7320508075688772}, "sain.collections.vec.Vec.retain": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.push": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.push_within_capacity": {"tf": 1}, "sain.collections.vec.Vec.reserve": {"tf": 1}, "sain.collections.vec.Vec.get": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.insert": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.pop": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.extend": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.copy": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.clear": {"tf": 1}, "sain.collections.vec.Vec.sort": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.index": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.count": {"tf": 1}, "sain.iter.Iter": {"tf": 2}, "sain.iter.Iter.clone": {"tf": 1}, "sain.iter.Iterator.collect": {"tf": 1.4142135623730951}, "sain.iter.Iterator.sink": {"tf": 1}, "sain.iter.Iterator.next": {"tf": 1.4142135623730951}, "sain.iter.Iterator.cloned": {"tf": 1.4142135623730951}, "sain.iter.Iterator.copied": {"tf": 1}, "sain.iter.Iterator.map": {"tf": 1}, "sain.iter.Iterator.skip": {"tf": 1}, "sain.iter.Iterator.enumerate": {"tf": 1.7320508075688772}, "sain.iter.Iterator.all": {"tf": 1}, "sain.iter.Iterator.any": {"tf": 1}, "sain.iter.Iterator.zip": {"tf": 1.4142135623730951}, "sain.iter.Iterator.sort": {"tf": 1.4142135623730951}, "sain.iter.Iterator.reversed": {"tf": 1.4142135623730951}, "sain.iter.Iterator.union": {"tf": 1.4142135623730951}, "sain.iter.Iterator.first": {"tf": 1}, "sain.iter.Iterator.last": {"tf": 1}, "sain.iter.Iterator.for_each": {"tf": 1.4142135623730951}, "sain.iter.Empty.next": {"tf": 1.4142135623730951}, "sain.iter.Empty.any": {"tf": 1}, "sain.iter.Empty.all": {"tf": 1}, "sain.iter.into_iter": {"tf": 1.4142135623730951}, "sain.iter.once": {"tf": 1.4142135623730951}, "sain.iter.repeat": {"tf": 2}, "sain.macros.deprecated": {"tf": 1}, "sain.option.Some.unwrap_unchecked": {"tf": 1.4142135623730951}, "sain.option.Some.filter": {"tf": 2.23606797749979}, "sain.option.Some.take_if": {"tf": 1}, "sain.result.Ok.map": {"tf": 1.4142135623730951}, "sain.result.Ok.map_err": {"tf": 1}}, "df": 135}, "2": {"1": {"docs": {"sain.collections.Bytes.pop": {"tf": 1}, "sain.collections.buf.Bytes.pop": {"tf": 1}}, "df": 2}, "4": {"0": {"docs": {"sain.collections.Bytes.from_str": {"tf": 1}, "sain.collections.Bytes.try_to_str": {"tf": 1}, "sain.collections.Bytes.to_str": {"tf": 1}, "sain.collections.Bytes.size": {"tf": 1}, "sain.collections.buf.Bytes.from_str": {"tf": 1}, "sain.collections.buf.Bytes.try_to_str": {"tf": 1}, "sain.collections.buf.Bytes.to_str": {"tf": 1}, "sain.collections.buf.Bytes.size": {"tf": 1}}, "df": 8}, "docs": {}, "df": 0}, "5": {"5": {"docs": {"sain.collections.Bytes.put": {"tf": 1}, "sain.collections.Bytes.put_raw": {"tf": 1}, "sain.collections.Bytes.put_bytes": {"tf": 1}, "sain.collections.Bytes.copy": {"tf": 1.7320508075688772}, "sain.collections.Bytes.clear": {"tf": 1}, "sain.collections.buf.Bytes.put": {"tf": 1}, "sain.collections.buf.Bytes.put_raw": {"tf": 1}, "sain.collections.buf.Bytes.put_bytes": {"tf": 1}, "sain.collections.buf.Bytes.copy": {"tf": 1.7320508075688772}, "sain.collections.buf.Bytes.clear": {"tf": 1}}, "df": 10}, "6": {"docs": {"sain.collections.Bytes.from_raw": {"tf": 1}, "sain.collections.buf.Bytes.from_raw": {"tf": 1}}, "df": 2}, "docs": {}, "df": 0}, "8": {"docs": {"sain.Some.map_or_else": {"tf": 1}, "sain.option.Some.map_or_else": {"tf": 1}}, "df": 2}, "docs": {"sain.Some.unwrap_unchecked": {"tf": 1.4142135623730951}, "sain.Some.map": {"tf": 1}, "sain.Some.filter": {"tf": 1.7320508075688772}, "sain.Some.and_then": {"tf": 1}, "sain.Iter": {"tf": 2.23606797749979}, "sain.Iter.clone": {"tf": 1}, "sain.Iterator.collect": {"tf": 1.4142135623730951}, "sain.Iterator.sink": {"tf": 1}, "sain.Iterator.next": {"tf": 1.4142135623730951}, "sain.Iterator.cloned": {"tf": 1}, "sain.Iterator.map": {"tf": 1}, "sain.Iterator.take": {"tf": 1}, "sain.Iterator.skip": {"tf": 1.4142135623730951}, "sain.Iterator.enumerate": {"tf": 1.7320508075688772}, "sain.Iterator.all": {"tf": 1}, "sain.Iterator.any": {"tf": 1}, "sain.Iterator.zip": {"tf": 1.4142135623730951}, "sain.Iterator.union": {"tf": 1.4142135623730951}, "sain.Iterator.for_each": {"tf": 1.4142135623730951}, "sain.Ok.map": {"tf": 1}, "sain.Ok.map_or_else": {"tf": 1.4142135623730951}, "sain.Vec": {"tf": 3.1622776601683795}, "sain.Vec.with_capacity": {"tf": 1}, "sain.Vec.as_ref": {"tf": 1.4142135623730951}, "sain.Vec.len": {"tf": 1}, "sain.Vec.capacity": {"tf": 1}, "sain.Vec.iter": {"tf": 1}, "sain.Vec.split_off": {"tf": 1.4142135623730951}, "sain.Vec.split_first": {"tf": 1.4142135623730951}, "sain.Vec.first": {"tf": 1}, "sain.Vec.truncate": {"tf": 1}, "sain.Vec.retain": {"tf": 1.4142135623730951}, "sain.Vec.push_within_capacity": {"tf": 1}, "sain.Vec.get": {"tf": 1}, "sain.Vec.insert": {"tf": 1.4142135623730951}, "sain.Vec.pop": {"tf": 1.4142135623730951}, "sain.Vec.extend": {"tf": 1.4142135623730951}, "sain.Vec.copy": {"tf": 1.4142135623730951}, "sain.Vec.clear": {"tf": 1}, "sain.Vec.sort": {"tf": 1.4142135623730951}, "sain.Vec.index": {"tf": 1.4142135623730951}, "sain.Vec.count": {"tf": 1.4142135623730951}, "sain.Box.remaining": {"tf": 1}, "sain.boxed.Box.remaining": {"tf": 1}, "sain.collections.Vec": {"tf": 3.1622776601683795}, "sain.collections.Vec.with_capacity": {"tf": 1}, "sain.collections.Vec.as_ref": {"tf": 1.4142135623730951}, "sain.collections.Vec.len": {"tf": 1}, "sain.collections.Vec.capacity": {"tf": 1}, "sain.collections.Vec.iter": {"tf": 1}, "sain.collections.Vec.split_off": {"tf": 1.4142135623730951}, "sain.collections.Vec.split_first": {"tf": 1.4142135623730951}, "sain.collections.Vec.first": {"tf": 1}, "sain.collections.Vec.truncate": {"tf": 1}, "sain.collections.Vec.retain": {"tf": 1.4142135623730951}, "sain.collections.Vec.push_within_capacity": {"tf": 1}, "sain.collections.Vec.get": {"tf": 1}, "sain.collections.Vec.insert": {"tf": 1.4142135623730951}, "sain.collections.Vec.pop": {"tf": 1.4142135623730951}, "sain.collections.Vec.extend": {"tf": 1.4142135623730951}, "sain.collections.Vec.copy": {"tf": 1.4142135623730951}, "sain.collections.Vec.clear": {"tf": 1}, "sain.collections.Vec.sort": {"tf": 1.4142135623730951}, "sain.collections.Vec.index": {"tf": 1.4142135623730951}, "sain.collections.Vec.count": {"tf": 1.4142135623730951}, "sain.collections.Bytes.len": {"tf": 1}, "sain.collections.Bytes.iter": {"tf": 1}, "sain.collections.Bytes.count": {"tf": 1}, "sain.collections.buf.Bytes.len": {"tf": 1}, "sain.collections.buf.Bytes.iter": {"tf": 1}, "sain.collections.buf.Bytes.count": {"tf": 1}, "sain.collections.vec": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 3.1622776601683795}, "sain.collections.vec.Vec.with_capacity": {"tf": 1}, "sain.collections.vec.Vec.as_ref": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.len": {"tf": 1}, "sain.collections.vec.Vec.capacity": {"tf": 1}, "sain.collections.vec.Vec.iter": {"tf": 1}, "sain.collections.vec.Vec.split_off": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.split_first": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.first": {"tf": 1}, "sain.collections.vec.Vec.truncate": {"tf": 1}, "sain.collections.vec.Vec.retain": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.push_within_capacity": {"tf": 1}, "sain.collections.vec.Vec.get": {"tf": 1}, "sain.collections.vec.Vec.insert": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.pop": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.extend": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.copy": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.clear": {"tf": 1}, "sain.collections.vec.Vec.sort": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.index": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.count": {"tf": 1.4142135623730951}, "sain.iter.Iter": {"tf": 2.23606797749979}, "sain.iter.Iter.clone": {"tf": 1}, "sain.iter.Iterator.collect": {"tf": 1.4142135623730951}, "sain.iter.Iterator.sink": {"tf": 1}, "sain.iter.Iterator.next": {"tf": 1.4142135623730951}, "sain.iter.Iterator.cloned": {"tf": 1}, "sain.iter.Iterator.map": {"tf": 1}, "sain.iter.Iterator.take": {"tf": 1}, "sain.iter.Iterator.skip": {"tf": 1.4142135623730951}, "sain.iter.Iterator.enumerate": {"tf": 1.7320508075688772}, "sain.iter.Iterator.all": {"tf": 1}, "sain.iter.Iterator.any": {"tf": 1}, "sain.iter.Iterator.zip": {"tf": 1.4142135623730951}, "sain.iter.Iterator.union": {"tf": 1.4142135623730951}, "sain.iter.Iterator.for_each": {"tf": 1.4142135623730951}, "sain.iter.Empty.next": {"tf": 1.4142135623730951}, "sain.iter.Empty.any": {"tf": 1}, "sain.iter.Empty.all": {"tf": 1}, "sain.iter.into_iter": {"tf": 1.4142135623730951}, "sain.option.Some.unwrap_unchecked": {"tf": 1.4142135623730951}, "sain.option.Some.map": {"tf": 1}, "sain.option.Some.filter": {"tf": 1.7320508075688772}, "sain.option.Some.and_then": {"tf": 1}, "sain.result.Ok.map": {"tf": 1}, "sain.result.Ok.map_or_else": {"tf": 1.4142135623730951}, "sain.sync.Lazy.get_unchecked": {"tf": 1}, "sain.sync.Once.get_unchecked": {"tf": 1}, "sain.sync.AsyncOnce.get_unchecked": {"tf": 1}}, "df": 121}, "3": {"1": {"docs": {"sain.collections.Bytes.count": {"tf": 1}, "sain.collections.buf.Bytes.count": {"tf": 1}}, "df": 2}, "2": {"docs": {"sain.collections.Bytes.put": {"tf": 1}, "sain.collections.Bytes.put_bytes": {"tf": 1}, "sain.collections.Bytes.count": {"tf": 1.7320508075688772}, "sain.collections.Bytes.pop": {"tf": 1}, "sain.collections.buf.Bytes.put": {"tf": 1}, "sain.collections.buf.Bytes.put_bytes": {"tf": 1}, "sain.collections.buf.Bytes.count": {"tf": 1.7320508075688772}, "sain.collections.buf.Bytes.pop": {"tf": 1}}, "df": 8}, "9": {"docs": {"sain.cfg_attr": {"tf": 1}, "sain.Some.into_inner": {"tf": 1.4142135623730951}, "sain.Some.take_if": {"tf": 1.4142135623730951}, "sain.Iter.clone": {"tf": 1}, "sain.Iterator.collect": {"tf": 2.8284271247461903}, "sain.Iterator.filter": {"tf": 2.8284271247461903}, "sain.Iterator.take": {"tf": 3.7416573867739413}, "sain.Iterator.take_while": {"tf": 3.1622776601683795}, "sain.Iterator.drop_while": {"tf": 3.1622776601683795}, "sain.Iterator.async_for_each": {"tf": 1.4142135623730951}, "sain.Vec": {"tf": 3}, "sain.Vec.with_capacity": {"tf": 1}, "sain.Vec.swap_remove": {"tf": 3.7416573867739413}, "sain.Vec.reserve": {"tf": 1}, "sain.Vec.remove": {"tf": 3.4641016151377544}, "sain.Error": {"tf": 2}, "sain.Box": {"tf": 1}, "sain.MaybeUninit": {"tf": 2.449489742783178}, "sain.MaybeUninit.uninit_array": {"tf": 1.4142135623730951}, "sain.TryFrom": {"tf": 1}, "sain.boxed.Box": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.collections.Vec": {"tf": 3}, "sain.collections.Vec.with_capacity": {"tf": 1}, "sain.collections.Vec.swap_remove": {"tf": 3.7416573867739413}, "sain.collections.Vec.reserve": {"tf": 1}, "sain.collections.Vec.remove": {"tf": 3.4641016151377544}, "sain.collections.Bytes.from_raw": {"tf": 2}, "sain.collections.Bytes.as_bytes": {"tf": 1.4142135623730951}, "sain.collections.Bytes.put": {"tf": 1.4142135623730951}, "sain.collections.Bytes.put_raw": {"tf": 2.23606797749979}, "sain.collections.buf.Bytes.from_raw": {"tf": 2}, "sain.collections.buf.Bytes.as_bytes": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.put": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.put_raw": {"tf": 2.23606797749979}, "sain.collections.vec": {"tf": 2.8284271247461903}, "sain.collections.vec.Vec": {"tf": 3}, "sain.collections.vec.Vec.with_capacity": {"tf": 1}, "sain.collections.vec.Vec.swap_remove": {"tf": 3.7416573867739413}, "sain.collections.vec.Vec.reserve": {"tf": 1}, "sain.collections.vec.Vec.remove": {"tf": 3.4641016151377544}, "sain.collections.vec.from_args": {"tf": 2.8284271247461903}, "sain.convert": {"tf": 2.8284271247461903}, "sain.convert.TryFrom": {"tf": 1}, "sain.error": {"tf": 1.4142135623730951}, "sain.error.Error": {"tf": 2}, "sain.futures.spawn": {"tf": 1}, "sain.iter.Iter.clone": {"tf": 1}, "sain.iter.Iterator.collect": {"tf": 2.8284271247461903}, "sain.iter.Iterator.filter": {"tf": 2.8284271247461903}, "sain.iter.Iterator.take": {"tf": 3.7416573867739413}, "sain.iter.Iterator.take_while": {"tf": 3.1622776601683795}, "sain.iter.Iterator.drop_while": {"tf": 3.1622776601683795}, "sain.iter.Iterator.async_for_each": {"tf": 1.4142135623730951}, "sain.option.Some.into_inner": {"tf": 1.4142135623730951}, "sain.option.Some.take_if": {"tf": 1.4142135623730951}, "sain.result": {"tf": 3}, "sain.sync.Lazy": {"tf": 1.4142135623730951}, "sain.sync.Once": {"tf": 1}, "sain.sync.Once.get_or": {"tf": 1}, "sain.sync.LazyFuture": {"tf": 1.4142135623730951}, "sain.sync.AsyncOnce": {"tf": 1}}, "df": 62}, "docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.Some.filter": {"tf": 1.7320508075688772}, "sain.Some.is_some_and": {"tf": 1.4142135623730951}, "sain.Iter": {"tf": 1.7320508075688772}, "sain.Iter.clone": {"tf": 1.4142135623730951}, "sain.Iterator.collect": {"tf": 1.7320508075688772}, "sain.Iterator.sink": {"tf": 1}, "sain.Iterator.map": {"tf": 1}, "sain.Iterator.skip": {"tf": 1.4142135623730951}, "sain.Iterator.enumerate": {"tf": 1.4142135623730951}, "sain.Iterator.all": {"tf": 1}, "sain.Iterator.any": {"tf": 1}, "sain.Iterator.zip": {"tf": 1.4142135623730951}, "sain.Iterator.sort": {"tf": 1.7320508075688772}, "sain.Iterator.reversed": {"tf": 1.4142135623730951}, "sain.Iterator.union": {"tf": 1.4142135623730951}, "sain.Iterator.first": {"tf": 1.4142135623730951}, "sain.Iterator.last": {"tf": 1}, "sain.Iterator.count": {"tf": 1.4142135623730951}, "sain.Iterator.for_each": {"tf": 1.4142135623730951}, "sain.deprecated": {"tf": 1}, "sain.Ok.map_or": {"tf": 1}, "sain.Ok.map_or_else": {"tf": 1}, "sain.Vec": {"tf": 2.8284271247461903}, "sain.Vec.with_capacity": {"tf": 2}, "sain.Vec.as_ref": {"tf": 1.4142135623730951}, "sain.Vec.len": {"tf": 1.4142135623730951}, "sain.Vec.capacity": {"tf": 1.7320508075688772}, "sain.Vec.iter": {"tf": 1}, "sain.Vec.split_off": {"tf": 1.4142135623730951}, "sain.Vec.split_first": {"tf": 1.4142135623730951}, "sain.Vec.first": {"tf": 1}, "sain.Vec.truncate": {"tf": 1}, "sain.Vec.retain": {"tf": 1.4142135623730951}, "sain.Vec.push_within_capacity": {"tf": 2.23606797749979}, "sain.Vec.reserve": {"tf": 1}, "sain.Vec.get": {"tf": 1.4142135623730951}, "sain.Vec.insert": {"tf": 1.4142135623730951}, "sain.Vec.pop": {"tf": 1.4142135623730951}, "sain.Vec.extend": {"tf": 1.4142135623730951}, "sain.Vec.copy": {"tf": 1.4142135623730951}, "sain.Vec.clear": {"tf": 1}, "sain.Vec.sort": {"tf": 1.4142135623730951}, "sain.Vec.index": {"tf": 1}, "sain.Vec.count": {"tf": 1.7320508075688772}, "sain.Box.remaining": {"tf": 1}, "sain.MaybeUninit": {"tf": 1.4142135623730951}, "sain.MaybeUninit.uninit_array": {"tf": 1.4142135623730951}, "sain.boxed.Box.remaining": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}, "sain.collections.Vec": {"tf": 2.8284271247461903}, "sain.collections.Vec.with_capacity": {"tf": 2}, "sain.collections.Vec.as_ref": {"tf": 1.4142135623730951}, "sain.collections.Vec.len": {"tf": 1.4142135623730951}, "sain.collections.Vec.capacity": {"tf": 1.7320508075688772}, "sain.collections.Vec.iter": {"tf": 1}, "sain.collections.Vec.split_off": {"tf": 1.4142135623730951}, "sain.collections.Vec.split_first": {"tf": 1.4142135623730951}, "sain.collections.Vec.first": {"tf": 1}, "sain.collections.Vec.truncate": {"tf": 1}, "sain.collections.Vec.retain": {"tf": 1.4142135623730951}, "sain.collections.Vec.push_within_capacity": {"tf": 2.23606797749979}, "sain.collections.Vec.reserve": {"tf": 1}, "sain.collections.Vec.get": {"tf": 1.4142135623730951}, "sain.collections.Vec.insert": {"tf": 1.4142135623730951}, "sain.collections.Vec.pop": {"tf": 1.4142135623730951}, "sain.collections.Vec.extend": {"tf": 1.4142135623730951}, "sain.collections.Vec.copy": {"tf": 1.4142135623730951}, "sain.collections.Vec.clear": {"tf": 1}, "sain.collections.Vec.sort": {"tf": 1.4142135623730951}, "sain.collections.Vec.index": {"tf": 1}, "sain.collections.Vec.count": {"tf": 1.7320508075688772}, "sain.collections.Bytes.len": {"tf": 1.4142135623730951}, "sain.collections.Bytes.iter": {"tf": 1}, "sain.collections.buf.Bytes.len": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.iter": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 2.8284271247461903}, "sain.collections.vec.Vec.with_capacity": {"tf": 2}, "sain.collections.vec.Vec.as_ref": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.len": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.capacity": {"tf": 1.7320508075688772}, "sain.collections.vec.Vec.iter": {"tf": 1}, "sain.collections.vec.Vec.split_off": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.split_first": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.first": {"tf": 1}, "sain.collections.vec.Vec.truncate": {"tf": 1}, "sain.collections.vec.Vec.retain": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.push_within_capacity": {"tf": 2.23606797749979}, "sain.collections.vec.Vec.reserve": {"tf": 1}, "sain.collections.vec.Vec.get": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.insert": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.pop": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.extend": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.copy": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.clear": {"tf": 1}, "sain.collections.vec.Vec.sort": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.index": {"tf": 1}, "sain.collections.vec.Vec.count": {"tf": 1.7320508075688772}, "sain.iter.Iter": {"tf": 1.7320508075688772}, "sain.iter.Iter.clone": {"tf": 1.4142135623730951}, "sain.iter.Iterator.collect": {"tf": 1.7320508075688772}, "sain.iter.Iterator.sink": {"tf": 1}, "sain.iter.Iterator.map": {"tf": 1}, "sain.iter.Iterator.skip": {"tf": 1.4142135623730951}, "sain.iter.Iterator.enumerate": {"tf": 1.4142135623730951}, "sain.iter.Iterator.all": {"tf": 1}, "sain.iter.Iterator.any": {"tf": 1}, "sain.iter.Iterator.zip": {"tf": 1.4142135623730951}, "sain.iter.Iterator.sort": {"tf": 1.7320508075688772}, "sain.iter.Iterator.reversed": {"tf": 1.4142135623730951}, "sain.iter.Iterator.union": {"tf": 1.4142135623730951}, "sain.iter.Iterator.first": {"tf": 1.4142135623730951}, "sain.iter.Iterator.last": {"tf": 1}, "sain.iter.Iterator.count": {"tf": 1.4142135623730951}, "sain.iter.Iterator.for_each": {"tf": 1.4142135623730951}, "sain.iter.Empty.count": {"tf": 1.4142135623730951}, "sain.iter.Empty.any": {"tf": 1}, "sain.iter.Empty.all": {"tf": 1}, "sain.iter.into_iter": {"tf": 1.4142135623730951}, "sain.iter.repeat": {"tf": 1}, "sain.macros.deprecated": {"tf": 1}, "sain.option.Some.filter": {"tf": 1.7320508075688772}, "sain.option.Some.is_some_and": {"tf": 1.4142135623730951}, "sain.result.Ok.map_or": {"tf": 1}, "sain.result.Ok.map_or_else": {"tf": 1}}, "df": 127}, "4": {"0": {"4": {"docs": {"sain.Error": {"tf": 2}, "sain.error.Error": {"tf": 2}}, "df": 2}, "docs": {}, "df": 0}, "2": {"docs": {"sain.Ok.map_or": {"tf": 1.7320508075688772}, "sain.result.Ok.map_or": {"tf": 1.7320508075688772}}, "df": 2}, "4": {"docs": {"sain.collections.Bytes.pop": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.pop": {"tf": 1.4142135623730951}}, "df": 2}, "docs": {"sain.Iterator.skip": {"tf": 1.4142135623730951}, "sain.Iterator.zip": {"tf": 1.4142135623730951}, "sain.Iterator.union": {"tf": 1.4142135623730951}, "sain.Ok.unwrap_or_else": {"tf": 1.7320508075688772}, "sain.Vec.with_capacity": {"tf": 1}, "sain.Vec.push_within_capacity": {"tf": 1}, "sain.Vec.reserve": {"tf": 1}, "sain.Vec.extend": {"tf": 1.4142135623730951}, "sain.Vec.copy": {"tf": 1}, "sain.collections.Vec.with_capacity": {"tf": 1}, "sain.collections.Vec.push_within_capacity": {"tf": 1}, "sain.collections.Vec.reserve": {"tf": 1}, "sain.collections.Vec.extend": {"tf": 1.4142135623730951}, "sain.collections.Vec.copy": {"tf": 1}, "sain.collections.vec.Vec.with_capacity": {"tf": 1}, "sain.collections.vec.Vec.push_within_capacity": {"tf": 1}, "sain.collections.vec.Vec.reserve": {"tf": 1}, "sain.collections.vec.Vec.extend": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.copy": {"tf": 1}, "sain.iter.Iterator.skip": {"tf": 1.4142135623730951}, "sain.iter.Iterator.zip": {"tf": 1.4142135623730951}, "sain.iter.Iterator.union": {"tf": 1.4142135623730951}, "sain.result.Ok.unwrap_or_else": {"tf": 1.7320508075688772}}, "df": 23}, "5": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.Some.unwrap": {"tf": 1.4142135623730951}, "sain.Some.unwrap_or": {"tf": 1.4142135623730951}, "sain.Some.unwrap_or_else": {"tf": 1.4142135623730951}, "sain.Some.map": {"tf": 1}, "sain.Some.map_or": {"tf": 1}, "sain.Some.map_or_else": {"tf": 1}, "sain.Some.and_then": {"tf": 1}, "sain.Some.as_ref": {"tf": 1.7320508075688772}, "sain.Some.as_mut": {"tf": 1}, "sain.Some.is_some": {"tf": 1}, "sain.Some.is_some_and": {"tf": 1}, "sain.Some.is_none": {"tf": 1}, "sain.Iterator": {"tf": 1.4142135623730951}, "sain.Iterator.zip": {"tf": 1.4142135623730951}, "sain.Iterator.union": {"tf": 1.4142135623730951}, "sain.Ok.map_err": {"tf": 1.4142135623730951}, "sain.Vec": {"tf": 1.4142135623730951}, "sain.Vec.extend": {"tf": 1.4142135623730951}, "sain.Box": {"tf": 1}, "sain.Box.on_expire": {"tf": 1.7320508075688772}, "sain.boxed.Box": {"tf": 1}, "sain.boxed.Box.on_expire": {"tf": 1.7320508075688772}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}, "sain.collections.Vec": {"tf": 1.4142135623730951}, "sain.collections.Vec.extend": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.extend": {"tf": 1.4142135623730951}, "sain.iter.Iterator": {"tf": 1.4142135623730951}, "sain.iter.Iterator.zip": {"tf": 1.4142135623730951}, "sain.iter.Iterator.union": {"tf": 1.4142135623730951}, "sain.option.Some.unwrap": {"tf": 1.4142135623730951}, "sain.option.Some.unwrap_or": {"tf": 1.4142135623730951}, "sain.option.Some.unwrap_or_else": {"tf": 1.4142135623730951}, "sain.option.Some.map": {"tf": 1}, "sain.option.Some.map_or": {"tf": 1}, "sain.option.Some.map_or_else": {"tf": 1}, "sain.option.Some.and_then": {"tf": 1}, "sain.option.Some.as_ref": {"tf": 1.7320508075688772}, "sain.option.Some.as_mut": {"tf": 1}, "sain.option.Some.is_some": {"tf": 1}, "sain.option.Some.is_some_and": {"tf": 1}, "sain.option.Some.is_none": {"tf": 1}, "sain.result.Ok.map_err": {"tf": 1.4142135623730951}}, "df": 46}, "6": {"4": {"docs": {"sain.cfg": {"tf": 1}}, "df": 1}, "docs": {"sain.Some.map_or": {"tf": 1}, "sain.Some.map_or_else": {"tf": 1}, "sain.Iterator.zip": {"tf": 1.4142135623730951}, "sain.Iterator.sort": {"tf": 1.4142135623730951}, "sain.Iterator.reversed": {"tf": 1.4142135623730951}, "sain.Iterator.union": {"tf": 1.4142135623730951}, "sain.Iterator.first": {"tf": 1}, "sain.Iterator.last": {"tf": 1}, "sain.Vec.extend": {"tf": 1.4142135623730951}, "sain.Box": {"tf": 1}, "sain.boxed.Box": {"tf": 1}, "sain.collections.Vec.extend": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.extend": {"tf": 1.4142135623730951}, "sain.iter.Iterator.zip": {"tf": 1.4142135623730951}, "sain.iter.Iterator.sort": {"tf": 1.4142135623730951}, "sain.iter.Iterator.reversed": {"tf": 1.4142135623730951}, "sain.iter.Iterator.union": {"tf": 1.4142135623730951}, "sain.iter.Iterator.first": {"tf": 1}, "sain.iter.Iterator.last": {"tf": 1}, "sain.option.Some.map_or": {"tf": 1}, "sain.option.Some.map_or_else": {"tf": 1}}, "df": 21}, "7": {"2": {"docs": {"sain.collections.Bytes": {"tf": 1}, "sain.collections.Bytes.as_ref": {"tf": 1}, "sain.collections.Bytes.as_mut": {"tf": 1}, "sain.collections.buf.Bytes": {"tf": 1}, "sain.collections.buf.Bytes.as_ref": {"tf": 1}, "sain.collections.buf.Bytes.as_mut": {"tf": 1}}, "df": 6}, "docs": {"sain.Iterator.sort": {"tf": 1.4142135623730951}, "sain.Iterator.reversed": {"tf": 1.4142135623730951}, "sain.Iterator.first": {"tf": 1}, "sain.Iterator.last": {"tf": 1.4142135623730951}, "sain.iter.Iterator.sort": {"tf": 1.4142135623730951}, "sain.iter.Iterator.reversed": {"tf": 1.4142135623730951}, "sain.iter.Iterator.first": {"tf": 1}, "sain.iter.Iterator.last": {"tf": 1.4142135623730951}}, "df": 8}, "8": {"docs": {"sain.Ok.map_or_else": {"tf": 1}, "sain.collections.Bytes": {"tf": 1}, "sain.collections.Bytes.try_to_str": {"tf": 1}, "sain.collections.Bytes.to_str": {"tf": 1}, "sain.collections.buf.Bytes": {"tf": 1}, "sain.collections.buf.Bytes.try_to_str": {"tf": 1}, "sain.collections.buf.Bytes.to_str": {"tf": 1}, "sain.result.Ok.map_or_else": {"tf": 1}}, "df": 8}, "9": {"2": {"docs": {"sain.sync.Once.get_or_with": {"tf": 1.7320508075688772}, "sain.sync.AsyncOnce.get_or": {"tf": 1.7320508075688772}, "sain.sync.AsyncOnce.get_or_with": {"tf": 1.7320508075688772}}, "df": 3}, "9": {"9": {"docs": {"sain.Box": {"tf": 1}, "sain.boxed.Box": {"tf": 1}}, "df": 2}, "docs": {}, "df": 0}, "docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 4}, "docs": {"sain": {"tf": 3}, "sain.cfg": {"tf": 9.055385138137417}, "sain.cfg_attr": {"tf": 15.198684153570664}, "sain.Default": {"tf": 10.954451150103322}, "sain.Default.__init__": {"tf": 1.7320508075688772}, "sain.Default.default": {"tf": 1.7320508075688772}, "sain.Some": {"tf": 11.575836902790225}, "sain.Some.__init__": {"tf": 1.7320508075688772}, "sain.Some.default": {"tf": 6.244997998398398}, "sain.Some.into_inner": {"tf": 9.643650760992955}, "sain.Some.unwrap": {"tf": 10}, "sain.Some.unwrap_or": {"tf": 10.14889156509222}, "sain.Some.unwrap_or_else": {"tf": 10.344080432788601}, "sain.Some.unwrap_unchecked": {"tf": 10.099504938362077}, "sain.Some.expect": {"tf": 10.344080432788601}, "sain.Some.map": {"tf": 10.344080432788601}, "sain.Some.map_or": {"tf": 11.045361017187261}, "sain.Some.map_or_else": {"tf": 12.409673645990857}, "sain.Some.filter": {"tf": 12.449899597988733}, "sain.Some.take": {"tf": 8.366600265340756}, "sain.Some.take_if": {"tf": 13.74772708486752}, "sain.Some.replace": {"tf": 8.06225774829855}, "sain.Some.and_ok": {"tf": 13.341664064126334}, "sain.Some.and_then": {"tf": 11.661903789690601}, "sain.Some.iter": {"tf": 10.246950765959598}, "sain.Some.as_ref": {"tf": 14.560219778561036}, "sain.Some.as_mut": {"tf": 11.180339887498949}, "sain.Some.is_some": {"tf": 9.643650760992955}, "sain.Some.is_some_and": {"tf": 11.269427669584644}, "sain.Some.is_none": {"tf": 9.643650760992955}, "sain.Option": {"tf": 1.7320508075688772}, "sain.NOTHING": {"tf": 1.7320508075688772}, "sain.Iter": {"tf": 13.527749258468683}, "sain.Iter.__init__": {"tf": 1.7320508075688772}, "sain.Iter.clone": {"tf": 8.888194417315589}, "sain.Iterator": {"tf": 18.547236990991408}, "sain.Iterator.default": {"tf": 7.615773105863909}, "sain.Iterator.collect": {"tf": 9.38083151964686}, "sain.Iterator.to_vec": {"tf": 8.366600265340756}, "sain.Iterator.sink": {"tf": 8.246211251235321}, "sain.Iterator.raw_parts": {"tf": 10}, "sain.Iterator.next": {"tf": 10.63014581273465}, "sain.Iterator.cloned": {"tf": 12.449899597988733}, "sain.Iterator.copied": {"tf": 12.529964086141668}, "sain.Iterator.map": {"tf": 9.899494936611665}, "sain.Iterator.filter": {"tf": 9.848857801796104}, "sain.Iterator.take": {"tf": 9.746794344808963}, "sain.Iterator.skip": {"tf": 8.94427190999916}, "sain.Iterator.enumerate": {"tf": 9.16515138991168}, "sain.Iterator.take_while": {"tf": 10.954451150103322}, "sain.Iterator.drop_while": {"tf": 10.770329614269007}, "sain.Iterator.all": {"tf": 10.14889156509222}, "sain.Iterator.any": {"tf": 10.099504938362077}, "sain.Iterator.zip": {"tf": 12.649110640673518}, "sain.Iterator.sort": {"tf": 11.135528725660043}, "sain.Iterator.reversed": {"tf": 9.055385138137417}, "sain.Iterator.union": {"tf": 11.090536506409418}, "sain.Iterator.first": {"tf": 8.831760866327848}, "sain.Iterator.last": {"tf": 8.831760866327848}, "sain.Iterator.count": {"tf": 7.211102550927978}, "sain.Iterator.for_each": {"tf": 9.433981132056603}, "sain.Iterator.async_for_each": {"tf": 14.422205101855956}, "sain.todo": {"tf": 8.888194417315589}, "sain.deprecated": {"tf": 12.206555615733702}, "sain.unimplemented": {"tf": 8.48528137423857}, "sain.doc": {"tf": 10.14889156509222}, "sain.Ok": {"tf": 2.449489742783178}, "sain.Ok.__init__": {"tf": 1.7320508075688772}, "sain.Ok.is_ok": {"tf": 8.48528137423857}, "sain.Ok.is_ok_and": {"tf": 9.273618495495704}, "sain.Ok.is_err": {"tf": 8.246211251235321}, "sain.Ok.is_err_and": {"tf": 9.273618495495704}, "sain.Ok.expect": {"tf": 11}, "sain.Ok.unwrap": {"tf": 10.295630140987}, "sain.Ok.unwrap_or": {"tf": 10.862780491200215}, "sain.Ok.unwrap_or_else": {"tf": 11.445523142259598}, "sain.Ok.unwrap_err": {"tf": 10.488088481701515}, "sain.Ok.ok": {"tf": 11.135528725660043}, "sain.Ok.err": {"tf": 11.135528725660043}, "sain.Ok.inspect": {"tf": 12.489995996796797}, "sain.Ok.inspect_err": {"tf": 12.449899597988733}, "sain.Ok.map": {"tf": 11.832159566199232}, "sain.Ok.map_or": {"tf": 12.609520212918492}, "sain.Ok.map_or_else": {"tf": 14.106735979665885}, "sain.Ok.map_err": {"tf": 11.269427669584644}, "sain.Ok.iter": {"tf": 12.041594578792296}, "sain.Err": {"tf": 2.23606797749979}, "sain.Err.__init__": {"tf": 1.7320508075688772}, "sain.Err.is_ok": {"tf": 8.366600265340756}, "sain.Err.is_ok_and": {"tf": 9.16515138991168}, "sain.Err.is_err": {"tf": 8.12403840463596}, "sain.Err.is_err_and": {"tf": 8.94427190999916}, "sain.Err.expect": {"tf": 1.7320508075688772}, "sain.Err.expect_err": {"tf": 1.7320508075688772}, "sain.Err.unwrap": {"tf": 1.7320508075688772}, "sain.Err.unwrap_or": {"tf": 1.7320508075688772}, "sain.Err.unwrap_or_else": {"tf": 1.7320508075688772}, "sain.Err.unwrap_err": {"tf": 1.7320508075688772}, "sain.Err.inspect": {"tf": 1.7320508075688772}, "sain.Err.inspect_err": {"tf": 1.7320508075688772}, "sain.Err.ok": {"tf": 1.7320508075688772}, "sain.Err.err": {"tf": 1.7320508075688772}, "sain.Err.map": {"tf": 1.7320508075688772}, "sain.Err.map_or": {"tf": 1.7320508075688772}, "sain.Err.map_or_else": {"tf": 1.7320508075688772}, "sain.Err.map_err": {"tf": 1.7320508075688772}, "sain.Err.iter": {"tf": 1.7320508075688772}, "sain.Result": {"tf": 1.7320508075688772}, "sain.Vec": {"tf": 24.310491562286437}, "sain.Vec.__init__": {"tf": 1.7320508075688772}, "sain.Vec.with_capacity": {"tf": 12.24744871391589}, "sain.Vec.as_ref": {"tf": 8.366600265340756}, "sain.Vec.len": {"tf": 7.483314773547883}, "sain.Vec.capacity": {"tf": 10.099504938362077}, "sain.Vec.iter": {"tf": 9.219544457292887}, "sain.Vec.is_empty": {"tf": 1.7320508075688772}, "sain.Vec.split_off": {"tf": 9.9498743710662}, "sain.Vec.split_first": {"tf": 11.789826122551595}, "sain.Vec.first": {"tf": 8.246211251235321}, "sain.Vec.truncate": {"tf": 8.246211251235321}, "sain.Vec.retain": {"tf": 9.797958971132712}, "sain.Vec.swap_remove": {"tf": 11.532562594670797}, "sain.Vec.push": {"tf": 7.3484692283495345}, "sain.Vec.push_within_capacity": {"tf": 15.165750888103101}, "sain.Vec.reserve": {"tf": 13.19090595827292}, "sain.Vec.append": {"tf": 2.23606797749979}, "sain.Vec.get": {"tf": 9.746794344808963}, "sain.Vec.insert": {"tf": 8.94427190999916}, "sain.Vec.pop": {"tf": 9.327379053088816}, "sain.Vec.remove": {"tf": 9.327379053088816}, "sain.Vec.extend": {"tf": 10.14889156509222}, "sain.Vec.copy": {"tf": 9.16515138991168}, "sain.Vec.clear": {"tf": 8.06225774829855}, "sain.Vec.sort": {"tf": 8.602325267042627}, "sain.Vec.index": {"tf": 8}, "sain.Vec.count": {"tf": 8.602325267042627}, "sain.Error": {"tf": 25.41653005427767}, "sain.Error.__init__": {"tf": 1.7320508075688772}, "sain.Error.message": {"tf": 1.7320508075688772}, "sain.Error.source": {"tf": 1.7320508075688772}, "sain.Error.description": {"tf": 1.7320508075688772}, "sain.Box": {"tf": 11.916375287812984}, "sain.Box.__init__": {"tf": 1.7320508075688772}, "sain.Box.has_expired": {"tf": 1.7320508075688772}, "sain.Box.on_expire": {"tf": 14.66287829861518}, "sain.Box.remaining": {"tf": 9.695359714832659}, "sain.Box.get": {"tf": 9.746794344808963}, "sain.MaybeUninit": {"tf": 13.74772708486752}, "sain.MaybeUninit.__init__": {"tf": 1.7320508075688772}, "sain.MaybeUninit.uninit": {"tf": 7.0710678118654755}, "sain.MaybeUninit.uninit_array": {"tf": 10.392304845413264}, "sain.MaybeUninit.assume_init": {"tf": 11.180339887498949}, "sain.MaybeUninit.write": {"tf": 12.569805089976535}, "sain.From": {"tf": 10.099504938362077}, "sain.From.__init__": {"tf": 1.7320508075688772}, "sain.From.from_t": {"tf": 1.7320508075688772}, "sain.TryFrom": {"tf": 13.379088160259652}, "sain.TryFrom.__init__": {"tf": 1.7320508075688772}, "sain.TryFrom.try_from": {"tf": 1.7320508075688772}, "sain.Into": {"tf": 8.602325267042627}, "sain.Into.__init__": {"tf": 1.7320508075688772}, "sain.Into.into": {"tf": 1.7320508075688772}, "sain.TryInto": {"tf": 12.649110640673518}, "sain.TryInto.__init__": {"tf": 1.7320508075688772}, "sain.TryInto.try_into": {"tf": 1.7320508075688772}, "sain.boxed": {"tf": 2.23606797749979}, "sain.boxed.Box": {"tf": 11.916375287812984}, "sain.boxed.Box.__init__": {"tf": 1.7320508075688772}, "sain.boxed.Box.has_expired": {"tf": 1.7320508075688772}, "sain.boxed.Box.on_expire": {"tf": 14.66287829861518}, "sain.boxed.Box.remaining": {"tf": 9.695359714832659}, "sain.boxed.Box.get": {"tf": 9.746794344808963}, "sain.cfg.cfg_attr": {"tf": 15.198684153570664}, "sain.cfg.cfg": {"tf": 12.922847983320086}, "sain.collections": {"tf": 5.830951894845301}, "sain.collections.Vec": {"tf": 24.310491562286437}, "sain.collections.Vec.__init__": {"tf": 1.7320508075688772}, "sain.collections.Vec.with_capacity": {"tf": 12.24744871391589}, "sain.collections.Vec.as_ref": {"tf": 8.366600265340756}, "sain.collections.Vec.len": {"tf": 7.483314773547883}, "sain.collections.Vec.capacity": {"tf": 10.099504938362077}, "sain.collections.Vec.iter": {"tf": 9.219544457292887}, "sain.collections.Vec.is_empty": {"tf": 1.7320508075688772}, "sain.collections.Vec.split_off": {"tf": 9.9498743710662}, "sain.collections.Vec.split_first": {"tf": 11.789826122551595}, "sain.collections.Vec.first": {"tf": 8.246211251235321}, "sain.collections.Vec.truncate": {"tf": 8.246211251235321}, "sain.collections.Vec.retain": {"tf": 9.797958971132712}, "sain.collections.Vec.swap_remove": {"tf": 11.532562594670797}, "sain.collections.Vec.push": {"tf": 7.3484692283495345}, "sain.collections.Vec.push_within_capacity": {"tf": 15.165750888103101}, "sain.collections.Vec.reserve": {"tf": 13.19090595827292}, "sain.collections.Vec.append": {"tf": 2.23606797749979}, "sain.collections.Vec.get": {"tf": 9.746794344808963}, "sain.collections.Vec.insert": {"tf": 8.94427190999916}, "sain.collections.Vec.pop": {"tf": 9.327379053088816}, "sain.collections.Vec.remove": {"tf": 9.327379053088816}, "sain.collections.Vec.extend": {"tf": 10.14889156509222}, "sain.collections.Vec.copy": {"tf": 9.16515138991168}, "sain.collections.Vec.clear": {"tf": 8.06225774829855}, "sain.collections.Vec.sort": {"tf": 8.602325267042627}, "sain.collections.Vec.index": {"tf": 8}, "sain.collections.Vec.count": {"tf": 8.602325267042627}, "sain.collections.Bytes": {"tf": 12.569805089976535}, "sain.collections.Bytes.__init__": {"tf": 3.1622776601683795}, "sain.collections.Bytes.from_str": {"tf": 8.831760866327848}, "sain.collections.Bytes.from_static": {"tf": 8.06225774829855}, "sain.collections.Bytes.from_bytes": {"tf": 7.810249675906654}, "sain.collections.Bytes.from_raw": {"tf": 12.884098726725126}, "sain.collections.Bytes.try_to_str": {"tf": 13.30413469565007}, "sain.collections.Bytes.to_str": {"tf": 14.933184523068078}, "sain.collections.Bytes.leak": {"tf": 10.14889156509222}, "sain.collections.Bytes.as_bytes": {"tf": 7.810249675906654}, "sain.collections.Bytes.as_ref": {"tf": 9.327379053088816}, "sain.collections.Bytes.as_mut": {"tf": 9.219544457292887}, "sain.collections.Bytes.raw_parts": {"tf": 2}, "sain.collections.Bytes.put": {"tf": 10.04987562112089}, "sain.collections.Bytes.put_raw": {"tf": 12.529964086141668}, "sain.collections.Bytes.put_bytes": {"tf": 11.704699910719626}, "sain.collections.Bytes.put_str": {"tf": 8.717797887081348}, "sain.collections.Bytes.len": {"tf": 8.18535277187245}, "sain.collections.Bytes.size": {"tf": 8.18535277187245}, "sain.collections.Bytes.iter": {"tf": 10.44030650891055}, "sain.collections.Bytes.is_empty": {"tf": 6.324555320336759}, "sain.collections.Bytes.copy": {"tf": 8.06225774829855}, "sain.collections.Bytes.clear": {"tf": 7.14142842854285}, "sain.collections.Bytes.index": {"tf": 3.3166247903554}, "sain.collections.Bytes.count": {"tf": 8}, "sain.collections.Bytes.insert": {"tf": 3.1622776601683795}, "sain.collections.Bytes.pop": {"tf": 8.246211251235321}, "sain.collections.buf": {"tf": 1.7320508075688772}, "sain.collections.buf.Bytes": {"tf": 12.569805089976535}, "sain.collections.buf.Bytes.__init__": {"tf": 3.1622776601683795}, "sain.collections.buf.Bytes.from_str": {"tf": 8.831760866327848}, "sain.collections.buf.Bytes.from_static": {"tf": 8.06225774829855}, "sain.collections.buf.Bytes.from_bytes": {"tf": 7.810249675906654}, "sain.collections.buf.Bytes.from_raw": {"tf": 12.884098726725126}, "sain.collections.buf.Bytes.try_to_str": {"tf": 13.30413469565007}, "sain.collections.buf.Bytes.to_str": {"tf": 14.933184523068078}, "sain.collections.buf.Bytes.leak": {"tf": 10.14889156509222}, "sain.collections.buf.Bytes.as_bytes": {"tf": 7.810249675906654}, "sain.collections.buf.Bytes.as_ref": {"tf": 9.327379053088816}, "sain.collections.buf.Bytes.as_mut": {"tf": 9.219544457292887}, "sain.collections.buf.Bytes.raw_parts": {"tf": 2}, "sain.collections.buf.Bytes.put": {"tf": 10.04987562112089}, "sain.collections.buf.Bytes.put_raw": {"tf": 12.529964086141668}, "sain.collections.buf.Bytes.put_bytes": {"tf": 11.704699910719626}, "sain.collections.buf.Bytes.put_str": {"tf": 8.717797887081348}, "sain.collections.buf.Bytes.len": {"tf": 8.18535277187245}, "sain.collections.buf.Bytes.size": {"tf": 8.18535277187245}, "sain.collections.buf.Bytes.iter": {"tf": 10.44030650891055}, "sain.collections.buf.Bytes.is_empty": {"tf": 6.324555320336759}, "sain.collections.buf.Bytes.copy": {"tf": 8.06225774829855}, "sain.collections.buf.Bytes.clear": {"tf": 7.14142842854285}, "sain.collections.buf.Bytes.index": {"tf": 3.3166247903554}, "sain.collections.buf.Bytes.count": {"tf": 8}, "sain.collections.buf.Bytes.insert": {"tf": 3.1622776601683795}, "sain.collections.buf.Bytes.pop": {"tf": 8.246211251235321}, "sain.collections.buf.Rawish": {"tf": 5}, "sain.collections.buf.Buffer": {"tf": 5}, "sain.collections.vec": {"tf": 9.643650760992955}, "sain.collections.vec.Vec": {"tf": 24.310491562286437}, "sain.collections.vec.Vec.__init__": {"tf": 1.7320508075688772}, "sain.collections.vec.Vec.with_capacity": {"tf": 12.24744871391589}, "sain.collections.vec.Vec.as_ref": {"tf": 8.366600265340756}, "sain.collections.vec.Vec.len": {"tf": 7.483314773547883}, "sain.collections.vec.Vec.capacity": {"tf": 10.099504938362077}, "sain.collections.vec.Vec.iter": {"tf": 9.219544457292887}, "sain.collections.vec.Vec.is_empty": {"tf": 1.7320508075688772}, "sain.collections.vec.Vec.split_off": {"tf": 9.9498743710662}, "sain.collections.vec.Vec.split_first": {"tf": 11.789826122551595}, "sain.collections.vec.Vec.first": {"tf": 8.246211251235321}, "sain.collections.vec.Vec.truncate": {"tf": 8.246211251235321}, "sain.collections.vec.Vec.retain": {"tf": 9.797958971132712}, "sain.collections.vec.Vec.swap_remove": {"tf": 11.532562594670797}, "sain.collections.vec.Vec.push": {"tf": 7.3484692283495345}, "sain.collections.vec.Vec.push_within_capacity": {"tf": 15.165750888103101}, "sain.collections.vec.Vec.reserve": {"tf": 13.19090595827292}, "sain.collections.vec.Vec.append": {"tf": 2.23606797749979}, "sain.collections.vec.Vec.get": {"tf": 9.746794344808963}, "sain.collections.vec.Vec.insert": {"tf": 8.94427190999916}, "sain.collections.vec.Vec.pop": {"tf": 9.327379053088816}, "sain.collections.vec.Vec.remove": {"tf": 9.327379053088816}, "sain.collections.vec.Vec.extend": {"tf": 10.14889156509222}, "sain.collections.vec.Vec.copy": {"tf": 9.16515138991168}, "sain.collections.vec.Vec.clear": {"tf": 8.06225774829855}, "sain.collections.vec.Vec.sort": {"tf": 8.602325267042627}, "sain.collections.vec.Vec.index": {"tf": 8}, "sain.collections.vec.Vec.count": {"tf": 8.602325267042627}, "sain.collections.vec.from_args": {"tf": 8.717797887081348}, "sain.convert": {"tf": 23.748684174075834}, "sain.convert.From": {"tf": 10.099504938362077}, "sain.convert.From.__init__": {"tf": 1.7320508075688772}, "sain.convert.From.from_t": {"tf": 1.7320508075688772}, "sain.convert.TryFrom": {"tf": 13.379088160259652}, "sain.convert.TryFrom.__init__": {"tf": 1.7320508075688772}, "sain.convert.TryFrom.try_from": {"tf": 1.7320508075688772}, "sain.convert.Into": {"tf": 8.602325267042627}, "sain.convert.Into.__init__": {"tf": 1.7320508075688772}, "sain.convert.Into.into": {"tf": 1.7320508075688772}, "sain.convert.TryInto": {"tf": 12.649110640673518}, "sain.convert.TryInto.__init__": {"tf": 1.7320508075688772}, "sain.convert.TryInto.try_into": {"tf": 1.7320508075688772}, "sain.default": {"tf": 9}, "sain.default.Default": {"tf": 10.954451150103322}, "sain.default.Default.__init__": {"tf": 1.7320508075688772}, "sain.default.Default.default": {"tf": 1.7320508075688772}, "sain.error": {"tf": 10.344080432788601}, "sain.error.Error": {"tf": 25.41653005427767}, "sain.error.Error.__init__": {"tf": 1.7320508075688772}, "sain.error.Error.message": {"tf": 1.7320508075688772}, "sain.error.Error.source": {"tf": 1.7320508075688772}, "sain.error.Error.description": {"tf": 1.7320508075688772}, "sain.futures": {"tf": 2}, "sain.futures.spawn": {"tf": 15.874507866387544}, "sain.futures.loop": {"tf": 3.872983346207417}, "sain.iter": {"tf": 2.23606797749979}, "sain.iter.Iter": {"tf": 13.527749258468683}, "sain.iter.Iter.__init__": {"tf": 1.7320508075688772}, "sain.iter.Iter.clone": {"tf": 8.888194417315589}, "sain.iter.Iterator": {"tf": 18.547236990991408}, "sain.iter.Iterator.default": {"tf": 7.615773105863909}, "sain.iter.Iterator.collect": {"tf": 9.38083151964686}, "sain.iter.Iterator.to_vec": {"tf": 8.366600265340756}, "sain.iter.Iterator.sink": {"tf": 8.246211251235321}, "sain.iter.Iterator.raw_parts": {"tf": 10}, "sain.iter.Iterator.next": {"tf": 10.63014581273465}, "sain.iter.Iterator.cloned": {"tf": 12.449899597988733}, "sain.iter.Iterator.copied": {"tf": 12.529964086141668}, "sain.iter.Iterator.map": {"tf": 9.899494936611665}, "sain.iter.Iterator.filter": {"tf": 9.848857801796104}, "sain.iter.Iterator.take": {"tf": 9.746794344808963}, "sain.iter.Iterator.skip": {"tf": 8.94427190999916}, "sain.iter.Iterator.enumerate": {"tf": 9.16515138991168}, "sain.iter.Iterator.take_while": {"tf": 10.954451150103322}, "sain.iter.Iterator.drop_while": {"tf": 10.770329614269007}, "sain.iter.Iterator.all": {"tf": 10.14889156509222}, "sain.iter.Iterator.any": {"tf": 10.099504938362077}, "sain.iter.Iterator.zip": {"tf": 12.649110640673518}, "sain.iter.Iterator.sort": {"tf": 11.135528725660043}, "sain.iter.Iterator.reversed": {"tf": 9.055385138137417}, "sain.iter.Iterator.union": {"tf": 11.090536506409418}, "sain.iter.Iterator.first": {"tf": 8.831760866327848}, "sain.iter.Iterator.last": {"tf": 8.831760866327848}, "sain.iter.Iterator.count": {"tf": 7.211102550927978}, "sain.iter.Iterator.for_each": {"tf": 9.433981132056603}, "sain.iter.Iterator.async_for_each": {"tf": 14.422205101855956}, "sain.iter.Cloned": {"tf": 2.8284271247461903}, "sain.iter.Cloned.__init__": {"tf": 1.7320508075688772}, "sain.iter.Copied": {"tf": 2.8284271247461903}, "sain.iter.Copied.__init__": {"tf": 1.7320508075688772}, "sain.iter.Take": {"tf": 3.1622776601683795}, "sain.iter.Take.__init__": {"tf": 1.7320508075688772}, "sain.iter.Filter": {"tf": 3.1622776601683795}, "sain.iter.Filter.__init__": {"tf": 1.7320508075688772}, "sain.iter.Map": {"tf": 2.8284271247461903}, "sain.iter.Map.__init__": {"tf": 1.7320508075688772}, "sain.iter.Skip": {"tf": 3.1622776601683795}, "sain.iter.Skip.__init__": {"tf": 1.7320508075688772}, "sain.iter.Enumerate": {"tf": 2.8284271247461903}, "sain.iter.Enumerate.__init__": {"tf": 1.7320508075688772}, "sain.iter.TakeWhile": {"tf": 3.4641016151377544}, "sain.iter.TakeWhile.__init__": {"tf": 1.7320508075688772}, "sain.iter.DropWhile": {"tf": 3.4641016151377544}, "sain.iter.DropWhile.__init__": {"tf": 1.7320508075688772}, "sain.iter.Empty": {"tf": 3.3166247903554}, "sain.iter.Empty.next": {"tf": 10.63014581273465}, "sain.iter.Empty.count": {"tf": 7.211102550927978}, "sain.iter.Empty.any": {"tf": 10.099504938362077}, "sain.iter.Empty.all": {"tf": 10.14889156509222}, "sain.iter.into_iter": {"tf": 9.797958971132712}, "sain.iter.empty": {"tf": 7.874007874011811}, "sain.iter.once": {"tf": 9.327379053088816}, "sain.iter.repeat": {"tf": 12}, "sain.macros": {"tf": 2.449489742783178}, "sain.macros.deprecated": {"tf": 12.206555615733702}, "sain.macros.unimplemented": {"tf": 8.48528137423857}, "sain.macros.todo": {"tf": 8.888194417315589}, "sain.macros.doc": {"tf": 10.14889156509222}, "sain.macros.unsafe": {"tf": 2.449489742783178}, "sain.option": {"tf": 3}, "sain.option.Some": {"tf": 10.954451150103322}, "sain.option.Some.__init__": {"tf": 1.7320508075688772}, "sain.option.Some.default": {"tf": 1.7320508075688772}, "sain.option.Some.into_inner": {"tf": 9.643650760992955}, "sain.option.Some.unwrap": {"tf": 10}, "sain.option.Some.unwrap_or": {"tf": 10.14889156509222}, "sain.option.Some.unwrap_or_else": {"tf": 10.344080432788601}, "sain.option.Some.unwrap_unchecked": {"tf": 10.099504938362077}, "sain.option.Some.expect": {"tf": 10.344080432788601}, "sain.option.Some.map": {"tf": 10.344080432788601}, "sain.option.Some.map_or": {"tf": 11.045361017187261}, "sain.option.Some.map_or_else": {"tf": 12.409673645990857}, "sain.option.Some.filter": {"tf": 12.449899597988733}, "sain.option.Some.take": {"tf": 8.366600265340756}, "sain.option.Some.take_if": {"tf": 13.74772708486752}, "sain.option.Some.replace": {"tf": 8.06225774829855}, "sain.option.Some.and_ok": {"tf": 13.341664064126334}, "sain.option.Some.and_then": {"tf": 11.661903789690601}, "sain.option.Some.iter": {"tf": 10.246950765959598}, "sain.option.Some.as_ref": {"tf": 14.560219778561036}, "sain.option.Some.as_mut": {"tf": 11.180339887498949}, "sain.option.Some.is_some": {"tf": 9.643650760992955}, "sain.option.Some.is_some_and": {"tf": 11.269427669584644}, "sain.option.Some.is_none": {"tf": 9.643650760992955}, "sain.option.Option": {"tf": 9.1104335791443}, "sain.option.NOTHING": {"tf": 7.745966692414834}, "sain.result": {"tf": 22.825424421026653}, "sain.result.Ok": {"tf": 2.449489742783178}, "sain.result.Ok.__init__": {"tf": 1.7320508075688772}, "sain.result.Ok.is_ok": {"tf": 8.48528137423857}, "sain.result.Ok.is_ok_and": {"tf": 9.273618495495704}, "sain.result.Ok.is_err": {"tf": 8.246211251235321}, "sain.result.Ok.is_err_and": {"tf": 9.273618495495704}, "sain.result.Ok.expect": {"tf": 11}, "sain.result.Ok.unwrap": {"tf": 10.295630140987}, "sain.result.Ok.unwrap_or": {"tf": 10.862780491200215}, "sain.result.Ok.unwrap_or_else": {"tf": 11.445523142259598}, "sain.result.Ok.unwrap_err": {"tf": 10.488088481701515}, "sain.result.Ok.ok": {"tf": 11.135528725660043}, "sain.result.Ok.err": {"tf": 11.135528725660043}, "sain.result.Ok.inspect": {"tf": 12.489995996796797}, "sain.result.Ok.inspect_err": {"tf": 12.449899597988733}, "sain.result.Ok.map": {"tf": 11.832159566199232}, "sain.result.Ok.map_or": {"tf": 12.609520212918492}, "sain.result.Ok.map_or_else": {"tf": 14.106735979665885}, "sain.result.Ok.map_err": {"tf": 11.269427669584644}, "sain.result.Ok.iter": {"tf": 12.041594578792296}, "sain.result.Err": {"tf": 2.23606797749979}, "sain.result.Err.__init__": {"tf": 1.7320508075688772}, "sain.result.Err.is_ok": {"tf": 8.366600265340756}, "sain.result.Err.is_ok_and": {"tf": 9.16515138991168}, "sain.result.Err.is_err": {"tf": 8.12403840463596}, "sain.result.Err.is_err_and": {"tf": 8.94427190999916}, "sain.result.Err.expect": {"tf": 1.7320508075688772}, "sain.result.Err.expect_err": {"tf": 1.7320508075688772}, "sain.result.Err.unwrap": {"tf": 1.7320508075688772}, "sain.result.Err.unwrap_or": {"tf": 1.7320508075688772}, "sain.result.Err.unwrap_or_else": {"tf": 1.7320508075688772}, "sain.result.Err.unwrap_err": {"tf": 1.7320508075688772}, "sain.result.Err.inspect": {"tf": 1.7320508075688772}, "sain.result.Err.inspect_err": {"tf": 1.7320508075688772}, "sain.result.Err.ok": {"tf": 1.7320508075688772}, "sain.result.Err.err": {"tf": 1.7320508075688772}, "sain.result.Err.map": {"tf": 1.7320508075688772}, "sain.result.Err.map_or": {"tf": 1.7320508075688772}, "sain.result.Err.map_or_else": {"tf": 1.7320508075688772}, "sain.result.Err.map_err": {"tf": 1.7320508075688772}, "sain.result.Err.iter": {"tf": 1.7320508075688772}, "sain.result.Result": {"tf": 1.7320508075688772}, "sain.sync": {"tf": 1.7320508075688772}, "sain.sync.Lazy": {"tf": 12.041594578792296}, "sain.sync.Lazy.is_initialized": {"tf": 1.7320508075688772}, "sain.sync.Lazy.get": {"tf": 2.8284271247461903}, "sain.sync.Lazy.get_unchecked": {"tf": 9.899494936611665}, "sain.sync.Lazy.set": {"tf": 7.483314773547883}, "sain.sync.Once": {"tf": 11.40175425099138}, "sain.sync.Once.is_set": {"tf": 1.7320508075688772}, "sain.sync.Once.get": {"tf": 2.8284271247461903}, "sain.sync.Once.get_unchecked": {"tf": 10.295630140987}, "sain.sync.Once.set": {"tf": 10.583005244258363}, "sain.sync.Once.clear": {"tf": 2.23606797749979}, "sain.sync.Once.get_or": {"tf": 10.770329614269007}, "sain.sync.Once.get_or_with": {"tf": 10.14889156509222}, "sain.sync.Once.into_inner": {"tf": 1.7320508075688772}, "sain.sync.LazyFuture": {"tf": 12.041594578792296}, "sain.sync.LazyFuture.is_initialized": {"tf": 1.7320508075688772}, "sain.sync.LazyFuture.get": {"tf": 4}, "sain.sync.LazyFuture.set": {"tf": 7.280109889280518}, "sain.sync.AsyncOnce": {"tf": 12.083045973594572}, "sain.sync.AsyncOnce.is_set": {"tf": 1.7320508075688772}, "sain.sync.AsyncOnce.get": {"tf": 3}, "sain.sync.AsyncOnce.get_unchecked": {"tf": 10.295630140987}, "sain.sync.AsyncOnce.set": {"tf": 10.770329614269007}, "sain.sync.AsyncOnce.clear": {"tf": 2.23606797749979}, "sain.sync.AsyncOnce.get_or": {"tf": 10.344080432788601}, "sain.sync.AsyncOnce.get_or_with": {"tf": 10.723805294763608}}, "df": 477, "s": {"docs": {"sain": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.Some.unwrap": {"tf": 1}, "sain.Some.and_then": {"tf": 1}, "sain.Iterator.collect": {"tf": 1}, "sain.deprecated": {"tf": 1}, "sain.unimplemented": {"tf": 1}, "sain.doc": {"tf": 1}, "sain.Vec.first": {"tf": 1}, "sain.MaybeUninit": {"tf": 1.4142135623730951}, "sain.From": {"tf": 1.4142135623730951}, "sain.TryFrom": {"tf": 1.7320508075688772}, "sain.TryInto": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.collections": {"tf": 1.4142135623730951}, "sain.collections.Vec.first": {"tf": 1}, "sain.collections.Bytes.put_raw": {"tf": 1}, "sain.collections.Bytes.iter": {"tf": 1}, "sain.collections.buf.Bytes.put_raw": {"tf": 1}, "sain.collections.buf.Bytes.iter": {"tf": 1}, "sain.collections.vec.Vec.first": {"tf": 1}, "sain.convert.From": {"tf": 1.4142135623730951}, "sain.convert.TryFrom": {"tf": 1.7320508075688772}, "sain.convert.TryInto": {"tf": 1}, "sain.iter.Iterator.collect": {"tf": 1}, "sain.macros.deprecated": {"tf": 1}, "sain.macros.unimplemented": {"tf": 1}, "sain.macros.doc": {"tf": 1}, "sain.option": {"tf": 1}, "sain.option.Some.unwrap": {"tf": 1}, "sain.option.Some.and_then": {"tf": 1}, "sain.result": {"tf": 1.7320508075688772}}, "df": 32, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"sain": {"tf": 1}, "sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1.4142135623730951}, "sain.Default": {"tf": 1}, "sain.Some.iter": {"tf": 1}, "sain.Some.as_ref": {"tf": 1}, "sain.Iterator": {"tf": 1}, "sain.Iterator.to_vec": {"tf": 1}, "sain.Iterator.async_for_each": {"tf": 1}, "sain.todo": {"tf": 1}, "sain.deprecated": {"tf": 1}, "sain.unimplemented": {"tf": 1}, "sain.doc": {"tf": 1}, "sain.Vec": {"tf": 1}, "sain.Vec.pop": {"tf": 1}, "sain.Error": {"tf": 1.7320508075688772}, "sain.cfg.cfg_attr": {"tf": 1.4142135623730951}, "sain.cfg.cfg": {"tf": 1}, "sain.collections.Vec": {"tf": 1}, "sain.collections.Vec.pop": {"tf": 1}, "sain.collections.Bytes": {"tf": 1}, "sain.collections.buf.Bytes": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1}, "sain.collections.vec.Vec.pop": {"tf": 1}, "sain.collections.vec.from_args": {"tf": 1}, "sain.default": {"tf": 1}, "sain.default.Default": {"tf": 1}, "sain.error": {"tf": 1.7320508075688772}, "sain.error.Error": {"tf": 1.7320508075688772}, "sain.futures.spawn": {"tf": 1}, "sain.iter.Iterator": {"tf": 1}, "sain.iter.Iterator.to_vec": {"tf": 1}, "sain.iter.Iterator.async_for_each": {"tf": 1}, "sain.iter.into_iter": {"tf": 1}, "sain.iter.empty": {"tf": 1}, "sain.iter.once": {"tf": 1}, "sain.iter.repeat": {"tf": 1}, "sain.macros.deprecated": {"tf": 1}, "sain.macros.unimplemented": {"tf": 1}, "sain.macros.todo": {"tf": 1}, "sain.macros.doc": {"tf": 1}, "sain.option.Some": {"tf": 1}, "sain.option.Some.iter": {"tf": 1}, "sain.option.Some.as_ref": {"tf": 1}, "sain.option.Option": {"tf": 1.4142135623730951}, "sain.option.NOTHING": {"tf": 1}, "sain.result": {"tf": 1}, "sain.sync.Once": {"tf": 1}, "sain.sync.Once.set": {"tf": 1}, "sain.sync.AsyncOnce": {"tf": 1}, "sain.sync.AsyncOnce.set": {"tf": 1}, "sain.sync.AsyncOnce.get_or": {"tf": 1}, "sain.sync.AsyncOnce.get_or_with": {"tf": 1}}, "df": 53}}, "f": {"docs": {}, "df": 0, "e": {"docs": {"sain.Box": {"tf": 1}, "sain.MaybeUninit.assume_init": {"tf": 1}, "sain.TryFrom": {"tf": 1}, "sain.boxed.Box": {"tf": 1}, "sain.collections.Bytes.try_to_str": {"tf": 1}, "sain.collections.buf.Bytes.try_to_str": {"tf": 1}, "sain.convert": {"tf": 1}, "sain.convert.TryFrom": {"tf": 1}, "sain.sync.Lazy": {"tf": 1}, "sain.sync.LazyFuture": {"tf": 1}}, "df": 10, "t": {"docs": {}, "df": 0, "y": {"docs": {"sain.Some.unwrap_unchecked": {"tf": 1}, "sain.MaybeUninit.assume_init": {"tf": 1}, "sain.option.Some.unwrap_unchecked": {"tf": 1}, "sain.sync.Lazy.get_unchecked": {"tf": 1}, "sain.sync.Once.get_unchecked": {"tf": 1}, "sain.sync.LazyFuture.get": {"tf": 1}, "sain.sync.AsyncOnce.get_unchecked": {"tf": 1}}, "df": 7}}}}, "m": {"docs": {}, "df": 0, "e": {"docs": {"sain.Iterator": {"tf": 1}, "sain.Iterator.cloned": {"tf": 1.4142135623730951}, "sain.Iterator.copied": {"tf": 1}, "sain.Vec": {"tf": 1}, "sain.From": {"tf": 1}, "sain.collections.Vec": {"tf": 1}, "sain.collections.Bytes": {"tf": 1}, "sain.collections.buf.Bytes": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1}, "sain.convert.From": {"tf": 1}, "sain.iter.Iterator": {"tf": 1}, "sain.iter.Iterator.cloned": {"tf": 1.4142135623730951}, "sain.iter.Iterator.copied": {"tf": 1}, "sain.iter.repeat": {"tf": 1}, "sain.sync.Once": {"tf": 1}, "sain.sync.Once.get_or": {"tf": 1}, "sain.sync.AsyncOnce": {"tf": 1}}, "df": 17}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "y": {"docs": {"sain.Iterator.raw_parts": {"tf": 1}, "sain.iter.Iterator.raw_parts": {"tf": 1}}, "df": 2}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"sain.Vec": {"tf": 1}, "sain.collections.Vec": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1}}, "df": 3}}}, "y": {"docs": {}, "df": 0, "s": {"docs": {"sain.From": {"tf": 1}, "sain.convert.From": {"tf": 1}}, "df": 2}}, "k": {"docs": {}, "df": 0, "e": {"docs": {"sain.From": {"tf": 1}, "sain.convert.From": {"tf": 1}}, "df": 2}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {"sain": {"tf": 1}, "sain.doc": {"tf": 1}, "sain.Vec.capacity": {"tf": 1}, "sain.Box.on_expire": {"tf": 1.4142135623730951}, "sain.MaybeUninit.uninit_array": {"tf": 1}, "sain.boxed.Box.on_expire": {"tf": 1.4142135623730951}, "sain.collections.Vec.capacity": {"tf": 1}, "sain.collections.vec.Vec.capacity": {"tf": 1}, "sain.macros.doc": {"tf": 1}, "sain.sync.Lazy": {"tf": 1.7320508075688772}, "sain.sync.Lazy.get": {"tf": 1.4142135623730951}, "sain.sync.Lazy.get_unchecked": {"tf": 1}, "sain.sync.Lazy.set": {"tf": 1.4142135623730951}, "sain.sync.Once": {"tf": 1}, "sain.sync.Once.set": {"tf": 2.449489742783178}, "sain.sync.Once.get_or": {"tf": 1.4142135623730951}, "sain.sync.LazyFuture": {"tf": 1.7320508075688772}, "sain.sync.LazyFuture.set": {"tf": 1.4142135623730951}, "sain.sync.AsyncOnce": {"tf": 1}, "sain.sync.AsyncOnce.set": {"tf": 2.449489742783178}}, "df": 20, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.Some.take": {"tf": 1}, "sain.Some.take_if": {"tf": 1}, "sain.collections.Bytes.leak": {"tf": 1}, "sain.collections.buf.Bytes.leak": {"tf": 1}, "sain.option.Some.take": {"tf": 1}, "sain.option.Some.take_if": {"tf": 1}, "sain.sync.Once.clear": {"tf": 1}, "sain.sync.AsyncOnce.clear": {"tf": 1}}, "df": 8}}}}, "s": {"docs": {"sain.MaybeUninit.write": {"tf": 1}}, "df": 1}}, "l": {"docs": {}, "df": 0, "f": {"docs": {"sain.cfg_attr": {"tf": 1}, "sain.Some.into_inner": {"tf": 1}, "sain.Some.take": {"tf": 1}, "sain.Some.take_if": {"tf": 1}, "sain.Iterator": {"tf": 3.1622776601683795}, "sain.Vec.split_off": {"tf": 1.4142135623730951}, "sain.Vec.copy": {"tf": 1}, "sain.Error": {"tf": 3.1622776601683795}, "sain.MaybeUninit.assume_init": {"tf": 1}, "sain.From": {"tf": 1}, "sain.TryFrom": {"tf": 2}, "sain.Into": {"tf": 1.7320508075688772}, "sain.TryInto": {"tf": 2.23606797749979}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.collections.Vec.split_off": {"tf": 1.4142135623730951}, "sain.collections.Vec.copy": {"tf": 1}, "sain.collections.Bytes.try_to_str": {"tf": 1.4142135623730951}, "sain.collections.Bytes.to_str": {"tf": 1.4142135623730951}, "sain.collections.Bytes.as_bytes": {"tf": 1}, "sain.collections.Bytes.as_ref": {"tf": 1.4142135623730951}, "sain.collections.Bytes.as_mut": {"tf": 1.4142135623730951}, "sain.collections.Bytes.raw_parts": {"tf": 1}, "sain.collections.Bytes.put": {"tf": 1}, "sain.collections.Bytes.put_raw": {"tf": 1}, "sain.collections.Bytes.put_bytes": {"tf": 1}, "sain.collections.Bytes.put_str": {"tf": 1}, "sain.collections.Bytes.iter": {"tf": 1}, "sain.collections.Bytes.is_empty": {"tf": 1}, "sain.collections.buf.Bytes.try_to_str": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.to_str": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.as_bytes": {"tf": 1}, "sain.collections.buf.Bytes.as_ref": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.as_mut": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.raw_parts": {"tf": 1}, "sain.collections.buf.Bytes.put": {"tf": 1}, "sain.collections.buf.Bytes.put_raw": {"tf": 1}, "sain.collections.buf.Bytes.put_bytes": {"tf": 1}, "sain.collections.buf.Bytes.put_str": {"tf": 1}, "sain.collections.buf.Bytes.iter": {"tf": 1}, "sain.collections.buf.Bytes.is_empty": {"tf": 1}, "sain.collections.vec.Vec.split_off": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.copy": {"tf": 1}, "sain.convert": {"tf": 2.449489742783178}, "sain.convert.From": {"tf": 1}, "sain.convert.TryFrom": {"tf": 2}, "sain.convert.Into": {"tf": 1.7320508075688772}, "sain.convert.TryInto": {"tf": 2.23606797749979}, "sain.error": {"tf": 1}, "sain.error.Error": {"tf": 3.1622776601683795}, "sain.iter.Iterator": {"tf": 3.1622776601683795}, "sain.option.Some.into_inner": {"tf": 1}, "sain.option.Some.take": {"tf": 1}, "sain.option.Some.take_if": {"tf": 1}}, "df": 53}}, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.Iterator": {"tf": 2.8284271247461903}, "sain.iter.Iterator": {"tf": 2.8284271247461903}}, "df": 2}}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sain.Iterator.collect": {"tf": 1}, "sain.MaybeUninit.uninit_array": {"tf": 1}, "sain.collections.Bytes.as_ref": {"tf": 1.4142135623730951}, "sain.collections.Bytes.as_mut": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.as_ref": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.as_mut": {"tf": 1.4142135623730951}, "sain.iter.Iterator.collect": {"tf": 1}, "sain.iter.into_iter": {"tf": 1.4142135623730951}}, "df": 8, "s": {"docs": {"sain.collections": {"tf": 1}}, "df": 1}, "[": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"sain.collections.Bytes.put_bytes": {"tf": 1}, "sain.collections.buf.Bytes.put_bytes": {"tf": 1}}, "df": 2}}}}}}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"sain.Vec": {"tf": 1}, "sain.collections.Vec": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1}}, "df": 3, "s": {"docs": {"sain.Box": {"tf": 1}, "sain.Box.on_expire": {"tf": 1}, "sain.Box.remaining": {"tf": 1}, "sain.boxed.Box": {"tf": 1}, "sain.boxed.Box.on_expire": {"tf": 1}, "sain.boxed.Box.remaining": {"tf": 1}}, "df": 6}}}}}, "e": {"docs": {"sain.Vec": {"tf": 1}, "sain.collections.Vec": {"tf": 1}, "sain.collections.Bytes": {"tf": 1}, "sain.collections.Bytes.put_raw": {"tf": 1}, "sain.collections.buf.Bytes": {"tf": 1}, "sain.collections.buf.Bytes.put_raw": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1}, "sain.convert": {"tf": 1}, "sain.iter": {"tf": 1}}, "df": 9}, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"sain.MaybeUninit": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"sain.collections.Bytes.index": {"tf": 1}, "sain.collections.buf.Bytes.index": {"tf": 1}}, "df": 2}}}}, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"sain.convert": {"tf": 1}}, "df": 1}}}}}, "o": {"docs": {"sain.Vec": {"tf": 1.4142135623730951}, "sain.MaybeUninit": {"tf": 1.4142135623730951}, "sain.From": {"tf": 1}, "sain.collections.Vec": {"tf": 1.4142135623730951}, "sain.collections.Bytes.to_str": {"tf": 1}, "sain.collections.buf.Bytes.to_str": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1.4142135623730951}, "sain.convert.From": {"tf": 1}, "sain.sync.Once.set": {"tf": 1}, "sain.sync.AsyncOnce.set": {"tf": 1}}, "df": 10, "m": {"docs": {}, "df": 0, "e": {"docs": {"sain.Some": {"tf": 1.7320508075688772}, "sain.Some.default": {"tf": 1.7320508075688772}, "sain.Some.into_inner": {"tf": 1.4142135623730951}, "sain.Some.unwrap": {"tf": 1.4142135623730951}, "sain.Some.unwrap_or": {"tf": 1.4142135623730951}, "sain.Some.unwrap_or_else": {"tf": 1.4142135623730951}, "sain.Some.unwrap_unchecked": {"tf": 1.7320508075688772}, "sain.Some.expect": {"tf": 1.4142135623730951}, "sain.Some.map": {"tf": 2.23606797749979}, "sain.Some.map_or": {"tf": 1.4142135623730951}, "sain.Some.map_or_else": {"tf": 1.4142135623730951}, "sain.Some.filter": {"tf": 2.449489742783178}, "sain.Some.take": {"tf": 1.4142135623730951}, "sain.Some.take_if": {"tf": 2}, "sain.Some.replace": {"tf": 1.4142135623730951}, "sain.Some.and_ok": {"tf": 2.449489742783178}, "sain.Some.and_then": {"tf": 2.6457513110645907}, "sain.Some.iter": {"tf": 2}, "sain.Some.as_ref": {"tf": 2}, "sain.Some.as_mut": {"tf": 2.23606797749979}, "sain.Some.is_some": {"tf": 2}, "sain.Some.is_some_and": {"tf": 2}, "sain.Some.is_none": {"tf": 1.4142135623730951}, "sain.Iterator.next": {"tf": 1.7320508075688772}, "sain.Iterator.first": {"tf": 1}, "sain.Iterator.last": {"tf": 1}, "sain.Ok.ok": {"tf": 1}, "sain.Ok.err": {"tf": 1}, "sain.Ok.iter": {"tf": 1.4142135623730951}, "sain.Vec.split_first": {"tf": 1.4142135623730951}, "sain.Vec.get": {"tf": 1.4142135623730951}, "sain.Vec.pop": {"tf": 1.4142135623730951}, "sain.Error": {"tf": 2}, "sain.Box.on_expire": {"tf": 1.7320508075688772}, "sain.Box.get": {"tf": 1}, "sain.MaybeUninit": {"tf": 1}, "sain.TryFrom": {"tf": 1.4142135623730951}, "sain.TryInto": {"tf": 1}, "sain.boxed.Box.on_expire": {"tf": 1.7320508075688772}, "sain.boxed.Box.get": {"tf": 1}, "sain.collections.Vec.split_first": {"tf": 1.4142135623730951}, "sain.collections.Vec.get": {"tf": 1.4142135623730951}, "sain.collections.Vec.pop": {"tf": 1.4142135623730951}, "sain.collections.Bytes.pop": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.pop": {"tf": 1.4142135623730951}, "sain.collections.buf.Rawish": {"tf": 1}, "sain.collections.buf.Buffer": {"tf": 1}, "sain.collections.vec.Vec.split_first": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.get": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.pop": {"tf": 1.4142135623730951}, "sain.convert.TryFrom": {"tf": 1.4142135623730951}, "sain.convert.TryInto": {"tf": 1}, "sain.error": {"tf": 1.4142135623730951}, "sain.error.Error": {"tf": 2}, "sain.iter.Iterator.next": {"tf": 1.7320508075688772}, "sain.iter.Iterator.first": {"tf": 1}, "sain.iter.Iterator.last": {"tf": 1}, "sain.iter.Empty.next": {"tf": 1.7320508075688772}, "sain.iter.once": {"tf": 1.4142135623730951}, "sain.iter.repeat": {"tf": 2}, "sain.option.Some.into_inner": {"tf": 1.4142135623730951}, "sain.option.Some.unwrap": {"tf": 1.4142135623730951}, "sain.option.Some.unwrap_or": {"tf": 1.4142135623730951}, "sain.option.Some.unwrap_or_else": {"tf": 1.4142135623730951}, "sain.option.Some.unwrap_unchecked": {"tf": 1.7320508075688772}, "sain.option.Some.expect": {"tf": 1.4142135623730951}, "sain.option.Some.map": {"tf": 2.23606797749979}, "sain.option.Some.map_or": {"tf": 1.4142135623730951}, "sain.option.Some.map_or_else": {"tf": 1.4142135623730951}, "sain.option.Some.filter": {"tf": 2.449489742783178}, "sain.option.Some.take": {"tf": 1.4142135623730951}, "sain.option.Some.take_if": {"tf": 2}, "sain.option.Some.replace": {"tf": 1.4142135623730951}, "sain.option.Some.and_ok": {"tf": 2.449489742783178}, "sain.option.Some.and_then": {"tf": 2.6457513110645907}, "sain.option.Some.iter": {"tf": 2}, "sain.option.Some.as_ref": {"tf": 2}, "sain.option.Some.as_mut": {"tf": 2.23606797749979}, "sain.option.Some.is_some": {"tf": 2}, "sain.option.Some.is_some_and": {"tf": 2}, "sain.option.Some.is_none": {"tf": 1.4142135623730951}, "sain.option.Option": {"tf": 1.7320508075688772}, "sain.option.NOTHING": {"tf": 1.4142135623730951}, "sain.result.Ok.ok": {"tf": 1}, "sain.result.Ok.err": {"tf": 1}, "sain.result.Ok.iter": {"tf": 1.4142135623730951}, "sain.sync.Lazy": {"tf": 1}, "sain.sync.Once": {"tf": 1.4142135623730951}, "sain.sync.Once.get_or": {"tf": 1.4142135623730951}, "sain.sync.LazyFuture": {"tf": 1}, "sain.sync.AsyncOnce": {"tf": 1.4142135623730951}, "sain.sync.AsyncOnce.get": {"tf": 1}}, "df": 92, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.cfg": {"tf": 1}, "sain.Ok.inspect": {"tf": 1}, "sain.Ok.inspect_err": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}, "sain.result.Ok.inspect": {"tf": 1}, "sain.result.Ok.inspect_err": {"tf": 1}}, "df": 6}}}}}, "[": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"sain.Some.as_ref": {"tf": 1}, "sain.Some.as_mut": {"tf": 1}, "sain.option.Some.as_ref": {"tf": 1}, "sain.option.Some.as_mut": {"tf": 1}}, "df": 4}}}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"sain.Vec.split_first": {"tf": 1}, "sain.Vec.first": {"tf": 1}, "sain.Vec.get": {"tf": 1}, "sain.collections.Vec.split_first": {"tf": 1}, "sain.collections.Vec.first": {"tf": 1}, "sain.collections.Vec.get": {"tf": 1}, "sain.collections.vec.Vec.split_first": {"tf": 1}, "sain.collections.vec.Vec.first": {"tf": 1}, "sain.collections.vec.Vec.get": {"tf": 1}}, "df": 9}}}}}}}, "l": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.Some": {"tf": 1}}, "df": 1}}}}}, "r": {"docs": {}, "df": 0, "t": {"docs": {"sain.Iterator.raw_parts": {"tf": 1.4142135623730951}, "sain.Iterator.sort": {"tf": 1.7320508075688772}, "sain.Vec.sort": {"tf": 1}, "sain.collections.Vec.sort": {"tf": 1}, "sain.collections.vec.Vec.sort": {"tf": 1}, "sain.iter.Iterator.raw_parts": {"tf": 1.4142135623730951}, "sain.iter.Iterator.sort": {"tf": 1.7320508075688772}, "sain.sync.Lazy": {"tf": 1}, "sain.sync.LazyFuture": {"tf": 1}}, "df": 9, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.Iterator.raw_parts": {"tf": 1}, "sain.iter.Iterator.raw_parts": {"tf": 1}}, "df": 2}}, "s": {"docs": {"sain.Iterator.sort": {"tf": 1}, "sain.Vec.sort": {"tf": 1}, "sain.collections.Vec.sort": {"tf": 1}, "sain.collections.vec.Vec.sort": {"tf": 1}, "sain.iter.Iterator.sort": {"tf": 1}}, "df": 5}}, "a": {"docs": {"sain.Box": {"tf": 1.7320508075688772}, "sain.boxed.Box": {"tf": 1.7320508075688772}}, "df": 2}}, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.Iterator.take_while": {"tf": 1}, "sain.iter.Iterator.take_while": {"tf": 1}}, "df": 2}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sain.Error": {"tf": 1.4142135623730951}, "sain.Error.source": {"tf": 1}, "sain.collections.Bytes.put_raw": {"tf": 1}, "sain.collections.buf.Bytes.put_raw": {"tf": 1}, "sain.error.Error": {"tf": 1.4142135623730951}, "sain.error.Error.source": {"tf": 1}}, "df": 6}}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {"sain.cfg": {"tf": 1.7320508075688772}, "sain.cfg_attr": {"tf": 1.7320508075688772}, "sain.Default": {"tf": 1.4142135623730951}, "sain.Some.expect": {"tf": 1}, "sain.Some.take_if": {"tf": 1}, "sain.Some.replace": {"tf": 1}, "sain.Some.and_ok": {"tf": 1.4142135623730951}, "sain.Iterator": {"tf": 1}, "sain.Iterator.collect": {"tf": 1}, "sain.Iterator.async_for_each": {"tf": 1}, "sain.todo": {"tf": 1.4142135623730951}, "sain.deprecated": {"tf": 2}, "sain.unimplemented": {"tf": 1.4142135623730951}, "sain.Ok.is_ok": {"tf": 1}, "sain.Ok.is_ok_and": {"tf": 1}, "sain.Ok.is_err": {"tf": 1}, "sain.Ok.is_err_and": {"tf": 1}, "sain.Ok.expect": {"tf": 1.4142135623730951}, "sain.Ok.unwrap": {"tf": 1.4142135623730951}, "sain.Ok.unwrap_or": {"tf": 1.4142135623730951}, "sain.Ok.unwrap_or_else": {"tf": 1.4142135623730951}, "sain.Ok.unwrap_err": {"tf": 1.4142135623730951}, "sain.Ok.ok": {"tf": 1.4142135623730951}, "sain.Ok.err": {"tf": 1.4142135623730951}, "sain.Ok.inspect": {"tf": 2}, "sain.Ok.inspect_err": {"tf": 2}, "sain.Ok.map": {"tf": 1.7320508075688772}, "sain.Ok.map_or": {"tf": 2}, "sain.Ok.map_or_else": {"tf": 2}, "sain.Ok.map_err": {"tf": 1.4142135623730951}, "sain.Ok.iter": {"tf": 1.4142135623730951}, "sain.Err.is_ok": {"tf": 1}, "sain.Err.is_ok_and": {"tf": 1}, "sain.Err.is_err": {"tf": 1}, "sain.Err.is_err_and": {"tf": 1}, "sain.Vec": {"tf": 1.4142135623730951}, "sain.Vec.iter": {"tf": 1.4142135623730951}, "sain.Error": {"tf": 1.7320508075688772}, "sain.Box": {"tf": 1}, "sain.Box.on_expire": {"tf": 1}, "sain.MaybeUninit": {"tf": 1}, "sain.MaybeUninit.uninit": {"tf": 1}, "sain.MaybeUninit.uninit_array": {"tf": 1}, "sain.From": {"tf": 1.4142135623730951}, "sain.TryFrom": {"tf": 2}, "sain.Into": {"tf": 1.7320508075688772}, "sain.TryInto": {"tf": 1.7320508075688772}, "sain.boxed.Box": {"tf": 1}, "sain.boxed.Box.on_expire": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1.7320508075688772}, "sain.cfg.cfg": {"tf": 1.7320508075688772}, "sain.collections.Vec": {"tf": 1.4142135623730951}, "sain.collections.Vec.iter": {"tf": 1.4142135623730951}, "sain.collections.Bytes": {"tf": 1.4142135623730951}, "sain.collections.Bytes.from_str": {"tf": 1}, "sain.collections.Bytes.try_to_str": {"tf": 1.4142135623730951}, "sain.collections.Bytes.to_str": {"tf": 2}, "sain.collections.Bytes.leak": {"tf": 1}, "sain.collections.Bytes.as_bytes": {"tf": 1}, "sain.collections.Bytes.as_ref": {"tf": 1}, "sain.collections.Bytes.as_mut": {"tf": 1}, "sain.collections.Bytes.put_bytes": {"tf": 1}, "sain.collections.Bytes.put_str": {"tf": 1.7320508075688772}, "sain.collections.buf.Bytes": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.from_str": {"tf": 1}, "sain.collections.buf.Bytes.try_to_str": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.to_str": {"tf": 2}, "sain.collections.buf.Bytes.leak": {"tf": 1}, "sain.collections.buf.Bytes.as_bytes": {"tf": 1}, "sain.collections.buf.Bytes.as_ref": {"tf": 1}, "sain.collections.buf.Bytes.as_mut": {"tf": 1}, "sain.collections.buf.Bytes.put_bytes": {"tf": 1}, "sain.collections.buf.Bytes.put_str": {"tf": 1.7320508075688772}, "sain.collections.vec": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.iter": {"tf": 1.4142135623730951}, "sain.convert": {"tf": 1}, "sain.convert.From": {"tf": 1.4142135623730951}, "sain.convert.TryFrom": {"tf": 2}, "sain.convert.Into": {"tf": 1.7320508075688772}, "sain.convert.TryInto": {"tf": 1.7320508075688772}, "sain.default": {"tf": 1.7320508075688772}, "sain.default.Default": {"tf": 1.4142135623730951}, "sain.error": {"tf": 1.4142135623730951}, "sain.error.Error": {"tf": 1.7320508075688772}, "sain.futures.spawn": {"tf": 1.4142135623730951}, "sain.iter.Iterator": {"tf": 1}, "sain.iter.Iterator.collect": {"tf": 1}, "sain.iter.Iterator.async_for_each": {"tf": 1}, "sain.macros.deprecated": {"tf": 2}, "sain.macros.unimplemented": {"tf": 1.4142135623730951}, "sain.macros.todo": {"tf": 1.4142135623730951}, "sain.option.Some": {"tf": 1.4142135623730951}, "sain.option.Some.expect": {"tf": 1}, "sain.option.Some.take_if": {"tf": 1}, "sain.option.Some.replace": {"tf": 1}, "sain.option.Some.and_ok": {"tf": 1.4142135623730951}, "sain.option.Option": {"tf": 1}, "sain.result": {"tf": 2}, "sain.result.Ok.is_ok": {"tf": 1}, "sain.result.Ok.is_ok_and": {"tf": 1}, "sain.result.Ok.is_err": {"tf": 1}, "sain.result.Ok.is_err_and": {"tf": 1}, "sain.result.Ok.expect": {"tf": 1.4142135623730951}, "sain.result.Ok.unwrap": {"tf": 1.4142135623730951}, "sain.result.Ok.unwrap_or": {"tf": 1.4142135623730951}, "sain.result.Ok.unwrap_or_else": {"tf": 1.4142135623730951}, "sain.result.Ok.unwrap_err": {"tf": 1.4142135623730951}, "sain.result.Ok.ok": {"tf": 1.4142135623730951}, "sain.result.Ok.err": {"tf": 1.4142135623730951}, "sain.result.Ok.inspect": {"tf": 2}, "sain.result.Ok.inspect_err": {"tf": 2}, "sain.result.Ok.map": {"tf": 1.7320508075688772}, "sain.result.Ok.map_or": {"tf": 2}, "sain.result.Ok.map_or_else": {"tf": 2}, "sain.result.Ok.map_err": {"tf": 1.4142135623730951}, "sain.result.Ok.iter": {"tf": 1.4142135623730951}, "sain.result.Err.is_ok": {"tf": 1}, "sain.result.Err.is_ok_and": {"tf": 1}, "sain.result.Err.is_err": {"tf": 1}, "sain.result.Err.is_err_and": {"tf": 1}, "sain.sync.Lazy": {"tf": 1}, "sain.sync.Lazy.set": {"tf": 1}, "sain.sync.LazyFuture": {"tf": 1}}, "df": 124, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"sain.Iterator.cloned": {"tf": 1}, "sain.iter.Iterator.cloned": {"tf": 1}}, "df": 2}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.collections.Bytes.from_str": {"tf": 1}, "sain.collections.Bytes.from_raw": {"tf": 1.7320508075688772}, "sain.collections.Bytes.try_to_str": {"tf": 1.4142135623730951}, "sain.collections.Bytes.to_str": {"tf": 1}, "sain.collections.Bytes.put_raw": {"tf": 1}, "sain.collections.Bytes.put_str": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.from_str": {"tf": 1}, "sain.collections.buf.Bytes.from_raw": {"tf": 1.7320508075688772}, "sain.collections.buf.Bytes.try_to_str": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.to_str": {"tf": 1}, "sain.collections.buf.Bytes.put_raw": {"tf": 1}, "sain.collections.buf.Bytes.put_str": {"tf": 1.4142135623730951}}, "df": 12, "s": {"docs": {"sain.MaybeUninit": {"tf": 1}, "sain.collections.Bytes.try_to_str": {"tf": 1}, "sain.collections.buf.Bytes.try_to_str": {"tf": 1}}, "df": 3}, "i": {"docs": {}, "df": 0, "o": {"docs": {"sain.collections.Bytes.from_raw": {"tf": 1}, "sain.collections.Bytes.put_raw": {"tf": 1}, "sain.collections.buf.Bytes.from_raw": {"tf": 1}, "sain.collections.buf.Bytes.put_raw": {"tf": 1}, "sain.collections.buf.Rawish": {"tf": 1}}, "df": 5}}}}}, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {"sain.result": {"tf": 1}}, "df": 1, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"sain.collections": {"tf": 1}}, "df": 1}}}}}}}}}}}}}, "u": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "f": {"docs": {"sain.cfg_attr": {"tf": 1}, "sain.Box.get": {"tf": 1}, "sain.boxed.Box.get": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}}, "df": 4}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"sain.collections.Bytes": {"tf": 1}, "sain.collections.Bytes.from_static": {"tf": 1}, "sain.collections.buf.Bytes": {"tf": 1}, "sain.collections.buf.Bytes.from_static": {"tf": 1}}, "df": 4, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {"sain.Default": {"tf": 1}, "sain.default": {"tf": 1}, "sain.default.Default": {"tf": 1}, "sain.option.Some": {"tf": 1}}, "df": 4}}}}}}}}, "u": {"docs": {}, "df": 0, "s": {"docs": {"sain.Error": {"tf": 1.4142135623730951}, "sain.error.Error": {"tf": 1.4142135623730951}}, "df": 2}}, "e": {"docs": {"sain.MaybeUninit.uninit": {"tf": 1}, "sain.MaybeUninit.uninit_array": {"tf": 1.4142135623730951}, "sain.MaybeUninit.assume_init": {"tf": 1}}, "df": 3}}, "r": {"docs": {}, "df": 0, "t": {"docs": {"sain.Vec": {"tf": 1.4142135623730951}, "sain.Box": {"tf": 1.7320508075688772}, "sain.boxed.Box": {"tf": 1.7320508075688772}, "sain.collections.Vec": {"tf": 1.4142135623730951}, "sain.collections.Bytes.iter": {"tf": 1}, "sain.collections.Bytes.index": {"tf": 1}, "sain.collections.buf.Bytes.iter": {"tf": 1}, "sain.collections.buf.Bytes.index": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1.4142135623730951}, "sain.sync.Once": {"tf": 1}, "sain.sync.AsyncOnce": {"tf": 1}}, "df": 11, "s": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"sain.Iterator.filter": {"tf": 1}, "sain.iter.Iterator.filter": {"tf": 1}}, "df": 2}}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.Box": {"tf": 1}, "sain.boxed.Box": {"tf": 1}}, "df": 2}}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"sain.collections": {"tf": 1}}, "df": 1}}}}}}, "d": {"docs": {}, "df": 0, ":": {"docs": {}, "df": 0, ":": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, ":": {"docs": {}, "df": 0, ":": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sain.Iter": {"tf": 1}, "sain.iter.Iter": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"sain.Iterator.all": {"tf": 1.4142135623730951}, "sain.iter.Iterator.all": {"tf": 1.4142135623730951}, "sain.iter.Empty.all": {"tf": 1.4142135623730951}}, "df": 3}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"sain.collections": {"tf": 1}}, "df": 1, "s": {"docs": {"sain.convert": {"tf": 1}}, "df": 1}, "d": {"docs": {"sain.sync.Once.get": {"tf": 1}, "sain.sync.AsyncOnce.get": {"tf": 1.4142135623730951}}, "df": 2}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.collections.Bytes": {"tf": 1}, "sain.collections.buf.Bytes": {"tf": 1}}, "df": 2}}}}, "p": {"docs": {"sain.collections.Bytes.index": {"tf": 1}, "sain.collections.buf.Bytes.index": {"tf": 1}}, "df": 2}}}, "y": {"docs": {}, "df": 0, "s": {"docs": {"sain.Some.map_or_else": {"tf": 1}, "sain.option.Some.map_or_else": {"tf": 1}}, "df": 2, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 4}}}}, "n": {"docs": {}, "df": 0, "c": {"docs": {"sain.Box.on_expire": {"tf": 1}, "sain.boxed.Box.on_expire": {"tf": 1}, "sain.sync.AsyncOnce.get_or": {"tf": 1}, "sain.sync.AsyncOnce.get_or_with": {"tf": 1}}, "df": 4, "h": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.sync": {"tf": 1}, "sain.sync.Once": {"tf": 1}, "sain.sync.AsyncOnce": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sain.Some.unwrap": {"tf": 1}, "sain.Iterator.cloned": {"tf": 1}, "sain.Iterator.copied": {"tf": 1}, "sain.deprecated": {"tf": 1.4142135623730951}, "sain.iter.Iterator.cloned": {"tf": 1}, "sain.iter.Iterator.copied": {"tf": 1}, "sain.macros.deprecated": {"tf": 1.4142135623730951}, "sain.option.Some.unwrap": {"tf": 1}}, "df": 8}}, "k": {"docs": {"sain.Iterator.sink": {"tf": 1.4142135623730951}, "sain.Ok.inspect": {"tf": 1.7320508075688772}, "sain.Ok.inspect_err": {"tf": 1.7320508075688772}, "sain.Box.on_expire": {"tf": 1.7320508075688772}, "sain.boxed.Box.on_expire": {"tf": 1.7320508075688772}, "sain.iter.Iterator.sink": {"tf": 1.4142135623730951}, "sain.result.Ok.inspect": {"tf": 1.7320508075688772}, "sain.result.Ok.inspect_err": {"tf": 1.7320508075688772}}, "df": 8, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.Box.on_expire": {"tf": 1.4142135623730951}, "sain.boxed.Box.on_expire": {"tf": 1.4142135623730951}}, "df": 2}}}, "g": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sain.collections.Bytes.put": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.put": {"tf": 1.4142135623730951}, "sain.iter.once": {"tf": 1}}, "df": 3}}}}, "z": {"docs": {}, "df": 0, "e": {"docs": {"sain.Some.map_or_else": {"tf": 1}, "sain.Vec.truncate": {"tf": 1}, "sain.collections.Vec.truncate": {"tf": 1}, "sain.collections.Bytes.size": {"tf": 1}, "sain.collections.buf.Bytes.size": {"tf": 1}, "sain.collections.vec.Vec.truncate": {"tf": 1}, "sain.option.Some.map_or_else": {"tf": 1}}, "df": 7}}, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"sain.Iter": {"tf": 1}, "sain.iter.Iter": {"tf": 1}}, "df": 2}}}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"sain.Iterator.copied": {"tf": 1}, "sain.From": {"tf": 1}, "sain.convert": {"tf": 1}, "sain.convert.From": {"tf": 1}, "sain.iter.Iterator.copied": {"tf": 1}}, "df": 5}, "e": {"docs": {"sain.Error": {"tf": 1}, "sain.TryFrom": {"tf": 1}, "sain.convert.TryFrom": {"tf": 1}, "sain.error.Error": {"tf": 1}, "sain.result": {"tf": 1}}, "df": 5}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"sain.From": {"tf": 1}, "sain.convert.From": {"tf": 1}}, "df": 2}}}}}}}}, "g": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"sain.collections.Bytes.from_bytes": {"tf": 1}, "sain.collections.buf.Bytes.from_bytes": {"tf": 1}}, "df": 2}}}}}}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.Iter": {"tf": 1}, "sain.Box.on_expire": {"tf": 1}, "sain.boxed.Box.on_expire": {"tf": 1}, "sain.collections.Bytes": {"tf": 1}, "sain.collections.buf.Bytes": {"tf": 1}, "sain.iter.Iter": {"tf": 1}}, "df": 6}}}}}}}, "c": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"sain.Ok": {"tf": 1}, "sain.result": {"tf": 1.4142135623730951}, "sain.result.Ok": {"tf": 1}}, "df": 3, "f": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {"sain.collections.Bytes.try_to_str": {"tf": 1}, "sain.collections.buf.Bytes.try_to_str": {"tf": 1}, "sain.convert": {"tf": 1}, "sain.result": {"tf": 1}}, "df": 4}}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.convert": {"tf": 1}}, "df": 1}}}}, "h": {"docs": {"sain.Vec.index": {"tf": 1}, "sain.From": {"tf": 1}, "sain.collections": {"tf": 1}, "sain.collections.Vec.index": {"tf": 1}, "sain.collections.Bytes.index": {"tf": 1}, "sain.collections.buf.Bytes.index": {"tf": 1}, "sain.collections.vec.Vec.index": {"tf": 1}, "sain.convert.From": {"tf": 1}}, "df": 8}}, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"sain.Vec.push_within_capacity": {"tf": 1}, "sain.collections.Vec.push_within_capacity": {"tf": 1}, "sain.collections.vec.Vec.push_within_capacity": {"tf": 1}}, "df": 3}}}}}}}}, "b": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.collections.Bytes.index": {"tf": 1}, "sain.collections.buf.Bytes.index": {"tf": 1}}, "df": 2}}}}}}}}}, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {"sain.Iterator.cloned": {"tf": 1.4142135623730951}, "sain.iter.Iterator.cloned": {"tf": 1.4142135623730951}}, "df": 2}}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"sain.deprecated": {"tf": 1.4142135623730951}, "sain.From": {"tf": 1.4142135623730951}, "sain.collections": {"tf": 1.4142135623730951}, "sain.convert": {"tf": 1}, "sain.convert.From": {"tf": 1.4142135623730951}, "sain.macros.deprecated": {"tf": 1.4142135623730951}}, "df": 6}}}, "w": {"docs": {}, "df": 0, "n": {"docs": {"sain.unimplemented": {"tf": 1}, "sain.macros.unimplemented": {"tf": 1}}, "df": 2}}, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"sain.Vec.truncate": {"tf": 1}, "sain.collections.Vec.truncate": {"tf": 1}, "sain.collections.vec.Vec.truncate": {"tf": 1}}, "df": 3}}}}}}}, "k": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {"sain.Iterator.skip": {"tf": 1}, "sain.iter.Iterator.skip": {"tf": 1}, "sain.iter.Skip": {"tf": 1}}, "df": 3, "s": {"docs": {"sain.Iterator.skip": {"tf": 1}, "sain.iter.Iterator.skip": {"tf": 1}, "sain.iter.Skip": {"tf": 1}}, "df": 3}}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.Vec.with_capacity": {"tf": 1}, "sain.Vec.split_off": {"tf": 1}, "sain.collections.Vec.with_capacity": {"tf": 1}, "sain.collections.Vec.split_off": {"tf": 1}, "sain.collections.Bytes.index": {"tf": 1}, "sain.collections.buf.Bytes.index": {"tf": 1}, "sain.collections.vec.Vec.with_capacity": {"tf": 1}, "sain.collections.vec.Vec.split_off": {"tf": 1}}, "df": 8}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {"sain.convert": {"tf": 1}}, "df": 1}}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"sain.Vec.split_off": {"tf": 2}, "sain.Vec.split_first": {"tf": 2.6457513110645907}, "sain.collections.Vec.split_off": {"tf": 2}, "sain.collections.Vec.split_first": {"tf": 2.6457513110645907}, "sain.collections.vec.Vec.split_off": {"tf": 2}, "sain.collections.vec.Vec.split_first": {"tf": 2.6457513110645907}}, "df": 6}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"sain.Vec.push_within_capacity": {"tf": 1}, "sain.collections.Vec.push_within_capacity": {"tf": 1}, "sain.collections.vec.Vec.push_within_capacity": {"tf": 1}}, "df": 3}, "k": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"sain.collections.Bytes.try_to_str": {"tf": 1.4142135623730951}, "sain.collections.Bytes.to_str": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.try_to_str": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.to_str": {"tf": 1.4142135623730951}}, "df": 4}}}}}, "w": {"docs": {}, "df": 0, "n": {"docs": {"sain.futures.spawn": {"tf": 1.4142135623730951}}, "df": 1, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"sain.futures.spawn": {"tf": 1}}, "df": 1}}}}}}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {"sain.Box": {"tf": 1}, "sain.Box.on_expire": {"tf": 1}, "sain.Box.remaining": {"tf": 1}, "sain.boxed.Box": {"tf": 1}, "sain.boxed.Box.on_expire": {"tf": 1}, "sain.boxed.Box.remaining": {"tf": 1}}, "df": 6}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.MaybeUninit.write": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "r": {"docs": {}, "df": 0, "c": {"docs": {"sain.collections.Bytes.put": {"tf": 1.4142135623730951}, "sain.collections.Bytes.put_raw": {"tf": 1.4142135623730951}, "sain.collections.Bytes.put_bytes": {"tf": 1.4142135623730951}, "sain.collections.Bytes.put_str": {"tf": 1}, "sain.collections.buf.Bytes.put": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.put_raw": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.put_bytes": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.put_str": {"tf": 1}}, "df": 8}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"sain.collections.Bytes.index": {"tf": 1}, "sain.collections.buf.Bytes.index": {"tf": 1}}, "df": 2}}}}}}}, "q": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"sain.sync.Lazy.get_unchecked": {"tf": 2.23606797749979}, "sain.sync.Once.get_unchecked": {"tf": 1}, "sain.sync.AsyncOnce.get_unchecked": {"tf": 1}}, "df": 3}}}}, "i": {"docs": {"sain.Iter.clone": {"tf": 1}, "sain.Iterator.skip": {"tf": 1.4142135623730951}, "sain.Vec": {"tf": 1.4142135623730951}, "sain.Vec.push_within_capacity": {"tf": 1.4142135623730951}, "sain.Vec.reserve": {"tf": 1.4142135623730951}, "sain.collections.Vec": {"tf": 1.4142135623730951}, "sain.collections.Vec.push_within_capacity": {"tf": 1.4142135623730951}, "sain.collections.Vec.reserve": {"tf": 1.4142135623730951}, "sain.collections.Bytes.index": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.index": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.push_within_capacity": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.reserve": {"tf": 1.4142135623730951}, "sain.iter.Iter.clone": {"tf": 1}, "sain.iter.Iterator.skip": {"tf": 1.4142135623730951}}, "df": 15, "s": {"docs": {"sain": {"tf": 1}, "sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.Some": {"tf": 1.4142135623730951}, "sain.Some.into_inner": {"tf": 1.4142135623730951}, "sain.Some.unwrap": {"tf": 1}, "sain.Some.unwrap_or": {"tf": 1}, "sain.Some.unwrap_unchecked": {"tf": 1.4142135623730951}, "sain.Some.expect": {"tf": 2}, "sain.Some.map": {"tf": 1}, "sain.Some.filter": {"tf": 1}, "sain.Some.take_if": {"tf": 2.23606797749979}, "sain.Some.and_ok": {"tf": 1.4142135623730951}, "sain.Some.and_then": {"tf": 1}, "sain.Some.iter": {"tf": 1}, "sain.Some.as_ref": {"tf": 1}, "sain.Some.as_mut": {"tf": 1}, "sain.Some.is_some": {"tf": 1.7320508075688772}, "sain.Some.is_some_and": {"tf": 1.7320508075688772}, "sain.Some.is_none": {"tf": 1.7320508075688772}, "sain.Iter": {"tf": 1.4142135623730951}, "sain.Iterator": {"tf": 2.23606797749979}, "sain.Iterator.default": {"tf": 1}, "sain.Iterator.sink": {"tf": 1}, "sain.Iterator.next": {"tf": 1}, "sain.Iterator.cloned": {"tf": 1}, "sain.Iterator.copied": {"tf": 1.7320508075688772}, "sain.Iterator.take": {"tf": 1}, "sain.Iterator.any": {"tf": 1.4142135623730951}, "sain.Iterator.first": {"tf": 1}, "sain.Iterator.last": {"tf": 1}, "sain.unimplemented": {"tf": 1.4142135623730951}, "sain.Ok.is_ok": {"tf": 1.4142135623730951}, "sain.Ok.is_ok_and": {"tf": 1.4142135623730951}, "sain.Ok.is_err": {"tf": 1.4142135623730951}, "sain.Ok.is_err_and": {"tf": 1.4142135623730951}, "sain.Ok.ok": {"tf": 1.4142135623730951}, "sain.Ok.err": {"tf": 1.4142135623730951}, "sain.Err.is_ok": {"tf": 1.4142135623730951}, "sain.Err.is_ok_and": {"tf": 1.4142135623730951}, "sain.Err.is_err": {"tf": 1.4142135623730951}, "sain.Err.is_err_and": {"tf": 1.7320508075688772}, "sain.Vec": {"tf": 3}, "sain.Vec.capacity": {"tf": 1}, "sain.Vec.split_off": {"tf": 1.4142135623730951}, "sain.Vec.split_first": {"tf": 1}, "sain.Vec.swap_remove": {"tf": 1}, "sain.Vec.push_within_capacity": {"tf": 1.7320508075688772}, "sain.Vec.reserve": {"tf": 2}, "sain.Vec.pop": {"tf": 1}, "sain.Vec.copy": {"tf": 1}, "sain.Vec.index": {"tf": 1.4142135623730951}, "sain.Vec.count": {"tf": 1.4142135623730951}, "sain.Error": {"tf": 2}, "sain.Box": {"tf": 1}, "sain.Box.on_expire": {"tf": 1.4142135623730951}, "sain.Box.get": {"tf": 1.7320508075688772}, "sain.MaybeUninit": {"tf": 3}, "sain.MaybeUninit.assume_init": {"tf": 2.23606797749979}, "sain.MaybeUninit.write": {"tf": 1}, "sain.From": {"tf": 1}, "sain.TryFrom": {"tf": 2.23606797749979}, "sain.TryInto": {"tf": 2}, "sain.boxed": {"tf": 1}, "sain.boxed.Box": {"tf": 1}, "sain.boxed.Box.on_expire": {"tf": 1.4142135623730951}, "sain.boxed.Box.get": {"tf": 1.7320508075688772}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}, "sain.collections.Vec": {"tf": 3}, "sain.collections.Vec.capacity": {"tf": 1}, "sain.collections.Vec.split_off": {"tf": 1.4142135623730951}, "sain.collections.Vec.split_first": {"tf": 1}, "sain.collections.Vec.swap_remove": {"tf": 1}, "sain.collections.Vec.push_within_capacity": {"tf": 1.7320508075688772}, "sain.collections.Vec.reserve": {"tf": 2}, "sain.collections.Vec.pop": {"tf": 1}, "sain.collections.Vec.copy": {"tf": 1}, "sain.collections.Vec.index": {"tf": 1.4142135623730951}, "sain.collections.Vec.count": {"tf": 1.4142135623730951}, "sain.collections.Bytes": {"tf": 1}, "sain.collections.Bytes.try_to_str": {"tf": 1}, "sain.collections.Bytes.leak": {"tf": 1.4142135623730951}, "sain.collections.Bytes.as_ref": {"tf": 1}, "sain.collections.Bytes.as_mut": {"tf": 1}, "sain.collections.Bytes.put": {"tf": 1}, "sain.collections.Bytes.put_raw": {"tf": 1.4142135623730951}, "sain.collections.Bytes.put_bytes": {"tf": 1.4142135623730951}, "sain.collections.Bytes.is_empty": {"tf": 1}, "sain.collections.Bytes.clear": {"tf": 1}, "sain.collections.Bytes.index": {"tf": 1.4142135623730951}, "sain.collections.Bytes.pop": {"tf": 1}, "sain.collections.buf.Bytes": {"tf": 1}, "sain.collections.buf.Bytes.try_to_str": {"tf": 1}, "sain.collections.buf.Bytes.leak": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.as_ref": {"tf": 1}, "sain.collections.buf.Bytes.as_mut": {"tf": 1}, "sain.collections.buf.Bytes.put": {"tf": 1}, "sain.collections.buf.Bytes.put_raw": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.put_bytes": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.is_empty": {"tf": 1}, "sain.collections.buf.Bytes.clear": {"tf": 1}, "sain.collections.buf.Bytes.index": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.pop": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 3}, "sain.collections.vec.Vec.capacity": {"tf": 1}, "sain.collections.vec.Vec.split_off": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.split_first": {"tf": 1}, "sain.collections.vec.Vec.swap_remove": {"tf": 1}, "sain.collections.vec.Vec.push_within_capacity": {"tf": 1.7320508075688772}, "sain.collections.vec.Vec.reserve": {"tf": 2}, "sain.collections.vec.Vec.pop": {"tf": 1}, "sain.collections.vec.Vec.copy": {"tf": 1}, "sain.collections.vec.Vec.index": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.count": {"tf": 1.4142135623730951}, "sain.convert": {"tf": 1}, "sain.convert.From": {"tf": 1}, "sain.convert.TryFrom": {"tf": 2.23606797749979}, "sain.convert.TryInto": {"tf": 2}, "sain.error": {"tf": 1.4142135623730951}, "sain.error.Error": {"tf": 2}, "sain.iter.Iter": {"tf": 1.4142135623730951}, "sain.iter.Iterator": {"tf": 2.23606797749979}, "sain.iter.Iterator.default": {"tf": 1}, "sain.iter.Iterator.sink": {"tf": 1}, "sain.iter.Iterator.next": {"tf": 1}, "sain.iter.Iterator.cloned": {"tf": 1}, "sain.iter.Iterator.copied": {"tf": 1.7320508075688772}, "sain.iter.Iterator.take": {"tf": 1}, "sain.iter.Iterator.any": {"tf": 1.4142135623730951}, "sain.iter.Iterator.first": {"tf": 1}, "sain.iter.Iterator.last": {"tf": 1}, "sain.iter.Cloned": {"tf": 1}, "sain.iter.Copied": {"tf": 1}, "sain.iter.Take": {"tf": 1}, "sain.iter.Filter": {"tf": 1}, "sain.iter.Map": {"tf": 1}, "sain.iter.Skip": {"tf": 1}, "sain.iter.Enumerate": {"tf": 1}, "sain.iter.TakeWhile": {"tf": 1}, "sain.iter.DropWhile": {"tf": 1}, "sain.iter.Empty": {"tf": 1.4142135623730951}, "sain.iter.Empty.next": {"tf": 1}, "sain.iter.Empty.any": {"tf": 1.4142135623730951}, "sain.iter.empty": {"tf": 1}, "sain.macros.unimplemented": {"tf": 1.4142135623730951}, "sain.macros.unsafe": {"tf": 1}, "sain.option.Some.into_inner": {"tf": 1.4142135623730951}, "sain.option.Some.unwrap": {"tf": 1}, "sain.option.Some.unwrap_or": {"tf": 1}, "sain.option.Some.unwrap_unchecked": {"tf": 1.4142135623730951}, "sain.option.Some.expect": {"tf": 2}, "sain.option.Some.map": {"tf": 1}, "sain.option.Some.filter": {"tf": 1}, "sain.option.Some.take_if": {"tf": 2.23606797749979}, "sain.option.Some.and_ok": {"tf": 1.4142135623730951}, "sain.option.Some.and_then": {"tf": 1}, "sain.option.Some.iter": {"tf": 1}, "sain.option.Some.as_ref": {"tf": 1}, "sain.option.Some.as_mut": {"tf": 1}, "sain.option.Some.is_some": {"tf": 1.7320508075688772}, "sain.option.Some.is_some_and": {"tf": 1.7320508075688772}, "sain.option.Some.is_none": {"tf": 1.7320508075688772}, "sain.option.NOTHING": {"tf": 1}, "sain.result": {"tf": 2.449489742783178}, "sain.result.Ok.is_ok": {"tf": 1.4142135623730951}, "sain.result.Ok.is_ok_and": {"tf": 1.4142135623730951}, "sain.result.Ok.is_err": {"tf": 1.4142135623730951}, "sain.result.Ok.is_err_and": {"tf": 1.4142135623730951}, "sain.result.Ok.ok": {"tf": 1.4142135623730951}, "sain.result.Ok.err": {"tf": 1.4142135623730951}, "sain.result.Err.is_ok": {"tf": 1.4142135623730951}, "sain.result.Err.is_ok_and": {"tf": 1.4142135623730951}, "sain.result.Err.is_err": {"tf": 1.4142135623730951}, "sain.result.Err.is_err_and": {"tf": 1.7320508075688772}, "sain.sync.Lazy": {"tf": 1.4142135623730951}, "sain.sync.Lazy.is_initialized": {"tf": 1}, "sain.sync.Lazy.get": {"tf": 1}, "sain.sync.Lazy.get_unchecked": {"tf": 1}, "sain.sync.Once": {"tf": 1}, "sain.sync.Once.get_unchecked": {"tf": 1.7320508075688772}, "sain.sync.Once.set": {"tf": 2.23606797749979}, "sain.sync.Once.get_or": {"tf": 1.4142135623730951}, "sain.sync.Once.get_or_with": {"tf": 1}, "sain.sync.LazyFuture": {"tf": 1.4142135623730951}, "sain.sync.LazyFuture.is_initialized": {"tf": 1}, "sain.sync.LazyFuture.get": {"tf": 1.4142135623730951}, "sain.sync.AsyncOnce": {"tf": 1.4142135623730951}, "sain.sync.AsyncOnce.get": {"tf": 1.4142135623730951}, "sain.sync.AsyncOnce.get_unchecked": {"tf": 1.7320508075688772}, "sain.sync.AsyncOnce.set": {"tf": 2.23606797749979}, "sain.sync.AsyncOnce.get_or": {"tf": 1}, "sain.sync.AsyncOnce.get_or_with": {"tf": 1}}, "df": 193, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sain.Default": {"tf": 1}, "sain.Iterator.map": {"tf": 1}, "sain.Iterator.all": {"tf": 1}, "sain.Iterator.any": {"tf": 1}, "sain.default.Default": {"tf": 1}, "sain.iter.Iterator.map": {"tf": 1}, "sain.iter.Iterator.all": {"tf": 1}, "sain.iter.Iterator.any": {"tf": 1}, "sain.iter.Empty.any": {"tf": 1}, "sain.iter.Empty.all": {"tf": 1}, "sain.option.Some": {"tf": 1}}, "df": 11}}}}}}}}, "n": {"docs": {"sain.sync.Lazy": {"tf": 1}, "sain.sync.LazyFuture": {"tf": 1}}, "df": 2, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"sain.TryFrom": {"tf": 1}, "sain.TryInto": {"tf": 1}, "sain.convert.TryFrom": {"tf": 1}, "sain.convert.TryInto": {"tf": 1}}, "df": 4}}}}}}}}, "t": {"docs": {"sain": {"tf": 1}, "sain.cfg": {"tf": 1}, "sain.Some": {"tf": 1.7320508075688772}, "sain.Some.unwrap": {"tf": 1.4142135623730951}, "sain.Some.expect": {"tf": 1}, "sain.Some.take": {"tf": 1}, "sain.Some.take_if": {"tf": 1}, "sain.Some.and_then": {"tf": 1}, "sain.Iter.clone": {"tf": 1.7320508075688772}, "sain.Iterator": {"tf": 1.7320508075688772}, "sain.Iterator.default": {"tf": 1.4142135623730951}, "sain.Iterator.collect": {"tf": 1.4142135623730951}, "sain.Iterator.to_vec": {"tf": 1.4142135623730951}, "sain.Iterator.sink": {"tf": 2}, "sain.Iterator.raw_parts": {"tf": 2}, "sain.Iterator.cloned": {"tf": 1.4142135623730951}, "sain.Iterator.copied": {"tf": 1.7320508075688772}, "sain.Iterator.count": {"tf": 1.4142135623730951}, "sain.deprecated": {"tf": 1}, "sain.Ok.is_ok": {"tf": 1}, "sain.Ok.expect": {"tf": 1.7320508075688772}, "sain.Ok.unwrap": {"tf": 1.4142135623730951}, "sain.Ok.unwrap_or": {"tf": 1.4142135623730951}, "sain.Ok.unwrap_or_else": {"tf": 1.4142135623730951}, "sain.Ok.unwrap_err": {"tf": 1}, "sain.Ok.ok": {"tf": 1}, "sain.Ok.err": {"tf": 1}, "sain.Ok.inspect": {"tf": 1.4142135623730951}, "sain.Ok.inspect_err": {"tf": 1.4142135623730951}, "sain.Ok.map_or": {"tf": 1}, "sain.Ok.map_or_else": {"tf": 1}, "sain.Ok.iter": {"tf": 1.7320508075688772}, "sain.Err.is_ok": {"tf": 1}, "sain.Vec": {"tf": 2.449489742783178}, "sain.Vec.swap_remove": {"tf": 1.4142135623730951}, "sain.Vec.push_within_capacity": {"tf": 1}, "sain.Vec.pop": {"tf": 1.4142135623730951}, "sain.Vec.copy": {"tf": 1}, "sain.Error": {"tf": 2}, "sain.Box": {"tf": 1.4142135623730951}, "sain.Box.get": {"tf": 1}, "sain.MaybeUninit": {"tf": 2}, "sain.MaybeUninit.uninit_array": {"tf": 1}, "sain.MaybeUninit.assume_init": {"tf": 1.7320508075688772}, "sain.From": {"tf": 1.4142135623730951}, "sain.TryFrom": {"tf": 1.7320508075688772}, "sain.TryInto": {"tf": 1}, "sain.boxed.Box": {"tf": 1.4142135623730951}, "sain.boxed.Box.get": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}, "sain.collections.Vec": {"tf": 2.449489742783178}, "sain.collections.Vec.swap_remove": {"tf": 1.4142135623730951}, "sain.collections.Vec.push_within_capacity": {"tf": 1}, "sain.collections.Vec.pop": {"tf": 1.4142135623730951}, "sain.collections.Vec.copy": {"tf": 1}, "sain.collections.Bytes": {"tf": 1.7320508075688772}, "sain.collections.Bytes.leak": {"tf": 1.4142135623730951}, "sain.collections.Bytes.raw_parts": {"tf": 1}, "sain.collections.Bytes.pop": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes": {"tf": 1.7320508075688772}, "sain.collections.buf.Bytes.leak": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.raw_parts": {"tf": 1}, "sain.collections.buf.Bytes.pop": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec": {"tf": 2.449489742783178}, "sain.collections.vec.Vec.swap_remove": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.push_within_capacity": {"tf": 1}, "sain.collections.vec.Vec.pop": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.copy": {"tf": 1}, "sain.convert.From": {"tf": 1.4142135623730951}, "sain.convert.TryFrom": {"tf": 1.7320508075688772}, "sain.convert.TryInto": {"tf": 1}, "sain.error": {"tf": 1}, "sain.error.Error": {"tf": 2}, "sain.futures.spawn": {"tf": 1}, "sain.iter.Iter.clone": {"tf": 1.7320508075688772}, "sain.iter.Iterator": {"tf": 1.7320508075688772}, "sain.iter.Iterator.default": {"tf": 1.4142135623730951}, "sain.iter.Iterator.collect": {"tf": 1.4142135623730951}, "sain.iter.Iterator.to_vec": {"tf": 1.4142135623730951}, "sain.iter.Iterator.sink": {"tf": 2}, "sain.iter.Iterator.raw_parts": {"tf": 2}, "sain.iter.Iterator.cloned": {"tf": 1.4142135623730951}, "sain.iter.Iterator.copied": {"tf": 1.7320508075688772}, "sain.iter.Iterator.count": {"tf": 1.4142135623730951}, "sain.iter.Empty.count": {"tf": 1.4142135623730951}, "sain.macros": {"tf": 1}, "sain.macros.deprecated": {"tf": 1}, "sain.option.Some.unwrap": {"tf": 1.4142135623730951}, "sain.option.Some.expect": {"tf": 1}, "sain.option.Some.take": {"tf": 1}, "sain.option.Some.take_if": {"tf": 1}, "sain.option.Some.and_then": {"tf": 1}, "sain.result": {"tf": 1}, "sain.result.Ok.is_ok": {"tf": 1}, "sain.result.Ok.expect": {"tf": 1.7320508075688772}, "sain.result.Ok.unwrap": {"tf": 1.4142135623730951}, "sain.result.Ok.unwrap_or": {"tf": 1.4142135623730951}, "sain.result.Ok.unwrap_or_else": {"tf": 1.4142135623730951}, "sain.result.Ok.unwrap_err": {"tf": 1}, "sain.result.Ok.ok": {"tf": 1}, "sain.result.Ok.err": {"tf": 1}, "sain.result.Ok.inspect": {"tf": 1.4142135623730951}, "sain.result.Ok.inspect_err": {"tf": 1.4142135623730951}, "sain.result.Ok.map_or": {"tf": 1}, "sain.result.Ok.map_or_else": {"tf": 1}, "sain.result.Ok.iter": {"tf": 1.7320508075688772}, "sain.result.Err.is_ok": {"tf": 1}, "sain.sync.Lazy": {"tf": 1}, "sain.sync.Lazy.get": {"tf": 1}, "sain.sync.Lazy.get_unchecked": {"tf": 1.4142135623730951}, "sain.sync.Once.get_unchecked": {"tf": 1.7320508075688772}, "sain.sync.Once.set": {"tf": 1.7320508075688772}, "sain.sync.Once.clear": {"tf": 1}, "sain.sync.Once.get_or": {"tf": 1.7320508075688772}, "sain.sync.Once.get_or_with": {"tf": 1.4142135623730951}, "sain.sync.LazyFuture": {"tf": 1}, "sain.sync.LazyFuture.get": {"tf": 1}, "sain.sync.AsyncOnce.get_unchecked": {"tf": 1.7320508075688772}, "sain.sync.AsyncOnce.set": {"tf": 1.7320508075688772}, "sain.sync.AsyncOnce.clear": {"tf": 1}, "sain.sync.AsyncOnce.get_or": {"tf": 1.4142135623730951}, "sain.sync.AsyncOnce.get_or_with": {"tf": 1.4142135623730951}}, "df": 122, "s": {"docs": {"sain.Some.unwrap": {"tf": 1}, "sain.Some.unwrap_or": {"tf": 1}, "sain.Some.unwrap_or_else": {"tf": 1}, "sain.Some.map_or": {"tf": 1}, "sain.Some.map_or_else": {"tf": 1}, "sain.Iter": {"tf": 1}, "sain.Iterator.raw_parts": {"tf": 1}, "sain.Iterator.cloned": {"tf": 1}, "sain.Iterator.copied": {"tf": 1}, "sain.Vec.get": {"tf": 1}, "sain.Vec.copy": {"tf": 1}, "sain.Box": {"tf": 1}, "sain.Box.get": {"tf": 1}, "sain.boxed.Box": {"tf": 1}, "sain.boxed.Box.get": {"tf": 1}, "sain.collections.Vec.get": {"tf": 1}, "sain.collections.Vec.copy": {"tf": 1}, "sain.collections.vec.Vec.get": {"tf": 1}, "sain.collections.vec.Vec.copy": {"tf": 1}, "sain.convert": {"tf": 1}, "sain.iter.Iter": {"tf": 1}, "sain.iter.Iterator.raw_parts": {"tf": 1}, "sain.iter.Iterator.cloned": {"tf": 1}, "sain.iter.Iterator.copied": {"tf": 1}, "sain.option.Some.unwrap": {"tf": 1}, "sain.option.Some.unwrap_or": {"tf": 1}, "sain.option.Some.unwrap_or_else": {"tf": 1}, "sain.option.Some.map_or": {"tf": 1}, "sain.option.Some.map_or_else": {"tf": 1}, "sain.sync.Lazy.get": {"tf": 1}, "sain.sync.Once.set": {"tf": 1.4142135623730951}, "sain.sync.AsyncOnce.set": {"tf": 1.4142135623730951}}, "df": 32}, "e": {"docs": {}, "df": 0, "r": {"docs": {"sain.Iter": {"tf": 1.7320508075688772}, "sain.Iterator": {"tf": 1}, "sain.Iterator.default": {"tf": 1}, "sain.Iterator.collect": {"tf": 1}, "sain.Iterator.to_vec": {"tf": 1}, "sain.Iterator.sink": {"tf": 1}, "sain.Iterator.raw_parts": {"tf": 1}, "sain.Iterator.next": {"tf": 1}, "sain.Iterator.cloned": {"tf": 1.4142135623730951}, "sain.Iterator.copied": {"tf": 1}, "sain.Iterator.map": {"tf": 1}, "sain.Iterator.filter": {"tf": 1}, "sain.Iterator.take": {"tf": 1.4142135623730951}, "sain.Iterator.skip": {"tf": 1}, "sain.Iterator.enumerate": {"tf": 1}, "sain.Iterator.take_while": {"tf": 1}, "sain.Iterator.drop_while": {"tf": 1}, "sain.Iterator.all": {"tf": 1}, "sain.Iterator.any": {"tf": 1}, "sain.Iterator.zip": {"tf": 1.4142135623730951}, "sain.Iterator.sort": {"tf": 1}, "sain.Iterator.reversed": {"tf": 1}, "sain.Iterator.union": {"tf": 1}, "sain.Iterator.first": {"tf": 1}, "sain.Iterator.last": {"tf": 1}, "sain.Iterator.count": {"tf": 1}, "sain.Iterator.for_each": {"tf": 1}, "sain.Iterator.async_for_each": {"tf": 1}, "sain.Ok.iter": {"tf": 1.4142135623730951}, "sain.Vec": {"tf": 1.7320508075688772}, "sain.Vec.iter": {"tf": 1}, "sain.collections.Vec": {"tf": 1.7320508075688772}, "sain.collections.Vec.iter": {"tf": 1}, "sain.collections.Bytes.iter": {"tf": 1}, "sain.collections.buf.Bytes.iter": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1.7320508075688772}, "sain.collections.vec.Vec.iter": {"tf": 1}, "sain.iter.Iter": {"tf": 1.7320508075688772}, "sain.iter.Iterator": {"tf": 1}, "sain.iter.Iterator.default": {"tf": 1}, "sain.iter.Iterator.collect": {"tf": 1}, "sain.iter.Iterator.to_vec": {"tf": 1}, "sain.iter.Iterator.sink": {"tf": 1}, "sain.iter.Iterator.raw_parts": {"tf": 1}, "sain.iter.Iterator.next": {"tf": 1}, "sain.iter.Iterator.cloned": {"tf": 1.4142135623730951}, "sain.iter.Iterator.copied": {"tf": 1}, "sain.iter.Iterator.map": {"tf": 1}, "sain.iter.Iterator.filter": {"tf": 1}, "sain.iter.Iterator.take": {"tf": 1.4142135623730951}, "sain.iter.Iterator.skip": {"tf": 1}, "sain.iter.Iterator.enumerate": {"tf": 1}, "sain.iter.Iterator.take_while": {"tf": 1}, "sain.iter.Iterator.drop_while": {"tf": 1}, "sain.iter.Iterator.all": {"tf": 1}, "sain.iter.Iterator.any": {"tf": 1}, "sain.iter.Iterator.zip": {"tf": 1.4142135623730951}, "sain.iter.Iterator.sort": {"tf": 1}, "sain.iter.Iterator.reversed": {"tf": 1}, "sain.iter.Iterator.union": {"tf": 1}, "sain.iter.Iterator.first": {"tf": 1}, "sain.iter.Iterator.last": {"tf": 1}, "sain.iter.Iterator.count": {"tf": 1}, "sain.iter.Iterator.for_each": {"tf": 1}, "sain.iter.Iterator.async_for_each": {"tf": 1}, "sain.iter.Empty.next": {"tf": 1}, "sain.iter.Empty.count": {"tf": 1}, "sain.iter.Empty.any": {"tf": 1}, "sain.iter.Empty.all": {"tf": 1}, "sain.iter.into_iter": {"tf": 1}, "sain.iter.empty": {"tf": 1}, "sain.iter.once": {"tf": 1}, "sain.iter.repeat": {"tf": 1}, "sain.result.Ok.iter": {"tf": 1.4142135623730951}}, "df": 74, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"sain.Some.iter": {"tf": 1}, "sain.Iter": {"tf": 2.23606797749979}, "sain.Iter.clone": {"tf": 1.7320508075688772}, "sain.Iterator": {"tf": 1.4142135623730951}, "sain.Iterator.default": {"tf": 1.7320508075688772}, "sain.Iterator.collect": {"tf": 2}, "sain.Iterator.to_vec": {"tf": 1}, "sain.Iterator.sink": {"tf": 1}, "sain.Iterator.raw_parts": {"tf": 1}, "sain.Iterator.next": {"tf": 2.23606797749979}, "sain.Iterator.cloned": {"tf": 1.7320508075688772}, "sain.Iterator.copied": {"tf": 1.4142135623730951}, "sain.Iterator.map": {"tf": 2}, "sain.Iterator.filter": {"tf": 1}, "sain.Iterator.take": {"tf": 1.7320508075688772}, "sain.Iterator.skip": {"tf": 1.7320508075688772}, "sain.Iterator.enumerate": {"tf": 1.7320508075688772}, "sain.Iterator.take_while": {"tf": 2}, "sain.Iterator.drop_while": {"tf": 2}, "sain.Iterator.all": {"tf": 2}, "sain.Iterator.any": {"tf": 2}, "sain.Iterator.zip": {"tf": 2}, "sain.Iterator.sort": {"tf": 1.7320508075688772}, "sain.Iterator.reversed": {"tf": 2}, "sain.Iterator.union": {"tf": 1.7320508075688772}, "sain.Iterator.first": {"tf": 1.7320508075688772}, "sain.Iterator.last": {"tf": 1.7320508075688772}, "sain.Iterator.count": {"tf": 1}, "sain.Iterator.for_each": {"tf": 2}, "sain.Iterator.async_for_each": {"tf": 1.4142135623730951}, "sain.Ok.iter": {"tf": 1}, "sain.Vec": {"tf": 2.23606797749979}, "sain.Vec.iter": {"tf": 1.7320508075688772}, "sain.collections.Vec": {"tf": 2.23606797749979}, "sain.collections.Vec.iter": {"tf": 1.7320508075688772}, "sain.collections.Bytes.iter": {"tf": 2}, "sain.collections.buf.Bytes.iter": {"tf": 2}, "sain.collections.vec.Vec": {"tf": 2.23606797749979}, "sain.collections.vec.Vec.iter": {"tf": 1.7320508075688772}, "sain.iter": {"tf": 1}, "sain.iter.Iter": {"tf": 2.23606797749979}, "sain.iter.Iter.clone": {"tf": 1.7320508075688772}, "sain.iter.Iterator": {"tf": 1.4142135623730951}, "sain.iter.Iterator.default": {"tf": 1.7320508075688772}, "sain.iter.Iterator.collect": {"tf": 2}, "sain.iter.Iterator.to_vec": {"tf": 1}, "sain.iter.Iterator.sink": {"tf": 1}, "sain.iter.Iterator.raw_parts": {"tf": 1}, "sain.iter.Iterator.next": {"tf": 2.23606797749979}, "sain.iter.Iterator.cloned": {"tf": 1.7320508075688772}, "sain.iter.Iterator.copied": {"tf": 1.4142135623730951}, "sain.iter.Iterator.map": {"tf": 2}, "sain.iter.Iterator.filter": {"tf": 1}, "sain.iter.Iterator.take": {"tf": 1.7320508075688772}, "sain.iter.Iterator.skip": {"tf": 1.7320508075688772}, "sain.iter.Iterator.enumerate": {"tf": 1.7320508075688772}, "sain.iter.Iterator.take_while": {"tf": 2}, "sain.iter.Iterator.drop_while": {"tf": 2}, "sain.iter.Iterator.all": {"tf": 2}, "sain.iter.Iterator.any": {"tf": 2}, "sain.iter.Iterator.zip": {"tf": 2}, "sain.iter.Iterator.sort": {"tf": 1.7320508075688772}, "sain.iter.Iterator.reversed": {"tf": 2}, "sain.iter.Iterator.union": {"tf": 1.7320508075688772}, "sain.iter.Iterator.first": {"tf": 1.7320508075688772}, "sain.iter.Iterator.last": {"tf": 1.7320508075688772}, "sain.iter.Iterator.count": {"tf": 1}, "sain.iter.Iterator.for_each": {"tf": 2}, "sain.iter.Iterator.async_for_each": {"tf": 1.4142135623730951}, "sain.iter.Cloned": {"tf": 2}, "sain.iter.Copied": {"tf": 2}, "sain.iter.Take": {"tf": 1.7320508075688772}, "sain.iter.Filter": {"tf": 1.7320508075688772}, "sain.iter.Map": {"tf": 1.7320508075688772}, "sain.iter.Skip": {"tf": 1.7320508075688772}, "sain.iter.Enumerate": {"tf": 1.7320508075688772}, "sain.iter.TakeWhile": {"tf": 1.7320508075688772}, "sain.iter.DropWhile": {"tf": 1.7320508075688772}, "sain.iter.Empty": {"tf": 1.7320508075688772}, "sain.iter.Empty.next": {"tf": 2.23606797749979}, "sain.iter.Empty.count": {"tf": 1}, "sain.iter.Empty.any": {"tf": 2}, "sain.iter.Empty.all": {"tf": 2}, "sain.iter.empty": {"tf": 1.4142135623730951}, "sain.iter.once": {"tf": 2}, "sain.iter.repeat": {"tf": 2.449489742783178}, "sain.option.Some.iter": {"tf": 1}, "sain.result.Ok.iter": {"tf": 1}}, "df": 88, "s": {"docs": {"sain.Iterator": {"tf": 1}, "sain.Iterator.union": {"tf": 1}, "sain.iter.Iterator": {"tf": 1}, "sain.iter.Iterator.union": {"tf": 1}}, "df": 4}, "[": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {"sain.iter.into_iter": {"tf": 1}}, "df": 1}}}}}}}, "e": {"docs": {"sain.Iter": {"tf": 1}, "sain.Vec": {"tf": 1}, "sain.collections.Vec": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1}, "sain.iter.Iter": {"tf": 1}}, "df": 5, "d": {"docs": {"sain.Iterator.cloned": {"tf": 1}, "sain.iter.Iterator.cloned": {"tf": 1}}, "df": 2}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.Vec": {"tf": 1}, "sain.collections.Vec": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1}}, "df": 3}}, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.iter": {"tf": 1}, "sain.iter.Enumerate": {"tf": 1}}, "df": 2}}}}, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sain.Iterator.zip": {"tf": 1.4142135623730951}, "sain.Iterator.union": {"tf": 1}, "sain.Vec": {"tf": 1.7320508075688772}, "sain.Vec.extend": {"tf": 1}, "sain.collections.Vec": {"tf": 1.7320508075688772}, "sain.collections.Vec.extend": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1.7320508075688772}, "sain.collections.vec.Vec.extend": {"tf": 1}, "sain.iter.Iterator.zip": {"tf": 1.4142135623730951}, "sain.iter.Iterator.union": {"tf": 1}, "sain.iter.into_iter": {"tf": 1.7320508075688772}}, "df": 11, "s": {"docs": {"sain.Iter": {"tf": 1}, "sain.iter.Iter": {"tf": 1}}, "df": 2}, "[": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {"sain.Iter": {"tf": 1}, "sain.iter.Iter": {"tf": 1}, "sain.iter.into_iter": {"tf": 1}}, "df": 3}}}, "n": {"docs": {}, "df": 0, "t": {"docs": {"sain.collections.buf.Buffer": {"tf": 1}}, "df": 1}}}}}}}}, "[": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {"sain.Iterator.zip": {"tf": 1}, "sain.iter.Iterator.zip": {"tf": 1}}, "df": 2}}}}}}}}}, "t": {"docs": {"sain.Ok.iter": {"tf": 1}, "sain.result.Ok.iter": {"tf": 1}}, "df": 2, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {"sain.Iterator.zip": {"tf": 1}, "sain.iter.Iterator.zip": {"tf": 1}}, "df": 2}}}}}}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {"sain.Iterator.union": {"tf": 1}, "sain.iter.Iterator.union": {"tf": 1}}, "df": 2}}}}, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sain.Ok.iter": {"tf": 1}, "sain.result.Ok.iter": {"tf": 1}}, "df": 2}}}}}}}, "m": {"docs": {"sain.Iter": {"tf": 2.6457513110645907}, "sain.Iterator.next": {"tf": 1}, "sain.Iterator.cloned": {"tf": 1}, "sain.Iterator.copied": {"tf": 1.7320508075688772}, "sain.Iterator.map": {"tf": 2}, "sain.Iterator.enumerate": {"tf": 1.7320508075688772}, "sain.Iterator.take_while": {"tf": 1}, "sain.Iterator.drop_while": {"tf": 1}, "sain.Iterator.all": {"tf": 1.7320508075688772}, "sain.Iterator.any": {"tf": 2.23606797749979}, "sain.Iterator.zip": {"tf": 2}, "sain.Iterator.sort": {"tf": 2}, "sain.Iterator.reversed": {"tf": 1.4142135623730951}, "sain.Iterator.union": {"tf": 1.4142135623730951}, "sain.Iterator.first": {"tf": 1}, "sain.Iterator.last": {"tf": 1}, "sain.Iterator.for_each": {"tf": 2}, "sain.Iterator.async_for_each": {"tf": 1.4142135623730951}, "sain.Vec.swap_remove": {"tf": 1.4142135623730951}, "sain.Vec.get": {"tf": 1}, "sain.Vec.remove": {"tf": 1}, "sain.Vec.index": {"tf": 1.7320508075688772}, "sain.Vec.count": {"tf": 1.4142135623730951}, "sain.collections.Vec.swap_remove": {"tf": 1.4142135623730951}, "sain.collections.Vec.get": {"tf": 1}, "sain.collections.Vec.remove": {"tf": 1}, "sain.collections.Vec.index": {"tf": 1.7320508075688772}, "sain.collections.Vec.count": {"tf": 1.4142135623730951}, "sain.collections.Bytes.size": {"tf": 1}, "sain.collections.Bytes.insert": {"tf": 1}, "sain.collections.buf.Bytes.size": {"tf": 1}, "sain.collections.buf.Bytes.insert": {"tf": 1}, "sain.collections.vec.Vec.swap_remove": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.get": {"tf": 1}, "sain.collections.vec.Vec.remove": {"tf": 1}, "sain.collections.vec.Vec.index": {"tf": 1.7320508075688772}, "sain.collections.vec.Vec.count": {"tf": 1.4142135623730951}, "sain.iter.Iter": {"tf": 2.6457513110645907}, "sain.iter.Iterator.next": {"tf": 1}, "sain.iter.Iterator.cloned": {"tf": 1}, "sain.iter.Iterator.copied": {"tf": 1.7320508075688772}, "sain.iter.Iterator.map": {"tf": 2}, "sain.iter.Iterator.enumerate": {"tf": 1.7320508075688772}, "sain.iter.Iterator.take_while": {"tf": 1}, "sain.iter.Iterator.drop_while": {"tf": 1}, "sain.iter.Iterator.all": {"tf": 1.7320508075688772}, "sain.iter.Iterator.any": {"tf": 2.23606797749979}, "sain.iter.Iterator.zip": {"tf": 2}, "sain.iter.Iterator.sort": {"tf": 2}, "sain.iter.Iterator.reversed": {"tf": 1.4142135623730951}, "sain.iter.Iterator.union": {"tf": 1.4142135623730951}, "sain.iter.Iterator.first": {"tf": 1}, "sain.iter.Iterator.last": {"tf": 1}, "sain.iter.Iterator.for_each": {"tf": 2}, "sain.iter.Iterator.async_for_each": {"tf": 1.4142135623730951}, "sain.iter.Empty.next": {"tf": 1}, "sain.iter.Empty.any": {"tf": 2.23606797749979}, "sain.iter.Empty.all": {"tf": 1.7320508075688772}, "sain.iter.into_iter": {"tf": 1.4142135623730951}, "sain.iter.once": {"tf": 1}}, "df": 60, "s": {"docs": {"sain.Iter": {"tf": 1.7320508075688772}, "sain.Iterator.collect": {"tf": 1.7320508075688772}, "sain.Iterator.next": {"tf": 1}, "sain.Iterator.filter": {"tf": 1}, "sain.Iterator.take": {"tf": 1.4142135623730951}, "sain.Iterator.skip": {"tf": 1}, "sain.Iterator.take_while": {"tf": 1.4142135623730951}, "sain.Iterator.drop_while": {"tf": 1}, "sain.Iterator.all": {"tf": 1}, "sain.Iterator.any": {"tf": 1}, "sain.Iterator.reversed": {"tf": 1}, "sain.Iterator.union": {"tf": 1}, "sain.Iterator.async_for_each": {"tf": 1}, "sain.Vec": {"tf": 1.4142135623730951}, "sain.Vec.sort": {"tf": 1}, "sain.collections.Vec": {"tf": 1.4142135623730951}, "sain.collections.Vec.sort": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.sort": {"tf": 1}, "sain.collections.vec.from_args": {"tf": 1.4142135623730951}, "sain.iter.Iter": {"tf": 1.7320508075688772}, "sain.iter.Iterator.collect": {"tf": 1.7320508075688772}, "sain.iter.Iterator.next": {"tf": 1}, "sain.iter.Iterator.filter": {"tf": 1}, "sain.iter.Iterator.take": {"tf": 1.4142135623730951}, "sain.iter.Iterator.skip": {"tf": 1}, "sain.iter.Iterator.take_while": {"tf": 1.4142135623730951}, "sain.iter.Iterator.drop_while": {"tf": 1}, "sain.iter.Iterator.all": {"tf": 1}, "sain.iter.Iterator.any": {"tf": 1}, "sain.iter.Iterator.reversed": {"tf": 1}, "sain.iter.Iterator.union": {"tf": 1}, "sain.iter.Iterator.async_for_each": {"tf": 1}, "sain.iter.Empty.next": {"tf": 1}, "sain.iter.Empty.any": {"tf": 1}, "sain.iter.Empty.all": {"tf": 1}}, "df": 36}}}}, "f": {"docs": {"sain.cfg": {"tf": 1.7320508075688772}, "sain.cfg_attr": {"tf": 2}, "sain.Some.unwrap": {"tf": 1.4142135623730951}, "sain.Some.unwrap_or": {"tf": 1}, "sain.Some.unwrap_or_else": {"tf": 1}, "sain.Some.expect": {"tf": 1}, "sain.Some.map": {"tf": 1}, "sain.Some.map_or": {"tf": 1}, "sain.Some.map_or_else": {"tf": 1}, "sain.Some.filter": {"tf": 1.4142135623730951}, "sain.Some.take_if": {"tf": 1.7320508075688772}, "sain.Some.and_ok": {"tf": 1}, "sain.Some.and_then": {"tf": 1.4142135623730951}, "sain.Some.as_ref": {"tf": 1.4142135623730951}, "sain.Some.as_mut": {"tf": 1}, "sain.Some.is_some": {"tf": 1}, "sain.Some.is_some_and": {"tf": 1}, "sain.Some.is_none": {"tf": 1}, "sain.Iterator": {"tf": 1.4142135623730951}, "sain.Iterator.collect": {"tf": 1}, "sain.Iterator.next": {"tf": 1}, "sain.Iterator.cloned": {"tf": 1}, "sain.Iterator.copied": {"tf": 1}, "sain.Iterator.all": {"tf": 1}, "sain.Iterator.any": {"tf": 1.4142135623730951}, "sain.todo": {"tf": 1}, "sain.deprecated": {"tf": 1.4142135623730951}, "sain.unimplemented": {"tf": 1}, "sain.Ok.is_ok": {"tf": 1.4142135623730951}, "sain.Ok.is_ok_and": {"tf": 1}, "sain.Ok.is_err": {"tf": 1}, "sain.Ok.is_err_and": {"tf": 1}, "sain.Ok.expect": {"tf": 1.4142135623730951}, "sain.Ok.unwrap": {"tf": 1.4142135623730951}, "sain.Ok.unwrap_or": {"tf": 1.4142135623730951}, "sain.Ok.unwrap_or_else": {"tf": 1}, "sain.Ok.unwrap_err": {"tf": 1}, "sain.Ok.ok": {"tf": 1.4142135623730951}, "sain.Ok.err": {"tf": 1.4142135623730951}, "sain.Ok.inspect": {"tf": 1.4142135623730951}, "sain.Ok.inspect_err": {"tf": 1.4142135623730951}, "sain.Ok.map_or": {"tf": 1}, "sain.Ok.map_or_else": {"tf": 1}, "sain.Ok.iter": {"tf": 1}, "sain.Err.is_ok": {"tf": 1.4142135623730951}, "sain.Err.is_ok_and": {"tf": 1}, "sain.Err.is_err": {"tf": 1}, "sain.Err.is_err_and": {"tf": 1}, "sain.Vec.capacity": {"tf": 1.4142135623730951}, "sain.Vec.is_empty": {"tf": 1}, "sain.Vec.split_off": {"tf": 1.4142135623730951}, "sain.Vec.split_first": {"tf": 1}, "sain.Vec.first": {"tf": 1}, "sain.Vec.swap_remove": {"tf": 1.4142135623730951}, "sain.Vec.push_within_capacity": {"tf": 1.4142135623730951}, "sain.Vec.reserve": {"tf": 1.4142135623730951}, "sain.Vec.get": {"tf": 1}, "sain.Vec.pop": {"tf": 1}, "sain.Vec.copy": {"tf": 1}, "sain.Vec.index": {"tf": 1}, "sain.Vec.count": {"tf": 1.4142135623730951}, "sain.Error": {"tf": 1.7320508075688772}, "sain.Error.source": {"tf": 1}, "sain.Box.has_expired": {"tf": 1}, "sain.Box.get": {"tf": 1}, "sain.MaybeUninit.assume_init": {"tf": 1}, "sain.MaybeUninit.write": {"tf": 1.7320508075688772}, "sain.TryFrom": {"tf": 1.4142135623730951}, "sain.TryInto": {"tf": 1.4142135623730951}, "sain.boxed.Box.has_expired": {"tf": 1}, "sain.boxed.Box.get": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 2}, "sain.cfg.cfg": {"tf": 1.7320508075688772}, "sain.collections.Vec.capacity": {"tf": 1.4142135623730951}, "sain.collections.Vec.is_empty": {"tf": 1}, "sain.collections.Vec.split_off": {"tf": 1.4142135623730951}, "sain.collections.Vec.split_first": {"tf": 1}, "sain.collections.Vec.first": {"tf": 1}, "sain.collections.Vec.swap_remove": {"tf": 1.4142135623730951}, "sain.collections.Vec.push_within_capacity": {"tf": 1.4142135623730951}, "sain.collections.Vec.reserve": {"tf": 1.4142135623730951}, "sain.collections.Vec.get": {"tf": 1}, "sain.collections.Vec.pop": {"tf": 1}, "sain.collections.Vec.copy": {"tf": 1}, "sain.collections.Vec.index": {"tf": 1}, "sain.collections.Vec.count": {"tf": 1.4142135623730951}, "sain.collections.Bytes.from_raw": {"tf": 1}, "sain.collections.Bytes.try_to_str": {"tf": 1.4142135623730951}, "sain.collections.Bytes.to_str": {"tf": 1}, "sain.collections.Bytes.leak": {"tf": 1}, "sain.collections.Bytes.as_ref": {"tf": 1}, "sain.collections.Bytes.as_mut": {"tf": 1}, "sain.collections.Bytes.put": {"tf": 1.7320508075688772}, "sain.collections.Bytes.put_raw": {"tf": 1}, "sain.collections.Bytes.put_bytes": {"tf": 1}, "sain.collections.Bytes.index": {"tf": 1}, "sain.collections.Bytes.pop": {"tf": 1}, "sain.collections.buf.Bytes.from_raw": {"tf": 1}, "sain.collections.buf.Bytes.try_to_str": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.to_str": {"tf": 1}, "sain.collections.buf.Bytes.leak": {"tf": 1}, "sain.collections.buf.Bytes.as_ref": {"tf": 1}, "sain.collections.buf.Bytes.as_mut": {"tf": 1}, "sain.collections.buf.Bytes.put": {"tf": 1.7320508075688772}, "sain.collections.buf.Bytes.put_raw": {"tf": 1}, "sain.collections.buf.Bytes.put_bytes": {"tf": 1}, "sain.collections.buf.Bytes.index": {"tf": 1}, "sain.collections.buf.Bytes.pop": {"tf": 1}, "sain.collections.vec.Vec.capacity": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.is_empty": {"tf": 1}, "sain.collections.vec.Vec.split_off": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.split_first": {"tf": 1}, "sain.collections.vec.Vec.first": {"tf": 1}, "sain.collections.vec.Vec.swap_remove": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.push_within_capacity": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.reserve": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.get": {"tf": 1}, "sain.collections.vec.Vec.pop": {"tf": 1}, "sain.collections.vec.Vec.copy": {"tf": 1}, "sain.collections.vec.Vec.index": {"tf": 1}, "sain.collections.vec.Vec.count": {"tf": 1.4142135623730951}, "sain.convert.TryFrom": {"tf": 1.4142135623730951}, "sain.convert.TryInto": {"tf": 1.4142135623730951}, "sain.error": {"tf": 1}, "sain.error.Error": {"tf": 1.7320508075688772}, "sain.error.Error.source": {"tf": 1}, "sain.futures.spawn": {"tf": 1}, "sain.iter.Iterator": {"tf": 1.4142135623730951}, "sain.iter.Iterator.collect": {"tf": 1}, "sain.iter.Iterator.next": {"tf": 1}, "sain.iter.Iterator.cloned": {"tf": 1}, "sain.iter.Iterator.copied": {"tf": 1}, "sain.iter.Iterator.all": {"tf": 1}, "sain.iter.Iterator.any": {"tf": 1.4142135623730951}, "sain.iter.Empty.next": {"tf": 1}, "sain.iter.Empty.any": {"tf": 1.4142135623730951}, "sain.iter.Empty.all": {"tf": 1}, "sain.macros.deprecated": {"tf": 1.4142135623730951}, "sain.macros.unimplemented": {"tf": 1}, "sain.macros.todo": {"tf": 1}, "sain.macros.unsafe": {"tf": 1}, "sain.option.Some.unwrap": {"tf": 1.4142135623730951}, "sain.option.Some.unwrap_or": {"tf": 1}, "sain.option.Some.unwrap_or_else": {"tf": 1}, "sain.option.Some.expect": {"tf": 1}, "sain.option.Some.map": {"tf": 1}, "sain.option.Some.map_or": {"tf": 1}, "sain.option.Some.map_or_else": {"tf": 1}, "sain.option.Some.filter": {"tf": 1.4142135623730951}, "sain.option.Some.take_if": {"tf": 1.7320508075688772}, "sain.option.Some.and_ok": {"tf": 1}, "sain.option.Some.and_then": {"tf": 1.4142135623730951}, "sain.option.Some.as_ref": {"tf": 1.4142135623730951}, "sain.option.Some.as_mut": {"tf": 1}, "sain.option.Some.is_some": {"tf": 1}, "sain.option.Some.is_some_and": {"tf": 1}, "sain.option.Some.is_none": {"tf": 1}, "sain.option.Option": {"tf": 1}, "sain.result": {"tf": 1.7320508075688772}, "sain.result.Ok.is_ok": {"tf": 1.4142135623730951}, "sain.result.Ok.is_ok_and": {"tf": 1}, "sain.result.Ok.is_err": {"tf": 1}, "sain.result.Ok.is_err_and": {"tf": 1}, "sain.result.Ok.expect": {"tf": 1.4142135623730951}, "sain.result.Ok.unwrap": {"tf": 1.4142135623730951}, "sain.result.Ok.unwrap_or": {"tf": 1.4142135623730951}, "sain.result.Ok.unwrap_or_else": {"tf": 1}, "sain.result.Ok.unwrap_err": {"tf": 1}, "sain.result.Ok.ok": {"tf": 1.4142135623730951}, "sain.result.Ok.err": {"tf": 1.4142135623730951}, "sain.result.Ok.inspect": {"tf": 1.4142135623730951}, "sain.result.Ok.inspect_err": {"tf": 1.4142135623730951}, "sain.result.Ok.map_or": {"tf": 1}, "sain.result.Ok.map_or_else": {"tf": 1}, "sain.result.Ok.iter": {"tf": 1}, "sain.result.Err.is_ok": {"tf": 1.4142135623730951}, "sain.result.Err.is_ok_and": {"tf": 1}, "sain.result.Err.is_err": {"tf": 1}, "sain.result.Err.is_err_and": {"tf": 1}, "sain.sync.Lazy.get_unchecked": {"tf": 1}, "sain.sync.Once.get": {"tf": 1}, "sain.sync.Once.get_unchecked": {"tf": 1}, "sain.sync.Once.set": {"tf": 2.23606797749979}, "sain.sync.Once.get_or": {"tf": 1}, "sain.sync.Once.get_or_with": {"tf": 1}, "sain.sync.AsyncOnce.get": {"tf": 1}, "sain.sync.AsyncOnce.get_unchecked": {"tf": 1}, "sain.sync.AsyncOnce.set": {"tf": 2.23606797749979}, "sain.sync.AsyncOnce.get_or": {"tf": 1}, "sain.sync.AsyncOnce.get_or_with": {"tf": 1}}, "df": 190}, "n": {"docs": {"sain.Some": {"tf": 1}, "sain.Some.default": {"tf": 1}, "sain.Some.unwrap": {"tf": 1}, "sain.Some.filter": {"tf": 1.4142135623730951}, "sain.Iter": {"tf": 1.7320508075688772}, "sain.Iter.clone": {"tf": 1}, "sain.Iterator": {"tf": 1}, "sain.Iterator.collect": {"tf": 1}, "sain.Iterator.cloned": {"tf": 1}, "sain.Iterator.copied": {"tf": 1}, "sain.Iterator.map": {"tf": 1.7320508075688772}, "sain.Iterator.filter": {"tf": 1}, "sain.Iterator.take": {"tf": 1.4142135623730951}, "sain.Iterator.skip": {"tf": 1.4142135623730951}, "sain.Iterator.enumerate": {"tf": 1}, "sain.Iterator.take_while": {"tf": 1.7320508075688772}, "sain.Iterator.drop_while": {"tf": 1.7320508075688772}, "sain.Iterator.all": {"tf": 1.4142135623730951}, "sain.Iterator.any": {"tf": 1.4142135623730951}, "sain.Iterator.zip": {"tf": 1}, "sain.Iterator.sort": {"tf": 1}, "sain.Iterator.reversed": {"tf": 1.7320508075688772}, "sain.Iterator.union": {"tf": 1}, "sain.Iterator.first": {"tf": 1}, "sain.Iterator.last": {"tf": 1}, "sain.Iterator.count": {"tf": 1}, "sain.Iterator.for_each": {"tf": 1.4142135623730951}, "sain.Iterator.async_for_each": {"tf": 1.7320508075688772}, "sain.deprecated": {"tf": 1.7320508075688772}, "sain.unimplemented": {"tf": 1}, "sain.Vec": {"tf": 2}, "sain.Vec.len": {"tf": 1}, "sain.Vec.iter": {"tf": 1}, "sain.Vec.first": {"tf": 1}, "sain.Vec.retain": {"tf": 1}, "sain.Vec.swap_remove": {"tf": 1}, "sain.Vec.push_within_capacity": {"tf": 1}, "sain.Vec.reserve": {"tf": 1.4142135623730951}, "sain.Vec.sort": {"tf": 1}, "sain.Vec.index": {"tf": 1}, "sain.Vec.count": {"tf": 1}, "sain.Box.remaining": {"tf": 1}, "sain.MaybeUninit": {"tf": 1.7320508075688772}, "sain.MaybeUninit.uninit": {"tf": 1}, "sain.MaybeUninit.uninit_array": {"tf": 1.7320508075688772}, "sain.From": {"tf": 1}, "sain.TryFrom": {"tf": 1.7320508075688772}, "sain.TryInto": {"tf": 1.4142135623730951}, "sain.boxed.Box.remaining": {"tf": 1}, "sain.collections": {"tf": 1.7320508075688772}, "sain.collections.Vec": {"tf": 2}, "sain.collections.Vec.len": {"tf": 1}, "sain.collections.Vec.iter": {"tf": 1}, "sain.collections.Vec.first": {"tf": 1}, "sain.collections.Vec.retain": {"tf": 1}, "sain.collections.Vec.swap_remove": {"tf": 1}, "sain.collections.Vec.push_within_capacity": {"tf": 1}, "sain.collections.Vec.reserve": {"tf": 1.4142135623730951}, "sain.collections.Vec.sort": {"tf": 1}, "sain.collections.Vec.index": {"tf": 1}, "sain.collections.Vec.count": {"tf": 1}, "sain.collections.Bytes.from_raw": {"tf": 2}, "sain.collections.Bytes.put": {"tf": 1.7320508075688772}, "sain.collections.Bytes.put_raw": {"tf": 1}, "sain.collections.Bytes.put_bytes": {"tf": 1}, "sain.collections.Bytes.len": {"tf": 1}, "sain.collections.Bytes.size": {"tf": 1.4142135623730951}, "sain.collections.Bytes.iter": {"tf": 1}, "sain.collections.Bytes.index": {"tf": 1}, "sain.collections.Bytes.count": {"tf": 1}, "sain.collections.Bytes.insert": {"tf": 1}, "sain.collections.buf.Bytes.from_raw": {"tf": 2}, "sain.collections.buf.Bytes.put": {"tf": 1.7320508075688772}, "sain.collections.buf.Bytes.put_raw": {"tf": 1}, "sain.collections.buf.Bytes.put_bytes": {"tf": 1}, "sain.collections.buf.Bytes.len": {"tf": 1}, "sain.collections.buf.Bytes.size": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.iter": {"tf": 1}, "sain.collections.buf.Bytes.index": {"tf": 1}, "sain.collections.buf.Bytes.count": {"tf": 1}, "sain.collections.buf.Bytes.insert": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 2}, "sain.collections.vec.Vec.len": {"tf": 1}, "sain.collections.vec.Vec.iter": {"tf": 1}, "sain.collections.vec.Vec.first": {"tf": 1}, "sain.collections.vec.Vec.retain": {"tf": 1}, "sain.collections.vec.Vec.swap_remove": {"tf": 1}, "sain.collections.vec.Vec.push_within_capacity": {"tf": 1}, "sain.collections.vec.Vec.reserve": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.sort": {"tf": 1}, "sain.collections.vec.Vec.index": {"tf": 1}, "sain.collections.vec.Vec.count": {"tf": 1}, "sain.convert": {"tf": 1.4142135623730951}, "sain.convert.From": {"tf": 1}, "sain.convert.TryFrom": {"tf": 1.7320508075688772}, "sain.convert.TryInto": {"tf": 1.4142135623730951}, "sain.futures.spawn": {"tf": 1.4142135623730951}, "sain.iter.Iter": {"tf": 1.7320508075688772}, "sain.iter.Iter.clone": {"tf": 1}, "sain.iter.Iterator": {"tf": 1}, "sain.iter.Iterator.collect": {"tf": 1}, "sain.iter.Iterator.cloned": {"tf": 1}, "sain.iter.Iterator.copied": {"tf": 1}, "sain.iter.Iterator.map": {"tf": 1.7320508075688772}, "sain.iter.Iterator.filter": {"tf": 1}, "sain.iter.Iterator.take": {"tf": 1.4142135623730951}, "sain.iter.Iterator.skip": {"tf": 1.4142135623730951}, "sain.iter.Iterator.enumerate": {"tf": 1}, "sain.iter.Iterator.take_while": {"tf": 1.7320508075688772}, "sain.iter.Iterator.drop_while": {"tf": 1.7320508075688772}, "sain.iter.Iterator.all": {"tf": 1.4142135623730951}, "sain.iter.Iterator.any": {"tf": 1.4142135623730951}, "sain.iter.Iterator.zip": {"tf": 1}, "sain.iter.Iterator.sort": {"tf": 1}, "sain.iter.Iterator.reversed": {"tf": 1.7320508075688772}, "sain.iter.Iterator.union": {"tf": 1}, "sain.iter.Iterator.first": {"tf": 1}, "sain.iter.Iterator.last": {"tf": 1}, "sain.iter.Iterator.count": {"tf": 1}, "sain.iter.Iterator.for_each": {"tf": 1.4142135623730951}, "sain.iter.Iterator.async_for_each": {"tf": 1.7320508075688772}, "sain.iter.Empty.count": {"tf": 1}, "sain.iter.Empty.any": {"tf": 1.4142135623730951}, "sain.iter.Empty.all": {"tf": 1.4142135623730951}, "sain.iter.into_iter": {"tf": 1}, "sain.macros.deprecated": {"tf": 1.7320508075688772}, "sain.macros.unimplemented": {"tf": 1}, "sain.option.Some.unwrap": {"tf": 1}, "sain.option.Some.filter": {"tf": 1.4142135623730951}, "sain.result": {"tf": 2.23606797749979}, "sain.sync.Lazy": {"tf": 1}, "sain.sync.LazyFuture": {"tf": 1}}, "df": 132, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {"sain.cfg": {"tf": 1}, "sain.Iterator.copied": {"tf": 1}, "sain.deprecated": {"tf": 1.7320508075688772}, "sain.Box": {"tf": 1}, "sain.boxed.Box": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}, "sain.collections.Bytes.put": {"tf": 1}, "sain.collections.buf.Bytes.put": {"tf": 1}, "sain.iter.Iterator.copied": {"tf": 1}, "sain.macros.deprecated": {"tf": 1.7320508075688772}}, "df": 10}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sain.cfg_attr": {"tf": 1.4142135623730951}, "sain.MaybeUninit": {"tf": 1}, "sain.TryFrom": {"tf": 1.4142135623730951}, "sain.cfg.cfg_attr": {"tf": 1.4142135623730951}, "sain.convert.TryFrom": {"tf": 1.4142135623730951}}, "df": 5, "s": {"docs": {"sain.MaybeUninit": {"tf": 1}}, "df": 1}}}}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"sain.Ok.inspect": {"tf": 1.4142135623730951}, "sain.Ok.inspect_err": {"tf": 1.4142135623730951}, "sain.result.Ok.inspect": {"tf": 1.4142135623730951}, "sain.result.Ok.inspect_err": {"tf": 1.4142135623730951}}, "df": 4}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"sain.Vec.insert": {"tf": 1.4142135623730951}, "sain.collections.Vec.insert": {"tf": 1.4142135623730951}, "sain.collections.Bytes.insert": {"tf": 1}, "sain.collections.buf.Bytes.insert": {"tf": 1}, "sain.collections.vec.Vec.insert": {"tf": 1.4142135623730951}}, "df": 5, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.Vec.reserve": {"tf": 1}, "sain.collections.Vec.reserve": {"tf": 1}, "sain.collections.vec.Vec.reserve": {"tf": 1}}, "df": 3}}}}}}, "t": {"docs": {"sain.cfg": {"tf": 1.4142135623730951}, "sain.cfg_attr": {"tf": 1.4142135623730951}, "sain.Some.unwrap_or": {"tf": 1}, "sain.Some.map_or": {"tf": 1.7320508075688772}, "sain.Some.map_or_else": {"tf": 2}, "sain.Some.filter": {"tf": 1}, "sain.Some.and_ok": {"tf": 1.4142135623730951}, "sain.Some.and_then": {"tf": 1}, "sain.Some.iter": {"tf": 1}, "sain.Some.as_ref": {"tf": 1}, "sain.Some.as_mut": {"tf": 1}, "sain.Some.is_some": {"tf": 1}, "sain.Some.is_some_and": {"tf": 1}, "sain.Some.is_none": {"tf": 1}, "sain.Iterator": {"tf": 1}, "sain.Iterator.default": {"tf": 1}, "sain.Iterator.cloned": {"tf": 1}, "sain.Iterator.copied": {"tf": 1}, "sain.Iterator.map": {"tf": 1.4142135623730951}, "sain.Iterator.all": {"tf": 1}, "sain.Iterator.any": {"tf": 1.7320508075688772}, "sain.todo": {"tf": 1.4142135623730951}, "sain.Ok.unwrap_or_else": {"tf": 1.4142135623730951}, "sain.Ok.ok": {"tf": 1}, "sain.Ok.err": {"tf": 1}, "sain.Ok.map": {"tf": 1.7320508075688772}, "sain.Ok.map_err": {"tf": 1.4142135623730951}, "sain.Ok.iter": {"tf": 1.4142135623730951}, "sain.Vec.split_first": {"tf": 1}, "sain.Vec.push_within_capacity": {"tf": 1.4142135623730951}, "sain.Error": {"tf": 1.4142135623730951}, "sain.Box": {"tf": 1}, "sain.MaybeUninit.assume_init": {"tf": 1}, "sain.From": {"tf": 1.4142135623730951}, "sain.TryFrom": {"tf": 1.4142135623730951}, "sain.Into": {"tf": 1}, "sain.TryInto": {"tf": 1.7320508075688772}, "sain.boxed.Box": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1.4142135623730951}, "sain.cfg.cfg": {"tf": 1.4142135623730951}, "sain.collections.Vec.split_first": {"tf": 1}, "sain.collections.Vec.push_within_capacity": {"tf": 1.4142135623730951}, "sain.collections.Bytes.put": {"tf": 1}, "sain.collections.Bytes.iter": {"tf": 1}, "sain.collections.buf.Bytes.put": {"tf": 1}, "sain.collections.buf.Bytes.iter": {"tf": 1}, "sain.collections.vec.Vec.split_first": {"tf": 1}, "sain.collections.vec.Vec.push_within_capacity": {"tf": 1.4142135623730951}, "sain.convert": {"tf": 2.6457513110645907}, "sain.convert.From": {"tf": 1.4142135623730951}, "sain.convert.TryFrom": {"tf": 1.4142135623730951}, "sain.convert.Into": {"tf": 1}, "sain.convert.TryInto": {"tf": 1.7320508075688772}, "sain.error.Error": {"tf": 1.4142135623730951}, "sain.iter.Iterator": {"tf": 1}, "sain.iter.Iterator.default": {"tf": 1}, "sain.iter.Iterator.cloned": {"tf": 1}, "sain.iter.Iterator.copied": {"tf": 1}, "sain.iter.Iterator.map": {"tf": 1.4142135623730951}, "sain.iter.Iterator.all": {"tf": 1}, "sain.iter.Iterator.any": {"tf": 1.7320508075688772}, "sain.iter.Empty.any": {"tf": 1.7320508075688772}, "sain.iter.Empty.all": {"tf": 1}, "sain.iter.empty": {"tf": 1}, "sain.macros.todo": {"tf": 1.4142135623730951}, "sain.option.Some.unwrap_or": {"tf": 1}, "sain.option.Some.map_or": {"tf": 1.7320508075688772}, "sain.option.Some.map_or_else": {"tf": 2}, "sain.option.Some.filter": {"tf": 1}, "sain.option.Some.and_ok": {"tf": 1.4142135623730951}, "sain.option.Some.and_then": {"tf": 1}, "sain.option.Some.iter": {"tf": 1}, "sain.option.Some.as_ref": {"tf": 1}, "sain.option.Some.as_mut": {"tf": 1}, "sain.option.Some.is_some": {"tf": 1}, "sain.option.Some.is_some_and": {"tf": 1}, "sain.option.Some.is_none": {"tf": 1}, "sain.result.Ok.unwrap_or_else": {"tf": 1.4142135623730951}, "sain.result.Ok.ok": {"tf": 1}, "sain.result.Ok.err": {"tf": 1}, "sain.result.Ok.map": {"tf": 1.7320508075688772}, "sain.result.Ok.map_err": {"tf": 1.4142135623730951}, "sain.result.Ok.iter": {"tf": 1.4142135623730951}, "sain.sync.Once.get_or_with": {"tf": 1}, "sain.sync.AsyncOnce.get_or": {"tf": 1}, "sain.sync.AsyncOnce.get_or_with": {"tf": 1}}, "df": 86, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sain.Default": {"tf": 1}, "sain.Iterator": {"tf": 1.7320508075688772}, "sain.Error": {"tf": 1.4142135623730951}, "sain.From": {"tf": 1}, "sain.TryFrom": {"tf": 1}, "sain.TryInto": {"tf": 1}, "sain.convert.From": {"tf": 1}, "sain.convert.TryFrom": {"tf": 1}, "sain.convert.TryInto": {"tf": 1}, "sain.default.Default": {"tf": 1}, "sain.error": {"tf": 1}, "sain.error.Error": {"tf": 1.4142135623730951}, "sain.iter.Iterator": {"tf": 1.7320508075688772}, "sain.option.Some": {"tf": 1}}, "df": 14, "s": {"docs": {"sain.convert": {"tf": 1}, "sain.error": {"tf": 1}}, "df": 2}}}}}, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"sain.collections.Bytes.size": {"tf": 1}, "sain.collections.buf.Bytes.size": {"tf": 1}}, "df": 2}}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sain.collections.Bytes.put": {"tf": 1}, "sain.collections.buf.Bytes.put": {"tf": 1}, "sain.convert": {"tf": 1}}, "df": 3, "s": {"docs": {"sain.Iterator.all": {"tf": 1.4142135623730951}, "sain.iter.Iterator.all": {"tf": 1.4142135623730951}, "sain.iter.Empty.all": {"tf": 1.4142135623730951}}, "df": 3}}}}}, "o": {"docs": {"sain.Some.into_inner": {"tf": 1.4142135623730951}, "sain.Iterator.collect": {"tf": 1.4142135623730951}, "sain.Iterator.to_vec": {"tf": 1}, "sain.Iterator.sink": {"tf": 1}, "sain.Iterator.async_for_each": {"tf": 1}, "sain.Vec": {"tf": 2}, "sain.Vec.copy": {"tf": 1}, "sain.From": {"tf": 2}, "sain.TryFrom": {"tf": 1}, "sain.Into": {"tf": 1.4142135623730951}, "sain.TryInto": {"tf": 1.4142135623730951}, "sain.collections": {"tf": 1}, "sain.collections.Vec": {"tf": 2}, "sain.collections.Vec.copy": {"tf": 1}, "sain.collections.Bytes.try_to_str": {"tf": 1}, "sain.collections.Bytes.as_bytes": {"tf": 1}, "sain.collections.Bytes.as_ref": {"tf": 1}, "sain.collections.Bytes.put_bytes": {"tf": 1}, "sain.collections.Bytes.put_str": {"tf": 1}, "sain.collections.buf.Bytes.try_to_str": {"tf": 1}, "sain.collections.buf.Bytes.as_bytes": {"tf": 1}, "sain.collections.buf.Bytes.as_ref": {"tf": 1}, "sain.collections.buf.Bytes.put_bytes": {"tf": 1}, "sain.collections.buf.Bytes.put_str": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 2}, "sain.collections.vec.Vec.copy": {"tf": 1}, "sain.convert": {"tf": 3}, "sain.convert.From": {"tf": 2}, "sain.convert.TryFrom": {"tf": 1}, "sain.convert.Into": {"tf": 1.4142135623730951}, "sain.convert.TryInto": {"tf": 1.4142135623730951}, "sain.error": {"tf": 1}, "sain.iter.Iterator.collect": {"tf": 1.4142135623730951}, "sain.iter.Iterator.to_vec": {"tf": 1}, "sain.iter.Iterator.sink": {"tf": 1}, "sain.iter.Iterator.async_for_each": {"tf": 1}, "sain.iter.into_iter": {"tf": 1.4142135623730951}, "sain.option.Some.into_inner": {"tf": 1.4142135623730951}}, "df": 38}}, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sain.Some.into_inner": {"tf": 1.4142135623730951}, "sain.Some.unwrap": {"tf": 1.4142135623730951}, "sain.Some.unwrap_or": {"tf": 1}, "sain.Some.unwrap_or_else": {"tf": 1}, "sain.Some.map": {"tf": 1}, "sain.Some.map_or": {"tf": 1}, "sain.Some.map_or_else": {"tf": 1}, "sain.Ok.is_ok_and": {"tf": 1.4142135623730951}, "sain.Ok.is_err_and": {"tf": 1.4142135623730951}, "sain.Err.is_ok_and": {"tf": 1.4142135623730951}, "sain.Box.on_expire": {"tf": 1}, "sain.MaybeUninit": {"tf": 1}, "sain.MaybeUninit.uninit_array": {"tf": 1}, "sain.MaybeUninit.assume_init": {"tf": 1}, "sain.boxed.Box.on_expire": {"tf": 1}, "sain.option.Some.into_inner": {"tf": 1.4142135623730951}, "sain.option.Some.unwrap": {"tf": 1.4142135623730951}, "sain.option.Some.unwrap_or": {"tf": 1}, "sain.option.Some.unwrap_or_else": {"tf": 1}, "sain.option.Some.map": {"tf": 1}, "sain.option.Some.map_or": {"tf": 1}, "sain.option.Some.map_or_else": {"tf": 1}, "sain.result.Ok.is_ok_and": {"tf": 1.4142135623730951}, "sain.result.Ok.is_err_and": {"tf": 1.4142135623730951}, "sain.result.Err.is_ok_and": {"tf": 1.4142135623730951}, "sain.sync.Lazy": {"tf": 1}, "sain.sync.Lazy.get_unchecked": {"tf": 1.4142135623730951}, "sain.sync.Once.get_unchecked": {"tf": 1.4142135623730951}, "sain.sync.Once.clear": {"tf": 1}, "sain.sync.LazyFuture": {"tf": 1}, "sain.sync.AsyncOnce.is_set": {"tf": 1}, "sain.sync.AsyncOnce.get_unchecked": {"tf": 1.4142135623730951}, "sain.sync.AsyncOnce.clear": {"tf": 1}}, "df": 33}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {"sain.Some.take_if": {"tf": 1.4142135623730951}, "sain.collections.Bytes.try_to_str": {"tf": 1.7320508075688772}, "sain.collections.Bytes.to_str": {"tf": 2.449489742783178}, "sain.collections.buf.Bytes.try_to_str": {"tf": 1.7320508075688772}, "sain.collections.buf.Bytes.to_str": {"tf": 2.449489742783178}, "sain.convert": {"tf": 1.7320508075688772}, "sain.option.Some.take_if": {"tf": 1.4142135623730951}}, "df": 7}}}}, "o": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.Box.on_expire": {"tf": 1.4142135623730951}, "sain.boxed.Box.on_expire": {"tf": 1.4142135623730951}}, "df": 2}, "s": {"docs": {"sain.Box.on_expire": {"tf": 1}, "sain.boxed.Box.on_expire": {"tf": 1}}, "df": 2}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {"sain.Iterator.enumerate": {"tf": 1.7320508075688772}, "sain.Vec.get": {"tf": 1}, "sain.Vec.insert": {"tf": 1}, "sain.Vec.index": {"tf": 1.4142135623730951}, "sain.MaybeUninit": {"tf": 1.4142135623730951}, "sain.collections.Vec.get": {"tf": 1}, "sain.collections.Vec.insert": {"tf": 1}, "sain.collections.Vec.index": {"tf": 1.4142135623730951}, "sain.collections.Bytes.index": {"tf": 1}, "sain.collections.Bytes.insert": {"tf": 1}, "sain.collections.buf.Bytes.index": {"tf": 1}, "sain.collections.buf.Bytes.insert": {"tf": 1}, "sain.collections.vec.Vec.get": {"tf": 1}, "sain.collections.vec.Vec.insert": {"tf": 1}, "sain.collections.vec.Vec.index": {"tf": 1.4142135623730951}, "sain.iter.Iterator.enumerate": {"tf": 1.7320508075688772}}, "df": 16, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.Iter": {"tf": 1}, "sain.iter.Iter": {"tf": 1}}, "df": 2}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"sain.Vec": {"tf": 1}, "sain.collections.Vec": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1}}, "df": 3}}}}}}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"sain.todo": {"tf": 1}, "sain.macros.todo": {"tf": 1}}, "df": 2}}}}}}}, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.Iterator": {"tf": 1}, "sain.iter.Iterator": {"tf": 1}}, "df": 2}}}}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {"sain.Iterator": {"tf": 1}, "sain.Error": {"tf": 1}, "sain.MaybeUninit": {"tf": 1}, "sain.MaybeUninit.uninit_array": {"tf": 1}, "sain.MaybeUninit.assume_init": {"tf": 1.4142135623730951}, "sain.MaybeUninit.write": {"tf": 1}, "sain.error.Error": {"tf": 1}, "sain.iter.Iterator": {"tf": 1}, "sain.sync.Once.get_or": {"tf": 1}, "sain.sync.AsyncOnce.get_or": {"tf": 1}, "sain.sync.AsyncOnce.get_or_with": {"tf": 1}}, "df": 11, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"sain.collections.Bytes.from_bytes": {"tf": 1}, "sain.collections.buf.Bytes.from_bytes": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.Vec": {"tf": 1}, "sain.Box": {"tf": 1}, "sain.MaybeUninit": {"tf": 1.4142135623730951}, "sain.boxed.Box": {"tf": 1}, "sain.collections.Vec": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1}, "sain.sync.Once.get_or": {"tf": 1}, "sain.sync.Once.get_or_with": {"tf": 1.4142135623730951}, "sain.sync.AsyncOnce.get_or": {"tf": 1.4142135623730951}, "sain.sync.AsyncOnce.get_or_with": {"tf": 1.4142135623730951}}, "df": 10}}}, "e": {"docs": {"sain.Vec": {"tf": 1}, "sain.MaybeUninit": {"tf": 1}, "sain.MaybeUninit.assume_init": {"tf": 1}, "sain.MaybeUninit.write": {"tf": 1}, "sain.collections.Vec": {"tf": 1}, "sain.collections.Bytes": {"tf": 1}, "sain.collections.Bytes.from_raw": {"tf": 1}, "sain.collections.buf.Bytes": {"tf": 1}, "sain.collections.buf.Bytes.from_raw": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1}, "sain.sync.Lazy": {"tf": 1}, "sain.sync.Lazy.get_unchecked": {"tf": 1}, "sain.sync.Once.get_unchecked": {"tf": 1}, "sain.sync.Once.set": {"tf": 1}, "sain.sync.LazyFuture": {"tf": 1}, "sain.sync.AsyncOnce.get_unchecked": {"tf": 1}, "sain.sync.AsyncOnce.set": {"tf": 1}}, "df": 17, "d": {"docs": {"sain.Vec": {"tf": 1}, "sain.Vec.count": {"tf": 1}, "sain.MaybeUninit": {"tf": 1}, "sain.MaybeUninit.uninit_array": {"tf": 1}, "sain.MaybeUninit.assume_init": {"tf": 1.4142135623730951}, "sain.MaybeUninit.write": {"tf": 1.4142135623730951}, "sain.collections.Vec": {"tf": 1}, "sain.collections.Vec.count": {"tf": 1}, "sain.collections.Bytes.as_ref": {"tf": 1}, "sain.collections.Bytes.as_mut": {"tf": 1}, "sain.collections.Bytes.put": {"tf": 1}, "sain.collections.buf.Bytes.as_ref": {"tf": 1}, "sain.collections.buf.Bytes.as_mut": {"tf": 1}, "sain.collections.buf.Bytes.put": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1}, "sain.collections.vec.Vec.count": {"tf": 1}, "sain.sync.Lazy": {"tf": 1.7320508075688772}, "sain.sync.Lazy.is_initialized": {"tf": 1}, "sain.sync.Lazy.get_unchecked": {"tf": 1}, "sain.sync.Once": {"tf": 1}, "sain.sync.Once.get": {"tf": 1}, "sain.sync.Once.get_unchecked": {"tf": 1.4142135623730951}, "sain.sync.Once.get_or": {"tf": 1.4142135623730951}, "sain.sync.LazyFuture": {"tf": 1.7320508075688772}, "sain.sync.LazyFuture.is_initialized": {"tf": 1}, "sain.sync.AsyncOnce": {"tf": 1}, "sain.sync.AsyncOnce.is_set": {"tf": 1}, "sain.sync.AsyncOnce.get_unchecked": {"tf": 1.4142135623730951}}, "df": 28}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.sync.Once": {"tf": 1}, "sain.sync.Once.get_or": {"tf": 1}, "sain.sync.AsyncOnce": {"tf": 1}}, "df": 3}}}}}}}}}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.Vec": {"tf": 1}, "sain.collections.Vec": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1}}, "df": 3}}}}}, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"sain.From": {"tf": 1}, "sain.convert.From": {"tf": 1}}, "df": 2}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"sain.collections.Bytes.try_to_str": {"tf": 1}, "sain.collections.Bytes.to_str": {"tf": 1}, "sain.collections.buf.Bytes.try_to_str": {"tf": 1}, "sain.collections.buf.Bytes.to_str": {"tf": 1}}, "df": 4}}}}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"sain.collections.Bytes.to_str": {"tf": 1}, "sain.collections.buf.Bytes.to_str": {"tf": 1}}, "df": 2}}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.Default": {"tf": 1}, "sain.Some.iter": {"tf": 1}, "sain.todo": {"tf": 1}, "sain.deprecated": {"tf": 1}, "sain.unimplemented": {"tf": 1}, "sain.doc": {"tf": 1.4142135623730951}, "sain.Error": {"tf": 2}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}, "sain.collections.Bytes": {"tf": 1}, "sain.collections.buf.Bytes": {"tf": 1}, "sain.collections.vec.from_args": {"tf": 1}, "sain.default": {"tf": 1}, "sain.default.Default": {"tf": 1}, "sain.error": {"tf": 1.4142135623730951}, "sain.error.Error": {"tf": 2}, "sain.macros.deprecated": {"tf": 1}, "sain.macros.unimplemented": {"tf": 1}, "sain.macros.todo": {"tf": 1}, "sain.macros.doc": {"tf": 1.4142135623730951}, "sain.option.Some": {"tf": 1}, "sain.option.Some.iter": {"tf": 1}, "sain.option.Option": {"tf": 2}, "sain.option.NOTHING": {"tf": 1}, "sain.result": {"tf": 1.4142135623730951}, "sain.sync.Once": {"tf": 1.4142135623730951}, "sain.sync.AsyncOnce": {"tf": 1.4142135623730951}, "sain.sync.AsyncOnce.get_or": {"tf": 1}, "sain.sync.AsyncOnce.get_or_with": {"tf": 1}}, "df": 31}}, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sain.From": {"tf": 1}, "sain.convert.From": {"tf": 1}}, "df": 2}}}}}}}, "l": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1.4142135623730951}, "sain.From": {"tf": 1.4142135623730951}, "sain.cfg.cfg_attr": {"tf": 1.4142135623730951}, "sain.cfg.cfg": {"tf": 1}, "sain.convert.From": {"tf": 1.4142135623730951}}, "df": 6, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"sain.Iterator": {"tf": 1}, "sain.From": {"tf": 1.4142135623730951}, "sain.TryFrom": {"tf": 1}, "sain.TryInto": {"tf": 1}, "sain.convert": {"tf": 1.4142135623730951}, "sain.convert.From": {"tf": 1.4142135623730951}, "sain.convert.TryFrom": {"tf": 1}, "sain.convert.TryInto": {"tf": 1}, "sain.error": {"tf": 1.4142135623730951}, "sain.iter.Iterator": {"tf": 1}}, "df": 10, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 2}, "sain.Error": {"tf": 1}, "sain.From": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 2}, "sain.cfg.cfg": {"tf": 1}, "sain.collections.buf": {"tf": 1}, "sain.convert.From": {"tf": 1}, "sain.default": {"tf": 1}, "sain.error.Error": {"tf": 1}}, "df": 10, "s": {"docs": {"sain.TryFrom": {"tf": 1}, "sain.TryInto": {"tf": 1}, "sain.collections": {"tf": 1.4142135623730951}, "sain.convert.TryFrom": {"tf": 1}, "sain.convert.TryInto": {"tf": 1}}, "df": 5}}}}}}, "s": {"docs": {"sain.Iter": {"tf": 1}, "sain.iter.Iter": {"tf": 1}}, "df": 2}, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.Iterator": {"tf": 1}, "sain.unimplemented": {"tf": 1.4142135623730951}, "sain.convert": {"tf": 1}, "sain.iter.Iterator": {"tf": 1}, "sain.macros.unimplemented": {"tf": 1.4142135623730951}}, "df": 5}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"sain.Iterator": {"tf": 1}, "sain.iter.Iterator": {"tf": 1}}, "df": 2}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.From": {"tf": 1.4142135623730951}, "sain.convert.From": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}}}}, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sain.Some.as_ref": {"tf": 1}, "sain.Iterator.collect": {"tf": 1}, "sain.Vec.as_ref": {"tf": 1}, "sain.MaybeUninit.uninit_array": {"tf": 1}, "sain.collections.Vec.as_ref": {"tf": 1}, "sain.collections.Bytes.as_ref": {"tf": 1}, "sain.collections.buf.Bytes.as_ref": {"tf": 1}, "sain.collections.vec.Vec.as_ref": {"tf": 1}, "sain.iter.Iterator.collect": {"tf": 1}, "sain.option.Some.as_ref": {"tf": 1}}, "df": 10}}}}}}}}, "d": {"docs": {"sain.Iterator": {"tf": 2}, "sain.Error": {"tf": 1.7320508075688772}, "sain.From": {"tf": 1}, "sain.TryFrom": {"tf": 1.4142135623730951}, "sain.Into": {"tf": 1}, "sain.TryInto": {"tf": 1}, "sain.convert": {"tf": 3}, "sain.convert.From": {"tf": 1}, "sain.convert.TryFrom": {"tf": 1.4142135623730951}, "sain.convert.Into": {"tf": 1}, "sain.convert.TryInto": {"tf": 1}, "sain.error.Error": {"tf": 1.7320508075688772}, "sain.iter.Iterator": {"tf": 2}}, "df": 13, "s": {"docs": {"sain.Iterator.cloned": {"tf": 1.7320508075688772}, "sain.Iterator.copied": {"tf": 1.7320508075688772}, "sain.iter.Iterator.cloned": {"tf": 1.7320508075688772}, "sain.iter.Iterator.copied": {"tf": 1.7320508075688772}}, "df": 4}}, "o": {"docs": {"sain.collections.Bytes.from_raw": {"tf": 2.8284271247461903}, "sain.collections.Bytes.put_raw": {"tf": 2}, "sain.collections.buf.Bytes.from_raw": {"tf": 2.8284271247461903}, "sain.collections.buf.Bytes.put_raw": {"tf": 2}, "sain.collections.buf.Rawish": {"tf": 1.7320508075688772}}, "df": 5, "s": {"docs": {"sain.cfg": {"tf": 1}}, "df": 1}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.cfg": {"tf": 1}}, "df": 1}}}}}}}}}}, "a": {"docs": {"sain": {"tf": 1.4142135623730951}, "sain.cfg": {"tf": 1}, "sain.Default": {"tf": 1}, "sain.Some": {"tf": 1.4142135623730951}, "sain.Some.unwrap": {"tf": 1}, "sain.Some.unwrap_or_else": {"tf": 1}, "sain.Some.expect": {"tf": 1}, "sain.Some.as_ref": {"tf": 1.4142135623730951}, "sain.Iter": {"tf": 1}, "sain.Iter.clone": {"tf": 1}, "sain.Iterator": {"tf": 1}, "sain.Iterator.raw_parts": {"tf": 1.4142135623730951}, "sain.Iterator.cloned": {"tf": 1.4142135623730951}, "sain.Iterator.copied": {"tf": 1.7320508075688772}, "sain.Iterator.enumerate": {"tf": 1.4142135623730951}, "sain.Iterator.take_while": {"tf": 1.7320508075688772}, "sain.Iterator.drop_while": {"tf": 1.4142135623730951}, "sain.Iterator.reversed": {"tf": 1}, "sain.Iterator.union": {"tf": 1}, "sain.todo": {"tf": 1}, "sain.deprecated": {"tf": 2}, "sain.unimplemented": {"tf": 1.4142135623730951}, "sain.Ok.inspect": {"tf": 1}, "sain.Ok.inspect_err": {"tf": 1}, "sain.Ok.map": {"tf": 1}, "sain.Ok.map_or_else": {"tf": 1}, "sain.Ok.map_err": {"tf": 1}, "sain.Vec": {"tf": 4.123105625617661}, "sain.Vec.with_capacity": {"tf": 1}, "sain.Vec.iter": {"tf": 1}, "sain.Vec.swap_remove": {"tf": 1.7320508075688772}, "sain.Vec.reserve": {"tf": 1}, "sain.Vec.pop": {"tf": 1}, "sain.Vec.remove": {"tf": 1.4142135623730951}, "sain.Vec.copy": {"tf": 1}, "sain.Vec.index": {"tf": 1}, "sain.Error": {"tf": 1}, "sain.Error.message": {"tf": 1}, "sain.Box": {"tf": 1.7320508075688772}, "sain.Box.on_expire": {"tf": 1}, "sain.MaybeUninit": {"tf": 2.6457513110645907}, "sain.MaybeUninit.uninit": {"tf": 1}, "sain.TryFrom": {"tf": 1.4142135623730951}, "sain.TryInto": {"tf": 1.4142135623730951}, "sain.boxed": {"tf": 1.7320508075688772}, "sain.boxed.Box": {"tf": 1.7320508075688772}, "sain.boxed.Box.on_expire": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}, "sain.collections.Vec": {"tf": 4.123105625617661}, "sain.collections.Vec.with_capacity": {"tf": 1}, "sain.collections.Vec.iter": {"tf": 1}, "sain.collections.Vec.swap_remove": {"tf": 1.7320508075688772}, "sain.collections.Vec.reserve": {"tf": 1}, "sain.collections.Vec.pop": {"tf": 1}, "sain.collections.Vec.remove": {"tf": 1.4142135623730951}, "sain.collections.Vec.copy": {"tf": 1}, "sain.collections.Vec.index": {"tf": 1}, "sain.collections.Bytes": {"tf": 1.7320508075688772}, "sain.collections.Bytes.__init__": {"tf": 1}, "sain.collections.Bytes.from_str": {"tf": 1.4142135623730951}, "sain.collections.Bytes.from_static": {"tf": 1}, "sain.collections.Bytes.from_bytes": {"tf": 1}, "sain.collections.Bytes.from_raw": {"tf": 1.7320508075688772}, "sain.collections.Bytes.try_to_str": {"tf": 1.4142135623730951}, "sain.collections.Bytes.to_str": {"tf": 1}, "sain.collections.Bytes.as_mut": {"tf": 1}, "sain.collections.Bytes.put": {"tf": 2}, "sain.collections.Bytes.put_raw": {"tf": 2}, "sain.collections.Bytes.put_bytes": {"tf": 1}, "sain.collections.Bytes.iter": {"tf": 1}, "sain.collections.Bytes.copy": {"tf": 1}, "sain.collections.Bytes.index": {"tf": 1}, "sain.collections.Bytes.insert": {"tf": 1}, "sain.collections.buf": {"tf": 1}, "sain.collections.buf.Bytes": {"tf": 1.7320508075688772}, "sain.collections.buf.Bytes.__init__": {"tf": 1}, "sain.collections.buf.Bytes.from_str": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.from_static": {"tf": 1}, "sain.collections.buf.Bytes.from_bytes": {"tf": 1}, "sain.collections.buf.Bytes.from_raw": {"tf": 1.7320508075688772}, "sain.collections.buf.Bytes.try_to_str": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.to_str": {"tf": 1}, "sain.collections.buf.Bytes.as_mut": {"tf": 1}, "sain.collections.buf.Bytes.put": {"tf": 2}, "sain.collections.buf.Bytes.put_raw": {"tf": 2}, "sain.collections.buf.Bytes.put_bytes": {"tf": 1}, "sain.collections.buf.Bytes.iter": {"tf": 1}, "sain.collections.buf.Bytes.copy": {"tf": 1}, "sain.collections.buf.Bytes.index": {"tf": 1}, "sain.collections.buf.Bytes.insert": {"tf": 1}, "sain.collections.buf.Rawish": {"tf": 1}, "sain.collections.buf.Buffer": {"tf": 1}, "sain.collections.vec": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 4.123105625617661}, "sain.collections.vec.Vec.with_capacity": {"tf": 1}, "sain.collections.vec.Vec.iter": {"tf": 1}, "sain.collections.vec.Vec.swap_remove": {"tf": 1.7320508075688772}, "sain.collections.vec.Vec.reserve": {"tf": 1}, "sain.collections.vec.Vec.pop": {"tf": 1}, "sain.collections.vec.Vec.remove": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.copy": {"tf": 1}, "sain.collections.vec.Vec.index": {"tf": 1}, "sain.collections.vec.from_args": {"tf": 1}, "sain.convert": {"tf": 2.449489742783178}, "sain.convert.TryFrom": {"tf": 1.4142135623730951}, "sain.convert.TryInto": {"tf": 1.4142135623730951}, "sain.default": {"tf": 1}, "sain.default.Default": {"tf": 1}, "sain.error": {"tf": 1}, "sain.error.Error": {"tf": 1}, "sain.error.Error.message": {"tf": 1}, "sain.futures.loop": {"tf": 1}, "sain.iter.Iter": {"tf": 1}, "sain.iter.Iter.clone": {"tf": 1}, "sain.iter.Iterator": {"tf": 1}, "sain.iter.Iterator.raw_parts": {"tf": 1.4142135623730951}, "sain.iter.Iterator.cloned": {"tf": 1.4142135623730951}, "sain.iter.Iterator.copied": {"tf": 1.7320508075688772}, "sain.iter.Iterator.enumerate": {"tf": 1.4142135623730951}, "sain.iter.Iterator.take_while": {"tf": 1.7320508075688772}, "sain.iter.Iterator.drop_while": {"tf": 1.4142135623730951}, "sain.iter.Iterator.reversed": {"tf": 1}, "sain.iter.Iterator.union": {"tf": 1}, "sain.iter.Filter": {"tf": 1}, "sain.iter.Map": {"tf": 1}, "sain.iter.once": {"tf": 1}, "sain.macros": {"tf": 1}, "sain.macros.deprecated": {"tf": 2}, "sain.macros.unimplemented": {"tf": 1.4142135623730951}, "sain.macros.todo": {"tf": 1}, "sain.macros.unsafe": {"tf": 1}, "sain.option": {"tf": 1}, "sain.option.Some": {"tf": 1}, "sain.option.Some.unwrap": {"tf": 1}, "sain.option.Some.unwrap_or_else": {"tf": 1}, "sain.option.Some.expect": {"tf": 1}, "sain.option.Some.as_ref": {"tf": 1.4142135623730951}, "sain.option.Option": {"tf": 1.4142135623730951}, "sain.option.NOTHING": {"tf": 1}, "sain.result": {"tf": 1.7320508075688772}, "sain.result.Ok.inspect": {"tf": 1}, "sain.result.Ok.inspect_err": {"tf": 1}, "sain.result.Ok.map": {"tf": 1}, "sain.result.Ok.map_or_else": {"tf": 1}, "sain.result.Ok.map_err": {"tf": 1}, "sain.sync.Lazy": {"tf": 1.7320508075688772}, "sain.sync.Once": {"tf": 1}, "sain.sync.LazyFuture": {"tf": 1.7320508075688772}, "sain.sync.AsyncOnce": {"tf": 1.4142135623730951}}, "df": 149, "b": {"docs": {"sain.Iterator.take_while": {"tf": 1.4142135623730951}, "sain.Iterator.drop_while": {"tf": 1}, "sain.iter.Iterator.take_while": {"tf": 1.4142135623730951}, "sain.iter.Iterator.drop_while": {"tf": 1}}, "df": 4, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"sain.Iterator": {"tf": 1}, "sain.error": {"tf": 1}, "sain.iter.Iterator": {"tf": 1}}, "df": 3, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain": {"tf": 1}}, "df": 1, "s": {"docs": {"sain.collections.Bytes": {"tf": 1}, "sain.collections.buf.Bytes": {"tf": 1}, "sain.futures": {"tf": 1}}, "df": 3}}}}, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {"sain.futures.loop": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"sain.Vec": {"tf": 1}, "sain.collections.Vec": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1}}, "df": 3}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {"sain.Vec.with_capacity": {"tf": 1}, "sain.collections.Vec.with_capacity": {"tf": 1}, "sain.collections.vec.Vec.with_capacity": {"tf": 1}}, "df": 3}}}, "n": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.Default": {"tf": 1.4142135623730951}, "sain.Some": {"tf": 1.4142135623730951}, "sain.Some.iter": {"tf": 1}, "sain.Iterator": {"tf": 1}, "sain.Iterator.default": {"tf": 1}, "sain.Iterator.collect": {"tf": 1.4142135623730951}, "sain.Iterator.cloned": {"tf": 1.4142135623730951}, "sain.Iterator.copied": {"tf": 1.4142135623730951}, "sain.Iterator.any": {"tf": 1.4142135623730951}, "sain.deprecated": {"tf": 1.4142135623730951}, "sain.unimplemented": {"tf": 1.7320508075688772}, "sain.Ok.is_ok": {"tf": 1}, "sain.Ok.iter": {"tf": 1}, "sain.Err.is_ok": {"tf": 1}, "sain.Vec": {"tf": 1.4142135623730951}, "sain.Vec.as_ref": {"tf": 1}, "sain.Vec.iter": {"tf": 1}, "sain.Vec.push": {"tf": 1}, "sain.Vec.push_within_capacity": {"tf": 1.4142135623730951}, "sain.Vec.append": {"tf": 1}, "sain.Vec.insert": {"tf": 1}, "sain.Error": {"tf": 1.4142135623730951}, "sain.Box": {"tf": 1}, "sain.Box.on_expire": {"tf": 1}, "sain.MaybeUninit": {"tf": 1}, "sain.MaybeUninit.uninit": {"tf": 1}, "sain.MaybeUninit.uninit_array": {"tf": 1.4142135623730951}, "sain.MaybeUninit.assume_init": {"tf": 1}, "sain.From": {"tf": 1}, "sain.TryFrom": {"tf": 1}, "sain.TryInto": {"tf": 1}, "sain.boxed.Box": {"tf": 1}, "sain.boxed.Box.on_expire": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}, "sain.collections": {"tf": 1}, "sain.collections.Vec": {"tf": 1.4142135623730951}, "sain.collections.Vec.as_ref": {"tf": 1}, "sain.collections.Vec.iter": {"tf": 1}, "sain.collections.Vec.push": {"tf": 1}, "sain.collections.Vec.push_within_capacity": {"tf": 1.4142135623730951}, "sain.collections.Vec.append": {"tf": 1}, "sain.collections.Vec.insert": {"tf": 1}, "sain.collections.Bytes": {"tf": 1.7320508075688772}, "sain.collections.Bytes.from_static": {"tf": 1}, "sain.collections.Bytes.from_bytes": {"tf": 1}, "sain.collections.Bytes.as_ref": {"tf": 1.4142135623730951}, "sain.collections.Bytes.as_mut": {"tf": 1}, "sain.collections.Bytes.put": {"tf": 1}, "sain.collections.Bytes.put_str": {"tf": 1}, "sain.collections.Bytes.iter": {"tf": 1}, "sain.collections.buf.Bytes": {"tf": 1.7320508075688772}, "sain.collections.buf.Bytes.from_static": {"tf": 1}, "sain.collections.buf.Bytes.from_bytes": {"tf": 1}, "sain.collections.buf.Bytes.as_ref": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.as_mut": {"tf": 1}, "sain.collections.buf.Bytes.put": {"tf": 1}, "sain.collections.buf.Bytes.put_str": {"tf": 1}, "sain.collections.buf.Bytes.iter": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.as_ref": {"tf": 1}, "sain.collections.vec.Vec.iter": {"tf": 1}, "sain.collections.vec.Vec.push": {"tf": 1}, "sain.collections.vec.Vec.push_within_capacity": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.append": {"tf": 1}, "sain.collections.vec.Vec.insert": {"tf": 1}, "sain.convert.From": {"tf": 1}, "sain.convert.TryFrom": {"tf": 1}, "sain.convert.TryInto": {"tf": 1}, "sain.default.Default": {"tf": 1.4142135623730951}, "sain.error": {"tf": 1.4142135623730951}, "sain.error.Error": {"tf": 1.4142135623730951}, "sain.futures.spawn": {"tf": 1}, "sain.iter.Iterator": {"tf": 1}, "sain.iter.Iterator.default": {"tf": 1}, "sain.iter.Iterator.collect": {"tf": 1.4142135623730951}, "sain.iter.Iterator.cloned": {"tf": 1.4142135623730951}, "sain.iter.Iterator.copied": {"tf": 1.4142135623730951}, "sain.iter.Iterator.any": {"tf": 1.4142135623730951}, "sain.iter.Cloned": {"tf": 1.4142135623730951}, "sain.iter.Copied": {"tf": 1.4142135623730951}, "sain.iter.Take": {"tf": 1}, "sain.iter.Filter": {"tf": 1}, "sain.iter.Map": {"tf": 1}, "sain.iter.Skip": {"tf": 1}, "sain.iter.Enumerate": {"tf": 1}, "sain.iter.TakeWhile": {"tf": 1}, "sain.iter.DropWhile": {"tf": 1}, "sain.iter.Empty": {"tf": 1}, "sain.iter.Empty.any": {"tf": 1.4142135623730951}, "sain.iter.empty": {"tf": 1}, "sain.iter.once": {"tf": 1}, "sain.iter.repeat": {"tf": 1}, "sain.macros.deprecated": {"tf": 1.4142135623730951}, "sain.macros.unimplemented": {"tf": 1.7320508075688772}, "sain.option.Some": {"tf": 1.4142135623730951}, "sain.option.Some.iter": {"tf": 1}, "sain.result.Ok.is_ok": {"tf": 1}, "sain.result.Ok.iter": {"tf": 1}, "sain.result.Err.is_ok": {"tf": 1}, "sain.sync.AsyncOnce": {"tf": 1}}, "df": 103, "d": {"docs": {"sain": {"tf": 1.4142135623730951}, "sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1.4142135623730951}, "sain.Some.filter": {"tf": 1}, "sain.Some.take_if": {"tf": 1.4142135623730951}, "sain.Some.and_ok": {"tf": 1.4142135623730951}, "sain.Some.and_then": {"tf": 1.7320508075688772}, "sain.Some.is_some_and": {"tf": 1.7320508075688772}, "sain.Iter": {"tf": 1}, "sain.Iterator": {"tf": 1}, "sain.Iterator.collect": {"tf": 1}, "sain.Iterator.cloned": {"tf": 1.4142135623730951}, "sain.Iterator.enumerate": {"tf": 1}, "sain.Iterator.first": {"tf": 1}, "sain.Iterator.last": {"tf": 1}, "sain.Ok.is_ok": {"tf": 1}, "sain.Ok.is_ok_and": {"tf": 1.4142135623730951}, "sain.Ok.is_err_and": {"tf": 1.4142135623730951}, "sain.Ok.ok": {"tf": 1}, "sain.Ok.err": {"tf": 1}, "sain.Ok.inspect": {"tf": 1}, "sain.Ok.inspect_err": {"tf": 1}, "sain.Ok.map_or": {"tf": 1}, "sain.Ok.map_or_else": {"tf": 1}, "sain.Err.is_ok": {"tf": 1}, "sain.Err.is_ok_and": {"tf": 1.4142135623730951}, "sain.Err.is_err_and": {"tf": 1.4142135623730951}, "sain.Vec": {"tf": 1.4142135623730951}, "sain.Vec.with_capacity": {"tf": 1}, "sain.Vec.split_first": {"tf": 1}, "sain.Vec.truncate": {"tf": 1}, "sain.Vec.swap_remove": {"tf": 1.4142135623730951}, "sain.Vec.push_within_capacity": {"tf": 1}, "sain.Vec.pop": {"tf": 1}, "sain.Vec.copy": {"tf": 1}, "sain.Box.on_expire": {"tf": 1}, "sain.MaybeUninit": {"tf": 1}, "sain.MaybeUninit.assume_init": {"tf": 1}, "sain.TryFrom": {"tf": 1.4142135623730951}, "sain.TryInto": {"tf": 1}, "sain.boxed.Box.on_expire": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1.4142135623730951}, "sain.cfg.cfg": {"tf": 1}, "sain.collections": {"tf": 1.7320508075688772}, "sain.collections.Vec": {"tf": 1.4142135623730951}, "sain.collections.Vec.with_capacity": {"tf": 1}, "sain.collections.Vec.split_first": {"tf": 1}, "sain.collections.Vec.truncate": {"tf": 1}, "sain.collections.Vec.swap_remove": {"tf": 1.4142135623730951}, "sain.collections.Vec.push_within_capacity": {"tf": 1}, "sain.collections.Vec.pop": {"tf": 1}, "sain.collections.Vec.copy": {"tf": 1}, "sain.collections.Bytes": {"tf": 1}, "sain.collections.Bytes.__init__": {"tf": 1}, "sain.collections.Bytes.leak": {"tf": 1.4142135623730951}, "sain.collections.Bytes.raw_parts": {"tf": 1}, "sain.collections.Bytes.index": {"tf": 1}, "sain.collections.Bytes.pop": {"tf": 1}, "sain.collections.buf.Bytes": {"tf": 1}, "sain.collections.buf.Bytes.__init__": {"tf": 1}, "sain.collections.buf.Bytes.leak": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.raw_parts": {"tf": 1}, "sain.collections.buf.Bytes.index": {"tf": 1}, "sain.collections.buf.Bytes.pop": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.with_capacity": {"tf": 1}, "sain.collections.vec.Vec.split_first": {"tf": 1}, "sain.collections.vec.Vec.truncate": {"tf": 1}, "sain.collections.vec.Vec.swap_remove": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.push_within_capacity": {"tf": 1}, "sain.collections.vec.Vec.pop": {"tf": 1}, "sain.collections.vec.Vec.copy": {"tf": 1}, "sain.convert": {"tf": 1.7320508075688772}, "sain.convert.TryFrom": {"tf": 1.4142135623730951}, "sain.convert.TryInto": {"tf": 1}, "sain.error": {"tf": 1.4142135623730951}, "sain.iter.Iter": {"tf": 1}, "sain.iter.Iterator": {"tf": 1}, "sain.iter.Iterator.collect": {"tf": 1}, "sain.iter.Iterator.cloned": {"tf": 1.4142135623730951}, "sain.iter.Iterator.enumerate": {"tf": 1}, "sain.iter.Iterator.first": {"tf": 1}, "sain.iter.Iterator.last": {"tf": 1}, "sain.iter.Take": {"tf": 1}, "sain.iter.Skip": {"tf": 1}, "sain.iter.Enumerate": {"tf": 1}, "sain.macros": {"tf": 1}, "sain.option.Some.filter": {"tf": 1}, "sain.option.Some.take_if": {"tf": 1.4142135623730951}, "sain.option.Some.and_ok": {"tf": 1.4142135623730951}, "sain.option.Some.and_then": {"tf": 1.7320508075688772}, "sain.option.Some.is_some_and": {"tf": 1.7320508075688772}, "sain.result": {"tf": 1}, "sain.result.Ok.is_ok": {"tf": 1}, "sain.result.Ok.is_ok_and": {"tf": 1.4142135623730951}, "sain.result.Ok.is_err_and": {"tf": 1.4142135623730951}, "sain.result.Ok.ok": {"tf": 1}, "sain.result.Ok.err": {"tf": 1}, "sain.result.Ok.inspect": {"tf": 1}, "sain.result.Ok.inspect_err": {"tf": 1}, "sain.result.Ok.map_or": {"tf": 1}, "sain.result.Ok.map_or_else": {"tf": 1}, "sain.result.Err.is_ok": {"tf": 1}, "sain.result.Err.is_ok_and": {"tf": 1.4142135623730951}, "sain.result.Err.is_err_and": {"tf": 1.4142135623730951}, "sain.sync.Lazy.get": {"tf": 1.4142135623730951}, "sain.sync.Once.get_or": {"tf": 1}, "sain.sync.LazyFuture.get": {"tf": 1.4142135623730951}}, "df": 108}, "y": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.Default": {"tf": 1.4142135623730951}, "sain.Iterator": {"tf": 1}, "sain.Iterator.any": {"tf": 1.4142135623730951}, "sain.Iterator.sort": {"tf": 1}, "sain.Iterator.for_each": {"tf": 1}, "sain.Iterator.async_for_each": {"tf": 1.4142135623730951}, "sain.Vec": {"tf": 1.4142135623730951}, "sain.Error.source": {"tf": 1}, "sain.MaybeUninit.write": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}, "sain.collections.Vec": {"tf": 1.4142135623730951}, "sain.collections.Bytes.to_str": {"tf": 1}, "sain.collections.Bytes.is_empty": {"tf": 1}, "sain.collections.buf.Bytes.to_str": {"tf": 1}, "sain.collections.buf.Bytes.is_empty": {"tf": 1}, "sain.collections.buf.Rawish": {"tf": 1}, "sain.collections.buf.Buffer": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1.4142135623730951}, "sain.default.Default": {"tf": 1.4142135623730951}, "sain.error.Error.source": {"tf": 1}, "sain.futures.spawn": {"tf": 1}, "sain.iter.Iterator": {"tf": 1}, "sain.iter.Iterator.any": {"tf": 1.4142135623730951}, "sain.iter.Iterator.sort": {"tf": 1}, "sain.iter.Iterator.for_each": {"tf": 1}, "sain.iter.Iterator.async_for_each": {"tf": 1.4142135623730951}, "sain.iter.Empty.any": {"tf": 1.4142135623730951}, "sain.iter.into_iter": {"tf": 1}, "sain.option.Some": {"tf": 1.4142135623730951}, "sain.result": {"tf": 1}, "sain.sync.Lazy.set": {"tf": 1}, "sain.sync.LazyFuture.set": {"tf": 1}}, "df": 35, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.Iter": {"tf": 1}, "sain.iter.Iter": {"tf": 1}}, "df": 2}}}}}}, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sain.Some.map": {"tf": 1}, "sain.Some.map_or": {"tf": 1}, "sain.Some.map_or_else": {"tf": 1}, "sain.Some.replace": {"tf": 1}, "sain.Iterator.map": {"tf": 1}, "sain.Iterator.zip": {"tf": 1}, "sain.Vec": {"tf": 1}, "sain.Vec.extend": {"tf": 1}, "sain.collections.Vec": {"tf": 1}, "sain.collections.Vec.extend": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1}, "sain.collections.vec.Vec.extend": {"tf": 1}, "sain.convert": {"tf": 1}, "sain.iter.Iterator.map": {"tf": 1}, "sain.iter.Iterator.zip": {"tf": 1}, "sain.option.Some.map": {"tf": 1}, "sain.option.Some.map_or": {"tf": 1}, "sain.option.Some.map_or_else": {"tf": 1}, "sain.option.Some.replace": {"tf": 1}, "sain.sync.Once.set": {"tf": 1}, "sain.sync.AsyncOnce.set": {"tf": 1}}, "df": 21}}}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"sain.Iterator.filter": {"tf": 1.4142135623730951}, "sain.iter.Iterator.filter": {"tf": 1.4142135623730951}}, "df": 2}}}}}, "s": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sain.collections": {"tf": 1}}, "df": 1}}}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"sain.option.Option": {"tf": 1}}, "df": 1}}}}}}}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"sain.cfg": {"tf": 1}, "sain.Iterator": {"tf": 1}, "sain.Iterator.collect": {"tf": 1}, "sain.Iterator.sink": {"tf": 1}, "sain.Iterator.raw_parts": {"tf": 1}, "sain.Iterator.next": {"tf": 1}, "sain.Iterator.copied": {"tf": 1}, "sain.Iterator.all": {"tf": 2}, "sain.Iterator.union": {"tf": 1}, "sain.Vec": {"tf": 1}, "sain.Vec.push_within_capacity": {"tf": 1}, "sain.Vec.reserve": {"tf": 1}, "sain.Vec.copy": {"tf": 1}, "sain.Vec.clear": {"tf": 1}, "sain.MaybeUninit": {"tf": 1}, "sain.From": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}, "sain.collections.Vec": {"tf": 1}, "sain.collections.Vec.push_within_capacity": {"tf": 1}, "sain.collections.Vec.reserve": {"tf": 1}, "sain.collections.Vec.copy": {"tf": 1}, "sain.collections.Vec.clear": {"tf": 1}, "sain.collections.Bytes": {"tf": 1}, "sain.collections.Bytes.iter": {"tf": 1}, "sain.collections.buf.Bytes": {"tf": 1}, "sain.collections.buf.Bytes.iter": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1}, "sain.collections.vec.Vec.push_within_capacity": {"tf": 1}, "sain.collections.vec.Vec.reserve": {"tf": 1}, "sain.collections.vec.Vec.copy": {"tf": 1}, "sain.collections.vec.Vec.clear": {"tf": 1}, "sain.convert.From": {"tf": 1}, "sain.error": {"tf": 1}, "sain.futures.spawn": {"tf": 1}, "sain.iter.Iterator": {"tf": 1}, "sain.iter.Iterator.collect": {"tf": 1}, "sain.iter.Iterator.sink": {"tf": 1}, "sain.iter.Iterator.raw_parts": {"tf": 1}, "sain.iter.Iterator.next": {"tf": 1}, "sain.iter.Iterator.copied": {"tf": 1}, "sain.iter.Iterator.all": {"tf": 2}, "sain.iter.Iterator.union": {"tf": 1}, "sain.iter.Empty.next": {"tf": 1}, "sain.iter.Empty.all": {"tf": 2}}, "df": 44, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.Some.take_if": {"tf": 1}, "sain.option.Some.take_if": {"tf": 1}}, "df": 2}}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"sain.collections.Bytes.__init__": {"tf": 1}, "sain.collections.Bytes.put": {"tf": 1}, "sain.collections.buf.Bytes.__init__": {"tf": 1}, "sain.collections.buf.Bytes.put": {"tf": 1}}, "df": 4, "d": {"docs": {"sain.Vec": {"tf": 1}, "sain.Vec.swap_remove": {"tf": 1}, "sain.Vec.copy": {"tf": 1}, "sain.collections.Vec": {"tf": 1}, "sain.collections.Vec.swap_remove": {"tf": 1}, "sain.collections.Vec.copy": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1}, "sain.collections.vec.Vec.swap_remove": {"tf": 1}, "sain.collections.vec.Vec.copy": {"tf": 1}}, "df": 9}}}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"sain.deprecated": {"tf": 1}, "sain.Vec": {"tf": 1}, "sain.collections.Vec": {"tf": 1}, "sain.collections.vec": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1}, "sain.macros.deprecated": {"tf": 1}}, "df": 6}}}}}}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"sain.Vec": {"tf": 1}, "sain.collections.Vec": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1}}, "df": 3}}}}, "s": {"docs": {}, "df": 0, "o": {"docs": {"sain.Vec": {"tf": 1}, "sain.Vec.push_within_capacity": {"tf": 1}, "sain.Box.on_expire": {"tf": 1}, "sain.boxed.Box.on_expire": {"tf": 1}, "sain.collections.Vec": {"tf": 1}, "sain.collections.Vec.push_within_capacity": {"tf": 1}, "sain.collections.Bytes": {"tf": 1}, "sain.collections.Bytes.put": {"tf": 1}, "sain.collections.buf.Bytes": {"tf": 1}, "sain.collections.buf.Bytes.put": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1}, "sain.collections.vec.Vec.push_within_capacity": {"tf": 1}, "sain.convert": {"tf": 1}}, "df": 13}}, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {"sain.Vec.append": {"tf": 1}, "sain.collections.Vec.append": {"tf": 1}, "sain.collections.vec.Vec.append": {"tf": 1}}, "df": 3}}}, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "s": {"docs": {"sain.MaybeUninit": {"tf": 1}, "sain.From": {"tf": 1}, "sain.convert.From": {"tf": 1}, "sain.option.NOTHING": {"tf": 1}}, "df": 4}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "y": {"docs": {"sain.collections.Bytes.leak": {"tf": 1}, "sain.collections.buf.Bytes.leak": {"tf": 1}, "sain.sync.Once.set": {"tf": 1}, "sain.sync.AsyncOnce.set": {"tf": 1}}, "df": 4}}}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.collections.Bytes.put": {"tf": 1}, "sain.collections.buf.Bytes.put": {"tf": 1}}, "df": 2}}}}, "t": {"docs": {"sain.Iterator.any": {"tf": 1.4142135623730951}, "sain.deprecated": {"tf": 1}, "sain.Vec.with_capacity": {"tf": 1}, "sain.Vec.split_off": {"tf": 1.4142135623730951}, "sain.Vec.push": {"tf": 1}, "sain.Vec.reserve": {"tf": 1}, "sain.Vec.get": {"tf": 1}, "sain.Vec.insert": {"tf": 1}, "sain.collections.Vec.with_capacity": {"tf": 1}, "sain.collections.Vec.split_off": {"tf": 1.4142135623730951}, "sain.collections.Vec.push": {"tf": 1}, "sain.collections.Vec.reserve": {"tf": 1}, "sain.collections.Vec.get": {"tf": 1}, "sain.collections.Vec.insert": {"tf": 1}, "sain.collections.Bytes.put": {"tf": 1}, "sain.collections.buf.Bytes.put": {"tf": 1}, "sain.collections.vec.Vec.with_capacity": {"tf": 1}, "sain.collections.vec.Vec.split_off": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.push": {"tf": 1}, "sain.collections.vec.Vec.reserve": {"tf": 1}, "sain.collections.vec.Vec.get": {"tf": 1}, "sain.collections.vec.Vec.insert": {"tf": 1}, "sain.iter.Iterator.any": {"tf": 1.4142135623730951}, "sain.iter.Empty.any": {"tf": 1.4142135623730951}, "sain.macros": {"tf": 1}, "sain.macros.deprecated": {"tf": 1}, "sain.sync.Lazy": {"tf": 1.7320508075688772}, "sain.sync.Once.get_unchecked": {"tf": 1}, "sain.sync.LazyFuture": {"tf": 1.7320508075688772}, "sain.sync.AsyncOnce.get_unchecked": {"tf": 1}}, "df": 30, "t": {"docs": {}, "df": 0, "r": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1.7320508075688772}, "sain.cfg.cfg_attr": {"tf": 1.7320508075688772}, "sain.cfg.cfg": {"tf": 1}}, "df": 4, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"sain.MaybeUninit": {"tf": 1}}, "df": 1, "s": {"docs": {"sain.cfg": {"tf": 1.4142135623730951}, "sain.cfg_attr": {"tf": 1.4142135623730951}, "sain.cfg.cfg_attr": {"tf": 1.4142135623730951}, "sain.cfg.cfg": {"tf": 1.4142135623730951}}, "df": 4}}}}}}}, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {"sain.deprecated": {"tf": 1}, "sain.unimplemented": {"tf": 1}, "sain.collections.Bytes.to_str": {"tf": 1}, "sain.collections.buf.Bytes.to_str": {"tf": 1}, "sain.macros.deprecated": {"tf": 1}, "sain.macros.unimplemented": {"tf": 1}}, "df": 6, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.Some.as_ref": {"tf": 1}, "sain.option.Some.as_ref": {"tf": 1}}, "df": 2}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.TryInto": {"tf": 1}, "sain.convert.TryInto": {"tf": 1}}, "df": 2}}}}}}}}, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"sain.cfg": {"tf": 1.4142135623730951}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1.4142135623730951}}, "df": 4, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 4}}}}}}}}}}, "m": {"6": {"4": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 2}, "docs": {}, "df": 0}, "docs": {"sain.cfg": {"tf": 1}}, "df": 1}, "g": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"sain.error": {"tf": 1}}, "df": 1, "s": {"docs": {"sain.cfg_attr": {"tf": 1}, "sain.todo": {"tf": 1}, "sain.Vec": {"tf": 1}, "sain.TryFrom": {"tf": 1}, "sain.TryInto": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.collections.Vec": {"tf": 1}, "sain.collections.Bytes.index": {"tf": 1}, "sain.collections.buf.Bytes.index": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1}, "sain.convert.TryFrom": {"tf": 1}, "sain.convert.TryInto": {"tf": 1}, "sain.macros.todo": {"tf": 1}}, "df": 13}}}}}}, "s": {"docs": {"sain.Vec": {"tf": 2}, "sain.collections.Vec": {"tf": 2}, "sain.collections.vec.Vec": {"tf": 2}, "sain.collections.vec.from_args": {"tf": 1}}, "df": 4}}, "e": {"docs": {"sain.Iterator.take": {"tf": 1}, "sain.Iterator.take_while": {"tf": 1}, "sain.Box.on_expire": {"tf": 1}, "sain.boxed.Box.on_expire": {"tf": 1}, "sain.collections": {"tf": 1}, "sain.collections.Bytes": {"tf": 1}, "sain.collections.Bytes.insert": {"tf": 1}, "sain.collections.buf.Bytes": {"tf": 1}, "sain.collections.buf.Bytes.insert": {"tf": 1}, "sain.convert": {"tf": 1}, "sain.error": {"tf": 1}, "sain.iter.Iterator.take": {"tf": 1}, "sain.iter.Iterator.take_while": {"tf": 1}}, "df": 13}, "r": {"docs": {"sain.collections.Bytes.from_static": {"tf": 1.7320508075688772}, "sain.collections.Bytes.from_bytes": {"tf": 1}, "sain.collections.buf.Bytes.from_static": {"tf": 1.7320508075688772}, "sain.collections.buf.Bytes.from_bytes": {"tf": 1}}, "df": 4, "a": {"docs": {}, "df": 0, "y": {"docs": {"sain.MaybeUninit": {"tf": 1}, "sain.MaybeUninit.uninit_array": {"tf": 1}, "sain.collections.Bytes": {"tf": 1.4142135623730951}, "sain.collections.Bytes.__init__": {"tf": 1}, "sain.collections.Bytes.from_static": {"tf": 1.7320508075688772}, "sain.collections.Bytes.from_bytes": {"tf": 1.4142135623730951}, "sain.collections.Bytes.leak": {"tf": 1}, "sain.collections.Bytes.put": {"tf": 1.7320508075688772}, "sain.collections.Bytes.size": {"tf": 1}, "sain.collections.Bytes.index": {"tf": 1}, "sain.collections.buf.Bytes": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.__init__": {"tf": 1}, "sain.collections.buf.Bytes.from_static": {"tf": 1.7320508075688772}, "sain.collections.buf.Bytes.from_bytes": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.leak": {"tf": 1}, "sain.collections.buf.Bytes.put": {"tf": 1.7320508075688772}, "sain.collections.buf.Bytes.size": {"tf": 1}, "sain.collections.buf.Bytes.index": {"tf": 1}}, "df": 18, "[": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"sain.collections.Bytes": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"sain.boxed": {"tf": 1}}, "df": 1}}}}}, "p": {"docs": {}, "df": 0, "i": {"docs": {"sain.cfg_attr": {"tf": 1}, "sain.Iterator": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.iter.Iterator": {"tf": 1}}, "df": 4}, "p": {"docs": {"sain.sync.Lazy": {"tf": 1.7320508075688772}, "sain.sync.LazyFuture": {"tf": 1.7320508075688772}}, "df": 2, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"sain.Iterator.cloned": {"tf": 1}, "sain.Iterator.copied": {"tf": 1}, "sain.Vec": {"tf": 1.4142135623730951}, "sain.collections.Vec": {"tf": 1.4142135623730951}, "sain.collections.Bytes.put": {"tf": 1}, "sain.collections.buf.Bytes.put": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1.4142135623730951}, "sain.iter.Iterator.cloned": {"tf": 1}, "sain.iter.Iterator.copied": {"tf": 1}}, "df": 9, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.Iterator.cloned": {"tf": 1}, "sain.Vec": {"tf": 1}, "sain.collections.Vec": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1}, "sain.iter.Iterator.cloned": {"tf": 1}}, "df": 5}}, "s": {"docs": {"sain.Vec.push_within_capacity": {"tf": 1}, "sain.collections.Vec.push_within_capacity": {"tf": 1}, "sain.collections.Bytes.put": {"tf": 1}, "sain.collections.buf.Bytes.put": {"tf": 1}, "sain.collections.vec.Vec.push_within_capacity": {"tf": 1}, "sain.macros": {"tf": 1}}, "df": 6}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sain.Vec.swap_remove": {"tf": 1}, "sain.collections.Vec.swap_remove": {"tf": 1}, "sain.collections.vec.Vec.swap_remove": {"tf": 1}}, "df": 3}}}}}}}, "l": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.Ok.map": {"tf": 1}, "sain.result.Ok.map": {"tf": 1}}, "df": 2}}}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.sync.Lazy": {"tf": 1.7320508075688772}, "sain.sync.LazyFuture": {"tf": 1.7320508075688772}}, "df": 2, "s": {"docs": {"sain.collections.Bytes": {"tf": 1}, "sain.collections.buf.Bytes": {"tf": 1}}, "df": 2}}}}}}}}, "e": {"docs": {"sain.collections.vec.from_args": {"tf": 1}}, "df": 1}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"sain.sync.Lazy": {"tf": 1}, "sain.sync.LazyFuture": {"tf": 1}}, "df": 2}}}}}}}, "s": {"docs": {"sain.Some": {"tf": 1.4142135623730951}, "sain.Some.into_inner": {"tf": 1}, "sain.Some.as_ref": {"tf": 1.7320508075688772}, "sain.Some.as_mut": {"tf": 1.4142135623730951}, "sain.Iterator": {"tf": 1}, "sain.Iterator.collect": {"tf": 1}, "sain.Iterator.raw_parts": {"tf": 1}, "sain.Iterator.take_while": {"tf": 1.4142135623730951}, "sain.Iterator.async_for_each": {"tf": 1}, "sain.deprecated": {"tf": 1}, "sain.unimplemented": {"tf": 1.4142135623730951}, "sain.Vec": {"tf": 1.4142135623730951}, "sain.Vec.with_capacity": {"tf": 1}, "sain.Vec.as_ref": {"tf": 1}, "sain.Vec.count": {"tf": 1}, "sain.MaybeUninit": {"tf": 1}, "sain.From": {"tf": 1.7320508075688772}, "sain.TryFrom": {"tf": 1}, "sain.TryInto": {"tf": 1}, "sain.collections": {"tf": 1}, "sain.collections.Vec": {"tf": 1.4142135623730951}, "sain.collections.Vec.with_capacity": {"tf": 1}, "sain.collections.Vec.as_ref": {"tf": 1}, "sain.collections.Vec.count": {"tf": 1}, "sain.collections.Bytes": {"tf": 1.7320508075688772}, "sain.collections.Bytes.from_str": {"tf": 1}, "sain.collections.Bytes.from_raw": {"tf": 1}, "sain.collections.Bytes.as_bytes": {"tf": 1}, "sain.collections.Bytes.as_ref": {"tf": 1}, "sain.collections.Bytes.as_mut": {"tf": 1.4142135623730951}, "sain.collections.Bytes.raw_parts": {"tf": 1}, "sain.collections.Bytes.put": {"tf": 1.4142135623730951}, "sain.collections.Bytes.put_raw": {"tf": 1}, "sain.collections.Bytes.insert": {"tf": 1}, "sain.collections.buf.Bytes": {"tf": 1.7320508075688772}, "sain.collections.buf.Bytes.from_str": {"tf": 1}, "sain.collections.buf.Bytes.from_raw": {"tf": 1}, "sain.collections.buf.Bytes.as_bytes": {"tf": 1}, "sain.collections.buf.Bytes.as_ref": {"tf": 1}, "sain.collections.buf.Bytes.as_mut": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.raw_parts": {"tf": 1}, "sain.collections.buf.Bytes.put": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.put_raw": {"tf": 1}, "sain.collections.buf.Bytes.insert": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.with_capacity": {"tf": 1}, "sain.collections.vec.Vec.as_ref": {"tf": 1}, "sain.collections.vec.Vec.count": {"tf": 1}, "sain.collections.vec.from_args": {"tf": 1}, "sain.convert.From": {"tf": 1.7320508075688772}, "sain.convert.TryFrom": {"tf": 1}, "sain.convert.TryInto": {"tf": 1}, "sain.error": {"tf": 1}, "sain.iter.Iterator": {"tf": 1}, "sain.iter.Iterator.collect": {"tf": 1}, "sain.iter.Iterator.raw_parts": {"tf": 1}, "sain.iter.Iterator.take_while": {"tf": 1.4142135623730951}, "sain.iter.Iterator.async_for_each": {"tf": 1}, "sain.macros.deprecated": {"tf": 1}, "sain.macros.unimplemented": {"tf": 1.4142135623730951}, "sain.macros.unsafe": {"tf": 1}, "sain.option.Some.into_inner": {"tf": 1}, "sain.option.Some.as_ref": {"tf": 1.7320508075688772}, "sain.option.Some.as_mut": {"tf": 1.4142135623730951}, "sain.result": {"tf": 1}}, "df": 65, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"sain.Default": {"tf": 1}, "sain.Some.default": {"tf": 1}, "sain.Some.into_inner": {"tf": 1.4142135623730951}, "sain.Some.take_if": {"tf": 1.4142135623730951}, "sain.Some.and_ok": {"tf": 1.4142135623730951}, "sain.Iter.clone": {"tf": 1}, "sain.Iterator.default": {"tf": 1}, "sain.Iterator.to_vec": {"tf": 1}, "sain.Iterator.sink": {"tf": 1}, "sain.Iterator.raw_parts": {"tf": 1.4142135623730951}, "sain.Iterator.next": {"tf": 1.7320508075688772}, "sain.Iterator.cloned": {"tf": 1}, "sain.Iterator.copied": {"tf": 1}, "sain.Iterator.map": {"tf": 1}, "sain.Iterator.take": {"tf": 1}, "sain.Iterator.zip": {"tf": 1}, "sain.Iterator.count": {"tf": 1}, "sain.Ok.is_ok": {"tf": 1}, "sain.Ok.is_ok_and": {"tf": 1}, "sain.Ok.is_err": {"tf": 1}, "sain.Ok.is_err_and": {"tf": 1}, "sain.Ok.map_or": {"tf": 1.4142135623730951}, "sain.Ok.map_or_else": {"tf": 1.4142135623730951}, "sain.Err.is_ok": {"tf": 1}, "sain.Err.is_ok_and": {"tf": 1}, "sain.Err.is_err": {"tf": 1}, "sain.Err.is_err_and": {"tf": 1}, "sain.Vec": {"tf": 1.4142135623730951}, "sain.Vec.with_capacity": {"tf": 1}, "sain.Vec.as_ref": {"tf": 1}, "sain.Vec.len": {"tf": 1}, "sain.Vec.capacity": {"tf": 1.4142135623730951}, "sain.Vec.split_first": {"tf": 1.4142135623730951}, "sain.Vec.first": {"tf": 1}, "sain.Vec.truncate": {"tf": 1}, "sain.Vec.retain": {"tf": 1}, "sain.Vec.swap_remove": {"tf": 1}, "sain.Vec.push": {"tf": 1}, "sain.Vec.push_within_capacity": {"tf": 1}, "sain.Vec.insert": {"tf": 1}, "sain.Vec.pop": {"tf": 1.4142135623730951}, "sain.Vec.remove": {"tf": 1}, "sain.Vec.extend": {"tf": 1}, "sain.Vec.clear": {"tf": 1}, "sain.Vec.sort": {"tf": 1}, "sain.Vec.index": {"tf": 1}, "sain.Vec.count": {"tf": 1}, "sain.Box": {"tf": 1}, "sain.Box.on_expire": {"tf": 1.4142135623730951}, "sain.Box.remaining": {"tf": 1.4142135623730951}, "sain.Box.get": {"tf": 1}, "sain.MaybeUninit": {"tf": 1}, "sain.MaybeUninit.uninit_array": {"tf": 1}, "sain.boxed.Box": {"tf": 1}, "sain.boxed.Box.on_expire": {"tf": 1.4142135623730951}, "sain.boxed.Box.remaining": {"tf": 1.4142135623730951}, "sain.boxed.Box.get": {"tf": 1}, "sain.collections.Vec": {"tf": 1.4142135623730951}, "sain.collections.Vec.with_capacity": {"tf": 1}, "sain.collections.Vec.as_ref": {"tf": 1}, "sain.collections.Vec.len": {"tf": 1}, "sain.collections.Vec.capacity": {"tf": 1.4142135623730951}, "sain.collections.Vec.split_first": {"tf": 1.4142135623730951}, "sain.collections.Vec.first": {"tf": 1}, "sain.collections.Vec.truncate": {"tf": 1}, "sain.collections.Vec.retain": {"tf": 1}, "sain.collections.Vec.swap_remove": {"tf": 1}, "sain.collections.Vec.push": {"tf": 1}, "sain.collections.Vec.push_within_capacity": {"tf": 1}, "sain.collections.Vec.insert": {"tf": 1}, "sain.collections.Vec.pop": {"tf": 1.4142135623730951}, "sain.collections.Vec.remove": {"tf": 1}, "sain.collections.Vec.extend": {"tf": 1}, "sain.collections.Vec.clear": {"tf": 1}, "sain.collections.Vec.sort": {"tf": 1}, "sain.collections.Vec.index": {"tf": 1}, "sain.collections.Vec.count": {"tf": 1}, "sain.collections.Bytes": {"tf": 1}, "sain.collections.Bytes.from_str": {"tf": 1}, "sain.collections.Bytes.try_to_str": {"tf": 1}, "sain.collections.Bytes.to_str": {"tf": 1.4142135623730951}, "sain.collections.Bytes.leak": {"tf": 1.4142135623730951}, "sain.collections.Bytes.as_bytes": {"tf": 1}, "sain.collections.Bytes.as_ref": {"tf": 1}, "sain.collections.Bytes.as_mut": {"tf": 1}, "sain.collections.Bytes.put": {"tf": 1}, "sain.collections.Bytes.put_bytes": {"tf": 1}, "sain.collections.Bytes.put_str": {"tf": 1}, "sain.collections.Bytes.len": {"tf": 1}, "sain.collections.Bytes.size": {"tf": 1}, "sain.collections.Bytes.is_empty": {"tf": 1}, "sain.collections.Bytes.clear": {"tf": 1}, "sain.collections.Bytes.count": {"tf": 1}, "sain.collections.Bytes.pop": {"tf": 1}, "sain.collections.buf.Bytes": {"tf": 1}, "sain.collections.buf.Bytes.from_str": {"tf": 1}, "sain.collections.buf.Bytes.try_to_str": {"tf": 1}, "sain.collections.buf.Bytes.to_str": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.leak": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.as_bytes": {"tf": 1}, "sain.collections.buf.Bytes.as_ref": {"tf": 1}, "sain.collections.buf.Bytes.as_mut": {"tf": 1}, "sain.collections.buf.Bytes.put": {"tf": 1}, "sain.collections.buf.Bytes.put_bytes": {"tf": 1}, "sain.collections.buf.Bytes.put_str": {"tf": 1}, "sain.collections.buf.Bytes.len": {"tf": 1}, "sain.collections.buf.Bytes.size": {"tf": 1}, "sain.collections.buf.Bytes.is_empty": {"tf": 1}, "sain.collections.buf.Bytes.clear": {"tf": 1}, "sain.collections.buf.Bytes.count": {"tf": 1}, "sain.collections.buf.Bytes.pop": {"tf": 1}, "sain.collections.vec": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.with_capacity": {"tf": 1}, "sain.collections.vec.Vec.as_ref": {"tf": 1}, "sain.collections.vec.Vec.len": {"tf": 1}, "sain.collections.vec.Vec.capacity": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.split_first": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.first": {"tf": 1}, "sain.collections.vec.Vec.truncate": {"tf": 1}, "sain.collections.vec.Vec.retain": {"tf": 1}, "sain.collections.vec.Vec.swap_remove": {"tf": 1}, "sain.collections.vec.Vec.push": {"tf": 1}, "sain.collections.vec.Vec.push_within_capacity": {"tf": 1}, "sain.collections.vec.Vec.insert": {"tf": 1}, "sain.collections.vec.Vec.pop": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.remove": {"tf": 1}, "sain.collections.vec.Vec.extend": {"tf": 1}, "sain.collections.vec.Vec.clear": {"tf": 1}, "sain.collections.vec.Vec.sort": {"tf": 1}, "sain.collections.vec.Vec.index": {"tf": 1}, "sain.collections.vec.Vec.count": {"tf": 1}, "sain.convert": {"tf": 1}, "sain.default.Default": {"tf": 1}, "sain.futures.spawn": {"tf": 1}, "sain.iter.Iter.clone": {"tf": 1}, "sain.iter.Iterator.default": {"tf": 1}, "sain.iter.Iterator.to_vec": {"tf": 1}, "sain.iter.Iterator.sink": {"tf": 1}, "sain.iter.Iterator.raw_parts": {"tf": 1.4142135623730951}, "sain.iter.Iterator.next": {"tf": 1.7320508075688772}, "sain.iter.Iterator.cloned": {"tf": 1}, "sain.iter.Iterator.copied": {"tf": 1}, "sain.iter.Iterator.map": {"tf": 1}, "sain.iter.Iterator.take": {"tf": 1}, "sain.iter.Iterator.zip": {"tf": 1}, "sain.iter.Iterator.count": {"tf": 1}, "sain.iter.Empty.next": {"tf": 1.7320508075688772}, "sain.iter.Empty.count": {"tf": 1}, "sain.iter.empty": {"tf": 1}, "sain.iter.once": {"tf": 1.4142135623730951}, "sain.iter.repeat": {"tf": 2}, "sain.option.Some": {"tf": 1}, "sain.option.Some.into_inner": {"tf": 1.4142135623730951}, "sain.option.Some.take_if": {"tf": 1.4142135623730951}, "sain.option.Some.and_ok": {"tf": 1.4142135623730951}, "sain.option.NOTHING": {"tf": 1}, "sain.result.Ok.is_ok": {"tf": 1}, "sain.result.Ok.is_ok_and": {"tf": 1}, "sain.result.Ok.is_err": {"tf": 1}, "sain.result.Ok.is_err_and": {"tf": 1}, "sain.result.Ok.map_or": {"tf": 1.4142135623730951}, "sain.result.Ok.map_or_else": {"tf": 1.4142135623730951}, "sain.result.Err.is_ok": {"tf": 1}, "sain.result.Err.is_ok_and": {"tf": 1}, "sain.result.Err.is_err": {"tf": 1}, "sain.result.Err.is_err_and": {"tf": 1}, "sain.sync.Once": {"tf": 1}, "sain.sync.Once.set": {"tf": 1.4142135623730951}, "sain.sync.Once.get_or": {"tf": 1}, "sain.sync.Once.get_or_with": {"tf": 1.4142135623730951}, "sain.sync.AsyncOnce": {"tf": 1}, "sain.sync.AsyncOnce.set": {"tf": 1.4142135623730951}, "sain.sync.AsyncOnce.get_or": {"tf": 1.4142135623730951}, "sain.sync.AsyncOnce.get_or_with": {"tf": 1.4142135623730951}}, "df": 175}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"sain.MaybeUninit": {"tf": 1}, "sain.MaybeUninit.uninit_array": {"tf": 1}, "sain.MaybeUninit.assume_init": {"tf": 1.4142135623730951}, "sain.MaybeUninit.write": {"tf": 1}}, "df": 4, "d": {"docs": {"sain.cfg": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.MaybeUninit.assume_init": {"tf": 1}}, "df": 1}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {"sain.Some.as_ref": {"tf": 1}, "sain.option.Some.as_ref": {"tf": 1}}, "df": 2}}}, "y": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {"sain.Iterator.async_for_each": {"tf": 2.449489742783178}, "sain.Box.on_expire": {"tf": 1.4142135623730951}, "sain.boxed.Box.on_expire": {"tf": 1.4142135623730951}, "sain.futures.spawn": {"tf": 1.4142135623730951}, "sain.iter.Iterator.async_for_each": {"tf": 2.449489742783178}, "sain.sync.AsyncOnce": {"tf": 1.4142135623730951}}, "df": 6, "h": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {"sain.futures": {"tf": 1}}, "df": 1, "l": {"docs": {}, "df": 0, "y": {"docs": {"sain.sync.LazyFuture": {"tf": 1}}, "df": 1}}}}}}}}}, "i": {"docs": {}, "df": 0, "o": {"docs": {"sain.futures.loop": {"tf": 1}}, "df": 1}}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sain.sync.AsyncOnce": {"tf": 1.4142135623730951}, "sain.sync.AsyncOnce.get_unchecked": {"tf": 1}, "sain.sync.AsyncOnce.set": {"tf": 1}, "sain.sync.AsyncOnce.get_or": {"tf": 1.4142135623730951}, "sain.sync.AsyncOnce.get_or_with": {"tf": 1.4142135623730951}}, "df": 5}}}}}}}}, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"sain.Iter.clone": {"tf": 1}, "sain.Iterator.cloned": {"tf": 1}, "sain.Iterator.copied": {"tf": 1}, "sain.Vec": {"tf": 1}, "sain.collections.Vec": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1}, "sain.iter.Iter.clone": {"tf": 1}, "sain.iter.Iterator.cloned": {"tf": 1}, "sain.iter.Iterator.copied": {"tf": 1}}, "df": 9}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"sain.Box": {"tf": 1}, "sain.MaybeUninit.assume_init": {"tf": 1}, "sain.boxed.Box": {"tf": 1}}, "df": 3}}, "p": {"docs": {}, "df": 0, "t": {"docs": {"sain.collections.Bytes": {"tf": 1}, "sain.collections.buf.Bytes": {"tf": 1}}, "df": 2}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.sync.Lazy.get": {"tf": 1}, "sain.sync.LazyFuture.get": {"tf": 1}}, "df": 2}}}}}}}, "d": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sain.Iterator.next": {"tf": 1}, "sain.iter.Iterator.next": {"tf": 1}, "sain.iter.Empty.next": {"tf": 1}}, "df": 3}}}}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.result": {"tf": 1}}, "df": 1, "a": {"docs": {}, "df": 0, "l": {"docs": {"sain.Vec.reserve": {"tf": 1}, "sain.collections.Vec.reserve": {"tf": 1}, "sain.collections.vec.Vec.reserve": {"tf": 1}}, "df": 3}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"sain.collections.Bytes.raw_parts": {"tf": 1}, "sain.collections.buf.Bytes.raw_parts": {"tf": 1}}, "df": 2}}}}}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "p": {"docs": {"sain.Iterator.async_for_each": {"tf": 1}, "sain.iter.Iterator.async_for_each": {"tf": 1}}, "df": 2}}}}}}, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"sain.Iterator.async_for_each": {"tf": 1.4142135623730951}, "sain.Box.on_expire": {"tf": 1}, "sain.boxed.Box.on_expire": {"tf": 1}, "sain.futures.spawn": {"tf": 1.4142135623730951}, "sain.iter.Iterator.async_for_each": {"tf": 1.4142135623730951}, "sain.sync.AsyncOnce": {"tf": 1.4142135623730951}, "sain.sync.AsyncOnce.set": {"tf": 1.4142135623730951}, "sain.sync.AsyncOnce.get_or": {"tf": 1.4142135623730951}, "sain.sync.AsyncOnce.get_or_with": {"tf": 1.4142135623730951}}, "df": 9, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"sain.futures.spawn": {"tf": 1.7320508075688772}}, "df": 1}, "[": {"docs": {}, "df": 0, "t": {"docs": {"sain.futures.spawn": {"tf": 1}}, "df": 1}}}}}}}}}, "s": {"docs": {"sain.futures.spawn": {"tf": 1}}, "df": 1}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sain.unimplemented": {"tf": 1}, "sain.macros.unimplemented": {"tf": 1}}, "df": 2}}}}}}}}, "k": {"docs": {}, "df": 0, "a": {"docs": {"sain.Vec.swap_remove": {"tf": 1}, "sain.collections.Vec.swap_remove": {"tf": 1}, "sain.collections.vec.Vec.swap_remove": {"tf": 1}}, "df": 3}}, "f": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sain.Box": {"tf": 1}, "sain.Box.on_expire": {"tf": 1}, "sain.Box.get": {"tf": 1}, "sain.boxed": {"tf": 1}, "sain.boxed.Box": {"tf": 1}, "sain.boxed.Box.on_expire": {"tf": 1}, "sain.boxed.Box.get": {"tf": 1}}, "df": 7}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"sain.Box": {"tf": 1}, "sain.boxed": {"tf": 1}, "sain.boxed.Box": {"tf": 1}}, "df": 3}}}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {"sain.From": {"tf": 1}, "sain.convert.From": {"tf": 1}, "sain.result": {"tf": 1.7320508075688772}}, "df": 3, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"sain.From": {"tf": 1}, "sain.convert.From": {"tf": 1}}, "df": 2}}}}}}}}}}}}, "g": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"sain.sync.Lazy.get": {"tf": 1}}, "df": 1}}}}}, "o": {"docs": {}, "df": 0, "f": {"docs": {"sain": {"tf": 1.4142135623730951}, "sain.cfg": {"tf": 1.7320508075688772}, "sain.cfg_attr": {"tf": 1.4142135623730951}, "sain.Default.default": {"tf": 1}, "sain.Some.map_or_else": {"tf": 1}, "sain.Some.as_ref": {"tf": 1}, "sain.Iter.clone": {"tf": 1}, "sain.Iterator.cloned": {"tf": 1.4142135623730951}, "sain.Iterator.copied": {"tf": 1.7320508075688772}, "sain.Iterator.take": {"tf": 1.7320508075688772}, "sain.Iterator.skip": {"tf": 1}, "sain.Iterator.enumerate": {"tf": 1}, "sain.Iterator.take_while": {"tf": 1}, "sain.Iterator.count": {"tf": 1}, "sain.Ok": {"tf": 1}, "sain.Err": {"tf": 1}, "sain.Vec": {"tf": 1.7320508075688772}, "sain.Vec.len": {"tf": 1}, "sain.Vec.capacity": {"tf": 1}, "sain.Vec.split_first": {"tf": 1}, "sain.Vec.swap_remove": {"tf": 1}, "sain.Vec.push": {"tf": 1}, "sain.Vec.get": {"tf": 1}, "sain.Vec.copy": {"tf": 1}, "sain.Vec.clear": {"tf": 1}, "sain.Vec.index": {"tf": 1}, "sain.Vec.count": {"tf": 1.4142135623730951}, "sain.Error": {"tf": 1}, "sain.Error.source": {"tf": 1}, "sain.Box": {"tf": 1.4142135623730951}, "sain.MaybeUninit": {"tf": 2.23606797749979}, "sain.MaybeUninit.uninit_array": {"tf": 1}, "sain.MaybeUninit.write": {"tf": 1}, "sain.From": {"tf": 1.7320508075688772}, "sain.TryFrom": {"tf": 1.4142135623730951}, "sain.boxed": {"tf": 1}, "sain.boxed.Box": {"tf": 1.4142135623730951}, "sain.cfg.cfg_attr": {"tf": 1.4142135623730951}, "sain.cfg.cfg": {"tf": 1}, "sain.collections": {"tf": 1.4142135623730951}, "sain.collections.Vec": {"tf": 1.7320508075688772}, "sain.collections.Vec.len": {"tf": 1}, "sain.collections.Vec.capacity": {"tf": 1}, "sain.collections.Vec.split_first": {"tf": 1}, "sain.collections.Vec.swap_remove": {"tf": 1}, "sain.collections.Vec.push": {"tf": 1}, "sain.collections.Vec.get": {"tf": 1}, "sain.collections.Vec.copy": {"tf": 1}, "sain.collections.Vec.clear": {"tf": 1}, "sain.collections.Vec.index": {"tf": 1}, "sain.collections.Vec.count": {"tf": 1.4142135623730951}, "sain.collections.Bytes.to_str": {"tf": 1}, "sain.collections.Bytes.leak": {"tf": 1.4142135623730951}, "sain.collections.Bytes.put": {"tf": 1.4142135623730951}, "sain.collections.Bytes.put_bytes": {"tf": 1}, "sain.collections.Bytes.len": {"tf": 1}, "sain.collections.Bytes.size": {"tf": 1}, "sain.collections.Bytes.iter": {"tf": 1}, "sain.collections.Bytes.copy": {"tf": 1}, "sain.collections.Bytes.index": {"tf": 1.7320508075688772}, "sain.collections.Bytes.count": {"tf": 1.4142135623730951}, "sain.collections.Bytes.insert": {"tf": 1}, "sain.collections.buf": {"tf": 1}, "sain.collections.buf.Bytes.to_str": {"tf": 1}, "sain.collections.buf.Bytes.leak": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.put": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.put_bytes": {"tf": 1}, "sain.collections.buf.Bytes.len": {"tf": 1}, "sain.collections.buf.Bytes.size": {"tf": 1}, "sain.collections.buf.Bytes.iter": {"tf": 1}, "sain.collections.buf.Bytes.copy": {"tf": 1}, "sain.collections.buf.Bytes.index": {"tf": 1.7320508075688772}, "sain.collections.buf.Bytes.count": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.insert": {"tf": 1}, "sain.collections.buf.Rawish": {"tf": 1}, "sain.collections.buf.Buffer": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1.7320508075688772}, "sain.collections.vec.Vec.len": {"tf": 1}, "sain.collections.vec.Vec.capacity": {"tf": 1}, "sain.collections.vec.Vec.split_first": {"tf": 1}, "sain.collections.vec.Vec.swap_remove": {"tf": 1}, "sain.collections.vec.Vec.push": {"tf": 1}, "sain.collections.vec.Vec.get": {"tf": 1}, "sain.collections.vec.Vec.copy": {"tf": 1}, "sain.collections.vec.Vec.clear": {"tf": 1}, "sain.collections.vec.Vec.index": {"tf": 1}, "sain.collections.vec.Vec.count": {"tf": 1.4142135623730951}, "sain.convert.From": {"tf": 1.7320508075688772}, "sain.convert.TryFrom": {"tf": 1.4142135623730951}, "sain.default.Default.default": {"tf": 1}, "sain.error.Error": {"tf": 1}, "sain.error.Error.source": {"tf": 1}, "sain.futures.spawn": {"tf": 1}, "sain.iter.Iter.clone": {"tf": 1}, "sain.iter.Iterator.cloned": {"tf": 1.4142135623730951}, "sain.iter.Iterator.copied": {"tf": 1.7320508075688772}, "sain.iter.Iterator.take": {"tf": 1.7320508075688772}, "sain.iter.Iterator.skip": {"tf": 1}, "sain.iter.Iterator.enumerate": {"tf": 1}, "sain.iter.Iterator.take_while": {"tf": 1}, "sain.iter.Iterator.count": {"tf": 1}, "sain.iter.Take": {"tf": 1}, "sain.iter.Skip": {"tf": 1}, "sain.iter.Empty.count": {"tf": 1}, "sain.iter.repeat": {"tf": 1}, "sain.macros.unsafe": {"tf": 1}, "sain.option.Some.default": {"tf": 1}, "sain.option.Some.map_or_else": {"tf": 1}, "sain.option.Some.as_ref": {"tf": 1}, "sain.result": {"tf": 1}, "sain.result.Ok": {"tf": 1}, "sain.result.Err": {"tf": 1}, "sain.sync.Lazy": {"tf": 1}, "sain.sync.Lazy.get": {"tf": 1}, "sain.sync.Lazy.set": {"tf": 1}, "sain.sync.Once.get_unchecked": {"tf": 1}, "sain.sync.Once.get_or_with": {"tf": 1}, "sain.sync.LazyFuture": {"tf": 1}, "sain.sync.LazyFuture.get": {"tf": 1}, "sain.sync.LazyFuture.set": {"tf": 1}, "sain.sync.AsyncOnce": {"tf": 1}, "sain.sync.AsyncOnce.get_unchecked": {"tf": 1}, "sain.sync.AsyncOnce.get_or": {"tf": 1}, "sain.sync.AsyncOnce.get_or_with": {"tf": 1}}, "df": 124, "f": {"docs": {"sain.Vec.split_off": {"tf": 1.4142135623730951}, "sain.collections.Vec.split_off": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.split_off": {"tf": 1.4142135623730951}}, "df": 3, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"sain": {"tf": 1}}, "df": 1}}}}}, "n": {"docs": {"sain.cfg_attr": {"tf": 1}, "sain.Some.unwrap_unchecked": {"tf": 1}, "sain.Some.and_then": {"tf": 1}, "sain.Iterator.cloned": {"tf": 1}, "sain.Iterator.copied": {"tf": 1}, "sain.Iterator.for_each": {"tf": 1.4142135623730951}, "sain.Iterator.async_for_each": {"tf": 1.4142135623730951}, "sain.Vec": {"tf": 1}, "sain.Vec.retain": {"tf": 1}, "sain.Box.on_expire": {"tf": 1.4142135623730951}, "sain.MaybeUninit.assume_init": {"tf": 1.4142135623730951}, "sain.boxed.Box.on_expire": {"tf": 1.4142135623730951}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.collections.Vec": {"tf": 1}, "sain.collections.Vec.retain": {"tf": 1}, "sain.collections.Bytes.to_str": {"tf": 1}, "sain.collections.buf.Bytes.to_str": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1}, "sain.collections.vec.Vec.retain": {"tf": 1}, "sain.iter.Iterator.cloned": {"tf": 1}, "sain.iter.Iterator.copied": {"tf": 1}, "sain.iter.Iterator.for_each": {"tf": 1.4142135623730951}, "sain.iter.Iterator.async_for_each": {"tf": 1.4142135623730951}, "sain.option.Some.unwrap_unchecked": {"tf": 1}, "sain.option.Some.and_then": {"tf": 1}, "sain.result": {"tf": 1.4142135623730951}, "sain.sync.Lazy.get_unchecked": {"tf": 1}, "sain.sync.Once.get_unchecked": {"tf": 1}, "sain.sync.LazyFuture.get": {"tf": 1}, "sain.sync.AsyncOnce.get_unchecked": {"tf": 1}}, "df": 30, "l": {"docs": {}, "df": 0, "y": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1.7320508075688772}, "sain.Some.take_if": {"tf": 1}, "sain.Iterator": {"tf": 1.4142135623730951}, "sain.Iterator.copied": {"tf": 1}, "sain.Iterator.filter": {"tf": 1}, "sain.Vec.sort": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1.7320508075688772}, "sain.cfg.cfg": {"tf": 1}, "sain.collections.Vec.sort": {"tf": 1}, "sain.collections.vec.Vec.sort": {"tf": 1}, "sain.iter.Iterator": {"tf": 1.4142135623730951}, "sain.iter.Iterator.copied": {"tf": 1}, "sain.iter.Iterator.filter": {"tf": 1}, "sain.option.Some.take_if": {"tf": 1}, "sain.sync.Lazy.get": {"tf": 1}, "sain.sync.Once": {"tf": 1}, "sain.sync.Once.get_or": {"tf": 1}, "sain.sync.Once.get_or_with": {"tf": 1}, "sain.sync.LazyFuture.get": {"tf": 1}, "sain.sync.AsyncOnce": {"tf": 1}, "sain.sync.AsyncOnce.get_or": {"tf": 1}, "sain.sync.AsyncOnce.get_or_with": {"tf": 1}}, "df": 23}}, "e": {"docs": {"sain.cfg_attr": {"tf": 1}, "sain.Iterator.raw_parts": {"tf": 1.4142135623730951}, "sain.Iterator.any": {"tf": 1.4142135623730951}, "sain.Vec.reserve": {"tf": 1}, "sain.Vec.copy": {"tf": 1}, "sain.From": {"tf": 1.4142135623730951}, "sain.cfg": {"tf": 1.7320508075688772}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.collections.Vec.reserve": {"tf": 1}, "sain.collections.Vec.copy": {"tf": 1}, "sain.collections.Bytes.put_bytes": {"tf": 1}, "sain.collections.Bytes.size": {"tf": 1}, "sain.collections.buf.Bytes.put_bytes": {"tf": 1}, "sain.collections.buf.Bytes.size": {"tf": 1}, "sain.collections.vec.Vec.reserve": {"tf": 1}, "sain.collections.vec.Vec.copy": {"tf": 1}, "sain.convert": {"tf": 1}, "sain.convert.From": {"tf": 1.4142135623730951}, "sain.error": {"tf": 1.4142135623730951}, "sain.futures.loop": {"tf": 1}, "sain.iter.Iterator.raw_parts": {"tf": 1.4142135623730951}, "sain.iter.Iterator.any": {"tf": 1.4142135623730951}, "sain.iter.Empty.any": {"tf": 1.4142135623730951}, "sain.sync.Once.set": {"tf": 1}, "sain.sync.Once.get_or": {"tf": 1}, "sain.sync.Once.get_or_with": {"tf": 1}, "sain.sync.AsyncOnce.set": {"tf": 1}, "sain.sync.AsyncOnce.get_or": {"tf": 1}, "sain.sync.AsyncOnce.get_or_with": {"tf": 1}}, "df": 29}, "c": {"docs": {}, "df": 0, "e": {"docs": {"sain.Iterator.to_vec": {"tf": 1}, "sain.iter.Iterator.to_vec": {"tf": 1}, "sain.iter.once": {"tf": 1}, "sain.sync.Lazy.get": {"tf": 1}, "sain.sync.Once": {"tf": 2.23606797749979}, "sain.sync.Once.get_unchecked": {"tf": 1}, "sain.sync.Once.set": {"tf": 1}, "sain.sync.Once.get_or": {"tf": 1.4142135623730951}, "sain.sync.Once.get_or_with": {"tf": 1}, "sain.sync.LazyFuture.get": {"tf": 1}, "sain.sync.AsyncOnce": {"tf": 2}}, "df": 11}}}, "s": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 2}, "sain.cfg.cfg_attr": {"tf": 2}, "sain.cfg.cfg": {"tf": 1.7320508075688772}, "sain.error": {"tf": 1}}, "df": 5}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}, "sain.collections.Bytes": {"tf": 1}, "sain.collections.buf.Bytes": {"tf": 1}}, "df": 6}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"sain.Vec": {"tf": 1}, "sain.collections.Vec": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1}}, "df": 3}}}}}}, "n": {"docs": {"sain.collections.Bytes.from_raw": {"tf": 1}, "sain.collections.Bytes.put_raw": {"tf": 1}, "sain.collections.buf.Bytes.from_raw": {"tf": 1}, "sain.collections.buf.Bytes.put_raw": {"tf": 1}, "sain.result": {"tf": 1}}, "df": 5}}, "t": {"docs": {"sain.Some.into_inner": {"tf": 2}, "sain.option.Some.into_inner": {"tf": 2}}, "df": 2, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.Some": {"tf": 1}, "sain.Some.unwrap_or": {"tf": 1}, "sain.Some.unwrap_or_else": {"tf": 1}, "sain.Some.unwrap_unchecked": {"tf": 1.4142135623730951}, "sain.Some.expect": {"tf": 1}, "sain.Some.map": {"tf": 1}, "sain.Some.map_or": {"tf": 1.4142135623730951}, "sain.Some.map_or_else": {"tf": 1.4142135623730951}, "sain.Some.filter": {"tf": 1}, "sain.Some.replace": {"tf": 1}, "sain.Some.and_ok": {"tf": 2}, "sain.Some.and_then": {"tf": 1}, "sain.Some.iter": {"tf": 1}, "sain.Some.as_ref": {"tf": 1}, "sain.Some.as_mut": {"tf": 1}, "sain.Some.is_some": {"tf": 1}, "sain.Some.is_some_and": {"tf": 1}, "sain.Some.is_none": {"tf": 1}, "sain.Error": {"tf": 1.7320508075688772}, "sain.MaybeUninit": {"tf": 1.4142135623730951}, "sain.error": {"tf": 1.4142135623730951}, "sain.error.Error": {"tf": 1.7320508075688772}, "sain.option": {"tf": 1}, "sain.option.Some.unwrap_or": {"tf": 1}, "sain.option.Some.unwrap_or_else": {"tf": 1}, "sain.option.Some.unwrap_unchecked": {"tf": 1.4142135623730951}, "sain.option.Some.expect": {"tf": 1}, "sain.option.Some.map": {"tf": 1}, "sain.option.Some.map_or": {"tf": 1.4142135623730951}, "sain.option.Some.map_or_else": {"tf": 1.4142135623730951}, "sain.option.Some.filter": {"tf": 1}, "sain.option.Some.replace": {"tf": 1}, "sain.option.Some.and_ok": {"tf": 2}, "sain.option.Some.and_then": {"tf": 1}, "sain.option.Some.iter": {"tf": 1}, "sain.option.Some.as_ref": {"tf": 1}, "sain.option.Some.as_mut": {"tf": 1}, "sain.option.Some.is_some": {"tf": 1}, "sain.option.Some.is_some_and": {"tf": 1}, "sain.option.Some.is_none": {"tf": 1}, "sain.option.Option": {"tf": 1.4142135623730951}, "sain.option.NOTHING": {"tf": 1}}, "df": 42, "a": {"docs": {}, "df": 0, "l": {"docs": {"sain.Iterator.collect": {"tf": 1}, "sain.todo": {"tf": 1}, "sain.deprecated": {"tf": 1}, "sain.unimplemented": {"tf": 1}, "sain.collections.Bytes.index": {"tf": 1}, "sain.collections.buf.Bytes.index": {"tf": 1}, "sain.futures.spawn": {"tf": 1}, "sain.iter.Iterator.collect": {"tf": 1}, "sain.macros.deprecated": {"tf": 1}, "sain.macros.unimplemented": {"tf": 1}, "sain.macros.todo": {"tf": 1}}, "df": 11, "[": {"docs": {}, "df": 0, "t": {"docs": {"sain.Some": {"tf": 1}}, "df": 1}}}}, "[": {"docs": {}, "df": 0, "t": {"docs": {"sain.Some.and_then": {"tf": 1}, "sain.Ok.ok": {"tf": 1}, "sain.Ok.err": {"tf": 1}, "sain.option.Some.and_then": {"tf": 1}, "sain.result.Ok.ok": {"tf": 1}, "sain.result.Ok.err": {"tf": 1}}, "df": 6}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"sain.Ok.ok": {"tf": 1}, "sain.Ok.err": {"tf": 1}, "sain.result.Ok.ok": {"tf": 1}, "sain.result.Ok.err": {"tf": 1}}, "df": 4}}}}}}}}, "b": {"docs": {"sain.Some.and_ok": {"tf": 1}, "sain.option.Some.and_ok": {"tf": 1}}, "df": 2}}, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"sain.Vec": {"tf": 1}, "sain.collections.Vec": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1}}, "df": 3}}}}}}}, "b": {"docs": {}, "df": 0, "j": {"docs": {"sain.MaybeUninit": {"tf": 1.4142135623730951}}, "df": 1, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"sain.cfg": {"tf": 2}, "sain.cfg_attr": {"tf": 2.6457513110645907}, "sain.Default": {"tf": 1}, "sain.Default.default": {"tf": 1}, "sain.Some": {"tf": 1}, "sain.Some.map_or_else": {"tf": 1.4142135623730951}, "sain.Some.as_ref": {"tf": 2}, "sain.Some.as_mut": {"tf": 1.4142135623730951}, "sain.deprecated": {"tf": 1.7320508075688772}, "sain.unimplemented": {"tf": 2}, "sain.doc": {"tf": 1}, "sain.Box": {"tf": 1.4142135623730951}, "sain.MaybeUninit": {"tf": 1}, "sain.boxed.Box": {"tf": 1.4142135623730951}, "sain.cfg.cfg_attr": {"tf": 2.6457513110645907}, "sain.cfg.cfg": {"tf": 2}, "sain.collections.Bytes": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes": {"tf": 1.4142135623730951}, "sain.default.Default": {"tf": 1}, "sain.default.Default.default": {"tf": 1}, "sain.error": {"tf": 1}, "sain.macros": {"tf": 1}, "sain.macros.deprecated": {"tf": 1.7320508075688772}, "sain.macros.unimplemented": {"tf": 2}, "sain.macros.doc": {"tf": 1}, "sain.option.Some": {"tf": 1}, "sain.option.Some.default": {"tf": 1}, "sain.option.Some.map_or_else": {"tf": 1.4142135623730951}, "sain.option.Some.as_ref": {"tf": 2}, "sain.option.Some.as_mut": {"tf": 1.4142135623730951}}, "df": 30, "s": {"docs": {"sain.Some.as_ref": {"tf": 1}, "sain.Iterator.raw_parts": {"tf": 1}, "sain.collections.Bytes": {"tf": 1}, "sain.collections.buf.Bytes": {"tf": 1}, "sain.iter.Iterator.raw_parts": {"tf": 1}, "sain.macros": {"tf": 1}, "sain.option.Some.as_ref": {"tf": 1}, "sain.sync.Lazy": {"tf": 1}, "sain.sync.LazyFuture": {"tf": 1}}, "df": 9}}}}}, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"sain.Some.take_if": {"tf": 1}, "sain.MaybeUninit.write": {"tf": 1}, "sain.option.Some.take_if": {"tf": 1}}, "df": 3}}}}}}}}, "r": {"docs": {"sain.cfg_attr": {"tf": 1}, "sain.Some": {"tf": 2}, "sain.Some.unwrap": {"tf": 1}, "sain.Some.unwrap_or": {"tf": 1.7320508075688772}, "sain.Some.unwrap_or_else": {"tf": 1.7320508075688772}, "sain.Some.map_or": {"tf": 1.7320508075688772}, "sain.Some.map_or_else": {"tf": 1.7320508075688772}, "sain.Some.filter": {"tf": 1}, "sain.Some.as_ref": {"tf": 1}, "sain.Iterator.take": {"tf": 1}, "sain.Ok.unwrap_or": {"tf": 1.4142135623730951}, "sain.Ok.unwrap_or_else": {"tf": 1.7320508075688772}, "sain.Ok.map_or": {"tf": 1.4142135623730951}, "sain.Ok.map_or_else": {"tf": 1.4142135623730951}, "sain.Vec": {"tf": 1.7320508075688772}, "sain.Vec.push_within_capacity": {"tf": 1}, "sain.Vec.get": {"tf": 1}, "sain.Vec.pop": {"tf": 1}, "sain.Vec.count": {"tf": 1}, "sain.MaybeUninit": {"tf": 1.4142135623730951}, "sain.MaybeUninit.uninit": {"tf": 1}, "sain.From": {"tf": 1}, "sain.Into": {"tf": 1}, "sain.TryInto": {"tf": 1}, "sain.cfg": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.collections": {"tf": 1.4142135623730951}, "sain.collections.Vec": {"tf": 1.7320508075688772}, "sain.collections.Vec.push_within_capacity": {"tf": 1}, "sain.collections.Vec.get": {"tf": 1}, "sain.collections.Vec.pop": {"tf": 1}, "sain.collections.Vec.count": {"tf": 1}, "sain.collections.Bytes.to_str": {"tf": 1}, "sain.collections.Bytes.put_bytes": {"tf": 1}, "sain.collections.Bytes.is_empty": {"tf": 1}, "sain.collections.buf.Bytes.to_str": {"tf": 1}, "sain.collections.buf.Bytes.put_bytes": {"tf": 1}, "sain.collections.buf.Bytes.is_empty": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1.7320508075688772}, "sain.collections.vec.Vec.push_within_capacity": {"tf": 1}, "sain.collections.vec.Vec.get": {"tf": 1}, "sain.collections.vec.Vec.pop": {"tf": 1}, "sain.collections.vec.Vec.count": {"tf": 1}, "sain.convert.From": {"tf": 1}, "sain.convert.Into": {"tf": 1}, "sain.convert.TryInto": {"tf": 1}, "sain.futures.loop": {"tf": 1}, "sain.iter.Iterator.take": {"tf": 1}, "sain.iter.Empty": {"tf": 1}, "sain.option": {"tf": 1}, "sain.option.Some.unwrap": {"tf": 1}, "sain.option.Some.unwrap_or": {"tf": 1.7320508075688772}, "sain.option.Some.unwrap_or_else": {"tf": 1.7320508075688772}, "sain.option.Some.map_or": {"tf": 1.7320508075688772}, "sain.option.Some.map_or_else": {"tf": 1.7320508075688772}, "sain.option.Some.filter": {"tf": 1}, "sain.option.Some.as_ref": {"tf": 1}, "sain.result": {"tf": 1.4142135623730951}, "sain.result.Ok.unwrap_or": {"tf": 1.4142135623730951}, "sain.result.Ok.unwrap_or_else": {"tf": 1.7320508075688772}, "sain.result.Ok.map_or": {"tf": 1.4142135623730951}, "sain.result.Ok.map_or_else": {"tf": 1.4142135623730951}, "sain.sync.Lazy.is_initialized": {"tf": 1}, "sain.sync.Once": {"tf": 1.4142135623730951}, "sain.sync.Once.get_unchecked": {"tf": 1}, "sain.sync.Once.set": {"tf": 1}, "sain.sync.Once.get_or": {"tf": 1.7320508075688772}, "sain.sync.Once.get_or_with": {"tf": 1.7320508075688772}, "sain.sync.LazyFuture.is_initialized": {"tf": 1}, "sain.sync.AsyncOnce": {"tf": 1.4142135623730951}, "sain.sync.AsyncOnce.is_set": {"tf": 1}, "sain.sync.AsyncOnce.get_unchecked": {"tf": 1}, "sain.sync.AsyncOnce.set": {"tf": 1}, "sain.sync.AsyncOnce.get_or": {"tf": 1.7320508075688772}, "sain.sync.AsyncOnce.get_or_with": {"tf": 1.7320508075688772}}, "df": 75, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"sain.Some.take": {"tf": 1.7320508075688772}, "sain.Some.take_if": {"tf": 2.449489742783178}, "sain.Iterator.collect": {"tf": 1}, "sain.Vec.copy": {"tf": 1.7320508075688772}, "sain.collections.Vec.copy": {"tf": 1.7320508075688772}, "sain.collections.Bytes.try_to_str": {"tf": 1}, "sain.collections.Bytes.copy": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.try_to_str": {"tf": 1}, "sain.collections.buf.Bytes.copy": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.copy": {"tf": 1.7320508075688772}, "sain.iter.Iterator.collect": {"tf": 1}, "sain.option.Some.take": {"tf": 1.7320508075688772}, "sain.option.Some.take_if": {"tf": 2.449489742783178}}, "df": 13}}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sain.Iterator.reversed": {"tf": 1}, "sain.iter.Iterator.reversed": {"tf": 1}}, "df": 2}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"sain.collections.vec.from_args": {"tf": 1}}, "df": 1}}}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sain.Iterator": {"tf": 1}, "sain.Iterator.map": {"tf": 1}, "sain.Iterator.zip": {"tf": 1.7320508075688772}, "sain.Iterator.union": {"tf": 1.7320508075688772}, "sain.Vec": {"tf": 1.4142135623730951}, "sain.Vec.retain": {"tf": 1}, "sain.collections": {"tf": 1}, "sain.collections.Vec": {"tf": 1.4142135623730951}, "sain.collections.Vec.retain": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.retain": {"tf": 1}, "sain.error": {"tf": 1}, "sain.iter.Iterator": {"tf": 1}, "sain.iter.Iterator.map": {"tf": 1}, "sain.iter.Iterator.zip": {"tf": 1.7320508075688772}, "sain.iter.Iterator.union": {"tf": 1.7320508075688772}}, "df": 16, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"sain.Some": {"tf": 1}, "sain.Some.expect": {"tf": 1}, "sain.Some.filter": {"tf": 1}, "sain.Some.and_ok": {"tf": 1}, "sain.Some.and_then": {"tf": 1}, "sain.Some.as_ref": {"tf": 1}, "sain.Some.as_mut": {"tf": 1}, "sain.Some.is_some": {"tf": 1}, "sain.Some.is_some_and": {"tf": 1}, "sain.Some.is_none": {"tf": 1}, "sain.unimplemented": {"tf": 1}, "sain.Ok.map_or": {"tf": 1}, "sain.Ok.map_or_else": {"tf": 1}, "sain.Ok.iter": {"tf": 1}, "sain.Vec.push_within_capacity": {"tf": 1}, "sain.Box.get": {"tf": 1}, "sain.TryFrom": {"tf": 1}, "sain.boxed.Box.get": {"tf": 1}, "sain.collections.Vec.push_within_capacity": {"tf": 1}, "sain.collections.Bytes.try_to_str": {"tf": 1}, "sain.collections.buf.Bytes.try_to_str": {"tf": 1}, "sain.collections.vec.Vec.push_within_capacity": {"tf": 1}, "sain.convert.TryFrom": {"tf": 1}, "sain.macros.unimplemented": {"tf": 1}, "sain.option.Some.expect": {"tf": 1}, "sain.option.Some.filter": {"tf": 1}, "sain.option.Some.and_ok": {"tf": 1}, "sain.option.Some.and_then": {"tf": 1}, "sain.option.Some.as_ref": {"tf": 1}, "sain.option.Some.as_mut": {"tf": 1}, "sain.option.Some.is_some": {"tf": 1}, "sain.option.Some.is_some_and": {"tf": 1}, "sain.option.Some.is_none": {"tf": 1}, "sain.result.Ok.map_or": {"tf": 1}, "sain.result.Ok.map_or_else": {"tf": 1}, "sain.result.Ok.iter": {"tf": 1}, "sain.sync.Once.set": {"tf": 1}, "sain.sync.Once.get_or": {"tf": 1}, "sain.sync.AsyncOnce.set": {"tf": 1}}, "df": 39}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {"sain.Iterator.map": {"tf": 1}, "sain.Iterator.zip": {"tf": 1}, "sain.iter.Iterator.map": {"tf": 1}, "sain.iter.Iterator.zip": {"tf": 1}}, "df": 4}}}}}}}}, "k": {"docs": {"sain.Some.and_ok": {"tf": 1.4142135623730951}, "sain.Ok.is_ok": {"tf": 1.7320508075688772}, "sain.Ok.is_ok_and": {"tf": 1.7320508075688772}, "sain.Ok.is_err": {"tf": 1}, "sain.Ok.is_err_and": {"tf": 1.4142135623730951}, "sain.Ok.expect": {"tf": 2}, "sain.Ok.unwrap": {"tf": 2}, "sain.Ok.unwrap_or": {"tf": 2}, "sain.Ok.unwrap_or_else": {"tf": 2}, "sain.Ok.unwrap_err": {"tf": 2}, "sain.Ok.ok": {"tf": 2}, "sain.Ok.err": {"tf": 1.4142135623730951}, "sain.Ok.inspect": {"tf": 2}, "sain.Ok.inspect_err": {"tf": 1.7320508075688772}, "sain.Ok.map": {"tf": 2}, "sain.Ok.map_or": {"tf": 1.4142135623730951}, "sain.Ok.map_or_else": {"tf": 1.4142135623730951}, "sain.Ok.map_err": {"tf": 1.4142135623730951}, "sain.Ok.iter": {"tf": 1}, "sain.Err.is_ok": {"tf": 1.4142135623730951}, "sain.Err.is_ok_and": {"tf": 1.4142135623730951}, "sain.Err.is_err_and": {"tf": 1}, "sain.Vec.push_within_capacity": {"tf": 1}, "sain.Vec.reserve": {"tf": 1}, "sain.Error": {"tf": 1.7320508075688772}, "sain.MaybeUninit": {"tf": 1}, "sain.MaybeUninit.write": {"tf": 1.4142135623730951}, "sain.TryFrom": {"tf": 1}, "sain.TryInto": {"tf": 1}, "sain.collections.Vec.push_within_capacity": {"tf": 1}, "sain.collections.Vec.reserve": {"tf": 1}, "sain.collections.vec.Vec.push_within_capacity": {"tf": 1}, "sain.collections.vec.Vec.reserve": {"tf": 1}, "sain.convert": {"tf": 1.4142135623730951}, "sain.convert.TryFrom": {"tf": 1}, "sain.convert.TryInto": {"tf": 1}, "sain.error.Error": {"tf": 1.7320508075688772}, "sain.futures.spawn": {"tf": 1}, "sain.option.Some.and_ok": {"tf": 1.4142135623730951}, "sain.result": {"tf": 2.8284271247461903}, "sain.result.Ok.is_ok": {"tf": 1.7320508075688772}, "sain.result.Ok.is_ok_and": {"tf": 1.7320508075688772}, "sain.result.Ok.is_err": {"tf": 1}, "sain.result.Ok.is_err_and": {"tf": 1.4142135623730951}, "sain.result.Ok.expect": {"tf": 2}, "sain.result.Ok.unwrap": {"tf": 2}, "sain.result.Ok.unwrap_or": {"tf": 2}, "sain.result.Ok.unwrap_or_else": {"tf": 2}, "sain.result.Ok.unwrap_err": {"tf": 2}, "sain.result.Ok.ok": {"tf": 2}, "sain.result.Ok.err": {"tf": 1.4142135623730951}, "sain.result.Ok.inspect": {"tf": 2}, "sain.result.Ok.inspect_err": {"tf": 1.7320508075688772}, "sain.result.Ok.map": {"tf": 2}, "sain.result.Ok.map_or": {"tf": 1.4142135623730951}, "sain.result.Ok.map_or_else": {"tf": 1.4142135623730951}, "sain.result.Ok.map_err": {"tf": 1.4142135623730951}, "sain.result.Ok.iter": {"tf": 1}, "sain.result.Err.is_ok": {"tf": 1.4142135623730951}, "sain.result.Err.is_ok_and": {"tf": 1.4142135623730951}, "sain.result.Err.is_err_and": {"tf": 1}, "sain.sync.Once.set": {"tf": 1}, "sain.sync.AsyncOnce.set": {"tf": 1}}, "df": 63, "[": {"docs": {}, "df": 0, "t": {"docs": {"sain.Ok.ok": {"tf": 1}, "sain.Ok.map": {"tf": 1}, "sain.Ok.map_err": {"tf": 1}, "sain.Ok.iter": {"tf": 1}, "sain.result.Ok.ok": {"tf": 1}, "sain.result.Ok.map": {"tf": 1}, "sain.result.Ok.map_err": {"tf": 1}, "sain.result.Ok.iter": {"tf": 1}}, "df": 8}, "u": {"docs": {"sain.Ok.map": {"tf": 1}, "sain.result.Ok.map": {"tf": 1}}, "df": 2}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sain.Some.iter": {"tf": 1}, "sain.Iter": {"tf": 1}, "sain.Iterator.cloned": {"tf": 1}, "sain.Ok.iter": {"tf": 1}, "sain.Vec": {"tf": 1.4142135623730951}, "sain.Vec.as_ref": {"tf": 1}, "sain.Vec.iter": {"tf": 1}, "sain.From": {"tf": 1}, "sain.collections.Vec": {"tf": 1.4142135623730951}, "sain.collections.Vec.as_ref": {"tf": 1}, "sain.collections.Vec.iter": {"tf": 1}, "sain.collections.Bytes.iter": {"tf": 1}, "sain.collections.buf.Bytes.iter": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.as_ref": {"tf": 1}, "sain.collections.vec.Vec.iter": {"tf": 1}, "sain.convert.From": {"tf": 1}, "sain.iter.Iter": {"tf": 1}, "sain.iter.Iterator.cloned": {"tf": 1}, "sain.option.Some.iter": {"tf": 1}, "sain.result.Ok.iter": {"tf": 1}}, "df": 21, "w": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"sain.MaybeUninit.write": {"tf": 1}}, "df": 1}}}}}, "f": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"sain.collections.Bytes.put": {"tf": 1}, "sain.collections.Bytes.put_raw": {"tf": 1}, "sain.collections.Bytes.put_bytes": {"tf": 1}, "sain.collections.buf.Bytes.put": {"tf": 1}, "sain.collections.buf.Bytes.put_raw": {"tf": 1}, "sain.collections.buf.Bytes.put_bytes": {"tf": 1}}, "df": 6}}}}}}}}}}}}, "w": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.Some.as_ref": {"tf": 1.7320508075688772}, "sain.option.Some.as_ref": {"tf": 1.7320508075688772}}, "df": 2}, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {"sain.sync.Lazy.get": {"tf": 1}, "sain.sync.Lazy.set": {"tf": 1}, "sain.sync.LazyFuture.get": {"tf": 1}, "sain.sync.LazyFuture.set": {"tf": 1}}, "df": 4}}}}}}}, "o": {"docs": {"sain.Ok.expect": {"tf": 1.4142135623730951}, "sain.Ok.unwrap": {"tf": 1.4142135623730951}, "sain.Ok.unwrap_or": {"tf": 1.4142135623730951}, "sain.result.Ok.expect": {"tf": 1.4142135623730951}, "sain.result.Ok.unwrap": {"tf": 1.4142135623730951}, "sain.result.Ok.unwrap_or": {"tf": 1.4142135623730951}}, "df": 6}}, "u": {"docs": {}, "df": 0, "t": {"docs": {"sain.Vec.with_capacity": {"tf": 1}, "sain.Vec.get": {"tf": 1}, "sain.collections.Vec.with_capacity": {"tf": 1}, "sain.collections.Vec.get": {"tf": 1}, "sain.collections.vec.Vec.with_capacity": {"tf": 1}, "sain.collections.vec.Vec.get": {"tf": 1}}, "df": 6, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"sain.convert": {"tf": 1}}, "df": 1}}}}}}, "c": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sain.collections.Bytes.index": {"tf": 1}, "sain.collections.buf.Bytes.index": {"tf": 1}}, "df": 2, "s": {"docs": {"sain.Vec.count": {"tf": 1}, "sain.collections.Vec.count": {"tf": 1}, "sain.collections.Bytes.count": {"tf": 1}, "sain.collections.buf.Bytes.count": {"tf": 1}, "sain.collections.vec.Vec.count": {"tf": 1}}, "df": 5}}}}, "d": {"docs": {"sain.macros.unsafe": {"tf": 1}}, "df": 1}}}}}}}}, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"sain": {"tf": 1}}, "df": 1}}}}, "d": {"docs": {"sain.convert": {"tf": 1}}, "df": 1}}, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {"sain.Some": {"tf": 1}}, "df": 1}}}, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.convert": {"tf": 1}}, "df": 1}}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"sain": {"tf": 1}, "sain.Vec": {"tf": 1}, "sain.Vec.reserve": {"tf": 1.4142135623730951}, "sain.Error": {"tf": 1.4142135623730951}, "sain.collections": {"tf": 1}, "sain.collections.Vec": {"tf": 1}, "sain.collections.Vec.reserve": {"tf": 1.4142135623730951}, "sain.collections.Bytes.put_raw": {"tf": 1}, "sain.collections.buf.Bytes.put_raw": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1}, "sain.collections.vec.Vec.reserve": {"tf": 1.4142135623730951}, "sain.error.Error": {"tf": 1.4142135623730951}, "sain.iter": {"tf": 1}}, "df": 13}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "y": {"docs": {"sain.Some.as_ref": {"tf": 1}, "sain.option.Some.as_ref": {"tf": 1}}, "df": 2}}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sain.convert": {"tf": 1}, "sain.macros": {"tf": 1}}, "df": 2}}}}}, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"sain.cfg": {"tf": 1.7320508075688772}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 4}}, "t": {"docs": {"sain.cfg_attr": {"tf": 1}, "sain.Some.as_ref": {"tf": 1}, "sain.Some.as_mut": {"tf": 1.4142135623730951}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.collections.Bytes.as_mut": {"tf": 1}, "sain.collections.buf.Bytes.as_mut": {"tf": 1}, "sain.option.Some.as_ref": {"tf": 1}, "sain.option.Some.as_mut": {"tf": 1.4142135623730951}}, "df": 8, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sain.Some.as_ref": {"tf": 1}, "sain.Some.as_mut": {"tf": 1}, "sain.collections.Bytes.as_mut": {"tf": 1}, "sain.collections.buf.Bytes.as_mut": {"tf": 1}, "sain.option.Some.as_ref": {"tf": 1}, "sain.option.Some.as_mut": {"tf": 1}}, "df": 6}}}}}, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sain.todo": {"tf": 1}, "sain.collections.Bytes": {"tf": 1}, "sain.collections.buf.Bytes": {"tf": 1}, "sain.macros.todo": {"tf": 1}}, "df": 4}}}}}}, "c": {"docs": {}, "df": 0, "h": {"docs": {"sain.collections.Bytes": {"tf": 1}, "sain.collections.buf.Bytes": {"tf": 1}}, "df": 2}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {"sain.Some": {"tf": 1}, "sain.Some.unwrap": {"tf": 1}, "sain.Some.unwrap_unchecked": {"tf": 1}, "sain.Some.as_ref": {"tf": 1}, "sain.Iter": {"tf": 1}, "sain.Iterator": {"tf": 1.4142135623730951}, "sain.Iterator.cloned": {"tf": 1}, "sain.Iterator.copied": {"tf": 1}, "sain.Vec.split_off": {"tf": 1}, "sain.Vec.append": {"tf": 1}, "sain.Vec.sort": {"tf": 1}, "sain.Error": {"tf": 1.4142135623730951}, "sain.Box": {"tf": 1}, "sain.MaybeUninit.assume_init": {"tf": 1.4142135623730951}, "sain.boxed.Box": {"tf": 1}, "sain.collections.Vec.split_off": {"tf": 1}, "sain.collections.Vec.append": {"tf": 1}, "sain.collections.Vec.sort": {"tf": 1}, "sain.collections.Bytes.try_to_str": {"tf": 1}, "sain.collections.Bytes.to_str": {"tf": 1}, "sain.collections.Bytes.put": {"tf": 1}, "sain.collections.buf.Bytes.try_to_str": {"tf": 1}, "sain.collections.buf.Bytes.to_str": {"tf": 1}, "sain.collections.buf.Bytes.put": {"tf": 1}, "sain.collections.vec.Vec.split_off": {"tf": 1}, "sain.collections.vec.Vec.append": {"tf": 1}, "sain.collections.vec.Vec.sort": {"tf": 1}, "sain.error.Error": {"tf": 1.4142135623730951}, "sain.iter.Iter": {"tf": 1}, "sain.iter.Iterator": {"tf": 1.4142135623730951}, "sain.iter.Iterator.cloned": {"tf": 1}, "sain.iter.Iterator.copied": {"tf": 1}, "sain.iter.Cloned": {"tf": 1}, "sain.iter.Copied": {"tf": 1}, "sain.iter.Take": {"tf": 1}, "sain.iter.Filter": {"tf": 1}, "sain.iter.Map": {"tf": 1}, "sain.iter.Skip": {"tf": 1}, "sain.iter.Enumerate": {"tf": 1}, "sain.iter.TakeWhile": {"tf": 1}, "sain.iter.DropWhile": {"tf": 1}, "sain.option.Some.unwrap": {"tf": 1}, "sain.option.Some.unwrap_unchecked": {"tf": 1}, "sain.option.Some.as_ref": {"tf": 1}, "sain.result": {"tf": 1}, "sain.sync.Lazy": {"tf": 1}, "sain.sync.Lazy.get_unchecked": {"tf": 1}, "sain.sync.Once.get": {"tf": 1}, "sain.sync.Once.get_unchecked": {"tf": 1}, "sain.sync.Once.set": {"tf": 1}, "sain.sync.LazyFuture": {"tf": 1}, "sain.sync.LazyFuture.get": {"tf": 1}, "sain.sync.AsyncOnce.get": {"tf": 1}, "sain.sync.AsyncOnce.get_unchecked": {"tf": 1}}, "df": 54, "s": {"docs": {"sain.Some": {"tf": 1}, "sain.Iterator": {"tf": 1}, "sain.iter.Iterator": {"tf": 1}, "sain.result": {"tf": 1}}, "df": 4}}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"sain.Iter": {"tf": 1}, "sain.Iterator.count": {"tf": 1}, "sain.Vec": {"tf": 1}, "sain.MaybeUninit": {"tf": 1}, "sain.collections": {"tf": 1}, "sain.collections.Vec": {"tf": 1}, "sain.collections.Bytes.from_raw": {"tf": 1.4142135623730951}, "sain.collections.Bytes.raw_parts": {"tf": 1}, "sain.collections.buf.Bytes.from_raw": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.raw_parts": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1}, "sain.iter.Iter": {"tf": 1}, "sain.iter.Iterator.count": {"tf": 1}, "sain.iter.Empty.count": {"tf": 1}}, "df": 14, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"sain.Vec.swap_remove": {"tf": 1}, "sain.collections.Vec.swap_remove": {"tf": 1}, "sain.collections.vec.Vec.swap_remove": {"tf": 1}}, "df": 3}}}}}, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "w": {"docs": {"sain.collections.buf.Rawish": {"tf": 1}}, "df": 1}}}}}}}, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"sain.Vec.reserve": {"tf": 1}, "sain.collections.Vec.reserve": {"tf": 1}, "sain.collections.vec.Vec.reserve": {"tf": 1}}, "df": 3}}}}}, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"sain.Iterator": {"tf": 2}, "sain.todo": {"tf": 1}, "sain.unimplemented": {"tf": 1.7320508075688772}, "sain.Ok.expect": {"tf": 1}, "sain.Error": {"tf": 1.7320508075688772}, "sain.Error.message": {"tf": 1}, "sain.Box.on_expire": {"tf": 2}, "sain.boxed.Box.on_expire": {"tf": 2}, "sain.convert": {"tf": 2.8284271247461903}, "sain.error": {"tf": 1}, "sain.error.Error": {"tf": 1.7320508075688772}, "sain.error.Error.message": {"tf": 1}, "sain.iter.Iterator": {"tf": 2}, "sain.macros.unimplemented": {"tf": 1.7320508075688772}, "sain.macros.todo": {"tf": 1}, "sain.result.Ok.expect": {"tf": 1}}, "df": 16, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"sain.Iterator": {"tf": 1.4142135623730951}, "sain.iter.Iterator": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}}, "s": {"docs": {"sain.Iterator": {"tf": 1}, "sain.iter.Iterator": {"tf": 1}, "sain.macros": {"tf": 1}}, "df": 3}}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {"sain.Box": {"tf": 1}, "sain.boxed.Box": {"tf": 1}}, "df": 2, "s": {"docs": {"sain.Vec": {"tf": 1}, "sain.collections.Vec": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1}}, "df": 3}}}}, "a": {"docs": {}, "df": 0, "p": {"docs": {"sain.Some.map": {"tf": 1.4142135623730951}, "sain.Some.map_or": {"tf": 2}, "sain.Some.map_or_else": {"tf": 2}, "sain.Iterator.collect": {"tf": 1}, "sain.Iterator.map": {"tf": 1.4142135623730951}, "sain.Ok.map": {"tf": 1.7320508075688772}, "sain.Ok.map_or": {"tf": 1.4142135623730951}, "sain.Ok.map_or_else": {"tf": 1.4142135623730951}, "sain.Ok.map_err": {"tf": 1.4142135623730951}, "sain.Vec": {"tf": 1}, "sain.Vec.iter": {"tf": 1.4142135623730951}, "sain.collections.Vec": {"tf": 1}, "sain.collections.Vec.iter": {"tf": 1.4142135623730951}, "sain.collections.Bytes.iter": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.iter": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec": {"tf": 1}, "sain.collections.vec.Vec.iter": {"tf": 1.4142135623730951}, "sain.iter.Iterator.collect": {"tf": 1}, "sain.iter.Iterator.map": {"tf": 1.4142135623730951}, "sain.iter.Map": {"tf": 1}, "sain.option.Some.map": {"tf": 1.4142135623730951}, "sain.option.Some.map_or": {"tf": 2}, "sain.option.Some.map_or_else": {"tf": 2}, "sain.result.Ok.map": {"tf": 1.7320508075688772}, "sain.result.Ok.map_or": {"tf": 1.4142135623730951}, "sain.result.Ok.map_or_else": {"tf": 1.4142135623730951}, "sain.result.Ok.map_err": {"tf": 1.4142135623730951}}, "df": 27, "s": {"docs": {"sain.Iterator.map": {"tf": 1}, "sain.Ok.map_or": {"tf": 1}, "sain.Ok.map_or_else": {"tf": 1}, "sain.Ok.map_err": {"tf": 1}, "sain.iter.Iterator.map": {"tf": 1}, "sain.iter.Map": {"tf": 1}, "sain.result.Ok.map_or": {"tf": 1}, "sain.result.Ok.map_or_else": {"tf": 1}, "sain.result.Ok.map_err": {"tf": 1}}, "df": 9}}, "i": {"docs": {}, "df": 0, "l": {"docs": {"sain.Some.take_if": {"tf": 1}, "sain.option.Some.take_if": {"tf": 1}}, "df": 2}, "n": {"docs": {"sain.Iterator": {"tf": 1}, "sain.Iterator.async_for_each": {"tf": 1}, "sain.futures.spawn": {"tf": 1}, "sain.iter.Iterator": {"tf": 1}, "sain.iter.Iterator.async_for_each": {"tf": 1}, "sain.sync.Once.get_or": {"tf": 1}}, "df": 6, "l": {"docs": {}, "df": 0, "y": {"docs": {"sain.Iterator.raw_parts": {"tf": 1}, "sain.iter.Iterator.raw_parts": {"tf": 1}}, "df": 2}}}}, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"sain.Iterator.filter": {"tf": 1}, "sain.Iterator.all": {"tf": 1}, "sain.Iterator.any": {"tf": 1}, "sain.Vec.push_within_capacity": {"tf": 1}, "sain.Vec.reserve": {"tf": 1}, "sain.Error": {"tf": 1}, "sain.collections.Vec.push_within_capacity": {"tf": 1}, "sain.collections.Vec.reserve": {"tf": 1}, "sain.collections.vec.Vec.push_within_capacity": {"tf": 1}, "sain.collections.vec.Vec.reserve": {"tf": 1}, "sain.convert": {"tf": 1}, "sain.error": {"tf": 1}, "sain.error.Error": {"tf": 1}, "sain.futures.spawn": {"tf": 1}, "sain.iter.Iterator.filter": {"tf": 1}, "sain.iter.Iterator.all": {"tf": 1}, "sain.iter.Iterator.any": {"tf": 1}, "sain.iter.Empty.any": {"tf": 1}, "sain.iter.Empty.all": {"tf": 1}, "sain.result": {"tf": 1.7320508075688772}}, "df": 20, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.result": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "h": {"docs": {"sain.sync.Lazy.get_unchecked": {"tf": 1}, "sain.sync.Once.get_unchecked": {"tf": 1}, "sain.sync.AsyncOnce.get_unchecked": {"tf": 1}}, "df": 3}}, "r": {"docs": {}, "df": 0, "k": {"docs": {"sain.macros.unsafe": {"tf": 1}}, "df": 1, "s": {"docs": {"sain.deprecated": {"tf": 1}, "sain.unimplemented": {"tf": 1}, "sain.macros.deprecated": {"tf": 1}, "sain.macros.unimplemented": {"tf": 1}}, "df": 4}, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.deprecated": {"tf": 1}, "sain.unimplemented": {"tf": 1}, "sain.macros.deprecated": {"tf": 1}, "sain.macros.unimplemented": {"tf": 1}}, "df": 4}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.macros": {"tf": 1}}, "df": 1}}}}}, "x": {"docs": {"sain.Vec.push_within_capacity": {"tf": 1}, "sain.collections.Vec.push_within_capacity": {"tf": 1}, "sain.collections.Bytes.put_raw": {"tf": 1}, "sain.collections.Bytes.put_bytes": {"tf": 1}, "sain.collections.buf.Bytes.put_raw": {"tf": 1}, "sain.collections.buf.Bytes.put_bytes": {"tf": 1}, "sain.collections.vec.Vec.push_within_capacity": {"tf": 1}}, "df": 7}, "y": {"docs": {"sain.TryFrom": {"tf": 1.4142135623730951}, "sain.Into": {"tf": 1.4142135623730951}, "sain.TryInto": {"tf": 1.7320508075688772}, "sain.collections.Bytes.try_to_str": {"tf": 1}, "sain.collections.Bytes.to_str": {"tf": 1.7320508075688772}, "sain.collections.buf.Bytes.try_to_str": {"tf": 1}, "sain.collections.buf.Bytes.to_str": {"tf": 1.7320508075688772}, "sain.convert": {"tf": 1.7320508075688772}, "sain.convert.TryFrom": {"tf": 1.4142135623730951}, "sain.convert.Into": {"tf": 1.4142135623730951}, "sain.convert.TryInto": {"tf": 1.7320508075688772}, "sain.sync.Once.set": {"tf": 1}, "sain.sync.Once.get_or": {"tf": 1}, "sain.sync.Once.get_or_with": {"tf": 1}, "sain.sync.AsyncOnce.get_or": {"tf": 1}, "sain.sync.AsyncOnce.get_or_with": {"tf": 1}}, "df": 16, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"sain.MaybeUninit": {"tf": 2.23606797749979}, "sain.MaybeUninit.uninit": {"tf": 2}, "sain.MaybeUninit.uninit_array": {"tf": 1.4142135623730951}, "sain.MaybeUninit.assume_init": {"tf": 1.4142135623730951}, "sain.MaybeUninit.write": {"tf": 2}}, "df": 5, "[": {"docs": {}, "df": 0, "t": {"docs": {"sain.MaybeUninit.write": {"tf": 1}}, "df": 1}}}}}}}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {"sain.cfg": {"tf": 1}}, "df": 1}}}, "n": {"docs": {}, "df": 0, "y": {"docs": {"sain.collections.Bytes.raw_parts": {"tf": 1}, "sain.collections.buf.Bytes.raw_parts": {"tf": 1}, "sain.sync.Once.get_or": {"tf": 1}, "sain.sync.Once.get_or_with": {"tf": 1}, "sain.sync.AsyncOnce.get_or": {"tf": 1}, "sain.sync.AsyncOnce.get_or_with": {"tf": 1}}, "df": 6}}, "k": {"docs": {}, "df": 0, "e": {"docs": {"sain.futures.spawn": {"tf": 1}}, "df": 1}}, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"sain.sync.Lazy": {"tf": 1}, "sain.sync.LazyFuture": {"tf": 1}}, "df": 2}}}}, "s": {"docs": {}, "df": 0, "g": {"docs": {"sain.Iterator": {"tf": 1.4142135623730951}, "sain.iter.Iterator": {"tf": 1.4142135623730951}}, "df": 2}}, "d": {"docs": {"sain.doc": {"tf": 1}, "sain.macros.doc": {"tf": 1}}, "df": 2}}, "t": {"docs": {"sain": {"tf": 1.4142135623730951}, "sain.Some": {"tf": 1}, "sain.Some.into_inner": {"tf": 1}, "sain.Some.map": {"tf": 1}, "sain.Some.filter": {"tf": 1}, "sain.Some.and_then": {"tf": 1}, "sain.Iter": {"tf": 1}, "sain.Iter.clone": {"tf": 1}, "sain.Iterator.default": {"tf": 1}, "sain.Iterator.collect": {"tf": 1}, "sain.Ok.map": {"tf": 1}, "sain.Vec": {"tf": 1.4142135623730951}, "sain.Vec.with_capacity": {"tf": 1}, "sain.Vec.swap_remove": {"tf": 1}, "sain.Vec.reserve": {"tf": 1}, "sain.Vec.copy": {"tf": 1}, "sain.Vec.count": {"tf": 1}, "sain.Error": {"tf": 1.4142135623730951}, "sain.Box": {"tf": 1.7320508075688772}, "sain.MaybeUninit": {"tf": 2.8284271247461903}, "sain.MaybeUninit.uninit": {"tf": 1}, "sain.MaybeUninit.uninit_array": {"tf": 1.4142135623730951}, "sain.From": {"tf": 1.7320508075688772}, "sain.TryFrom": {"tf": 1.7320508075688772}, "sain.TryInto": {"tf": 1.7320508075688772}, "sain.boxed.Box": {"tf": 1.7320508075688772}, "sain.collections.Vec": {"tf": 1.4142135623730951}, "sain.collections.Vec.with_capacity": {"tf": 1}, "sain.collections.Vec.swap_remove": {"tf": 1}, "sain.collections.Vec.reserve": {"tf": 1}, "sain.collections.Vec.copy": {"tf": 1}, "sain.collections.Vec.count": {"tf": 1}, "sain.collections.Bytes.__init__": {"tf": 1}, "sain.collections.Bytes.as_ref": {"tf": 1}, "sain.collections.Bytes.as_mut": {"tf": 1}, "sain.collections.Bytes.put": {"tf": 1}, "sain.collections.buf.Bytes.__init__": {"tf": 1}, "sain.collections.buf.Bytes.as_ref": {"tf": 1}, "sain.collections.buf.Bytes.as_mut": {"tf": 1}, "sain.collections.buf.Bytes.put": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.with_capacity": {"tf": 1}, "sain.collections.vec.Vec.swap_remove": {"tf": 1}, "sain.collections.vec.Vec.reserve": {"tf": 1}, "sain.collections.vec.Vec.copy": {"tf": 1}, "sain.collections.vec.Vec.count": {"tf": 1}, "sain.convert": {"tf": 1.4142135623730951}, "sain.convert.From": {"tf": 1.7320508075688772}, "sain.convert.TryFrom": {"tf": 1.7320508075688772}, "sain.convert.TryInto": {"tf": 1.7320508075688772}, "sain.error.Error": {"tf": 1.4142135623730951}, "sain.futures.spawn": {"tf": 1}, "sain.iter.Iter": {"tf": 1}, "sain.iter.Iter.clone": {"tf": 1}, "sain.iter.Iterator.default": {"tf": 1}, "sain.iter.Iterator.collect": {"tf": 1}, "sain.option": {"tf": 1.4142135623730951}, "sain.option.Some.into_inner": {"tf": 1}, "sain.option.Some.map": {"tf": 1}, "sain.option.Some.filter": {"tf": 1}, "sain.option.Some.and_then": {"tf": 1}, "sain.option.Option": {"tf": 1}, "sain.result": {"tf": 2}, "sain.result.Ok.map": {"tf": 1}, "sain.sync.Lazy": {"tf": 1}, "sain.sync.Once": {"tf": 1}, "sain.sync.Once.set": {"tf": 1.7320508075688772}, "sain.sync.Once.get_or": {"tf": 1}, "sain.sync.LazyFuture": {"tf": 1}, "sain.sync.AsyncOnce": {"tf": 1}, "sain.sync.AsyncOnce.set": {"tf": 1.7320508075688772}}, "df": 71, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"sain": {"tf": 1}, "sain.cfg": {"tf": 1.7320508075688772}, "sain.Default": {"tf": 1}, "sain.Some": {"tf": 1}, "sain.Some.unwrap_unchecked": {"tf": 1}, "sain.Iter": {"tf": 1.4142135623730951}, "sain.Iterator": {"tf": 1.4142135623730951}, "sain.Iterator.raw_parts": {"tf": 1}, "sain.Iterator.cloned": {"tf": 1}, "sain.Iterator.copied": {"tf": 1}, "sain.Iterator.filter": {"tf": 1}, "sain.Iterator.enumerate": {"tf": 1}, "sain.Iterator.reversed": {"tf": 1}, "sain.Iterator.union": {"tf": 1}, "sain.todo": {"tf": 1}, "sain.deprecated": {"tf": 2}, "sain.unimplemented": {"tf": 1.4142135623730951}, "sain.Vec": {"tf": 2.23606797749979}, "sain.Vec.copy": {"tf": 1}, "sain.Error": {"tf": 1.4142135623730951}, "sain.Box": {"tf": 1}, "sain.Box.on_expire": {"tf": 1}, "sain.MaybeUninit.uninit_array": {"tf": 1}, "sain.MaybeUninit.assume_init": {"tf": 1}, "sain.From": {"tf": 1}, "sain.TryFrom": {"tf": 2}, "sain.TryInto": {"tf": 1.4142135623730951}, "sain.boxed": {"tf": 1}, "sain.boxed.Box": {"tf": 1}, "sain.boxed.Box.on_expire": {"tf": 1}, "sain.cfg.cfg": {"tf": 1.7320508075688772}, "sain.collections.Vec": {"tf": 2.23606797749979}, "sain.collections.Vec.copy": {"tf": 1}, "sain.collections.Bytes": {"tf": 1}, "sain.collections.Bytes.try_to_str": {"tf": 1}, "sain.collections.Bytes.to_str": {"tf": 1}, "sain.collections.Bytes.index": {"tf": 1}, "sain.collections.buf.Bytes": {"tf": 1}, "sain.collections.buf.Bytes.try_to_str": {"tf": 1}, "sain.collections.buf.Bytes.to_str": {"tf": 1}, "sain.collections.buf.Bytes.index": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 2.23606797749979}, "sain.collections.vec.Vec.copy": {"tf": 1}, "sain.convert": {"tf": 1.7320508075688772}, "sain.convert.From": {"tf": 1}, "sain.convert.TryFrom": {"tf": 2}, "sain.convert.TryInto": {"tf": 1.4142135623730951}, "sain.default": {"tf": 1}, "sain.default.Default": {"tf": 1}, "sain.error": {"tf": 1}, "sain.error.Error": {"tf": 1.4142135623730951}, "sain.iter.Iter": {"tf": 1.4142135623730951}, "sain.iter.Iterator": {"tf": 1.4142135623730951}, "sain.iter.Iterator.raw_parts": {"tf": 1}, "sain.iter.Iterator.cloned": {"tf": 1}, "sain.iter.Iterator.copied": {"tf": 1}, "sain.iter.Iterator.filter": {"tf": 1}, "sain.iter.Iterator.enumerate": {"tf": 1}, "sain.iter.Iterator.reversed": {"tf": 1}, "sain.iter.Iterator.union": {"tf": 1}, "sain.iter.Cloned": {"tf": 1}, "sain.iter.Copied": {"tf": 1}, "sain.iter.Take": {"tf": 1}, "sain.iter.Filter": {"tf": 1}, "sain.iter.Map": {"tf": 1}, "sain.iter.Skip": {"tf": 1}, "sain.iter.Enumerate": {"tf": 1}, "sain.iter.TakeWhile": {"tf": 1}, "sain.iter.DropWhile": {"tf": 1}, "sain.iter.Empty": {"tf": 1.4142135623730951}, "sain.iter.empty": {"tf": 1}, "sain.iter.once": {"tf": 1}, "sain.iter.repeat": {"tf": 1}, "sain.macros": {"tf": 1}, "sain.macros.deprecated": {"tf": 2}, "sain.macros.unimplemented": {"tf": 1.4142135623730951}, "sain.macros.todo": {"tf": 1}, "sain.option": {"tf": 1}, "sain.option.Some": {"tf": 1}, "sain.option.Some.unwrap_unchecked": {"tf": 1}, "sain.option.Option": {"tf": 1}, "sain.option.NOTHING": {"tf": 1}, "sain.sync.Lazy": {"tf": 1.4142135623730951}, "sain.sync.Lazy.get": {"tf": 1}, "sain.sync.Once": {"tf": 1}, "sain.sync.Once.get_unchecked": {"tf": 1}, "sain.sync.Once.get_or": {"tf": 1.4142135623730951}, "sain.sync.Once.get_or_with": {"tf": 1}, "sain.sync.LazyFuture": {"tf": 1.4142135623730951}, "sain.sync.LazyFuture.get": {"tf": 1}, "sain.sync.AsyncOnce": {"tf": 1}, "sain.sync.AsyncOnce.get_unchecked": {"tf": 1}, "sain.sync.AsyncOnce.get_or": {"tf": 1}, "sain.sync.AsyncOnce.get_or_with": {"tf": 1}}, "df": 94, "s": {"docs": {"sain.cfg": {"tf": 2}, "sain.cfg_attr": {"tf": 2}, "sain.Some.as_ref": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 2}, "sain.cfg.cfg": {"tf": 2}, "sain.option.Some.as_ref": {"tf": 1}}, "df": 6}}, "n": {"docs": {"sain.collections.Bytes.put_raw": {"tf": 1}, "sain.collections.Bytes.put_bytes": {"tf": 1}, "sain.collections.buf.Bytes.put_raw": {"tf": 1}, "sain.collections.buf.Bytes.put_bytes": {"tf": 1}}, "df": 4}}, "e": {"docs": {"sain": {"tf": 1}, "sain.cfg": {"tf": 1.7320508075688772}, "sain.cfg_attr": {"tf": 3.7416573867739413}, "sain.Default.default": {"tf": 1.4142135623730951}, "sain.Some": {"tf": 2}, "sain.Some.into_inner": {"tf": 1}, "sain.Some.unwrap": {"tf": 1.4142135623730951}, "sain.Some.unwrap_or": {"tf": 1}, "sain.Some.unwrap_or_else": {"tf": 1}, "sain.Some.unwrap_unchecked": {"tf": 1.4142135623730951}, "sain.Some.expect": {"tf": 1}, "sain.Some.map": {"tf": 1}, "sain.Some.map_or": {"tf": 1}, "sain.Some.map_or_else": {"tf": 1}, "sain.Some.filter": {"tf": 1.7320508075688772}, "sain.Some.take": {"tf": 1}, "sain.Some.take_if": {"tf": 1}, "sain.Some.replace": {"tf": 1}, "sain.Some.and_then": {"tf": 1}, "sain.Some.iter": {"tf": 1}, "sain.Some.as_ref": {"tf": 1.4142135623730951}, "sain.Some.as_mut": {"tf": 1}, "sain.Some.is_some": {"tf": 1}, "sain.Some.is_some_and": {"tf": 1.4142135623730951}, "sain.Some.is_none": {"tf": 1}, "sain.Iter": {"tf": 1.7320508075688772}, "sain.Iter.clone": {"tf": 1}, "sain.Iterator": {"tf": 2.6457513110645907}, "sain.Iterator.default": {"tf": 1}, "sain.Iterator.collect": {"tf": 1.7320508075688772}, "sain.Iterator.sink": {"tf": 1}, "sain.Iterator.next": {"tf": 1.4142135623730951}, "sain.Iterator.cloned": {"tf": 2}, "sain.Iterator.copied": {"tf": 1.7320508075688772}, "sain.Iterator.map": {"tf": 2}, "sain.Iterator.filter": {"tf": 1.4142135623730951}, "sain.Iterator.take": {"tf": 2}, "sain.Iterator.skip": {"tf": 1.4142135623730951}, "sain.Iterator.enumerate": {"tf": 1}, "sain.Iterator.take_while": {"tf": 2.449489742783178}, "sain.Iterator.drop_while": {"tf": 1.7320508075688772}, "sain.Iterator.all": {"tf": 2}, "sain.Iterator.any": {"tf": 2}, "sain.Iterator.zip": {"tf": 1.7320508075688772}, "sain.Iterator.sort": {"tf": 1.7320508075688772}, "sain.Iterator.reversed": {"tf": 1.4142135623730951}, "sain.Iterator.union": {"tf": 1}, "sain.Iterator.first": {"tf": 1.4142135623730951}, "sain.Iterator.last": {"tf": 1.4142135623730951}, "sain.Iterator.count": {"tf": 1}, "sain.Iterator.for_each": {"tf": 1.7320508075688772}, "sain.Iterator.async_for_each": {"tf": 2}, "sain.todo": {"tf": 1}, "sain.deprecated": {"tf": 2.449489742783178}, "sain.unimplemented": {"tf": 1.4142135623730951}, "sain.doc": {"tf": 1.7320508075688772}, "sain.Ok": {"tf": 1}, "sain.Ok.is_ok": {"tf": 1}, "sain.Ok.is_ok_and": {"tf": 1}, "sain.Ok.is_err": {"tf": 1}, "sain.Ok.is_err_and": {"tf": 1}, "sain.Ok.expect": {"tf": 1}, "sain.Ok.unwrap": {"tf": 1}, "sain.Ok.unwrap_or": {"tf": 1}, "sain.Ok.unwrap_or_else": {"tf": 1}, "sain.Ok.unwrap_err": {"tf": 1}, "sain.Ok.ok": {"tf": 1}, "sain.Ok.err": {"tf": 1}, "sain.Ok.inspect": {"tf": 1}, "sain.Ok.inspect_err": {"tf": 1}, "sain.Ok.map_or": {"tf": 1.4142135623730951}, "sain.Ok.map_or_else": {"tf": 1.4142135623730951}, "sain.Ok.iter": {"tf": 1}, "sain.Err": {"tf": 1}, "sain.Err.is_ok": {"tf": 1}, "sain.Err.is_ok_and": {"tf": 1}, "sain.Err.is_err": {"tf": 1}, "sain.Err.is_err_and": {"tf": 1}, "sain.Vec": {"tf": 4.242640687119285}, "sain.Vec.with_capacity": {"tf": 1}, "sain.Vec.len": {"tf": 1}, "sain.Vec.capacity": {"tf": 1}, "sain.Vec.is_empty": {"tf": 1}, "sain.Vec.split_off": {"tf": 1.4142135623730951}, "sain.Vec.split_first": {"tf": 1.4142135623730951}, "sain.Vec.first": {"tf": 1}, "sain.Vec.truncate": {"tf": 1.7320508075688772}, "sain.Vec.swap_remove": {"tf": 1}, "sain.Vec.push": {"tf": 1.4142135623730951}, "sain.Vec.push_within_capacity": {"tf": 1}, "sain.Vec.reserve": {"tf": 1.4142135623730951}, "sain.Vec.get": {"tf": 1.4142135623730951}, "sain.Vec.insert": {"tf": 1}, "sain.Vec.pop": {"tf": 1}, "sain.Vec.copy": {"tf": 1.4142135623730951}, "sain.Vec.sort": {"tf": 1}, "sain.Vec.index": {"tf": 1.4142135623730951}, "sain.Vec.count": {"tf": 1.7320508075688772}, "sain.Error": {"tf": 2.6457513110645907}, "sain.Error.source": {"tf": 1}, "sain.Box": {"tf": 2.6457513110645907}, "sain.Box.has_expired": {"tf": 1}, "sain.Box.on_expire": {"tf": 1.7320508075688772}, "sain.Box.get": {"tf": 1.4142135623730951}, "sain.MaybeUninit": {"tf": 2.449489742783178}, "sain.MaybeUninit.assume_init": {"tf": 1.7320508075688772}, "sain.MaybeUninit.write": {"tf": 1.4142135623730951}, "sain.From": {"tf": 2.23606797749979}, "sain.From.from_t": {"tf": 1}, "sain.TryFrom": {"tf": 2.8284271247461903}, "sain.TryFrom.try_from": {"tf": 1}, "sain.Into.into": {"tf": 1}, "sain.TryInto": {"tf": 2.23606797749979}, "sain.TryInto.try_into": {"tf": 1}, "sain.boxed": {"tf": 1}, "sain.boxed.Box": {"tf": 2.6457513110645907}, "sain.boxed.Box.has_expired": {"tf": 1}, "sain.boxed.Box.on_expire": {"tf": 1.7320508075688772}, "sain.boxed.Box.get": {"tf": 1.4142135623730951}, "sain.cfg.cfg_attr": {"tf": 3.7416573867739413}, "sain.cfg.cfg": {"tf": 3.4641016151377544}, "sain.collections": {"tf": 1.4142135623730951}, "sain.collections.Vec": {"tf": 4.242640687119285}, "sain.collections.Vec.with_capacity": {"tf": 1}, "sain.collections.Vec.len": {"tf": 1}, "sain.collections.Vec.capacity": {"tf": 1}, "sain.collections.Vec.is_empty": {"tf": 1}, "sain.collections.Vec.split_off": {"tf": 1.4142135623730951}, "sain.collections.Vec.split_first": {"tf": 1.4142135623730951}, "sain.collections.Vec.first": {"tf": 1}, "sain.collections.Vec.truncate": {"tf": 1.7320508075688772}, "sain.collections.Vec.swap_remove": {"tf": 1}, "sain.collections.Vec.push": {"tf": 1.4142135623730951}, "sain.collections.Vec.push_within_capacity": {"tf": 1}, "sain.collections.Vec.reserve": {"tf": 1.4142135623730951}, "sain.collections.Vec.get": {"tf": 1.4142135623730951}, "sain.collections.Vec.insert": {"tf": 1}, "sain.collections.Vec.pop": {"tf": 1}, "sain.collections.Vec.copy": {"tf": 1.4142135623730951}, "sain.collections.Vec.sort": {"tf": 1}, "sain.collections.Vec.index": {"tf": 1.4142135623730951}, "sain.collections.Vec.count": {"tf": 1.7320508075688772}, "sain.collections.Bytes": {"tf": 1}, "sain.collections.Bytes.__init__": {"tf": 1.4142135623730951}, "sain.collections.Bytes.from_str": {"tf": 1}, "sain.collections.Bytes.from_static": {"tf": 1}, "sain.collections.Bytes.try_to_str": {"tf": 1.7320508075688772}, "sain.collections.Bytes.to_str": {"tf": 1.4142135623730951}, "sain.collections.Bytes.leak": {"tf": 1.4142135623730951}, "sain.collections.Bytes.raw_parts": {"tf": 1.4142135623730951}, "sain.collections.Bytes.put": {"tf": 2.23606797749979}, "sain.collections.Bytes.put_str": {"tf": 1}, "sain.collections.Bytes.len": {"tf": 1}, "sain.collections.Bytes.size": {"tf": 1.4142135623730951}, "sain.collections.Bytes.iter": {"tf": 1}, "sain.collections.Bytes.copy": {"tf": 1}, "sain.collections.Bytes.clear": {"tf": 1}, "sain.collections.Bytes.index": {"tf": 2.449489742783178}, "sain.collections.Bytes.count": {"tf": 1.4142135623730951}, "sain.collections.Bytes.insert": {"tf": 1.7320508075688772}, "sain.collections.Bytes.pop": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes": {"tf": 1}, "sain.collections.buf.Bytes.__init__": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.from_str": {"tf": 1}, "sain.collections.buf.Bytes.from_static": {"tf": 1}, "sain.collections.buf.Bytes.try_to_str": {"tf": 1.7320508075688772}, "sain.collections.buf.Bytes.to_str": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.leak": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.raw_parts": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.put": {"tf": 2.23606797749979}, "sain.collections.buf.Bytes.put_str": {"tf": 1}, "sain.collections.buf.Bytes.len": {"tf": 1}, "sain.collections.buf.Bytes.size": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.iter": {"tf": 1}, "sain.collections.buf.Bytes.copy": {"tf": 1}, "sain.collections.buf.Bytes.clear": {"tf": 1}, "sain.collections.buf.Bytes.index": {"tf": 2.449489742783178}, "sain.collections.buf.Bytes.count": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.insert": {"tf": 1.7320508075688772}, "sain.collections.buf.Bytes.pop": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec": {"tf": 4.242640687119285}, "sain.collections.vec.Vec.with_capacity": {"tf": 1}, "sain.collections.vec.Vec.len": {"tf": 1}, "sain.collections.vec.Vec.capacity": {"tf": 1}, "sain.collections.vec.Vec.is_empty": {"tf": 1}, "sain.collections.vec.Vec.split_off": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.split_first": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.first": {"tf": 1}, "sain.collections.vec.Vec.truncate": {"tf": 1.7320508075688772}, "sain.collections.vec.Vec.swap_remove": {"tf": 1}, "sain.collections.vec.Vec.push": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.push_within_capacity": {"tf": 1}, "sain.collections.vec.Vec.reserve": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.get": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.insert": {"tf": 1}, "sain.collections.vec.Vec.pop": {"tf": 1}, "sain.collections.vec.Vec.copy": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.sort": {"tf": 1}, "sain.collections.vec.Vec.index": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.count": {"tf": 1.7320508075688772}, "sain.convert": {"tf": 2.449489742783178}, "sain.convert.From": {"tf": 2.23606797749979}, "sain.convert.From.from_t": {"tf": 1}, "sain.convert.TryFrom": {"tf": 2.8284271247461903}, "sain.convert.TryFrom.try_from": {"tf": 1}, "sain.convert.Into.into": {"tf": 1}, "sain.convert.TryInto": {"tf": 2.23606797749979}, "sain.convert.TryInto.try_into": {"tf": 1}, "sain.default": {"tf": 1}, "sain.default.Default.default": {"tf": 1.4142135623730951}, "sain.error": {"tf": 1.4142135623730951}, "sain.error.Error": {"tf": 2.6457513110645907}, "sain.error.Error.source": {"tf": 1}, "sain.futures.spawn": {"tf": 1.7320508075688772}, "sain.futures.loop": {"tf": 1}, "sain.iter.Iter": {"tf": 1.7320508075688772}, "sain.iter.Iter.clone": {"tf": 1}, "sain.iter.Iterator": {"tf": 2.6457513110645907}, "sain.iter.Iterator.default": {"tf": 1}, "sain.iter.Iterator.collect": {"tf": 1.7320508075688772}, "sain.iter.Iterator.sink": {"tf": 1}, "sain.iter.Iterator.next": {"tf": 1.4142135623730951}, "sain.iter.Iterator.cloned": {"tf": 2}, "sain.iter.Iterator.copied": {"tf": 1.7320508075688772}, "sain.iter.Iterator.map": {"tf": 2}, "sain.iter.Iterator.filter": {"tf": 1.4142135623730951}, "sain.iter.Iterator.take": {"tf": 2}, "sain.iter.Iterator.skip": {"tf": 1.4142135623730951}, "sain.iter.Iterator.enumerate": {"tf": 1}, "sain.iter.Iterator.take_while": {"tf": 2.449489742783178}, "sain.iter.Iterator.drop_while": {"tf": 1.7320508075688772}, "sain.iter.Iterator.all": {"tf": 2}, "sain.iter.Iterator.any": {"tf": 2}, "sain.iter.Iterator.zip": {"tf": 1.7320508075688772}, "sain.iter.Iterator.sort": {"tf": 1.7320508075688772}, "sain.iter.Iterator.reversed": {"tf": 1.4142135623730951}, "sain.iter.Iterator.union": {"tf": 1}, "sain.iter.Iterator.first": {"tf": 1.4142135623730951}, "sain.iter.Iterator.last": {"tf": 1.4142135623730951}, "sain.iter.Iterator.count": {"tf": 1}, "sain.iter.Iterator.for_each": {"tf": 1.7320508075688772}, "sain.iter.Iterator.async_for_each": {"tf": 2}, "sain.iter.Cloned": {"tf": 1.4142135623730951}, "sain.iter.Copied": {"tf": 1.4142135623730951}, "sain.iter.Take": {"tf": 1.7320508075688772}, "sain.iter.Filter": {"tf": 1.4142135623730951}, "sain.iter.Map": {"tf": 1.4142135623730951}, "sain.iter.Skip": {"tf": 1.7320508075688772}, "sain.iter.Enumerate": {"tf": 1.7320508075688772}, "sain.iter.TakeWhile": {"tf": 1}, "sain.iter.DropWhile": {"tf": 1}, "sain.iter.Empty": {"tf": 1}, "sain.iter.Empty.next": {"tf": 1.4142135623730951}, "sain.iter.Empty.count": {"tf": 1}, "sain.iter.Empty.any": {"tf": 2}, "sain.iter.Empty.all": {"tf": 2}, "sain.iter.into_iter": {"tf": 1}, "sain.iter.repeat": {"tf": 1}, "sain.macros": {"tf": 1}, "sain.macros.deprecated": {"tf": 2.449489742783178}, "sain.macros.unimplemented": {"tf": 1.4142135623730951}, "sain.macros.todo": {"tf": 1}, "sain.macros.doc": {"tf": 1.7320508075688772}, "sain.macros.unsafe": {"tf": 1.7320508075688772}, "sain.option.Some.default": {"tf": 1.4142135623730951}, "sain.option.Some.into_inner": {"tf": 1}, "sain.option.Some.unwrap": {"tf": 1.4142135623730951}, "sain.option.Some.unwrap_or": {"tf": 1}, "sain.option.Some.unwrap_or_else": {"tf": 1}, "sain.option.Some.unwrap_unchecked": {"tf": 1.4142135623730951}, "sain.option.Some.expect": {"tf": 1}, "sain.option.Some.map": {"tf": 1}, "sain.option.Some.map_or": {"tf": 1}, "sain.option.Some.map_or_else": {"tf": 1}, "sain.option.Some.filter": {"tf": 1.7320508075688772}, "sain.option.Some.take": {"tf": 1}, "sain.option.Some.take_if": {"tf": 1}, "sain.option.Some.replace": {"tf": 1}, "sain.option.Some.and_then": {"tf": 1}, "sain.option.Some.iter": {"tf": 1}, "sain.option.Some.as_ref": {"tf": 1.4142135623730951}, "sain.option.Some.as_mut": {"tf": 1}, "sain.option.Some.is_some": {"tf": 1}, "sain.option.Some.is_some_and": {"tf": 1.4142135623730951}, "sain.option.Some.is_none": {"tf": 1}, "sain.result": {"tf": 3}, "sain.result.Ok": {"tf": 1}, "sain.result.Ok.is_ok": {"tf": 1}, "sain.result.Ok.is_ok_and": {"tf": 1}, "sain.result.Ok.is_err": {"tf": 1}, "sain.result.Ok.is_err_and": {"tf": 1}, "sain.result.Ok.expect": {"tf": 1}, "sain.result.Ok.unwrap": {"tf": 1}, "sain.result.Ok.unwrap_or": {"tf": 1}, "sain.result.Ok.unwrap_or_else": {"tf": 1}, "sain.result.Ok.unwrap_err": {"tf": 1}, "sain.result.Ok.ok": {"tf": 1}, "sain.result.Ok.err": {"tf": 1}, "sain.result.Ok.inspect": {"tf": 1}, "sain.result.Ok.inspect_err": {"tf": 1}, "sain.result.Ok.map_or": {"tf": 1.4142135623730951}, "sain.result.Ok.map_or_else": {"tf": 1.4142135623730951}, "sain.result.Ok.iter": {"tf": 1}, "sain.result.Err": {"tf": 1}, "sain.result.Err.is_ok": {"tf": 1}, "sain.result.Err.is_ok_and": {"tf": 1}, "sain.result.Err.is_err": {"tf": 1}, "sain.result.Err.is_err_and": {"tf": 1}, "sain.sync.Lazy": {"tf": 1}, "sain.sync.Lazy.is_initialized": {"tf": 1}, "sain.sync.Lazy.get": {"tf": 1.4142135623730951}, "sain.sync.Lazy.get_unchecked": {"tf": 1}, "sain.sync.Lazy.set": {"tf": 1.7320508075688772}, "sain.sync.Once": {"tf": 1}, "sain.sync.Once.get": {"tf": 1}, "sain.sync.Once.get_unchecked": {"tf": 1.7320508075688772}, "sain.sync.Once.set": {"tf": 2.23606797749979}, "sain.sync.Once.clear": {"tf": 1}, "sain.sync.Once.get_or": {"tf": 1.4142135623730951}, "sain.sync.Once.get_or_with": {"tf": 1.7320508075688772}, "sain.sync.LazyFuture": {"tf": 1}, "sain.sync.LazyFuture.is_initialized": {"tf": 1}, "sain.sync.LazyFuture.get": {"tf": 1.4142135623730951}, "sain.sync.LazyFuture.set": {"tf": 1.7320508075688772}, "sain.sync.AsyncOnce": {"tf": 1}, "sain.sync.AsyncOnce.get": {"tf": 1}, "sain.sync.AsyncOnce.get_unchecked": {"tf": 1.7320508075688772}, "sain.sync.AsyncOnce.set": {"tf": 2.23606797749979}, "sain.sync.AsyncOnce.clear": {"tf": 1}, "sain.sync.AsyncOnce.get_or": {"tf": 1.7320508075688772}, "sain.sync.AsyncOnce.get_or_with": {"tf": 1.7320508075688772}}, "df": 331, "n": {"docs": {"sain.Some.and_then": {"tf": 1.4142135623730951}, "sain.Ok.iter": {"tf": 1}, "sain.Vec": {"tf": 1}, "sain.Vec.reserve": {"tf": 1}, "sain.collections": {"tf": 1}, "sain.collections.Vec": {"tf": 1}, "sain.collections.Vec.reserve": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1}, "sain.collections.vec.Vec.reserve": {"tf": 1}, "sain.option.Some.and_then": {"tf": 1.4142135623730951}, "sain.result.Ok.iter": {"tf": 1}, "sain.sync.Lazy": {"tf": 1}, "sain.sync.LazyFuture": {"tf": 1}}, "df": 13}, "r": {"docs": {}, "df": 0, "e": {"docs": {"sain.Vec": {"tf": 1}, "sain.Vec.first": {"tf": 1}, "sain.Vec.push_within_capacity": {"tf": 1}, "sain.Vec.index": {"tf": 1}, "sain.From": {"tf": 1}, "sain.collections.Vec": {"tf": 1}, "sain.collections.Vec.first": {"tf": 1}, "sain.collections.Vec.push_within_capacity": {"tf": 1}, "sain.collections.Vec.index": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1}, "sain.collections.vec.Vec.first": {"tf": 1}, "sain.collections.vec.Vec.push_within_capacity": {"tf": 1}, "sain.collections.vec.Vec.index": {"tf": 1}, "sain.convert.From": {"tf": 1}}, "df": 14}}, "m": {"docs": {"sain.Vec.count": {"tf": 1}, "sain.collections.Vec.count": {"tf": 1}, "sain.collections.vec.Vec.count": {"tf": 1}}, "df": 3}, "s": {"docs": {}, "df": 0, "e": {"docs": {"sain.collections": {"tf": 1}}, "df": 1}}, "y": {"docs": {"sain.collections": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "s": {"docs": {"sain.cfg": {"tf": 1.4142135623730951}, "sain.cfg_attr": {"tf": 1}, "sain.Some": {"tf": 1.4142135623730951}, "sain.Some.unwrap": {"tf": 1}, "sain.Some.unwrap_unchecked": {"tf": 1}, "sain.Some.take_if": {"tf": 1}, "sain.Iter": {"tf": 1.7320508075688772}, "sain.Iter.clone": {"tf": 1}, "sain.Iterator": {"tf": 1.7320508075688772}, "sain.Iterator.default": {"tf": 1}, "sain.Iterator.to_vec": {"tf": 1}, "sain.Iterator.sink": {"tf": 1}, "sain.Iterator.raw_parts": {"tf": 1.4142135623730951}, "sain.Iterator.cloned": {"tf": 1}, "sain.Iterator.copied": {"tf": 1}, "sain.Iterator.count": {"tf": 1}, "sain.todo": {"tf": 1}, "sain.deprecated": {"tf": 1.4142135623730951}, "sain.unimplemented": {"tf": 1.4142135623730951}, "sain.Vec": {"tf": 1.7320508075688772}, "sain.Vec.with_capacity": {"tf": 1.4142135623730951}, "sain.Vec.as_ref": {"tf": 1}, "sain.Vec.len": {"tf": 1}, "sain.Vec.capacity": {"tf": 1}, "sain.Vec.iter": {"tf": 1}, "sain.Vec.split_off": {"tf": 1.4142135623730951}, "sain.Vec.first": {"tf": 1}, "sain.Vec.retain": {"tf": 1.4142135623730951}, "sain.Vec.swap_remove": {"tf": 1.7320508075688772}, "sain.Vec.remove": {"tf": 1}, "sain.Vec.extend": {"tf": 1}, "sain.Vec.clear": {"tf": 1}, "sain.Vec.sort": {"tf": 1}, "sain.Error": {"tf": 2.23606797749979}, "sain.Error.source": {"tf": 1}, "sain.Error.description": {"tf": 1}, "sain.Box.on_expire": {"tf": 1.4142135623730951}, "sain.Box.remaining": {"tf": 1}, "sain.MaybeUninit": {"tf": 1.4142135623730951}, "sain.MaybeUninit.uninit_array": {"tf": 1}, "sain.MaybeUninit.assume_init": {"tf": 2}, "sain.MaybeUninit.write": {"tf": 1}, "sain.TryFrom": {"tf": 1.7320508075688772}, "sain.TryInto": {"tf": 1.7320508075688772}, "sain.boxed.Box.on_expire": {"tf": 1.4142135623730951}, "sain.boxed.Box.remaining": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1.4142135623730951}, "sain.collections": {"tf": 1}, "sain.collections.Vec": {"tf": 1.7320508075688772}, "sain.collections.Vec.with_capacity": {"tf": 1.4142135623730951}, "sain.collections.Vec.as_ref": {"tf": 1}, "sain.collections.Vec.len": {"tf": 1}, "sain.collections.Vec.capacity": {"tf": 1}, "sain.collections.Vec.iter": {"tf": 1}, "sain.collections.Vec.split_off": {"tf": 1.4142135623730951}, "sain.collections.Vec.first": {"tf": 1}, "sain.collections.Vec.retain": {"tf": 1.4142135623730951}, "sain.collections.Vec.swap_remove": {"tf": 1.7320508075688772}, "sain.collections.Vec.remove": {"tf": 1}, "sain.collections.Vec.extend": {"tf": 1}, "sain.collections.Vec.clear": {"tf": 1}, "sain.collections.Vec.sort": {"tf": 1}, "sain.collections.Bytes.__init__": {"tf": 1}, "sain.collections.Bytes.try_to_str": {"tf": 1}, "sain.collections.Bytes.to_str": {"tf": 1.4142135623730951}, "sain.collections.Bytes.put": {"tf": 1}, "sain.collections.Bytes.len": {"tf": 1}, "sain.collections.Bytes.iter": {"tf": 1}, "sain.collections.buf.Bytes.__init__": {"tf": 1}, "sain.collections.buf.Bytes.try_to_str": {"tf": 1}, "sain.collections.buf.Bytes.to_str": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.put": {"tf": 1}, "sain.collections.buf.Bytes.len": {"tf": 1}, "sain.collections.buf.Bytes.iter": {"tf": 1}, "sain.collections.buf.Rawish": {"tf": 1}, "sain.collections.buf.Buffer": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1.7320508075688772}, "sain.collections.vec.Vec.with_capacity": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.as_ref": {"tf": 1}, "sain.collections.vec.Vec.len": {"tf": 1}, "sain.collections.vec.Vec.capacity": {"tf": 1}, "sain.collections.vec.Vec.iter": {"tf": 1}, "sain.collections.vec.Vec.split_off": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.first": {"tf": 1}, "sain.collections.vec.Vec.retain": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.swap_remove": {"tf": 1.7320508075688772}, "sain.collections.vec.Vec.remove": {"tf": 1}, "sain.collections.vec.Vec.extend": {"tf": 1}, "sain.collections.vec.Vec.clear": {"tf": 1}, "sain.collections.vec.Vec.sort": {"tf": 1}, "sain.convert": {"tf": 1.7320508075688772}, "sain.convert.TryFrom": {"tf": 1.7320508075688772}, "sain.convert.TryInto": {"tf": 1.7320508075688772}, "sain.error": {"tf": 1.4142135623730951}, "sain.error.Error": {"tf": 2.23606797749979}, "sain.error.Error.source": {"tf": 1}, "sain.error.Error.description": {"tf": 1}, "sain.iter.Iter": {"tf": 1.7320508075688772}, "sain.iter.Iter.clone": {"tf": 1}, "sain.iter.Iterator": {"tf": 1.7320508075688772}, "sain.iter.Iterator.default": {"tf": 1}, "sain.iter.Iterator.to_vec": {"tf": 1}, "sain.iter.Iterator.sink": {"tf": 1}, "sain.iter.Iterator.raw_parts": {"tf": 1.4142135623730951}, "sain.iter.Iterator.cloned": {"tf": 1}, "sain.iter.Iterator.copied": {"tf": 1}, "sain.iter.Iterator.count": {"tf": 1}, "sain.iter.Cloned": {"tf": 1}, "sain.iter.Copied": {"tf": 1}, "sain.iter.Take": {"tf": 1}, "sain.iter.Filter": {"tf": 1}, "sain.iter.Map": {"tf": 1}, "sain.iter.Skip": {"tf": 1}, "sain.iter.Enumerate": {"tf": 1}, "sain.iter.TakeWhile": {"tf": 1}, "sain.iter.DropWhile": {"tf": 1}, "sain.iter.Empty": {"tf": 1}, "sain.iter.Empty.count": {"tf": 1}, "sain.macros.deprecated": {"tf": 1.4142135623730951}, "sain.macros.unimplemented": {"tf": 1.4142135623730951}, "sain.macros.todo": {"tf": 1}, "sain.option.Some.unwrap": {"tf": 1}, "sain.option.Some.unwrap_unchecked": {"tf": 1}, "sain.option.Some.take_if": {"tf": 1}, "sain.result": {"tf": 1}, "sain.sync.Lazy": {"tf": 1.7320508075688772}, "sain.sync.Lazy.get": {"tf": 1}, "sain.sync.Lazy.get_unchecked": {"tf": 1}, "sain.sync.Lazy.set": {"tf": 1}, "sain.sync.Once.get": {"tf": 1}, "sain.sync.Once.get_unchecked": {"tf": 1.4142135623730951}, "sain.sync.Once.set": {"tf": 1.4142135623730951}, "sain.sync.LazyFuture": {"tf": 1.7320508075688772}, "sain.sync.LazyFuture.get": {"tf": 1.4142135623730951}, "sain.sync.LazyFuture.set": {"tf": 1}, "sain.sync.AsyncOnce": {"tf": 1}, "sain.sync.AsyncOnce.is_set": {"tf": 1}, "sain.sync.AsyncOnce.get": {"tf": 1}, "sain.sync.AsyncOnce.get_unchecked": {"tf": 1.4142135623730951}, "sain.sync.AsyncOnce.set": {"tf": 1}}, "df": 141}, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.From": {"tf": 1}, "sain.convert.From": {"tf": 1}}, "df": 2}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {"sain.Box": {"tf": 1}, "sain.boxed.Box": {"tf": 1}, "sain.sync.Lazy": {"tf": 1}, "sain.sync.Once.set": {"tf": 1}, "sain.sync.LazyFuture": {"tf": 1}, "sain.sync.AsyncOnce.set": {"tf": 1}}, "df": 6, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.futures": {"tf": 1}}, "df": 1}}}, "s": {"docs": {"sain.sync.Once.get_or": {"tf": 1}, "sain.sync.Once.get_or_with": {"tf": 1}, "sain.sync.AsyncOnce.get_or": {"tf": 1}, "sain.sync.AsyncOnce.get_or_with": {"tf": 1}}, "df": 4}}}}}, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"sain.error": {"tf": 1}}, "df": 1}}}}, "o": {"docs": {"sain": {"tf": 1}, "sain.cfg": {"tf": 1}, "sain.Some": {"tf": 1.4142135623730951}, "sain.Some.unwrap": {"tf": 1}, "sain.Some.unwrap_or_else": {"tf": 1}, "sain.Some.map": {"tf": 1}, "sain.Some.map_or": {"tf": 1.4142135623730951}, "sain.Some.map_or_else": {"tf": 1.4142135623730951}, "sain.Some.take": {"tf": 1}, "sain.Some.take_if": {"tf": 1}, "sain.Some.as_ref": {"tf": 1.4142135623730951}, "sain.Iter": {"tf": 1.7320508075688772}, "sain.Iterator": {"tf": 1.4142135623730951}, "sain.Iterator.collect": {"tf": 1}, "sain.Iterator.to_vec": {"tf": 1.4142135623730951}, "sain.Iterator.raw_parts": {"tf": 1}, "sain.Iterator.cloned": {"tf": 1}, "sain.Iterator.copied": {"tf": 1}, "sain.Iterator.map": {"tf": 1.7320508075688772}, "sain.Iterator.filter": {"tf": 1}, "sain.Iterator.take_while": {"tf": 1}, "sain.Iterator.drop_while": {"tf": 1}, "sain.Iterator.all": {"tf": 1}, "sain.Iterator.any": {"tf": 1}, "sain.Iterator.zip": {"tf": 1}, "sain.Iterator.sort": {"tf": 1.4142135623730951}, "sain.Iterator.union": {"tf": 1}, "sain.Iterator.for_each": {"tf": 1}, "sain.Iterator.async_for_each": {"tf": 1}, "sain.todo": {"tf": 1}, "sain.deprecated": {"tf": 1}, "sain.unimplemented": {"tf": 1.4142135623730951}, "sain.doc": {"tf": 1.4142135623730951}, "sain.Ok.expect": {"tf": 1}, "sain.Ok.ok": {"tf": 1}, "sain.Ok.err": {"tf": 1}, "sain.Ok.inspect": {"tf": 1}, "sain.Ok.inspect_err": {"tf": 1}, "sain.Ok.map": {"tf": 1.4142135623730951}, "sain.Ok.map_or": {"tf": 1}, "sain.Ok.map_or_else": {"tf": 1}, "sain.Ok.map_err": {"tf": 1}, "sain.Vec": {"tf": 3.3166247903554}, "sain.Vec.with_capacity": {"tf": 1}, "sain.Vec.iter": {"tf": 1}, "sain.Vec.swap_remove": {"tf": 1}, "sain.Vec.reserve": {"tf": 1}, "sain.Vec.index": {"tf": 1}, "sain.Error": {"tf": 2}, "sain.Box.on_expire": {"tf": 1}, "sain.MaybeUninit": {"tf": 2}, "sain.MaybeUninit.uninit_array": {"tf": 1}, "sain.MaybeUninit.assume_init": {"tf": 1.4142135623730951}, "sain.From": {"tf": 1.7320508075688772}, "sain.TryFrom": {"tf": 1.7320508075688772}, "sain.TryInto": {"tf": 1}, "sain.boxed.Box.on_expire": {"tf": 1}, "sain.cfg.cfg": {"tf": 2}, "sain.collections": {"tf": 1.7320508075688772}, "sain.collections.Vec": {"tf": 3.3166247903554}, "sain.collections.Vec.with_capacity": {"tf": 1}, "sain.collections.Vec.iter": {"tf": 1}, "sain.collections.Vec.swap_remove": {"tf": 1}, "sain.collections.Vec.reserve": {"tf": 1}, "sain.collections.Vec.index": {"tf": 1}, "sain.collections.Bytes": {"tf": 1}, "sain.collections.Bytes.from_static": {"tf": 1}, "sain.collections.Bytes.try_to_str": {"tf": 2.23606797749979}, "sain.collections.Bytes.to_str": {"tf": 2.6457513110645907}, "sain.collections.Bytes.leak": {"tf": 1}, "sain.collections.Bytes.raw_parts": {"tf": 1}, "sain.collections.Bytes.put": {"tf": 1}, "sain.collections.Bytes.put_bytes": {"tf": 1}, "sain.collections.Bytes.put_str": {"tf": 1}, "sain.collections.Bytes.iter": {"tf": 1.4142135623730951}, "sain.collections.Bytes.index": {"tf": 1}, "sain.collections.Bytes.insert": {"tf": 1}, "sain.collections.buf.Bytes": {"tf": 1}, "sain.collections.buf.Bytes.from_static": {"tf": 1}, "sain.collections.buf.Bytes.try_to_str": {"tf": 2.23606797749979}, "sain.collections.buf.Bytes.to_str": {"tf": 2.6457513110645907}, "sain.collections.buf.Bytes.leak": {"tf": 1}, "sain.collections.buf.Bytes.raw_parts": {"tf": 1}, "sain.collections.buf.Bytes.put": {"tf": 1}, "sain.collections.buf.Bytes.put_bytes": {"tf": 1}, "sain.collections.buf.Bytes.put_str": {"tf": 1}, "sain.collections.buf.Bytes.iter": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.index": {"tf": 1}, "sain.collections.buf.Bytes.insert": {"tf": 1}, "sain.collections.vec": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 3.3166247903554}, "sain.collections.vec.Vec.with_capacity": {"tf": 1}, "sain.collections.vec.Vec.iter": {"tf": 1}, "sain.collections.vec.Vec.swap_remove": {"tf": 1}, "sain.collections.vec.Vec.reserve": {"tf": 1}, "sain.collections.vec.Vec.index": {"tf": 1}, "sain.convert": {"tf": 2.449489742783178}, "sain.convert.From": {"tf": 1.7320508075688772}, "sain.convert.TryFrom": {"tf": 1.7320508075688772}, "sain.convert.TryInto": {"tf": 1}, "sain.error": {"tf": 1}, "sain.error.Error": {"tf": 2}, "sain.futures.spawn": {"tf": 1}, "sain.iter.Iter": {"tf": 1.7320508075688772}, "sain.iter.Iterator": {"tf": 1.4142135623730951}, "sain.iter.Iterator.collect": {"tf": 1}, "sain.iter.Iterator.to_vec": {"tf": 1.4142135623730951}, "sain.iter.Iterator.raw_parts": {"tf": 1}, "sain.iter.Iterator.cloned": {"tf": 1}, "sain.iter.Iterator.copied": {"tf": 1}, "sain.iter.Iterator.map": {"tf": 1.7320508075688772}, "sain.iter.Iterator.filter": {"tf": 1}, "sain.iter.Iterator.take_while": {"tf": 1}, "sain.iter.Iterator.drop_while": {"tf": 1}, "sain.iter.Iterator.all": {"tf": 1}, "sain.iter.Iterator.any": {"tf": 1}, "sain.iter.Iterator.zip": {"tf": 1}, "sain.iter.Iterator.sort": {"tf": 1.4142135623730951}, "sain.iter.Iterator.union": {"tf": 1}, "sain.iter.Iterator.for_each": {"tf": 1}, "sain.iter.Iterator.async_for_each": {"tf": 1}, "sain.iter.Filter": {"tf": 1}, "sain.iter.Map": {"tf": 1}, "sain.iter.Empty.any": {"tf": 1}, "sain.iter.Empty.all": {"tf": 1}, "sain.iter.into_iter": {"tf": 1}, "sain.macros": {"tf": 1.4142135623730951}, "sain.macros.deprecated": {"tf": 1}, "sain.macros.unimplemented": {"tf": 1.4142135623730951}, "sain.macros.todo": {"tf": 1}, "sain.macros.doc": {"tf": 1.4142135623730951}, "sain.option.Some.unwrap": {"tf": 1}, "sain.option.Some.unwrap_or_else": {"tf": 1}, "sain.option.Some.map": {"tf": 1}, "sain.option.Some.map_or": {"tf": 1.4142135623730951}, "sain.option.Some.map_or_else": {"tf": 1.4142135623730951}, "sain.option.Some.take": {"tf": 1}, "sain.option.Some.take_if": {"tf": 1}, "sain.option.Some.as_ref": {"tf": 1.4142135623730951}, "sain.result": {"tf": 1.7320508075688772}, "sain.result.Ok.expect": {"tf": 1}, "sain.result.Ok.ok": {"tf": 1}, "sain.result.Ok.err": {"tf": 1}, "sain.result.Ok.inspect": {"tf": 1}, "sain.result.Ok.inspect_err": {"tf": 1}, "sain.result.Ok.map": {"tf": 1.4142135623730951}, "sain.result.Ok.map_or": {"tf": 1}, "sain.result.Ok.map_or_else": {"tf": 1}, "sain.result.Ok.map_err": {"tf": 1}, "sain.sync.Lazy": {"tf": 1.7320508075688772}, "sain.sync.Lazy.set": {"tf": 1}, "sain.sync.Once": {"tf": 1}, "sain.sync.Once.set": {"tf": 1.4142135623730951}, "sain.sync.Once.clear": {"tf": 1}, "sain.sync.LazyFuture": {"tf": 1.7320508075688772}, "sain.sync.LazyFuture.set": {"tf": 1}, "sain.sync.AsyncOnce": {"tf": 1}, "sain.sync.AsyncOnce.set": {"tf": 1.4142135623730951}, "sain.sync.AsyncOnce.clear": {"tf": 1}}, "df": 159, "d": {"docs": {}, "df": 0, "o": {"docs": {"sain.todo": {"tf": 1.4142135623730951}, "sain.macros.todo": {"tf": 1.4142135623730951}}, "df": 2}}, "b": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"sain.collections.Bytes.leak": {"tf": 1}, "sain.collections.buf.Bytes.leak": {"tf": 1}}, "df": 2}}}}}, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"sain.sync.Lazy": {"tf": 2.449489742783178}, "sain.sync.LazyFuture": {"tf": 2.449489742783178}}, "df": 2}}}}, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"sain.Some": {"tf": 1}, "sain.Some.unwrap_or": {"tf": 1}, "sain.Some.map": {"tf": 1}, "sain.Some.map_or": {"tf": 1}, "sain.Some.map_or_else": {"tf": 1}, "sain.Iterator": {"tf": 1.4142135623730951}, "sain.Iterator.default": {"tf": 1}, "sain.Iterator.collect": {"tf": 1.4142135623730951}, "sain.Iterator.raw_parts": {"tf": 1}, "sain.Iterator.map": {"tf": 1.4142135623730951}, "sain.Error": {"tf": 1.4142135623730951}, "sain.Box": {"tf": 1}, "sain.MaybeUninit": {"tf": 1.4142135623730951}, "sain.TryFrom": {"tf": 1.7320508075688772}, "sain.TryInto": {"tf": 1.4142135623730951}, "sain.boxed.Box": {"tf": 1}, "sain.collections.Bytes": {"tf": 1.4142135623730951}, "sain.collections.Bytes.from_raw": {"tf": 1}, "sain.collections.Bytes.put_raw": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.from_raw": {"tf": 1}, "sain.collections.buf.Bytes.put_raw": {"tf": 1.4142135623730951}, "sain.collections.buf.Rawish": {"tf": 1.4142135623730951}, "sain.collections.buf.Buffer": {"tf": 1.4142135623730951}, "sain.convert": {"tf": 2}, "sain.convert.TryFrom": {"tf": 1.7320508075688772}, "sain.convert.TryInto": {"tf": 1.4142135623730951}, "sain.error.Error": {"tf": 1.4142135623730951}, "sain.iter.Iterator": {"tf": 1.4142135623730951}, "sain.iter.Iterator.default": {"tf": 1}, "sain.iter.Iterator.collect": {"tf": 1.4142135623730951}, "sain.iter.Iterator.raw_parts": {"tf": 1}, "sain.iter.Iterator.map": {"tf": 1.4142135623730951}, "sain.option": {"tf": 1}, "sain.option.Some.unwrap_or": {"tf": 1}, "sain.option.Some.map": {"tf": 1}, "sain.option.Some.map_or": {"tf": 1}, "sain.option.Some.map_or_else": {"tf": 1}, "sain.option.Option": {"tf": 1}, "sain.result": {"tf": 1}}, "df": 40, "s": {"docs": {"sain": {"tf": 1}, "sain.From": {"tf": 1}, "sain.collections": {"tf": 1}, "sain.collections.Bytes": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes": {"tf": 1.4142135623730951}, "sain.convert": {"tf": 1.4142135623730951}, "sain.convert.From": {"tf": 1}, "sain.default": {"tf": 1}}, "df": 8}, "[": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"sain.doc": {"tf": 1}, "sain.macros.doc": {"tf": 1}}, "df": 2}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {"sain.doc": {"tf": 1}, "sain.macros.doc": {"tf": 1}}, "df": 2}}}, "b": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"sain.doc": {"tf": 1}, "sain.macros.doc": {"tf": 1}}, "df": 2}}}}}, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {"sain.doc": {"tf": 1}, "sain.macros.doc": {"tf": 1}}, "df": 2}}}, "b": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"sain.doc": {"tf": 1}, "sain.macros.doc": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.Some": {"tf": 1}, "sain.Iterator.for_each": {"tf": 1}, "sain.iter.Iterator.for_each": {"tf": 1}, "sain.option.Option": {"tf": 1.4142135623730951}}, "df": 4}}}}}, "r": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"sain.cfg": {"tf": 1}, "sain.Some.unwrap_or_else": {"tf": 1.4142135623730951}, "sain.Some.filter": {"tf": 1}, "sain.Some.take_if": {"tf": 1}, "sain.Some.is_some": {"tf": 1.4142135623730951}, "sain.Some.is_some_and": {"tf": 1.7320508075688772}, "sain.Some.is_none": {"tf": 1.4142135623730951}, "sain.Iterator.take_while": {"tf": 1}, "sain.Iterator.all": {"tf": 1}, "sain.Iterator.any": {"tf": 1}, "sain.Ok.is_ok": {"tf": 1.4142135623730951}, "sain.Ok.is_ok_and": {"tf": 1.7320508075688772}, "sain.Ok.is_err": {"tf": 1}, "sain.Ok.is_err_and": {"tf": 1.4142135623730951}, "sain.Ok.unwrap_err": {"tf": 1}, "sain.Ok.ok": {"tf": 1.4142135623730951}, "sain.Ok.err": {"tf": 1.4142135623730951}, "sain.Err.is_ok": {"tf": 1}, "sain.Err.is_ok_and": {"tf": 1.4142135623730951}, "sain.Err.is_err": {"tf": 1.4142135623730951}, "sain.Err.is_err_and": {"tf": 1.7320508075688772}, "sain.Vec": {"tf": 1}, "sain.Vec.is_empty": {"tf": 1}, "sain.Vec.retain": {"tf": 1}, "sain.Vec.reserve": {"tf": 1}, "sain.Error": {"tf": 1.4142135623730951}, "sain.Box.has_expired": {"tf": 1}, "sain.boxed.Box.has_expired": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}, "sain.collections.Vec": {"tf": 1}, "sain.collections.Vec.is_empty": {"tf": 1}, "sain.collections.Vec.retain": {"tf": 1}, "sain.collections.Vec.reserve": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1}, "sain.collections.vec.Vec.is_empty": {"tf": 1}, "sain.collections.vec.Vec.retain": {"tf": 1}, "sain.collections.vec.Vec.reserve": {"tf": 1}, "sain.error.Error": {"tf": 1.4142135623730951}, "sain.iter.Iterator.take_while": {"tf": 1}, "sain.iter.Iterator.all": {"tf": 1}, "sain.iter.Iterator.any": {"tf": 1}, "sain.iter.TakeWhile": {"tf": 1}, "sain.iter.Empty.any": {"tf": 1}, "sain.iter.Empty.all": {"tf": 1}, "sain.option.Some.unwrap_or_else": {"tf": 1.4142135623730951}, "sain.option.Some.filter": {"tf": 1}, "sain.option.Some.take_if": {"tf": 1}, "sain.option.Some.is_some": {"tf": 1.4142135623730951}, "sain.option.Some.is_some_and": {"tf": 1.7320508075688772}, "sain.option.Some.is_none": {"tf": 1.4142135623730951}, "sain.option.NOTHING": {"tf": 1}, "sain.result.Ok.is_ok": {"tf": 1.4142135623730951}, "sain.result.Ok.is_ok_and": {"tf": 1.7320508075688772}, "sain.result.Ok.is_err": {"tf": 1}, "sain.result.Ok.is_err_and": {"tf": 1.4142135623730951}, "sain.result.Ok.unwrap_err": {"tf": 1}, "sain.result.Ok.ok": {"tf": 1.4142135623730951}, "sain.result.Ok.err": {"tf": 1.4142135623730951}, "sain.result.Err.is_ok": {"tf": 1}, "sain.result.Err.is_ok_and": {"tf": 1.4142135623730951}, "sain.result.Err.is_err": {"tf": 1.4142135623730951}, "sain.result.Err.is_err_and": {"tf": 1.7320508075688772}, "sain.sync.Once.set": {"tf": 1.7320508075688772}, "sain.sync.AsyncOnce.set": {"tf": 1.7320508075688772}}, "df": 64}, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"sain.Vec.truncate": {"tf": 1}, "sain.collections.Vec.truncate": {"tf": 1}, "sain.collections.vec.Vec.truncate": {"tf": 1}}, "df": 3}}}}}}, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"sain.Iterator": {"tf": 1.4142135623730951}, "sain.convert": {"tf": 1.7320508075688772}, "sain.default": {"tf": 1}, "sain.iter.Iterator": {"tf": 1.4142135623730951}}, "df": 4, "s": {"docs": {"sain.convert": {"tf": 1}}, "df": 1}}}}, "y": {"docs": {"sain.Iterator": {"tf": 1}, "sain.TryFrom": {"tf": 1}, "sain.TryInto": {"tf": 1}, "sain.collections.Bytes.try_to_str": {"tf": 1.4142135623730951}, "sain.collections.Bytes.to_str": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.try_to_str": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.to_str": {"tf": 1.4142135623730951}, "sain.convert": {"tf": 1.7320508075688772}, "sain.convert.TryFrom": {"tf": 1}, "sain.convert.TryInto": {"tf": 1}, "sain.iter.Iterator": {"tf": 1}}, "df": 11, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {"sain.TryFrom": {"tf": 1}, "sain.TryInto": {"tf": 1}, "sain.convert": {"tf": 1.4142135623730951}, "sain.convert.TryFrom": {"tf": 1}, "sain.convert.TryInto": {"tf": 1}}, "df": 5}}, "g": {"docs": {"sain.collections.Bytes.to_str": {"tf": 1}, "sain.collections.buf.Bytes.to_str": {"tf": 1}, "sain.sync.Once.set": {"tf": 1}, "sain.sync.AsyncOnce.set": {"tf": 1}}, "df": 4}}}, "f": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"sain.TryFrom": {"tf": 1}, "sain.convert": {"tf": 1.7320508075688772}, "sain.convert.TryFrom": {"tf": 1}}, "df": 3}}}}, "/": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {"sain.result": {"tf": 1}}, "df": 1}}}}}}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.collections.Bytes.insert": {"tf": 1}, "sain.collections.buf.Bytes.insert": {"tf": 1}}, "df": 2}}}}}, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"sain.convert": {"tf": 1}}, "df": 1}}}}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"sain.cfg": {"tf": 1.7320508075688772}, "sain.cfg_attr": {"tf": 2}, "sain.cfg.cfg_attr": {"tf": 2}, "sain.cfg.cfg": {"tf": 2.23606797749979}}, "df": 4, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.cfg": {"tf": 1.7320508075688772}, "sain.cfg_attr": {"tf": 1.7320508075688772}, "sain.cfg.cfg_attr": {"tf": 1.7320508075688772}, "sain.cfg.cfg": {"tf": 1.7320508075688772}}, "df": 4}}}}}}, "k": {"docs": {}, "df": 0, "e": {"docs": {"sain.Some.take": {"tf": 1.4142135623730951}, "sain.Some.take_if": {"tf": 1.7320508075688772}, "sain.Iter": {"tf": 1}, "sain.Iterator": {"tf": 1}, "sain.Iterator.take": {"tf": 1.4142135623730951}, "sain.Iterator.take_while": {"tf": 1}, "sain.iter.Iter": {"tf": 1}, "sain.iter.Iterator": {"tf": 1}, "sain.iter.Iterator.take": {"tf": 1.4142135623730951}, "sain.iter.Iterator.take_while": {"tf": 1}, "sain.iter.Take": {"tf": 1}, "sain.iter.TakeWhile": {"tf": 1}, "sain.option.Some.take": {"tf": 1.4142135623730951}, "sain.option.Some.take_if": {"tf": 1.7320508075688772}}, "df": 14, "s": {"docs": {"sain.TryFrom": {"tf": 1}, "sain.TryInto": {"tf": 1}, "sain.convert.TryFrom": {"tf": 1}, "sain.convert.TryInto": {"tf": 1}}, "df": 4}}}, "s": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "s": {"docs": {"sain.futures.spawn": {"tf": 2}}, "df": 1}}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sain.Iterator.enumerate": {"tf": 1}, "sain.collections.Bytes.raw_parts": {"tf": 1}, "sain.collections.buf.Bytes.raw_parts": {"tf": 1}, "sain.iter.Iterator.enumerate": {"tf": 1}}, "df": 4, "[": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 4}}}}}}}}, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sain.Iterator.cloned": {"tf": 1}, "sain.iter.Iterator.cloned": {"tf": 1}}, "df": 2}}}, "o": {"docs": {"sain.Vec": {"tf": 1}, "sain.TryFrom": {"tf": 1}, "sain.TryInto": {"tf": 1}, "sain.collections.Vec": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1}, "sain.convert": {"tf": 1}, "sain.convert.TryFrom": {"tf": 1}, "sain.convert.TryInto": {"tf": 1}}, "df": 8}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"sain.Iterator.all": {"tf": 1}, "sain.Iterator.any": {"tf": 1}, "sain.iter.Iterator.all": {"tf": 1}, "sain.iter.Iterator.any": {"tf": 1}, "sain.iter.Empty.any": {"tf": 1}, "sain.iter.Empty.all": {"tf": 1}}, "df": 6}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"sain.MaybeUninit": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"sain.Box": {"tf": 1.7320508075688772}, "sain.Box.on_expire": {"tf": 1}, "sain.Box.remaining": {"tf": 1}, "sain.From": {"tf": 1}, "sain.boxed": {"tf": 1}, "sain.boxed.Box": {"tf": 1.7320508075688772}, "sain.boxed.Box.on_expire": {"tf": 1}, "sain.boxed.Box.remaining": {"tf": 1}, "sain.convert.From": {"tf": 1}, "sain.error": {"tf": 1}, "sain.futures.spawn": {"tf": 1}}, "df": 11, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"sain.Box": {"tf": 1}, "sain.Box.get": {"tf": 1}, "sain.boxed.Box": {"tf": 1}, "sain.boxed.Box.get": {"tf": 1}}, "df": 4}}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"sain.futures.spawn": {"tf": 1.7320508075688772}}, "df": 1}}}, "s": {"docs": {"sain.iter.repeat": {"tf": 1}}, "df": 1}}}}, "x": {"docs": {}, "df": 0, "t": {"docs": {"sain.collections.Bytes.from_raw": {"tf": 1}, "sain.collections.Bytes.put_raw": {"tf": 1}, "sain.collections.buf.Bytes.from_raw": {"tf": 1}, "sain.collections.buf.Bytes.put_raw": {"tf": 1}, "sain.result": {"tf": 1}}, "df": 5}}}, "b": {"docs": {"sain.Iterator.raw_parts": {"tf": 1}, "sain.Vec.swap_remove": {"tf": 1.4142135623730951}, "sain.Vec.remove": {"tf": 1.4142135623730951}, "sain.MaybeUninit": {"tf": 1}, "sain.collections.Vec.swap_remove": {"tf": 1.4142135623730951}, "sain.collections.Vec.remove": {"tf": 1.4142135623730951}, "sain.collections.Bytes": {"tf": 1.4142135623730951}, "sain.collections.Bytes.from_static": {"tf": 1}, "sain.collections.Bytes.from_bytes": {"tf": 1.4142135623730951}, "sain.collections.Bytes.from_raw": {"tf": 1}, "sain.collections.Bytes.to_str": {"tf": 1}, "sain.collections.Bytes.leak": {"tf": 1}, "sain.collections.Bytes.as_bytes": {"tf": 1}, "sain.collections.Bytes.put": {"tf": 1}, "sain.collections.Bytes.put_raw": {"tf": 1}, "sain.collections.Bytes.put_bytes": {"tf": 1}, "sain.collections.buf.Bytes": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.from_static": {"tf": 1}, "sain.collections.buf.Bytes.from_bytes": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.from_raw": {"tf": 1}, "sain.collections.buf.Bytes.to_str": {"tf": 1}, "sain.collections.buf.Bytes.leak": {"tf": 1}, "sain.collections.buf.Bytes.as_bytes": {"tf": 1}, "sain.collections.buf.Bytes.put": {"tf": 1}, "sain.collections.buf.Bytes.put_raw": {"tf": 1}, "sain.collections.buf.Bytes.put_bytes": {"tf": 1}, "sain.collections.vec.Vec.swap_remove": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.remove": {"tf": 1.4142135623730951}, "sain.convert": {"tf": 1}, "sain.iter.Iterator.raw_parts": {"tf": 1}}, "df": 30, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "s": {"docs": {"sain": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "k": {"docs": {"sain.Vec.reserve": {"tf": 1}, "sain.collections.Vec.reserve": {"tf": 1}, "sain.collections.vec.Vec.reserve": {"tf": 1}}, "df": 3}}}}, "e": {"docs": {"sain.cfg": {"tf": 2}, "sain.cfg_attr": {"tf": 2.23606797749979}, "sain.Some": {"tf": 1}, "sain.Iter": {"tf": 1}, "sain.Iterator": {"tf": 1}, "sain.Iterator.collect": {"tf": 1}, "sain.deprecated": {"tf": 1.7320508075688772}, "sain.unimplemented": {"tf": 2}, "sain.doc": {"tf": 1}, "sain.Vec": {"tf": 1.4142135623730951}, "sain.Vec.with_capacity": {"tf": 1}, "sain.Vec.reserve": {"tf": 1}, "sain.Box.on_expire": {"tf": 1.7320508075688772}, "sain.Into": {"tf": 1}, "sain.TryInto": {"tf": 1}, "sain.boxed.Box.on_expire": {"tf": 1.7320508075688772}, "sain.cfg.cfg_attr": {"tf": 2.23606797749979}, "sain.cfg.cfg": {"tf": 2.23606797749979}, "sain.collections": {"tf": 1}, "sain.collections.Vec": {"tf": 1.4142135623730951}, "sain.collections.Vec.with_capacity": {"tf": 1}, "sain.collections.Vec.reserve": {"tf": 1}, "sain.collections.Bytes": {"tf": 1}, "sain.collections.Bytes.__init__": {"tf": 1}, "sain.collections.Bytes.try_to_str": {"tf": 1}, "sain.collections.Bytes.to_str": {"tf": 1.7320508075688772}, "sain.collections.Bytes.put_bytes": {"tf": 1}, "sain.collections.Bytes.index": {"tf": 1}, "sain.collections.buf.Bytes": {"tf": 1}, "sain.collections.buf.Bytes.__init__": {"tf": 1}, "sain.collections.buf.Bytes.try_to_str": {"tf": 1}, "sain.collections.buf.Bytes.to_str": {"tf": 1.7320508075688772}, "sain.collections.buf.Bytes.put_bytes": {"tf": 1}, "sain.collections.buf.Bytes.index": {"tf": 1}, "sain.collections.buf.Rawish": {"tf": 1}, "sain.collections.buf.Buffer": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.with_capacity": {"tf": 1}, "sain.collections.vec.Vec.reserve": {"tf": 1}, "sain.convert": {"tf": 1}, "sain.convert.Into": {"tf": 1}, "sain.convert.TryInto": {"tf": 1}, "sain.error": {"tf": 1.4142135623730951}, "sain.iter.Iter": {"tf": 1}, "sain.iter.Iterator": {"tf": 1}, "sain.iter.Iterator.collect": {"tf": 1}, "sain.macros.deprecated": {"tf": 1.7320508075688772}, "sain.macros.unimplemented": {"tf": 2}, "sain.macros.doc": {"tf": 1}, "sain.option": {"tf": 1}, "sain.option.Option": {"tf": 1}, "sain.sync.Lazy": {"tf": 1}, "sain.sync.Once": {"tf": 1}, "sain.sync.Once.set": {"tf": 1}, "sain.sync.Once.get_or": {"tf": 1}, "sain.sync.Once.get_or_with": {"tf": 1}, "sain.sync.LazyFuture": {"tf": 1}, "sain.sync.AsyncOnce": {"tf": 1}, "sain.sync.AsyncOnce.set": {"tf": 1}, "sain.sync.AsyncOnce.get_or": {"tf": 1}, "sain.sync.AsyncOnce.get_or_with": {"tf": 1}}, "df": 61, "t": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"sain.cfg": {"tf": 1}, "sain.Vec.sort": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}, "sain.collections.Vec.sort": {"tf": 1}, "sain.collections.vec.Vec.sort": {"tf": 1}, "sain.convert": {"tf": 1}}, "df": 6}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sain.Some.take_if": {"tf": 1}, "sain.option.Some.take_if": {"tf": 1}}, "df": 2}}}}, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"sain.Some.unwrap_unchecked": {"tf": 1.4142135623730951}, "sain.MaybeUninit.assume_init": {"tf": 1.4142135623730951}, "sain.macros.unsafe": {"tf": 1}, "sain.option.Some.unwrap_unchecked": {"tf": 1.4142135623730951}, "sain.sync.Lazy.get_unchecked": {"tf": 1.4142135623730951}, "sain.sync.Once.get_unchecked": {"tf": 1.4142135623730951}, "sain.sync.LazyFuture.get": {"tf": 1}, "sain.sync.AsyncOnce.get_unchecked": {"tf": 1.4142135623730951}}, "df": 8}}}, "e": {"docs": {"sain.convert": {"tf": 1}}, "df": 1, "s": {"docs": {"sain.collections.Bytes": {"tf": 1}, "sain.collections.buf.Bytes": {"tf": 1}}, "df": 2}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {"sain.Iter.clone": {"tf": 1}, "sain.Vec.swap_remove": {"tf": 1}, "sain.Vec.copy": {"tf": 1}, "sain.Vec.count": {"tf": 1}, "sain.collections.Vec.swap_remove": {"tf": 1}, "sain.collections.Vec.copy": {"tf": 1}, "sain.collections.Vec.count": {"tf": 1}, "sain.collections.Bytes.as_ref": {"tf": 1}, "sain.collections.Bytes.as_mut": {"tf": 1}, "sain.collections.Bytes.put": {"tf": 1}, "sain.collections.buf.Bytes.as_ref": {"tf": 1}, "sain.collections.buf.Bytes.as_mut": {"tf": 1}, "sain.collections.buf.Bytes.put": {"tf": 1}, "sain.collections.vec.Vec.swap_remove": {"tf": 1}, "sain.collections.vec.Vec.copy": {"tf": 1}, "sain.collections.vec.Vec.count": {"tf": 1}, "sain.iter.Iter.clone": {"tf": 1}}, "df": 17}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.Iterator.cloned": {"tf": 1}, "sain.Iterator.copied": {"tf": 1}, "sain.MaybeUninit": {"tf": 1}, "sain.TryFrom": {"tf": 1.4142135623730951}, "sain.TryInto": {"tf": 1}, "sain.collections.Bytes.insert": {"tf": 1}, "sain.collections.buf.Bytes.insert": {"tf": 1}, "sain.convert.TryFrom": {"tf": 1.4142135623730951}, "sain.convert.TryInto": {"tf": 1}, "sain.iter.Iterator.cloned": {"tf": 1}, "sain.iter.Iterator.copied": {"tf": 1}}, "df": 11}}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"sain.From": {"tf": 1}, "sain.convert.From": {"tf": 1}}, "df": 2}}}}}, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"sain.collections.Bytes.insert": {"tf": 1}, "sain.collections.buf.Bytes.insert": {"tf": 1}}, "df": 2}}}}, "n": {"docs": {"sain.sync.AsyncOnce.is_set": {"tf": 1}}, "df": 1}}, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"sain.cfg": {"tf": 1}, "sain.Some.unwrap_or_else": {"tf": 1}, "sain.Some.map": {"tf": 1}, "sain.Some.take_if": {"tf": 1}, "sain.Iterator.take_while": {"tf": 1}, "sain.Iterator.drop_while": {"tf": 1}, "sain.Iterator.all": {"tf": 1}, "sain.Iterator.any": {"tf": 1}, "sain.Iterator.sort": {"tf": 1}, "sain.doc": {"tf": 1.4142135623730951}, "sain.Error": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}, "sain.error.Error": {"tf": 1}, "sain.iter.Iterator.take_while": {"tf": 1}, "sain.iter.Iterator.drop_while": {"tf": 1}, "sain.iter.Iterator.all": {"tf": 1}, "sain.iter.Iterator.any": {"tf": 1}, "sain.iter.Iterator.sort": {"tf": 1}, "sain.iter.Empty.any": {"tf": 1}, "sain.iter.Empty.all": {"tf": 1}, "sain.macros.doc": {"tf": 1.4142135623730951}, "sain.option.Some.unwrap_or_else": {"tf": 1}, "sain.option.Some.map": {"tf": 1}, "sain.option.Some.take_if": {"tf": 1}, "sain.result": {"tf": 1.4142135623730951}, "sain.sync.Once.set": {"tf": 1}, "sain.sync.AsyncOnce.set": {"tf": 1}}, "df": 27}}, "t": {"docs": {}, "df": 0, "h": {"docs": {"sain.Iterator.union": {"tf": 1}, "sain.Box.on_expire": {"tf": 1}, "sain.From": {"tf": 1}, "sain.boxed.Box.on_expire": {"tf": 1}, "sain.convert.From": {"tf": 1}, "sain.iter.Iterator.union": {"tf": 1}}, "df": 6}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"sain.Vec.get": {"tf": 1}, "sain.collections.Vec.get": {"tf": 1}, "sain.collections.vec.Vec.get": {"tf": 1}}, "df": 3}}}}, "x": {"docs": {"sain.Box": {"tf": 2.6457513110645907}, "sain.Box.on_expire": {"tf": 2.449489742783178}, "sain.Box.remaining": {"tf": 1.4142135623730951}, "sain.Box.get": {"tf": 1}, "sain.boxed": {"tf": 1}, "sain.boxed.Box": {"tf": 2.6457513110645907}, "sain.boxed.Box.on_expire": {"tf": 2.449489742783178}, "sain.boxed.Box.remaining": {"tf": 1.4142135623730951}, "sain.boxed.Box.get": {"tf": 1}}, "df": 9}}, "a": {"docs": {"sain.Iterator.take_while": {"tf": 1}, "sain.Iterator.drop_while": {"tf": 1.4142135623730951}, "sain.iter.Iterator.take_while": {"tf": 1}, "sain.iter.Iterator.drop_while": {"tf": 1.4142135623730951}}, "df": 4, "s": {"docs": {}, "df": 0, "e": {"docs": {"sain.Error": {"tf": 1}, "sain.error": {"tf": 1}, "sain.error.Error": {"tf": 1}}, "df": 3, "d": {"docs": {"sain.cfg_attr": {"tf": 1}, "sain.Vec.retain": {"tf": 1}, "sain.Vec.index": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.collections.Vec.retain": {"tf": 1}, "sain.collections.Vec.index": {"tf": 1}, "sain.collections.vec.Vec.retain": {"tf": 1}, "sain.collections.vec.Vec.index": {"tf": 1}}, "df": 8}}, "i": {"docs": {}, "df": 0, "c": {"docs": {"sain.Error.message": {"tf": 1}, "sain.collections": {"tf": 1}, "sain.collections.buf": {"tf": 1}, "sain.error.Error.message": {"tf": 1}}, "df": 4, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"sain.Iterator": {"tf": 1}, "sain.iter.Iterator": {"tf": 1}}, "df": 2}}}}}}}, "r": {"docs": {"sain.Ok.map_or": {"tf": 1}, "sain.Ok.map_or_else": {"tf": 1}, "sain.Vec": {"tf": 2.8284271247461903}, "sain.collections.Vec": {"tf": 2.8284271247461903}, "sain.collections.vec": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec": {"tf": 2.8284271247461903}, "sain.result.Ok.map_or": {"tf": 1}, "sain.result.Ok.map_or_else": {"tf": 1}}, "df": 8, "k": {"docs": {"sain.cfg_attr": {"tf": 1.4142135623730951}, "sain.cfg.cfg_attr": {"tf": 1.4142135623730951}}, "df": 2}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {"sain.Some": {"tf": 1}, "sain.From": {"tf": 1}, "sain.collections.Bytes": {"tf": 1}, "sain.collections.buf.Bytes": {"tf": 1}, "sain.convert": {"tf": 1.7320508075688772}, "sain.convert.From": {"tf": 1}, "sain.result": {"tf": 1}, "sain.sync.Once.get_or": {"tf": 1}, "sain.sync.Once.get_or_with": {"tf": 1}, "sain.sync.AsyncOnce.get_or": {"tf": 1}, "sain.sync.AsyncOnce.get_or_with": {"tf": 1}}, "df": 11}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"sain.Iter": {"tf": 1}, "sain.Vec": {"tf": 1}, "sain.collections.Vec": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1}, "sain.iter.Iter": {"tf": 1}}, "df": 5}, "t": {"docs": {"sain.collections": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "n": {"docs": {"sain.Vec": {"tf": 1}, "sain.collections.Vec": {"tf": 1}, "sain.collections.vec": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1}}, "df": 4}}}}}, "h": {"docs": {"sain.Ok.unwrap_err": {"tf": 1}, "sain.Ok.ok": {"tf": 1}, "sain.Ok.err": {"tf": 1}, "sain.result.Ok.unwrap_err": {"tf": 1}, "sain.result.Ok.ok": {"tf": 1}, "sain.result.Ok.err": {"tf": 1}}, "df": 6}, "f": {"docs": {"sain.collections.Bytes": {"tf": 1.4142135623730951}, "sain.collections.Bytes.try_to_str": {"tf": 1.7320508075688772}, "sain.collections.Bytes.to_str": {"tf": 1}, "sain.collections.Bytes.as_bytes": {"tf": 1.4142135623730951}, "sain.collections.Bytes.put": {"tf": 1.7320508075688772}, "sain.collections.Bytes.put_bytes": {"tf": 1.7320508075688772}, "sain.collections.Bytes.len": {"tf": 1.7320508075688772}, "sain.collections.Bytes.size": {"tf": 1.4142135623730951}, "sain.collections.Bytes.iter": {"tf": 1.4142135623730951}, "sain.collections.Bytes.clear": {"tf": 1.7320508075688772}, "sain.collections.Bytes.count": {"tf": 1.4142135623730951}, "sain.collections.Bytes.pop": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.try_to_str": {"tf": 1.7320508075688772}, "sain.collections.buf.Bytes.to_str": {"tf": 1}, "sain.collections.buf.Bytes.as_bytes": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.put": {"tf": 1.7320508075688772}, "sain.collections.buf.Bytes.put_bytes": {"tf": 1.7320508075688772}, "sain.collections.buf.Bytes.len": {"tf": 1.7320508075688772}, "sain.collections.buf.Bytes.size": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.iter": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.clear": {"tf": 1.7320508075688772}, "sain.collections.buf.Bytes.count": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.pop": {"tf": 1.4142135623730951}}, "df": 24, "f": {"docs": {"sain.collections.Bytes.from_raw": {"tf": 1}, "sain.collections.Bytes.to_str": {"tf": 1.4142135623730951}, "sain.collections.Bytes.as_ref": {"tf": 1.4142135623730951}, "sain.collections.Bytes.as_mut": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.from_raw": {"tf": 1}, "sain.collections.buf.Bytes.to_str": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.as_ref": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.as_mut": {"tf": 1.4142135623730951}}, "df": 8, "e": {"docs": {}, "df": 0, "r": {"1": {"docs": {"sain.collections.Bytes.from_raw": {"tf": 1}, "sain.collections.buf.Bytes.from_raw": {"tf": 1}}, "df": 2}, "2": {"docs": {"sain.collections.Bytes.from_raw": {"tf": 1}, "sain.collections.buf.Bytes.from_raw": {"tf": 1}}, "df": 2}, "docs": {"sain.MaybeUninit.write": {"tf": 1.7320508075688772}, "sain.collections.Bytes": {"tf": 2}, "sain.collections.Bytes.from_str": {"tf": 1.4142135623730951}, "sain.collections.Bytes.from_static": {"tf": 1}, "sain.collections.Bytes.from_bytes": {"tf": 1}, "sain.collections.Bytes.raw_parts": {"tf": 1}, "sain.collections.Bytes.put_raw": {"tf": 2}, "sain.collections.Bytes.put_bytes": {"tf": 1}, "sain.collections.Bytes.put_str": {"tf": 1.7320508075688772}, "sain.collections.Bytes.len": {"tf": 1}, "sain.collections.Bytes.is_empty": {"tf": 1.4142135623730951}, "sain.collections.Bytes.clear": {"tf": 1}, "sain.collections.Bytes.index": {"tf": 1}, "sain.collections.Bytes.count": {"tf": 1}, "sain.collections.Bytes.insert": {"tf": 1.4142135623730951}, "sain.collections.Bytes.pop": {"tf": 1}, "sain.collections.buf.Bytes": {"tf": 2}, "sain.collections.buf.Bytes.from_str": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.from_static": {"tf": 1}, "sain.collections.buf.Bytes.from_bytes": {"tf": 1}, "sain.collections.buf.Bytes.raw_parts": {"tf": 1}, "sain.collections.buf.Bytes.put_raw": {"tf": 2}, "sain.collections.buf.Bytes.put_bytes": {"tf": 1}, "sain.collections.buf.Bytes.put_str": {"tf": 1.7320508075688772}, "sain.collections.buf.Bytes.len": {"tf": 1}, "sain.collections.buf.Bytes.is_empty": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.clear": {"tf": 1}, "sain.collections.buf.Bytes.index": {"tf": 1}, "sain.collections.buf.Bytes.count": {"tf": 1}, "sain.collections.buf.Bytes.insert": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.pop": {"tf": 1}}, "df": 31, "s": {"docs": {"sain.collections.buf": {"tf": 1}}, "df": 1}, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sain.collections.buf.Rawish": {"tf": 1}}, "df": 1}}}}}}}}}}}}}, "y": {"docs": {"sain.Iterator": {"tf": 1}, "sain.Iterator.raw_parts": {"tf": 1}, "sain.Iterator.cloned": {"tf": 1}, "sain.Iterator.copied": {"tf": 1}, "sain.Iterator.sort": {"tf": 1}, "sain.Ok.map": {"tf": 1}, "sain.MaybeUninit": {"tf": 1}, "sain.MaybeUninit.assume_init": {"tf": 1}, "sain.error": {"tf": 1}, "sain.iter.Iterator": {"tf": 1}, "sain.iter.Iterator.raw_parts": {"tf": 1}, "sain.iter.Iterator.cloned": {"tf": 1}, "sain.iter.Iterator.copied": {"tf": 1}, "sain.iter.Iterator.sort": {"tf": 1}, "sain.iter.Cloned": {"tf": 1}, "sain.iter.Copied": {"tf": 1}, "sain.iter.Take": {"tf": 1}, "sain.iter.Filter": {"tf": 1}, "sain.iter.Map": {"tf": 1}, "sain.iter.Skip": {"tf": 1}, "sain.iter.Enumerate": {"tf": 1}, "sain.iter.TakeWhile": {"tf": 1}, "sain.iter.DropWhile": {"tf": 1}, "sain.iter.Empty": {"tf": 1}, "sain.result.Ok.map": {"tf": 1}}, "df": 25, "e": {"docs": {"sain.Some.and_ok": {"tf": 1.7320508075688772}, "sain.option.Some.and_ok": {"tf": 1.7320508075688772}}, "df": 2}, "t": {"docs": {}, "df": 0, "e": {"docs": {"sain.collections.Bytes.from_raw": {"tf": 1}, "sain.collections.Bytes.put": {"tf": 2}, "sain.collections.Bytes.put_raw": {"tf": 1}, "sain.collections.Bytes.put_bytes": {"tf": 1}, "sain.collections.Bytes.iter": {"tf": 1}, "sain.collections.buf": {"tf": 1}, "sain.collections.buf.Bytes.from_raw": {"tf": 1}, "sain.collections.buf.Bytes.put": {"tf": 2}, "sain.collections.buf.Bytes.put_raw": {"tf": 1}, "sain.collections.buf.Bytes.put_bytes": {"tf": 1}, "sain.collections.buf.Bytes.iter": {"tf": 1}}, "df": 11, "s": {"docs": {"sain.MaybeUninit.write": {"tf": 1.7320508075688772}, "sain.collections": {"tf": 1.7320508075688772}, "sain.collections.Bytes": {"tf": 3.872983346207417}, "sain.collections.Bytes.__init__": {"tf": 1.4142135623730951}, "sain.collections.Bytes.from_str": {"tf": 1.4142135623730951}, "sain.collections.Bytes.from_static": {"tf": 1.7320508075688772}, "sain.collections.Bytes.from_bytes": {"tf": 2}, "sain.collections.Bytes.from_raw": {"tf": 2.6457513110645907}, "sain.collections.Bytes.try_to_str": {"tf": 2.8284271247461903}, "sain.collections.Bytes.to_str": {"tf": 3.1622776601683795}, "sain.collections.Bytes.leak": {"tf": 2.23606797749979}, "sain.collections.Bytes.as_bytes": {"tf": 1.7320508075688772}, "sain.collections.Bytes.as_ref": {"tf": 1}, "sain.collections.Bytes.as_mut": {"tf": 1}, "sain.collections.Bytes.raw_parts": {"tf": 1}, "sain.collections.Bytes.put": {"tf": 1.7320508075688772}, "sain.collections.Bytes.put_raw": {"tf": 1.4142135623730951}, "sain.collections.Bytes.put_bytes": {"tf": 2.449489742783178}, "sain.collections.Bytes.put_str": {"tf": 1.4142135623730951}, "sain.collections.Bytes.len": {"tf": 1}, "sain.collections.Bytes.size": {"tf": 1.4142135623730951}, "sain.collections.Bytes.iter": {"tf": 1.4142135623730951}, "sain.collections.Bytes.is_empty": {"tf": 1.4142135623730951}, "sain.collections.Bytes.copy": {"tf": 1.4142135623730951}, "sain.collections.Bytes.clear": {"tf": 1}, "sain.collections.Bytes.count": {"tf": 1}, "sain.collections.Bytes.pop": {"tf": 1}, "sain.collections.buf.Bytes": {"tf": 3.872983346207417}, "sain.collections.buf.Bytes.__init__": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.from_str": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.from_static": {"tf": 1.7320508075688772}, "sain.collections.buf.Bytes.from_bytes": {"tf": 2}, "sain.collections.buf.Bytes.from_raw": {"tf": 2.6457513110645907}, "sain.collections.buf.Bytes.try_to_str": {"tf": 2.8284271247461903}, "sain.collections.buf.Bytes.to_str": {"tf": 3.1622776601683795}, "sain.collections.buf.Bytes.leak": {"tf": 2.23606797749979}, "sain.collections.buf.Bytes.as_bytes": {"tf": 1.7320508075688772}, "sain.collections.buf.Bytes.as_ref": {"tf": 1}, "sain.collections.buf.Bytes.as_mut": {"tf": 1}, "sain.collections.buf.Bytes.raw_parts": {"tf": 1}, "sain.collections.buf.Bytes.put": {"tf": 1.7320508075688772}, "sain.collections.buf.Bytes.put_raw": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.put_bytes": {"tf": 2.449489742783178}, "sain.collections.buf.Bytes.put_str": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.len": {"tf": 1}, "sain.collections.buf.Bytes.size": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.iter": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.is_empty": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.copy": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.clear": {"tf": 1}, "sain.collections.buf.Bytes.count": {"tf": 1}, "sain.collections.buf.Bytes.pop": {"tf": 1}, "sain.collections.buf.Buffer": {"tf": 1.7320508075688772}, "sain.convert": {"tf": 3.1622776601683795}}, "df": 54, "i": {"docs": {}, "df": 0, "o": {"docs": {"sain.collections.Bytes.from_raw": {"tf": 1}, "sain.collections.Bytes.put_raw": {"tf": 1}, "sain.collections.buf.Bytes.from_raw": {"tf": 1}, "sain.collections.buf.Bytes.put_raw": {"tf": 1}, "sain.collections.buf.Rawish": {"tf": 1}}, "df": 5}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {"sain.collections": {"tf": 1.4142135623730951}, "sain.collections.Bytes.put_bytes": {"tf": 1}, "sain.collections.buf.Bytes.put_bytes": {"tf": 1}, "sain.collections.buf.Buffer": {"tf": 1}}, "df": 4}}}}}}}}, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"sain.Ok.map_err": {"tf": 1.4142135623730951}, "sain.Ok.iter": {"tf": 1.4142135623730951}, "sain.result.Ok.map_err": {"tf": 1.4142135623730951}, "sain.result.Ok.iter": {"tf": 1.4142135623730951}}, "df": 4}, "h": {"docs": {"sain.Box.on_expire": {"tf": 1.7320508075688772}, "sain.boxed.Box.on_expire": {"tf": 1.7320508075688772}}, "df": 2}}, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {"sain.sync.Once.get": {"tf": 1}, "sain.sync.Once.set": {"tf": 1}, "sain.sync.AsyncOnce.get": {"tf": 1}}, "df": 3}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {"sain.Vec": {"tf": 1}, "sain.collections.Vec": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1}, "sain.convert": {"tf": 1}}, "df": 4}}}, "r": {"docs": {"sain.Iterator.async_for_each": {"tf": 1.4142135623730951}, "sain.iter.Iterator.async_for_each": {"tf": 1.4142135623730951}, "sain.result": {"tf": 1}}, "df": 3, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"sain": {"tf": 1.4142135623730951}, "sain.Iter": {"tf": 1}, "sain.Iterator": {"tf": 1}, "sain.MaybeUninit": {"tf": 1}, "sain.From": {"tf": 1}, "sain.collections": {"tf": 1}, "sain.convert.From": {"tf": 1}, "sain.iter.Iter": {"tf": 1}, "sain.iter.Iterator": {"tf": 1}, "sain.option": {"tf": 1}}, "df": 10}}, "n": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}, "sain.sync.Lazy": {"tf": 1.4142135623730951}, "sain.sync.LazyFuture": {"tf": 1.4142135623730951}}, "df": 6, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"sain.cfg_attr": {"tf": 1}, "sain.deprecated": {"tf": 1.4142135623730951}, "sain.unimplemented": {"tf": 1}, "sain.cfg": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.macros": {"tf": 1}, "sain.macros.deprecated": {"tf": 1.4142135623730951}, "sain.macros.unimplemented": {"tf": 1}, "sain.sync.Lazy": {"tf": 1.7320508075688772}, "sain.sync.LazyFuture": {"tf": 1.7320508075688772}}, "df": 10, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"sain.cfg_attr": {"tf": 2.23606797749979}, "sain.Some.unwrap": {"tf": 1.7320508075688772}, "sain.Some.expect": {"tf": 1.4142135623730951}, "sain.Ok.expect": {"tf": 1.4142135623730951}, "sain.Ok.unwrap": {"tf": 1.4142135623730951}, "sain.Ok.unwrap_err": {"tf": 1}, "sain.Vec.split_off": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 2.23606797749979}, "sain.collections.Vec.split_off": {"tf": 1}, "sain.collections.vec.Vec.split_off": {"tf": 1}, "sain.error": {"tf": 1.4142135623730951}, "sain.option.Some.unwrap": {"tf": 1.7320508075688772}, "sain.option.Some.expect": {"tf": 1.4142135623730951}, "sain.result.Ok.expect": {"tf": 1.4142135623730951}, "sain.result.Ok.unwrap": {"tf": 1.4142135623730951}, "sain.result.Ok.unwrap_err": {"tf": 1}}, "df": 16}}}}}}}}}}}, "e": {"docs": {"sain.Some.as_ref": {"tf": 1}, "sain.Vec": {"tf": 1.4142135623730951}, "sain.Error": {"tf": 1}, "sain.collections": {"tf": 1}, "sain.collections.Vec": {"tf": 1.4142135623730951}, "sain.collections.Bytes.to_str": {"tf": 1}, "sain.collections.Bytes.put": {"tf": 1}, "sain.collections.buf.Bytes.to_str": {"tf": 1}, "sain.collections.buf.Bytes.put": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1.4142135623730951}, "sain.error.Error": {"tf": 1}, "sain.option.Some.as_ref": {"tf": 1}}, "df": 12, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"sain": {"tf": 1}, "sain.Ok.is_ok": {"tf": 1}, "sain.Ok.is_ok_and": {"tf": 1}, "sain.Ok.is_err": {"tf": 1}, "sain.Ok.is_err_and": {"tf": 1}, "sain.Ok.expect": {"tf": 1.4142135623730951}, "sain.Ok.unwrap": {"tf": 1.4142135623730951}, "sain.Ok.unwrap_or": {"tf": 1.4142135623730951}, "sain.Ok.unwrap_or_else": {"tf": 1.4142135623730951}, "sain.Ok.unwrap_err": {"tf": 1.4142135623730951}, "sain.Ok.ok": {"tf": 1.4142135623730951}, "sain.Ok.err": {"tf": 1.4142135623730951}, "sain.Ok.inspect": {"tf": 1.4142135623730951}, "sain.Ok.inspect_err": {"tf": 1.4142135623730951}, "sain.Ok.map": {"tf": 1.4142135623730951}, "sain.Ok.map_or": {"tf": 1.4142135623730951}, "sain.Ok.map_or_else": {"tf": 1.4142135623730951}, "sain.Ok.map_err": {"tf": 1.4142135623730951}, "sain.Ok.iter": {"tf": 1.4142135623730951}, "sain.Err": {"tf": 1}, "sain.Err.is_ok": {"tf": 1}, "sain.Err.is_ok_and": {"tf": 1}, "sain.Err.is_err": {"tf": 1}, "sain.Err.is_err_and": {"tf": 1}, "sain.Error": {"tf": 1.4142135623730951}, "sain.TryFrom": {"tf": 1.4142135623730951}, "sain.TryInto": {"tf": 1.4142135623730951}, "sain.convert": {"tf": 1}, "sain.convert.TryFrom": {"tf": 1.4142135623730951}, "sain.convert.TryInto": {"tf": 1.4142135623730951}, "sain.error": {"tf": 1}, "sain.error.Error": {"tf": 1.4142135623730951}, "sain.futures.spawn": {"tf": 1}, "sain.result": {"tf": 3}, "sain.result.Ok.is_ok": {"tf": 1}, "sain.result.Ok.is_ok_and": {"tf": 1}, "sain.result.Ok.is_err": {"tf": 1}, "sain.result.Ok.is_err_and": {"tf": 1}, "sain.result.Ok.expect": {"tf": 1.4142135623730951}, "sain.result.Ok.unwrap": {"tf": 1.4142135623730951}, "sain.result.Ok.unwrap_or": {"tf": 1.4142135623730951}, "sain.result.Ok.unwrap_or_else": {"tf": 1.4142135623730951}, "sain.result.Ok.unwrap_err": {"tf": 1.4142135623730951}, "sain.result.Ok.ok": {"tf": 1.4142135623730951}, "sain.result.Ok.err": {"tf": 1.4142135623730951}, "sain.result.Ok.inspect": {"tf": 1.4142135623730951}, "sain.result.Ok.inspect_err": {"tf": 1.4142135623730951}, "sain.result.Ok.map": {"tf": 1.4142135623730951}, "sain.result.Ok.map_or": {"tf": 1.4142135623730951}, "sain.result.Ok.map_or_else": {"tf": 1.4142135623730951}, "sain.result.Ok.map_err": {"tf": 1.4142135623730951}, "sain.result.Ok.iter": {"tf": 1.4142135623730951}, "sain.result.Err": {"tf": 1}, "sain.result.Err.is_ok": {"tf": 1}, "sain.result.Err.is_ok_and": {"tf": 1}, "sain.result.Err.is_err": {"tf": 1}, "sain.result.Err.is_err_and": {"tf": 1}}, "df": 57, "s": {"docs": {"sain.Iter": {"tf": 1.4142135623730951}, "sain.Iterator.async_for_each": {"tf": 1.4142135623730951}, "sain.iter.Iter": {"tf": 1.4142135623730951}, "sain.iter.Iterator.async_for_each": {"tf": 1.4142135623730951}}, "df": 4}, "[": {"docs": {}, "df": 0, "t": {"docs": {"sain.Ok": {"tf": 1}, "sain.Ok.map_err": {"tf": 1.4142135623730951}, "sain.Error": {"tf": 1}, "sain.error": {"tf": 1}, "sain.error.Error": {"tf": 1}, "sain.futures.spawn": {"tf": 1}, "sain.result": {"tf": 1}, "sain.result.Ok": {"tf": 1}, "sain.result.Ok.map_err": {"tf": 1.4142135623730951}}, "df": 9}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {"sain.collections.Bytes.try_to_str": {"tf": 1}, "sain.collections.buf.Bytes.try_to_str": {"tf": 1}}, "df": 2}}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"sain.sync.Once.set": {"tf": 1}, "sain.sync.AsyncOnce.set": {"tf": 1}}, "df": 2}}}}}}}}, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"sain.Iterator": {"tf": 1.4142135623730951}, "sain.Error": {"tf": 3.7416573867739413}, "sain.MaybeUninit.write": {"tf": 1.7320508075688772}, "sain.error": {"tf": 1.4142135623730951}, "sain.error.Error": {"tf": 3.7416573867739413}, "sain.iter.Iterator": {"tf": 1.4142135623730951}}, "df": 6, "s": {"docs": {"sain.Error": {"tf": 1}, "sain.error.Error": {"tf": 1}}, "df": 2}}, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sain.MaybeUninit": {"tf": 1}, "sain.macros.unsafe": {"tf": 1}}, "df": 2}}}}}}}}, "t": {"docs": {"sain.Iterator.take_while": {"tf": 1}, "sain.Vec.split_first": {"tf": 1}, "sain.Vec.truncate": {"tf": 1}, "sain.collections.Vec.split_first": {"tf": 1}, "sain.collections.Vec.truncate": {"tf": 1}, "sain.collections.vec.Vec.split_first": {"tf": 1}, "sain.collections.vec.Vec.truncate": {"tf": 1}, "sain.iter.Iterator.take_while": {"tf": 1}, "sain.iter.Take": {"tf": 1}, "sain.iter.Skip": {"tf": 1}}, "df": 10}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"sain.Vec.reserve": {"tf": 1.7320508075688772}, "sain.collections.Vec.reserve": {"tf": 1.7320508075688772}, "sain.collections.vec.Vec.reserve": {"tf": 1.7320508075688772}}, "df": 3, "s": {"docs": {"sain.Vec.reserve": {"tf": 1}, "sain.collections.Vec.reserve": {"tf": 1}, "sain.collections.vec.Vec.reserve": {"tf": 1}}, "df": 3}}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sain.Error": {"tf": 1}, "sain.error.Error": {"tf": 1}}, "df": 2, "f": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {"sain.Error": {"tf": 2}, "sain.error.Error": {"tf": 2}}, "df": 2}}}}}}}}}, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {"sain.cfg": {"tf": 1}, "sain.Default": {"tf": 1}, "sain.Default.default": {"tf": 1}, "sain.Some": {"tf": 1}, "sain.Some.map_or": {"tf": 1}, "sain.Some.map_or_else": {"tf": 1.4142135623730951}, "sain.Some.take_if": {"tf": 1}, "sain.Some.and_ok": {"tf": 1}, "sain.Some.and_then": {"tf": 1}, "sain.Iter.clone": {"tf": 1}, "sain.Iterator": {"tf": 1}, "sain.Iterator.default": {"tf": 1}, "sain.Iterator.all": {"tf": 1}, "sain.Iterator.count": {"tf": 1}, "sain.Iterator.async_for_each": {"tf": 1}, "sain.Ok.expect": {"tf": 1}, "sain.Ok.unwrap": {"tf": 1}, "sain.Ok.unwrap_or": {"tf": 1}, "sain.Ok.unwrap_or_else": {"tf": 1}, "sain.Ok.unwrap_err": {"tf": 1}, "sain.Ok.iter": {"tf": 1.7320508075688772}, "sain.Vec.as_ref": {"tf": 1}, "sain.Vec.len": {"tf": 1}, "sain.Vec.capacity": {"tf": 1}, "sain.Vec.iter": {"tf": 1}, "sain.Vec.swap_remove": {"tf": 1}, "sain.Vec.index": {"tf": 1}, "sain.Vec.count": {"tf": 1}, "sain.Error": {"tf": 2.6457513110645907}, "sain.MaybeUninit.write": {"tf": 1}, "sain.From": {"tf": 1}, "sain.TryFrom": {"tf": 2}, "sain.Into": {"tf": 1}, "sain.TryInto": {"tf": 2}, "sain.cfg.cfg": {"tf": 1}, "sain.collections.Vec.as_ref": {"tf": 1}, "sain.collections.Vec.len": {"tf": 1}, "sain.collections.Vec.capacity": {"tf": 1}, "sain.collections.Vec.iter": {"tf": 1}, "sain.collections.Vec.swap_remove": {"tf": 1}, "sain.collections.Vec.index": {"tf": 1}, "sain.collections.Vec.count": {"tf": 1}, "sain.collections.Bytes.as_mut": {"tf": 1}, "sain.collections.Bytes.raw_parts": {"tf": 1}, "sain.collections.Bytes.len": {"tf": 1}, "sain.collections.Bytes.index": {"tf": 1}, "sain.collections.Bytes.count": {"tf": 1}, "sain.collections.buf.Bytes.as_mut": {"tf": 1}, "sain.collections.buf.Bytes.raw_parts": {"tf": 1}, "sain.collections.buf.Bytes.len": {"tf": 1}, "sain.collections.buf.Bytes.index": {"tf": 1}, "sain.collections.buf.Bytes.count": {"tf": 1}, "sain.collections.vec.Vec.as_ref": {"tf": 1}, "sain.collections.vec.Vec.len": {"tf": 1}, "sain.collections.vec.Vec.capacity": {"tf": 1}, "sain.collections.vec.Vec.iter": {"tf": 1}, "sain.collections.vec.Vec.swap_remove": {"tf": 1}, "sain.collections.vec.Vec.index": {"tf": 1}, "sain.collections.vec.Vec.count": {"tf": 1}, "sain.convert": {"tf": 2.23606797749979}, "sain.convert.From": {"tf": 1}, "sain.convert.TryFrom": {"tf": 2}, "sain.convert.Into": {"tf": 1}, "sain.convert.TryInto": {"tf": 2}, "sain.default": {"tf": 1}, "sain.default.Default": {"tf": 1}, "sain.default.Default.default": {"tf": 1}, "sain.error.Error": {"tf": 2.6457513110645907}, "sain.futures.spawn": {"tf": 1}, "sain.iter.Iter.clone": {"tf": 1}, "sain.iter.Iterator": {"tf": 1}, "sain.iter.Iterator.default": {"tf": 1}, "sain.iter.Iterator.all": {"tf": 1}, "sain.iter.Iterator.count": {"tf": 1}, "sain.iter.Iterator.async_for_each": {"tf": 1}, "sain.iter.Empty.count": {"tf": 1}, "sain.iter.Empty.all": {"tf": 1}, "sain.option.Some": {"tf": 1}, "sain.option.Some.default": {"tf": 1}, "sain.option.Some.map_or": {"tf": 1}, "sain.option.Some.map_or_else": {"tf": 1.4142135623730951}, "sain.option.Some.take_if": {"tf": 1}, "sain.option.Some.and_ok": {"tf": 1}, "sain.option.Some.and_then": {"tf": 1}, "sain.result": {"tf": 2}, "sain.result.Ok.expect": {"tf": 1}, "sain.result.Ok.unwrap": {"tf": 1}, "sain.result.Ok.unwrap_or": {"tf": 1}, "sain.result.Ok.unwrap_or_else": {"tf": 1}, "sain.result.Ok.unwrap_err": {"tf": 1}, "sain.result.Ok.iter": {"tf": 1.7320508075688772}, "sain.sync.Lazy.get": {"tf": 1}, "sain.sync.LazyFuture.get": {"tf": 1}}, "df": 93, "s": {"docs": {"sain.cfg": {"tf": 1.4142135623730951}, "sain.cfg_attr": {"tf": 1.4142135623730951}, "sain.Some.default": {"tf": 1}, "sain.Some.unwrap_unchecked": {"tf": 1}, "sain.Some.expect": {"tf": 1}, "sain.Some.filter": {"tf": 1.7320508075688772}, "sain.Some.take_if": {"tf": 1}, "sain.Some.and_ok": {"tf": 1}, "sain.Some.and_then": {"tf": 1}, "sain.Some.iter": {"tf": 1}, "sain.Some.as_ref": {"tf": 1.4142135623730951}, "sain.Some.as_mut": {"tf": 1.4142135623730951}, "sain.Some.is_some": {"tf": 1.4142135623730951}, "sain.Some.is_some_and": {"tf": 1.7320508075688772}, "sain.Some.is_none": {"tf": 1.4142135623730951}, "sain.Iterator.default": {"tf": 1}, "sain.Iterator.cloned": {"tf": 1}, "sain.Iterator.take_while": {"tf": 1.4142135623730951}, "sain.Iterator.drop_while": {"tf": 1}, "sain.Iterator.zip": {"tf": 1}, "sain.Iterator.reversed": {"tf": 1}, "sain.Iterator.union": {"tf": 1}, "sain.Iterator.first": {"tf": 1}, "sain.Iterator.last": {"tf": 1}, "sain.Ok.is_ok": {"tf": 1}, "sain.Ok.is_ok_and": {"tf": 1.4142135623730951}, "sain.Ok.is_err": {"tf": 1}, "sain.Ok.is_err_and": {"tf": 1.4142135623730951}, "sain.Ok.map_or": {"tf": 1}, "sain.Ok.map_or_else": {"tf": 1}, "sain.Err.is_ok": {"tf": 1}, "sain.Err.is_ok_and": {"tf": 1.4142135623730951}, "sain.Err.is_err": {"tf": 1}, "sain.Err.is_err_and": {"tf": 1.4142135623730951}, "sain.Vec.is_empty": {"tf": 1}, "sain.Vec.retain": {"tf": 1}, "sain.Vec.pop": {"tf": 1}, "sain.Error": {"tf": 1}, "sain.Box.has_expired": {"tf": 1}, "sain.Box.remaining": {"tf": 1}, "sain.boxed.Box.has_expired": {"tf": 1}, "sain.boxed.Box.remaining": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1.4142135623730951}, "sain.cfg.cfg": {"tf": 1.4142135623730951}, "sain.collections.Vec.is_empty": {"tf": 1}, "sain.collections.Vec.retain": {"tf": 1}, "sain.collections.Vec.pop": {"tf": 1}, "sain.collections.Bytes.try_to_str": {"tf": 1.4142135623730951}, "sain.collections.Bytes.iter": {"tf": 1}, "sain.collections.Bytes.pop": {"tf": 1}, "sain.collections.buf.Bytes.try_to_str": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.iter": {"tf": 1}, "sain.collections.buf.Bytes.pop": {"tf": 1}, "sain.collections.vec.Vec.is_empty": {"tf": 1}, "sain.collections.vec.Vec.retain": {"tf": 1}, "sain.collections.vec.Vec.pop": {"tf": 1}, "sain.error.Error": {"tf": 1}, "sain.futures.spawn": {"tf": 1}, "sain.futures.loop": {"tf": 1}, "sain.iter.Iterator.default": {"tf": 1}, "sain.iter.Iterator.cloned": {"tf": 1}, "sain.iter.Iterator.take_while": {"tf": 1.4142135623730951}, "sain.iter.Iterator.drop_while": {"tf": 1}, "sain.iter.Iterator.zip": {"tf": 1}, "sain.iter.Iterator.reversed": {"tf": 1}, "sain.iter.Iterator.union": {"tf": 1}, "sain.iter.Iterator.first": {"tf": 1}, "sain.iter.Iterator.last": {"tf": 1}, "sain.iter.TakeWhile": {"tf": 1}, "sain.iter.DropWhile": {"tf": 1}, "sain.iter.once": {"tf": 1}, "sain.iter.repeat": {"tf": 1}, "sain.option.Some.unwrap_unchecked": {"tf": 1}, "sain.option.Some.expect": {"tf": 1}, "sain.option.Some.filter": {"tf": 1.7320508075688772}, "sain.option.Some.take_if": {"tf": 1}, "sain.option.Some.and_ok": {"tf": 1}, "sain.option.Some.and_then": {"tf": 1}, "sain.option.Some.iter": {"tf": 1}, "sain.option.Some.as_ref": {"tf": 1.4142135623730951}, "sain.option.Some.as_mut": {"tf": 1.4142135623730951}, "sain.option.Some.is_some": {"tf": 1.4142135623730951}, "sain.option.Some.is_some_and": {"tf": 1.7320508075688772}, "sain.option.Some.is_none": {"tf": 1.4142135623730951}, "sain.result.Ok.is_ok": {"tf": 1}, "sain.result.Ok.is_ok_and": {"tf": 1.4142135623730951}, "sain.result.Ok.is_err": {"tf": 1}, "sain.result.Ok.is_err_and": {"tf": 1.4142135623730951}, "sain.result.Ok.map_or": {"tf": 1}, "sain.result.Ok.map_or_else": {"tf": 1}, "sain.result.Err.is_ok": {"tf": 1}, "sain.result.Err.is_ok_and": {"tf": 1.4142135623730951}, "sain.result.Err.is_err": {"tf": 1}, "sain.result.Err.is_err_and": {"tf": 1.4142135623730951}, "sain.sync.Once": {"tf": 1}, "sain.sync.Once.set": {"tf": 1.7320508075688772}, "sain.sync.Once.get_or": {"tf": 1}, "sain.sync.AsyncOnce": {"tf": 1}, "sain.sync.AsyncOnce.set": {"tf": 1.7320508075688772}}, "df": 99}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.Some.into_inner": {"tf": 1}, "sain.Some.unwrap": {"tf": 1}, "sain.Some.unwrap_or": {"tf": 1.4142135623730951}, "sain.Some.unwrap_or_else": {"tf": 1}, "sain.Some.map": {"tf": 1}, "sain.Iterator.next": {"tf": 1}, "sain.Ok.unwrap_or": {"tf": 1}, "sain.Vec.first": {"tf": 1}, "sain.collections.Vec.first": {"tf": 1}, "sain.collections.Bytes.leak": {"tf": 1}, "sain.collections.buf.Bytes.leak": {"tf": 1}, "sain.collections.vec.Vec.first": {"tf": 1}, "sain.iter.Iterator.next": {"tf": 1}, "sain.iter.Empty.next": {"tf": 1}, "sain.option.Some.into_inner": {"tf": 1}, "sain.option.Some.unwrap": {"tf": 1}, "sain.option.Some.unwrap_or": {"tf": 1.4142135623730951}, "sain.option.Some.unwrap_or_else": {"tf": 1}, "sain.option.Some.map": {"tf": 1}, "sain.result.Ok.unwrap_or": {"tf": 1}, "sain.sync.Once.get": {"tf": 1}, "sain.sync.Once.set": {"tf": 1}, "sain.sync.Once.get_or": {"tf": 1}, "sain.sync.AsyncOnce.set": {"tf": 1}}, "df": 24}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.Iterator.collect": {"tf": 1}, "sain.Vec.split_off": {"tf": 1}, "sain.Vec.split_first": {"tf": 1}, "sain.Vec.push_within_capacity": {"tf": 1}, "sain.Vec.copy": {"tf": 1}, "sain.Vec.count": {"tf": 1}, "sain.Error": {"tf": 1}, "sain.Box.get": {"tf": 1}, "sain.boxed.Box.get": {"tf": 1}, "sain.collections.Vec.split_off": {"tf": 1}, "sain.collections.Vec.split_first": {"tf": 1}, "sain.collections.Vec.push_within_capacity": {"tf": 1}, "sain.collections.Vec.copy": {"tf": 1}, "sain.collections.Vec.count": {"tf": 1}, "sain.collections.Bytes.__init__": {"tf": 1}, "sain.collections.Bytes.from_static": {"tf": 1}, "sain.collections.Bytes.leak": {"tf": 1}, "sain.collections.Bytes.as_ref": {"tf": 1}, "sain.collections.Bytes.as_mut": {"tf": 1}, "sain.collections.buf.Bytes.__init__": {"tf": 1}, "sain.collections.buf.Bytes.from_static": {"tf": 1}, "sain.collections.buf.Bytes.leak": {"tf": 1}, "sain.collections.buf.Bytes.as_ref": {"tf": 1}, "sain.collections.buf.Bytes.as_mut": {"tf": 1}, "sain.collections.vec.Vec.split_off": {"tf": 1}, "sain.collections.vec.Vec.split_first": {"tf": 1}, "sain.collections.vec.Vec.push_within_capacity": {"tf": 1}, "sain.collections.vec.Vec.copy": {"tf": 1}, "sain.collections.vec.Vec.count": {"tf": 1}, "sain.error": {"tf": 1.4142135623730951}, "sain.error.Error": {"tf": 1}, "sain.iter.Iterator.collect": {"tf": 1}, "sain.result": {"tf": 1}, "sain.sync.AsyncOnce.get": {"tf": 1}}, "df": 34}}}}}, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"sain.Vec.retain": {"tf": 1}, "sain.collections.Vec.retain": {"tf": 1}, "sain.collections.vec.Vec.retain": {"tf": 1}}, "df": 3}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.cfg": {"tf": 2}, "sain.cfg_attr": {"tf": 2}, "sain.Some.unwrap_or": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 2}, "sain.cfg.cfg": {"tf": 2}, "sain.option.Some.unwrap_or": {"tf": 1}}, "df": 6}, "s": {"docs": {"sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}}, "df": 2}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"sain.Iterator.async_for_each": {"tf": 1}, "sain.Error": {"tf": 2.6457513110645907}, "sain.error.Error": {"tf": 2.6457513110645907}, "sain.iter.Iterator.async_for_each": {"tf": 1}}, "df": 4, "s": {"docs": {"sain.Iterator": {"tf": 1.4142135623730951}, "sain.Error": {"tf": 2}, "sain.MaybeUninit.write": {"tf": 1}, "sain.error": {"tf": 1}, "sain.error.Error": {"tf": 2}, "sain.iter.Iterator": {"tf": 1.4142135623730951}}, "df": 6}}}}}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sain.Some.replace": {"tf": 1.4142135623730951}, "sain.collections": {"tf": 1.4142135623730951}, "sain.option.Some.replace": {"tf": 1.4142135623730951}}, "df": 3, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"sain.Some": {"tf": 1}, "sain.collections.Bytes.to_str": {"tf": 1}, "sain.collections.buf.Bytes.to_str": {"tf": 1}, "sain.result": {"tf": 1}}, "df": 4}}}}, "d": {"docs": {"sain.sync.Lazy": {"tf": 1}, "sain.sync.LazyFuture": {"tf": 1}}, "df": 2}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.collections.Bytes.size": {"tf": 1}, "sain.collections.buf.Bytes.size": {"tf": 1}}, "df": 2}}}}}, "s": {"docs": {"sain.result": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"sain.iter.repeat": {"tf": 1}}, "df": 1}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.Some.unwrap": {"tf": 1}, "sain.option.Some.unwrap": {"tf": 1}}, "df": 2}}}}}}}}, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"sain.From": {"tf": 1}, "sain.TryFrom": {"tf": 1}, "sain.convert.From": {"tf": 1}, "sain.convert.TryFrom": {"tf": 1}}, "df": 4}}}}}}}}, "f": {"docs": {"sain.Some.as_ref": {"tf": 1.4142135623730951}, "sain.Vec.as_ref": {"tf": 1}, "sain.collections.Vec.as_ref": {"tf": 1}, "sain.collections.Bytes.from_str": {"tf": 1}, "sain.collections.Bytes.as_ref": {"tf": 1}, "sain.collections.buf.Bytes.from_str": {"tf": 1}, "sain.collections.buf.Bytes.as_ref": {"tf": 1}, "sain.collections.vec.Vec.as_ref": {"tf": 1}, "sain.option.Some.as_ref": {"tf": 1.4142135623730951}}, "df": 9, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"sain.Some.as_mut": {"tf": 1}, "sain.option.Some.as_mut": {"tf": 1}}, "df": 2, "[": {"docs": {}, "df": 0, "t": {"docs": {"sain.Some.as_mut": {"tf": 1}, "sain.option.Some.as_mut": {"tf": 1}}, "df": 2}}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sain.Iterator.cloned": {"tf": 1}, "sain.Iterator.copied": {"tf": 1}, "sain.iter.Iterator.cloned": {"tf": 1}, "sain.iter.Iterator.copied": {"tf": 1}}, "df": 4}}}}}}}, "a": {"docs": {}, "df": 0, "d": {"docs": {"sain.doc": {"tf": 1}, "sain.error": {"tf": 1}, "sain.macros.doc": {"tf": 1}, "sain.result": {"tf": 2}}, "df": 4, "y": {"docs": {"sain.Iter": {"tf": 1}, "sain.Iterator": {"tf": 1}, "sain.iter.Iter": {"tf": 1}, "sain.iter.Iterator": {"tf": 1}, "sain.result": {"tf": 1}}, "df": 5}, "m": {"docs": {}, "df": 0, "e": {"docs": {"sain.doc": {"tf": 1}, "sain.macros.doc": {"tf": 1}}, "df": 2}}, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sain.result": {"tf": 1.7320508075688772}}, "df": 1}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"sain.result": {"tf": 1}}, "df": 1}}}}}, "/": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"sain.result": {"tf": 1}}, "df": 1}}}}}}}, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.Vec.push_within_capacity": {"tf": 1}, "sain.collections.Vec.push_within_capacity": {"tf": 1}, "sain.collections.vec.Vec.push_within_capacity": {"tf": 1}}, "df": 3}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"sain.MaybeUninit": {"tf": 1}}, "df": 1}}}, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.result": {"tf": 1.7320508075688772}}, "df": 1}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"sain.Iterator.sort": {"tf": 1.4142135623730951}, "sain.Iterator.reversed": {"tf": 1}, "sain.iter.Iterator.sort": {"tf": 1.4142135623730951}, "sain.iter.Iterator.reversed": {"tf": 1}}, "df": 4, "d": {"docs": {"sain.Iterator.reversed": {"tf": 1}, "sain.iter.Iterator.reversed": {"tf": 1}, "sain.iter.into_iter": {"tf": 1}}, "df": 3}}}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"sain.Vec.retain": {"tf": 1}, "sain.Vec.swap_remove": {"tf": 1.4142135623730951}, "sain.Vec.remove": {"tf": 1.4142135623730951}, "sain.collections.Vec.retain": {"tf": 1}, "sain.collections.Vec.swap_remove": {"tf": 1.4142135623730951}, "sain.collections.Vec.remove": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.retain": {"tf": 1}, "sain.collections.vec.Vec.swap_remove": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.remove": {"tf": 1.4142135623730951}}, "df": 9, "d": {"docs": {"sain.deprecated": {"tf": 1.7320508075688772}, "sain.macros.deprecated": {"tf": 1.7320508075688772}}, "df": 2}, "s": {"docs": {"sain.Vec.pop": {"tf": 1}, "sain.collections.Vec.pop": {"tf": 1}, "sain.collections.Bytes.pop": {"tf": 1}, "sain.collections.buf.Bytes.pop": {"tf": 1}, "sain.collections.vec.Vec.pop": {"tf": 1}}, "df": 5}}}}, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.Box.remaining": {"tf": 1}, "sain.boxed.Box.remaining": {"tf": 1}}, "df": 2}}}}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"sain.unimplemented": {"tf": 1}, "sain.macros.unimplemented": {"tf": 1}}, "df": 2}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"sain.collections.Bytes.insert": {"tf": 1}, "sain.collections.buf.Bytes.insert": {"tf": 1}}, "df": 2}}}}}}}, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"sain.cfg": {"tf": 1}, "sain.Some": {"tf": 1}, "sain.todo": {"tf": 1}, "sain.Vec.split_off": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}, "sain.collections.Vec.split_off": {"tf": 1}, "sain.collections.Bytes.to_str": {"tf": 1}, "sain.collections.Bytes.index": {"tf": 1}, "sain.collections.buf.Bytes.to_str": {"tf": 1}, "sain.collections.buf.Bytes.index": {"tf": 1}, "sain.collections.vec.Vec.split_off": {"tf": 1}, "sain.macros.todo": {"tf": 1}}, "df": 12, "d": {"docs": {"sain.cfg_attr": {"tf": 1.7320508075688772}, "sain.todo": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1.7320508075688772}, "sain.convert": {"tf": 1}, "sain.macros.todo": {"tf": 1}}, "df": 5}, "s": {"docs": {"sain.cfg_attr": {"tf": 1}, "sain.Some.unwrap": {"tf": 1.4142135623730951}, "sain.Some.expect": {"tf": 1}, "sain.Some.as_ref": {"tf": 1}, "sain.Vec.split_off": {"tf": 1}, "sain.Vec.swap_remove": {"tf": 1}, "sain.Vec.index": {"tf": 1}, "sain.MaybeUninit.assume_init": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.collections.Vec.split_off": {"tf": 1}, "sain.collections.Vec.swap_remove": {"tf": 1}, "sain.collections.Vec.index": {"tf": 1}, "sain.collections.Bytes.from_raw": {"tf": 1}, "sain.collections.Bytes.put": {"tf": 1}, "sain.collections.Bytes.put_raw": {"tf": 1}, "sain.collections.Bytes.put_bytes": {"tf": 1}, "sain.collections.buf.Bytes.from_raw": {"tf": 1}, "sain.collections.buf.Bytes.put": {"tf": 1}, "sain.collections.buf.Bytes.put_raw": {"tf": 1}, "sain.collections.buf.Bytes.put_bytes": {"tf": 1}, "sain.collections.vec.Vec.split_off": {"tf": 1}, "sain.collections.vec.Vec.swap_remove": {"tf": 1}, "sain.collections.vec.Vec.index": {"tf": 1}, "sain.convert": {"tf": 1}, "sain.error": {"tf": 1}, "sain.option.Some.unwrap": {"tf": 1.4142135623730951}, "sain.option.Some.expect": {"tf": 1}, "sain.option.Some.as_ref": {"tf": 1}}, "df": 28}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.Some.unwrap": {"tf": 1}, "sain.Ok.expect": {"tf": 1}, "sain.Ok.unwrap": {"tf": 1}, "sain.Ok.unwrap_err": {"tf": 1}, "sain.option.Some.unwrap": {"tf": 1}, "sain.result.Ok.expect": {"tf": 1}, "sain.result.Ok.unwrap": {"tf": 1}, "sain.result.Ok.unwrap_err": {"tf": 1}}, "df": 8}}}}}, "n": {"docs": {"sain.cfg": {"tf": 2}, "sain.cfg.cfg": {"tf": 2}}, "df": 2, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"sain.Iterator": {"tf": 1}, "sain.Vec.reserve": {"tf": 1}, "sain.collections.Vec.reserve": {"tf": 1}, "sain.collections.vec.Vec.reserve": {"tf": 1}, "sain.default": {"tf": 1}, "sain.iter.Iterator": {"tf": 1}}, "df": 6}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"sain.Iterator": {"tf": 1}, "sain.iter.Iterator": {"tf": 1}}, "df": 2}}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {"sain.Iterator.collect": {"tf": 1}, "sain.Iterator.count": {"tf": 1}, "sain.Vec.push_within_capacity": {"tf": 1}, "sain.Vec.reserve": {"tf": 1}, "sain.collections.Vec.push_within_capacity": {"tf": 1}, "sain.collections.Vec.reserve": {"tf": 1}, "sain.collections.Bytes.from_raw": {"tf": 1}, "sain.collections.Bytes.put": {"tf": 1}, "sain.collections.buf.Bytes.from_raw": {"tf": 1}, "sain.collections.buf.Bytes.put": {"tf": 1}, "sain.collections.vec.Vec.push_within_capacity": {"tf": 1}, "sain.collections.vec.Vec.reserve": {"tf": 1}, "sain.futures.spawn": {"tf": 1}, "sain.iter.Iterator.collect": {"tf": 1}, "sain.iter.Iterator.count": {"tf": 1}, "sain.iter.Empty.count": {"tf": 1}}, "df": 16}}}, "w": {"docs": {"sain.Iterator.raw_parts": {"tf": 1}, "sain.Error": {"tf": 1}, "sain.collections.Bytes": {"tf": 1}, "sain.collections.Bytes.from_raw": {"tf": 2.23606797749979}, "sain.collections.Bytes.try_to_str": {"tf": 1}, "sain.collections.Bytes.to_str": {"tf": 1.4142135623730951}, "sain.collections.Bytes.put_raw": {"tf": 1.7320508075688772}, "sain.collections.Bytes.size": {"tf": 1}, "sain.collections.Bytes.iter": {"tf": 1}, "sain.collections.Bytes.copy": {"tf": 1}, "sain.collections.buf.Bytes": {"tf": 1}, "sain.collections.buf.Bytes.from_raw": {"tf": 2.23606797749979}, "sain.collections.buf.Bytes.try_to_str": {"tf": 1}, "sain.collections.buf.Bytes.to_str": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.put_raw": {"tf": 1.7320508075688772}, "sain.collections.buf.Bytes.size": {"tf": 1}, "sain.collections.buf.Bytes.iter": {"tf": 1}, "sain.collections.buf.Bytes.copy": {"tf": 1}, "sain.collections.buf.Rawish": {"tf": 1}, "sain.error.Error": {"tf": 1}, "sain.iter.Iterator.raw_parts": {"tf": 1}}, "df": 21, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "h": {"docs": {"sain.collections.Bytes": {"tf": 1.7320508075688772}, "sain.collections.Bytes.put_raw": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes": {"tf": 1.7320508075688772}, "sain.collections.buf.Bytes.put_raw": {"tf": 1.4142135623730951}}, "df": 4}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {"sain.convert": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"sain.collections": {"tf": 1}}, "df": 1}}}, "b": {"docs": {"sain.collections.Bytes.from_raw": {"tf": 1}, "sain.collections.Bytes.put_raw": {"tf": 1}, "sain.collections.buf.Bytes.from_raw": {"tf": 1}, "sain.collections.buf.Bytes.put_raw": {"tf": 1}}, "df": 4}}, "e": {"docs": {"sain": {"tf": 1}, "sain.Ok.unwrap_or_else": {"tf": 1.7320508075688772}, "sain.Ok.map_err": {"tf": 1}, "sain.Err": {"tf": 1}, "sain.Error": {"tf": 1.4142135623730951}, "sain.TryFrom": {"tf": 1.4142135623730951}, "sain.TryInto": {"tf": 1.4142135623730951}, "sain.convert.TryFrom": {"tf": 1.4142135623730951}, "sain.convert.TryInto": {"tf": 1.4142135623730951}, "sain.error.Error": {"tf": 1.4142135623730951}, "sain.result": {"tf": 1.4142135623730951}, "sain.result.Ok.unwrap_or_else": {"tf": 1.7320508075688772}, "sain.result.Ok.map_err": {"tf": 1}, "sain.result.Err": {"tf": 1}}, "df": 14, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {"sain": {"tf": 1}}, "df": 1}}}}}}}}, "x": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {"sain.convert": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 2, "s": {"docs": {"sain.error": {"tf": 1}, "sain.result": {"tf": 1}}, "df": 2}}}}}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.Default": {"tf": 1}, "sain.Some": {"tf": 1}, "sain.Some.default": {"tf": 1}, "sain.Some.unwrap": {"tf": 1}, "sain.Some.unwrap_or": {"tf": 1}, "sain.Some.unwrap_or_else": {"tf": 1}, "sain.Some.unwrap_unchecked": {"tf": 1}, "sain.Some.expect": {"tf": 1}, "sain.Some.map": {"tf": 1}, "sain.Some.map_or": {"tf": 1}, "sain.Some.map_or_else": {"tf": 1}, "sain.Some.filter": {"tf": 1}, "sain.Some.take": {"tf": 1}, "sain.Some.take_if": {"tf": 1.4142135623730951}, "sain.Some.replace": {"tf": 1}, "sain.Some.and_ok": {"tf": 1}, "sain.Some.and_then": {"tf": 1}, "sain.Some.iter": {"tf": 1}, "sain.Some.as_ref": {"tf": 1}, "sain.Some.as_mut": {"tf": 1}, "sain.Some.is_some": {"tf": 1}, "sain.Some.is_some_and": {"tf": 1}, "sain.Some.is_none": {"tf": 1}, "sain.Iter": {"tf": 1}, "sain.Iterator": {"tf": 1}, "sain.Iterator.default": {"tf": 1}, "sain.Iterator.collect": {"tf": 1}, "sain.Iterator.to_vec": {"tf": 1}, "sain.Iterator.sink": {"tf": 1}, "sain.Iterator.next": {"tf": 1}, "sain.Iterator.cloned": {"tf": 1}, "sain.Iterator.copied": {"tf": 1}, "sain.Iterator.map": {"tf": 1}, "sain.Iterator.filter": {"tf": 1}, "sain.Iterator.take": {"tf": 1}, "sain.Iterator.skip": {"tf": 1}, "sain.Iterator.enumerate": {"tf": 1}, "sain.Iterator.take_while": {"tf": 1}, "sain.Iterator.drop_while": {"tf": 1}, "sain.Iterator.all": {"tf": 1}, "sain.Iterator.any": {"tf": 1}, "sain.Iterator.zip": {"tf": 1}, "sain.Iterator.sort": {"tf": 1}, "sain.Iterator.reversed": {"tf": 1}, "sain.Iterator.union": {"tf": 1}, "sain.Iterator.first": {"tf": 1}, "sain.Iterator.last": {"tf": 1}, "sain.Iterator.count": {"tf": 1}, "sain.Iterator.for_each": {"tf": 1}, "sain.Iterator.async_for_each": {"tf": 1}, "sain.todo": {"tf": 1}, "sain.deprecated": {"tf": 1}, "sain.unimplemented": {"tf": 1}, "sain.doc": {"tf": 1}, "sain.Ok.is_ok": {"tf": 1}, "sain.Ok.is_ok_and": {"tf": 1}, "sain.Ok.is_err": {"tf": 1}, "sain.Ok.is_err_and": {"tf": 1}, "sain.Ok.expect": {"tf": 1}, "sain.Ok.unwrap": {"tf": 1}, "sain.Ok.unwrap_or": {"tf": 1}, "sain.Ok.unwrap_or_else": {"tf": 1}, "sain.Ok.unwrap_err": {"tf": 1}, "sain.Ok.ok": {"tf": 1}, "sain.Ok.err": {"tf": 1}, "sain.Ok.inspect": {"tf": 1}, "sain.Ok.inspect_err": {"tf": 1}, "sain.Ok.map": {"tf": 1}, "sain.Ok.map_or": {"tf": 1}, "sain.Ok.map_or_else": {"tf": 1}, "sain.Ok.map_err": {"tf": 1}, "sain.Ok.iter": {"tf": 1}, "sain.Err.is_ok": {"tf": 1}, "sain.Err.is_ok_and": {"tf": 1}, "sain.Err.is_err": {"tf": 1}, "sain.Err.is_err_and": {"tf": 1}, "sain.Vec": {"tf": 1}, "sain.Vec.with_capacity": {"tf": 1}, "sain.Vec.as_ref": {"tf": 1}, "sain.Vec.len": {"tf": 1}, "sain.Vec.capacity": {"tf": 1}, "sain.Vec.iter": {"tf": 1}, "sain.Vec.split_off": {"tf": 1}, "sain.Vec.split_first": {"tf": 1}, "sain.Vec.first": {"tf": 1}, "sain.Vec.truncate": {"tf": 1}, "sain.Vec.retain": {"tf": 1}, "sain.Vec.swap_remove": {"tf": 1}, "sain.Vec.push": {"tf": 1}, "sain.Vec.push_within_capacity": {"tf": 1}, "sain.Vec.reserve": {"tf": 1}, "sain.Vec.get": {"tf": 1}, "sain.Vec.insert": {"tf": 1}, "sain.Vec.pop": {"tf": 1}, "sain.Vec.remove": {"tf": 1}, "sain.Vec.extend": {"tf": 1}, "sain.Vec.copy": {"tf": 1}, "sain.Vec.clear": {"tf": 1}, "sain.Vec.sort": {"tf": 1}, "sain.Vec.index": {"tf": 1}, "sain.Vec.count": {"tf": 1}, "sain.Error": {"tf": 1}, "sain.Box": {"tf": 1}, "sain.Box.on_expire": {"tf": 1}, "sain.Box.remaining": {"tf": 1}, "sain.Box.get": {"tf": 1}, "sain.MaybeUninit.uninit": {"tf": 1}, "sain.MaybeUninit.uninit_array": {"tf": 1}, "sain.MaybeUninit.assume_init": {"tf": 1}, "sain.MaybeUninit.write": {"tf": 1}, "sain.From": {"tf": 1}, "sain.TryFrom": {"tf": 1}, "sain.Into": {"tf": 1}, "sain.TryInto": {"tf": 1}, "sain.boxed.Box": {"tf": 1}, "sain.boxed.Box.on_expire": {"tf": 1}, "sain.boxed.Box.remaining": {"tf": 1}, "sain.boxed.Box.get": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}, "sain.collections.Vec": {"tf": 1}, "sain.collections.Vec.with_capacity": {"tf": 1}, "sain.collections.Vec.as_ref": {"tf": 1}, "sain.collections.Vec.len": {"tf": 1}, "sain.collections.Vec.capacity": {"tf": 1}, "sain.collections.Vec.iter": {"tf": 1}, "sain.collections.Vec.split_off": {"tf": 1}, "sain.collections.Vec.split_first": {"tf": 1}, "sain.collections.Vec.first": {"tf": 1}, "sain.collections.Vec.truncate": {"tf": 1}, "sain.collections.Vec.retain": {"tf": 1}, "sain.collections.Vec.swap_remove": {"tf": 1}, "sain.collections.Vec.push": {"tf": 1}, "sain.collections.Vec.push_within_capacity": {"tf": 1}, "sain.collections.Vec.reserve": {"tf": 1}, "sain.collections.Vec.get": {"tf": 1}, "sain.collections.Vec.insert": {"tf": 1}, "sain.collections.Vec.pop": {"tf": 1}, "sain.collections.Vec.remove": {"tf": 1}, "sain.collections.Vec.extend": {"tf": 1}, "sain.collections.Vec.copy": {"tf": 1}, "sain.collections.Vec.clear": {"tf": 1}, "sain.collections.Vec.sort": {"tf": 1}, "sain.collections.Vec.index": {"tf": 1}, "sain.collections.Vec.count": {"tf": 1}, "sain.collections.Bytes": {"tf": 1}, "sain.collections.Bytes.from_str": {"tf": 1}, "sain.collections.Bytes.from_static": {"tf": 1}, "sain.collections.Bytes.from_bytes": {"tf": 1}, "sain.collections.Bytes.from_raw": {"tf": 1}, "sain.collections.Bytes.try_to_str": {"tf": 1}, "sain.collections.Bytes.to_str": {"tf": 1}, "sain.collections.Bytes.leak": {"tf": 1}, "sain.collections.Bytes.as_bytes": {"tf": 1}, "sain.collections.Bytes.as_ref": {"tf": 1}, "sain.collections.Bytes.as_mut": {"tf": 1}, "sain.collections.Bytes.put": {"tf": 1}, "sain.collections.Bytes.put_raw": {"tf": 1}, "sain.collections.Bytes.put_bytes": {"tf": 1}, "sain.collections.Bytes.put_str": {"tf": 1}, "sain.collections.Bytes.len": {"tf": 1}, "sain.collections.Bytes.size": {"tf": 1}, "sain.collections.Bytes.iter": {"tf": 1}, "sain.collections.Bytes.is_empty": {"tf": 1}, "sain.collections.Bytes.copy": {"tf": 1}, "sain.collections.Bytes.clear": {"tf": 1}, "sain.collections.Bytes.count": {"tf": 1}, "sain.collections.Bytes.pop": {"tf": 1}, "sain.collections.buf.Bytes": {"tf": 1}, "sain.collections.buf.Bytes.from_str": {"tf": 1}, "sain.collections.buf.Bytes.from_static": {"tf": 1}, "sain.collections.buf.Bytes.from_bytes": {"tf": 1}, "sain.collections.buf.Bytes.from_raw": {"tf": 1}, "sain.collections.buf.Bytes.try_to_str": {"tf": 1}, "sain.collections.buf.Bytes.to_str": {"tf": 1}, "sain.collections.buf.Bytes.leak": {"tf": 1}, "sain.collections.buf.Bytes.as_bytes": {"tf": 1}, "sain.collections.buf.Bytes.as_ref": {"tf": 1}, "sain.collections.buf.Bytes.as_mut": {"tf": 1}, "sain.collections.buf.Bytes.put": {"tf": 1}, "sain.collections.buf.Bytes.put_raw": {"tf": 1}, "sain.collections.buf.Bytes.put_bytes": {"tf": 1}, "sain.collections.buf.Bytes.put_str": {"tf": 1}, "sain.collections.buf.Bytes.len": {"tf": 1}, "sain.collections.buf.Bytes.size": {"tf": 1}, "sain.collections.buf.Bytes.iter": {"tf": 1}, "sain.collections.buf.Bytes.is_empty": {"tf": 1}, "sain.collections.buf.Bytes.copy": {"tf": 1}, "sain.collections.buf.Bytes.clear": {"tf": 1}, "sain.collections.buf.Bytes.count": {"tf": 1}, "sain.collections.buf.Bytes.pop": {"tf": 1}, "sain.collections.vec": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1}, "sain.collections.vec.Vec.with_capacity": {"tf": 1}, "sain.collections.vec.Vec.as_ref": {"tf": 1}, "sain.collections.vec.Vec.len": {"tf": 1}, "sain.collections.vec.Vec.capacity": {"tf": 1}, "sain.collections.vec.Vec.iter": {"tf": 1}, "sain.collections.vec.Vec.split_off": {"tf": 1}, "sain.collections.vec.Vec.split_first": {"tf": 1}, "sain.collections.vec.Vec.first": {"tf": 1}, "sain.collections.vec.Vec.truncate": {"tf": 1}, "sain.collections.vec.Vec.retain": {"tf": 1}, "sain.collections.vec.Vec.swap_remove": {"tf": 1}, "sain.collections.vec.Vec.push": {"tf": 1}, "sain.collections.vec.Vec.push_within_capacity": {"tf": 1}, "sain.collections.vec.Vec.reserve": {"tf": 1}, "sain.collections.vec.Vec.get": {"tf": 1}, "sain.collections.vec.Vec.insert": {"tf": 1}, "sain.collections.vec.Vec.pop": {"tf": 1}, "sain.collections.vec.Vec.remove": {"tf": 1}, "sain.collections.vec.Vec.extend": {"tf": 1}, "sain.collections.vec.Vec.copy": {"tf": 1}, "sain.collections.vec.Vec.clear": {"tf": 1}, "sain.collections.vec.Vec.sort": {"tf": 1}, "sain.collections.vec.Vec.index": {"tf": 1}, "sain.collections.vec.Vec.count": {"tf": 1}, "sain.collections.vec.from_args": {"tf": 1}, "sain.convert": {"tf": 1}, "sain.convert.From": {"tf": 1}, "sain.convert.TryFrom": {"tf": 1}, "sain.convert.Into": {"tf": 1}, "sain.convert.TryInto": {"tf": 1}, "sain.default": {"tf": 1}, "sain.default.Default": {"tf": 1}, "sain.error": {"tf": 1.7320508075688772}, "sain.error.Error": {"tf": 1}, "sain.futures.spawn": {"tf": 1}, "sain.iter.Iter": {"tf": 1}, "sain.iter.Iterator": {"tf": 1}, "sain.iter.Iterator.default": {"tf": 1}, "sain.iter.Iterator.collect": {"tf": 1}, "sain.iter.Iterator.to_vec": {"tf": 1}, "sain.iter.Iterator.sink": {"tf": 1}, "sain.iter.Iterator.next": {"tf": 1}, "sain.iter.Iterator.cloned": {"tf": 1}, "sain.iter.Iterator.copied": {"tf": 1}, "sain.iter.Iterator.map": {"tf": 1}, "sain.iter.Iterator.filter": {"tf": 1}, "sain.iter.Iterator.take": {"tf": 1}, "sain.iter.Iterator.skip": {"tf": 1}, "sain.iter.Iterator.enumerate": {"tf": 1}, "sain.iter.Iterator.take_while": {"tf": 1}, "sain.iter.Iterator.drop_while": {"tf": 1}, "sain.iter.Iterator.all": {"tf": 1}, "sain.iter.Iterator.any": {"tf": 1}, "sain.iter.Iterator.zip": {"tf": 1}, "sain.iter.Iterator.sort": {"tf": 1}, "sain.iter.Iterator.reversed": {"tf": 1}, "sain.iter.Iterator.union": {"tf": 1}, "sain.iter.Iterator.first": {"tf": 1}, "sain.iter.Iterator.last": {"tf": 1}, "sain.iter.Iterator.count": {"tf": 1}, "sain.iter.Iterator.for_each": {"tf": 1}, "sain.iter.Iterator.async_for_each": {"tf": 1}, "sain.iter.Empty.next": {"tf": 1}, "sain.iter.Empty.count": {"tf": 1}, "sain.iter.Empty.any": {"tf": 1}, "sain.iter.Empty.all": {"tf": 1}, "sain.iter.into_iter": {"tf": 1}, "sain.iter.empty": {"tf": 1}, "sain.iter.once": {"tf": 1}, "sain.iter.repeat": {"tf": 1}, "sain.macros.deprecated": {"tf": 1}, "sain.macros.unimplemented": {"tf": 1}, "sain.macros.todo": {"tf": 1}, "sain.macros.doc": {"tf": 1}, "sain.option.Some": {"tf": 1}, "sain.option.Some.unwrap": {"tf": 1}, "sain.option.Some.unwrap_or": {"tf": 1}, "sain.option.Some.unwrap_or_else": {"tf": 1}, "sain.option.Some.unwrap_unchecked": {"tf": 1}, "sain.option.Some.expect": {"tf": 1}, "sain.option.Some.map": {"tf": 1}, "sain.option.Some.map_or": {"tf": 1}, "sain.option.Some.map_or_else": {"tf": 1}, "sain.option.Some.filter": {"tf": 1}, "sain.option.Some.take": {"tf": 1}, "sain.option.Some.take_if": {"tf": 1.4142135623730951}, "sain.option.Some.replace": {"tf": 1}, "sain.option.Some.and_ok": {"tf": 1}, "sain.option.Some.and_then": {"tf": 1}, "sain.option.Some.iter": {"tf": 1}, "sain.option.Some.as_ref": {"tf": 1}, "sain.option.Some.as_mut": {"tf": 1}, "sain.option.Some.is_some": {"tf": 1}, "sain.option.Some.is_some_and": {"tf": 1}, "sain.option.Some.is_none": {"tf": 1}, "sain.option.Option": {"tf": 1}, "sain.option.NOTHING": {"tf": 1}, "sain.result.Ok.is_ok": {"tf": 1}, "sain.result.Ok.is_ok_and": {"tf": 1}, "sain.result.Ok.is_err": {"tf": 1}, "sain.result.Ok.is_err_and": {"tf": 1}, "sain.result.Ok.expect": {"tf": 1}, "sain.result.Ok.unwrap": {"tf": 1}, "sain.result.Ok.unwrap_or": {"tf": 1}, "sain.result.Ok.unwrap_or_else": {"tf": 1}, "sain.result.Ok.unwrap_err": {"tf": 1}, "sain.result.Ok.ok": {"tf": 1}, "sain.result.Ok.err": {"tf": 1}, "sain.result.Ok.inspect": {"tf": 1}, "sain.result.Ok.inspect_err": {"tf": 1}, "sain.result.Ok.map": {"tf": 1}, "sain.result.Ok.map_or": {"tf": 1}, "sain.result.Ok.map_or_else": {"tf": 1}, "sain.result.Ok.map_err": {"tf": 1}, "sain.result.Ok.iter": {"tf": 1}, "sain.result.Err.is_ok": {"tf": 1}, "sain.result.Err.is_ok_and": {"tf": 1}, "sain.result.Err.is_err": {"tf": 1}, "sain.result.Err.is_err_and": {"tf": 1}, "sain.sync.Lazy": {"tf": 1}, "sain.sync.Lazy.get_unchecked": {"tf": 1}, "sain.sync.Lazy.set": {"tf": 1}, "sain.sync.Once": {"tf": 1}, "sain.sync.Once.get_unchecked": {"tf": 1}, "sain.sync.Once.set": {"tf": 1}, "sain.sync.Once.get_or": {"tf": 1}, "sain.sync.LazyFuture": {"tf": 1}, "sain.sync.LazyFuture.set": {"tf": 1}, "sain.sync.AsyncOnce": {"tf": 1}, "sain.sync.AsyncOnce.get_unchecked": {"tf": 1}, "sain.sync.AsyncOnce.set": {"tf": 1}}, "df": 326, "s": {"docs": {"sain.Some.into_inner": {"tf": 1}, "sain.MaybeUninit": {"tf": 1}, "sain.option.Some.into_inner": {"tf": 1}, "sain.sync.Once.get_or_with": {"tf": 1}, "sain.sync.AsyncOnce.get_or": {"tf": 1}, "sain.sync.AsyncOnce.get_or_with": {"tf": 1}}, "df": 6}}}}}, "c": {"docs": {}, "df": 0, "t": {"docs": {"sain.Iterator.raw_parts": {"tf": 1}, "sain.iter.Iterator.raw_parts": {"tf": 1}}, "df": 2, "l": {"docs": {}, "df": 0, "y": {"docs": {"sain.Iterator": {"tf": 1}, "sain.iter.Iterator": {"tf": 1}, "sain.iter.once": {"tf": 1}}, "df": 3}}}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"sain.Some.expect": {"tf": 1.4142135623730951}, "sain.Ok.expect": {"tf": 1.4142135623730951}, "sain.option.Some.expect": {"tf": 1.4142135623730951}, "sain.result.Ok.expect": {"tf": 1.4142135623730951}}, "df": 4}}, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"sain.Into": {"tf": 1}, "sain.TryInto": {"tf": 1}, "sain.collections.Bytes.to_str": {"tf": 1}, "sain.collections.buf.Bytes.to_str": {"tf": 1}, "sain.convert.Into": {"tf": 1}, "sain.convert.TryInto": {"tf": 1}, "sain.sync.Lazy": {"tf": 1}, "sain.sync.LazyFuture": {"tf": 1}}, "df": 8}}}}}}, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.Box": {"tf": 2}, "sain.boxed.Box": {"tf": 2}}, "df": 2}}}, "e": {"docs": {"sain.Box.on_expire": {"tf": 1}, "sain.Box.remaining": {"tf": 1}, "sain.boxed.Box.on_expire": {"tf": 1}, "sain.boxed.Box.remaining": {"tf": 1}}, "df": 4, "s": {"docs": {"sain.Box": {"tf": 1}, "sain.boxed": {"tf": 1}, "sain.boxed.Box": {"tf": 1}}, "df": 3}, "d": {"docs": {"sain.Box": {"tf": 1}, "sain.Box.has_expired": {"tf": 1}, "sain.Box.on_expire": {"tf": 1.4142135623730951}, "sain.Box.get": {"tf": 1.4142135623730951}, "sain.boxed.Box": {"tf": 1}, "sain.boxed.Box.has_expired": {"tf": 1}, "sain.boxed.Box.on_expire": {"tf": 1.4142135623730951}, "sain.boxed.Box.get": {"tf": 1.4142135623730951}}, "df": 8}}}}, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"sain.error": {"tf": 1}}, "df": 1}}}}}, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.Iter.clone": {"tf": 1}, "sain.Iterator.take": {"tf": 1}, "sain.Vec": {"tf": 1}, "sain.collections.Vec": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1}, "sain.iter.Iter.clone": {"tf": 1}, "sain.iter.Iterator.take": {"tf": 1}}, "df": 7}}}}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {"sain.Vec": {"tf": 1}, "sain.collections.Vec": {"tf": 1}, "sain.collections.vec": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1}}, "df": 4, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"sain.Ok.map_or": {"tf": 1}, "sain.Ok.map_or_else": {"tf": 1}, "sain.result.Ok.map_or": {"tf": 1}, "sain.result.Ok.map_or_else": {"tf": 1}}, "df": 4}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"sain.Vec": {"tf": 1}, "sain.Vec.push_within_capacity": {"tf": 1}, "sain.Vec.extend": {"tf": 1.4142135623730951}, "sain.collections.Vec": {"tf": 1}, "sain.collections.Vec.push_within_capacity": {"tf": 1}, "sain.collections.Vec.extend": {"tf": 1.4142135623730951}, "sain.collections.Bytes.put_raw": {"tf": 1}, "sain.collections.buf.Bytes.put_raw": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1}, "sain.collections.vec.Vec.push_within_capacity": {"tf": 1}, "sain.collections.vec.Vec.extend": {"tf": 1.4142135623730951}}, "df": 11, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.collections": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.collections.Bytes.put": {"tf": 1}, "sain.collections.buf.Bytes.put": {"tf": 1}}, "df": 2}}}}}, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"sain.iter": {"tf": 1}}, "df": 1}}}}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"sain.Vec": {"tf": 1}, "sain.MaybeUninit": {"tf": 1}, "sain.MaybeUninit.uninit_array": {"tf": 1}, "sain.collections.Vec": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1}, "sain.convert": {"tf": 1}}, "df": 6}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"sain.Error": {"tf": 1}, "sain.error.Error": {"tf": 1}}, "df": 2, "d": {"docs": {"sain.sync.Once.get_or": {"tf": 1}, "sain.sync.Once.get_or_with": {"tf": 1}, "sain.sync.AsyncOnce.get_or": {"tf": 1}, "sain.sync.AsyncOnce.get_or_with": {"tf": 1}}, "df": 4}}}}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 2}}, "s": {"docs": {}, "df": 0, "e": {"docs": {"sain.cfg": {"tf": 1.4142135623730951}, "sain.Some.unwrap_or_else": {"tf": 1.4142135623730951}, "sain.Some.map_or_else": {"tf": 1.4142135623730951}, "sain.Ok.unwrap_or_else": {"tf": 1.4142135623730951}, "sain.Ok.map_or_else": {"tf": 1.4142135623730951}, "sain.Error": {"tf": 1}, "sain.cfg.cfg": {"tf": 1.4142135623730951}, "sain.error.Error": {"tf": 1}, "sain.option.Some.unwrap_or_else": {"tf": 1.4142135623730951}, "sain.option.Some.map_or_else": {"tf": 1.4142135623730951}, "sain.result.Ok.unwrap_or_else": {"tf": 1.4142135623730951}, "sain.result.Ok.map_or_else": {"tf": 1.4142135623730951}}, "df": 12, "w": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"sain.collections.Bytes": {"tf": 1}, "sain.collections.buf.Bytes": {"tf": 1}}, "df": 2}}}}}}}, "e": {"docs": {}, "df": 0, "m": {"docs": {"sain.Vec.retain": {"tf": 1.4142135623730951}, "sain.Vec.push_within_capacity": {"tf": 1.4142135623730951}, "sain.collections.Vec.retain": {"tf": 1.4142135623730951}, "sain.collections.Vec.push_within_capacity": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.retain": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.push_within_capacity": {"tf": 1.4142135623730951}}, "df": 6, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"sain.Iterator.collect": {"tf": 1}, "sain.Vec": {"tf": 1.4142135623730951}, "sain.Vec.iter": {"tf": 1.7320508075688772}, "sain.Vec.first": {"tf": 1}, "sain.Vec.swap_remove": {"tf": 1.4142135623730951}, "sain.Vec.push": {"tf": 1}, "sain.Vec.push_within_capacity": {"tf": 1.4142135623730951}, "sain.Vec.insert": {"tf": 1}, "sain.Vec.pop": {"tf": 1}, "sain.collections.Vec": {"tf": 1.4142135623730951}, "sain.collections.Vec.iter": {"tf": 1.7320508075688772}, "sain.collections.Vec.first": {"tf": 1}, "sain.collections.Vec.swap_remove": {"tf": 1.4142135623730951}, "sain.collections.Vec.push": {"tf": 1}, "sain.collections.Vec.push_within_capacity": {"tf": 1.4142135623730951}, "sain.collections.Vec.insert": {"tf": 1}, "sain.collections.Vec.pop": {"tf": 1}, "sain.collections.Bytes.iter": {"tf": 1.4142135623730951}, "sain.collections.Bytes.pop": {"tf": 1}, "sain.collections.buf.Bytes.iter": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.pop": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.iter": {"tf": 1.7320508075688772}, "sain.collections.vec.Vec.first": {"tf": 1}, "sain.collections.vec.Vec.swap_remove": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.push": {"tf": 1}, "sain.collections.vec.Vec.push_within_capacity": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.insert": {"tf": 1}, "sain.collections.vec.Vec.pop": {"tf": 1}, "sain.iter.Iterator.collect": {"tf": 1}, "sain.iter.Enumerate": {"tf": 1}, "sain.iter.repeat": {"tf": 1}}, "df": 32, "s": {"docs": {"sain.Iterator.sink": {"tf": 1}, "sain.Iterator.raw_parts": {"tf": 1}, "sain.Iterator.cloned": {"tf": 1.7320508075688772}, "sain.Iterator.copied": {"tf": 1.4142135623730951}, "sain.Iterator.count": {"tf": 1}, "sain.Vec": {"tf": 1.4142135623730951}, "sain.Vec.with_capacity": {"tf": 1}, "sain.Vec.as_ref": {"tf": 1}, "sain.Vec.len": {"tf": 1}, "sain.Vec.iter": {"tf": 1}, "sain.Vec.is_empty": {"tf": 1}, "sain.Vec.split_first": {"tf": 1}, "sain.Vec.truncate": {"tf": 1}, "sain.Vec.retain": {"tf": 1}, "sain.Vec.reserve": {"tf": 1}, "sain.Vec.copy": {"tf": 1}, "sain.Vec.clear": {"tf": 1}, "sain.collections.Vec": {"tf": 1.4142135623730951}, "sain.collections.Vec.with_capacity": {"tf": 1}, "sain.collections.Vec.as_ref": {"tf": 1}, "sain.collections.Vec.len": {"tf": 1}, "sain.collections.Vec.iter": {"tf": 1}, "sain.collections.Vec.is_empty": {"tf": 1}, "sain.collections.Vec.split_first": {"tf": 1}, "sain.collections.Vec.truncate": {"tf": 1}, "sain.collections.Vec.retain": {"tf": 1}, "sain.collections.Vec.reserve": {"tf": 1}, "sain.collections.Vec.copy": {"tf": 1}, "sain.collections.Vec.clear": {"tf": 1}, "sain.collections.Bytes.len": {"tf": 1}, "sain.collections.buf.Bytes.len": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.with_capacity": {"tf": 1}, "sain.collections.vec.Vec.as_ref": {"tf": 1}, "sain.collections.vec.Vec.len": {"tf": 1}, "sain.collections.vec.Vec.iter": {"tf": 1}, "sain.collections.vec.Vec.is_empty": {"tf": 1}, "sain.collections.vec.Vec.split_first": {"tf": 1}, "sain.collections.vec.Vec.truncate": {"tf": 1}, "sain.collections.vec.Vec.retain": {"tf": 1}, "sain.collections.vec.Vec.reserve": {"tf": 1}, "sain.collections.vec.Vec.copy": {"tf": 1}, "sain.collections.vec.Vec.clear": {"tf": 1}, "sain.collections.vec.from_args": {"tf": 1}, "sain.iter.Iterator.sink": {"tf": 1}, "sain.iter.Iterator.raw_parts": {"tf": 1}, "sain.iter.Iterator.cloned": {"tf": 1.7320508075688772}, "sain.iter.Iterator.copied": {"tf": 1.4142135623730951}, "sain.iter.Iterator.count": {"tf": 1}, "sain.iter.Cloned": {"tf": 1}, "sain.iter.Copied": {"tf": 1}, "sain.iter.Take": {"tf": 1}, "sain.iter.Filter": {"tf": 1}, "sain.iter.Map": {"tf": 1}, "sain.iter.Skip": {"tf": 1}, "sain.iter.TakeWhile": {"tf": 1}, "sain.iter.DropWhile": {"tf": 1}, "sain.iter.Empty.count": {"tf": 1}}, "df": 58}}}}}}}, "r": {"docs": {}, "df": 0, "r": {"docs": {"sain.Ok.is_ok": {"tf": 1}, "sain.Ok.is_err": {"tf": 1.4142135623730951}, "sain.Ok.is_err_and": {"tf": 1}, "sain.Ok.expect": {"tf": 2.6457513110645907}, "sain.Ok.unwrap": {"tf": 2}, "sain.Ok.unwrap_or": {"tf": 2}, "sain.Ok.unwrap_or_else": {"tf": 2}, "sain.Ok.unwrap_err": {"tf": 2.449489742783178}, "sain.Ok.ok": {"tf": 1.4142135623730951}, "sain.Ok.err": {"tf": 2}, "sain.Ok.inspect": {"tf": 1.7320508075688772}, "sain.Ok.inspect_err": {"tf": 2.449489742783178}, "sain.Ok.map": {"tf": 2.23606797749979}, "sain.Ok.map_or": {"tf": 1.4142135623730951}, "sain.Ok.map_or_else": {"tf": 2.449489742783178}, "sain.Ok.map_err": {"tf": 2.449489742783178}, "sain.Ok.iter": {"tf": 1}, "sain.Err.is_ok": {"tf": 1.4142135623730951}, "sain.Err.is_ok_and": {"tf": 1}, "sain.Err.is_err": {"tf": 1.7320508075688772}, "sain.Err.is_err_and": {"tf": 2}, "sain.Vec.push_within_capacity": {"tf": 1}, "sain.Vec.reserve": {"tf": 1}, "sain.Error": {"tf": 2}, "sain.TryFrom": {"tf": 1}, "sain.TryInto": {"tf": 1}, "sain.collections.Vec.push_within_capacity": {"tf": 1}, "sain.collections.Vec.reserve": {"tf": 1}, "sain.collections.Bytes.try_to_str": {"tf": 1}, "sain.collections.buf.Bytes.try_to_str": {"tf": 1}, "sain.collections.vec.Vec.push_within_capacity": {"tf": 1}, "sain.collections.vec.Vec.reserve": {"tf": 1}, "sain.convert": {"tf": 1.4142135623730951}, "sain.convert.TryFrom": {"tf": 1}, "sain.convert.TryInto": {"tf": 1}, "sain.error.Error": {"tf": 2}, "sain.futures.spawn": {"tf": 1}, "sain.result": {"tf": 2.8284271247461903}, "sain.result.Ok.is_ok": {"tf": 1}, "sain.result.Ok.is_err": {"tf": 1.4142135623730951}, "sain.result.Ok.is_err_and": {"tf": 1}, "sain.result.Ok.expect": {"tf": 2.6457513110645907}, "sain.result.Ok.unwrap": {"tf": 2}, "sain.result.Ok.unwrap_or": {"tf": 2}, "sain.result.Ok.unwrap_or_else": {"tf": 2}, "sain.result.Ok.unwrap_err": {"tf": 2.449489742783178}, "sain.result.Ok.ok": {"tf": 1.4142135623730951}, "sain.result.Ok.err": {"tf": 2}, "sain.result.Ok.inspect": {"tf": 1.7320508075688772}, "sain.result.Ok.inspect_err": {"tf": 2.449489742783178}, "sain.result.Ok.map": {"tf": 2.23606797749979}, "sain.result.Ok.map_or": {"tf": 1.4142135623730951}, "sain.result.Ok.map_or_else": {"tf": 2.449489742783178}, "sain.result.Ok.map_err": {"tf": 2.449489742783178}, "sain.result.Ok.iter": {"tf": 1}, "sain.result.Err.is_ok": {"tf": 1.4142135623730951}, "sain.result.Err.is_ok_and": {"tf": 1}, "sain.result.Err.is_err": {"tf": 1.7320508075688772}, "sain.result.Err.is_err_and": {"tf": 2}, "sain.sync.Once.set": {"tf": 1.4142135623730951}, "sain.sync.AsyncOnce.set": {"tf": 1.4142135623730951}}, "df": 61, "o": {"docs": {}, "df": 0, "r": {"docs": {"sain.Some": {"tf": 1}, "sain.todo": {"tf": 1.4142135623730951}, "sain.Err": {"tf": 1}, "sain.Vec.push_within_capacity": {"tf": 1}, "sain.Error": {"tf": 2.6457513110645907}, "sain.Error.message": {"tf": 1}, "sain.Error.source": {"tf": 1}, "sain.Error.description": {"tf": 1}, "sain.TryFrom": {"tf": 1}, "sain.TryInto": {"tf": 1}, "sain.collections.Vec.push_within_capacity": {"tf": 1}, "sain.collections.Bytes.to_str": {"tf": 1}, "sain.collections.buf.Bytes.to_str": {"tf": 1}, "sain.collections.vec.Vec.push_within_capacity": {"tf": 1}, "sain.convert.TryFrom": {"tf": 1}, "sain.convert.TryInto": {"tf": 1}, "sain.error": {"tf": 2.449489742783178}, "sain.error.Error": {"tf": 2.6457513110645907}, "sain.error.Error.message": {"tf": 1}, "sain.error.Error.source": {"tf": 1}, "sain.error.Error.description": {"tf": 1}, "sain.macros.todo": {"tf": 1.4142135623730951}, "sain.result": {"tf": 2}, "sain.result.Err": {"tf": 1}}, "df": 24, "s": {"docs": {"sain.error": {"tf": 2}}, "df": 1}}}, "[": {"docs": {}, "df": 0, "t": {"docs": {"sain.Ok.err": {"tf": 1}, "sain.result.Ok.err": {"tf": 1}}, "df": 2}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sain.Some.unwrap": {"tf": 1}, "sain.Some.unwrap_or": {"tf": 1}, "sain.Some.unwrap_or_else": {"tf": 1}, "sain.Some.and_ok": {"tf": 1}, "sain.Vec": {"tf": 1}, "sain.MaybeUninit": {"tf": 1}, "sain.cfg": {"tf": 1}, "sain.collections.Vec": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1}, "sain.option": {"tf": 1}, "sain.option.Some.unwrap": {"tf": 1}, "sain.option.Some.unwrap_or": {"tf": 1}, "sain.option.Some.unwrap_or_else": {"tf": 1}, "sain.option.Some.and_ok": {"tf": 1}, "sain.result": {"tf": 1}}, "df": 15}}}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {"sain.Some.take_if": {"tf": 1.4142135623730951}, "sain.option.Some.take_if": {"tf": 1.4142135623730951}}, "df": 2}}}, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"sain.Iterator.default": {"tf": 1}, "sain.Vec.split_off": {"tf": 1}, "sain.Vec.split_first": {"tf": 1}, "sain.Vec.pop": {"tf": 1}, "sain.Vec.count": {"tf": 1}, "sain.collections.Vec.split_off": {"tf": 1}, "sain.collections.Vec.split_first": {"tf": 1}, "sain.collections.Vec.pop": {"tf": 1}, "sain.collections.Vec.count": {"tf": 1}, "sain.collections.Bytes": {"tf": 1}, "sain.collections.Bytes.__init__": {"tf": 1.4142135623730951}, "sain.collections.Bytes.leak": {"tf": 1}, "sain.collections.Bytes.as_ref": {"tf": 1}, "sain.collections.Bytes.as_mut": {"tf": 1}, "sain.collections.Bytes.is_empty": {"tf": 1}, "sain.collections.Bytes.clear": {"tf": 1}, "sain.collections.Bytes.pop": {"tf": 1}, "sain.collections.buf.Bytes": {"tf": 1}, "sain.collections.buf.Bytes.__init__": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.leak": {"tf": 1}, "sain.collections.buf.Bytes.as_ref": {"tf": 1}, "sain.collections.buf.Bytes.as_mut": {"tf": 1}, "sain.collections.buf.Bytes.is_empty": {"tf": 1}, "sain.collections.buf.Bytes.clear": {"tf": 1}, "sain.collections.buf.Bytes.pop": {"tf": 1}, "sain.collections.vec.Vec.split_off": {"tf": 1}, "sain.collections.vec.Vec.split_first": {"tf": 1}, "sain.collections.vec.Vec.pop": {"tf": 1}, "sain.collections.vec.Vec.count": {"tf": 1}, "sain.iter.Iterator.default": {"tf": 1}, "sain.iter.Empty": {"tf": 1}, "sain.iter.empty": {"tf": 1}, "sain.result": {"tf": 1.7320508075688772}, "sain.sync.Once.set": {"tf": 1.7320508075688772}, "sain.sync.Once.get_or_with": {"tf": 1}, "sain.sync.AsyncOnce.set": {"tf": 1.7320508075688772}, "sain.sync.AsyncOnce.get_or": {"tf": 1}, "sain.sync.AsyncOnce.get_or_with": {"tf": 1}}, "df": 38}}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"sain.Iterator.collect": {"tf": 1}, "sain.Iterator.cloned": {"tf": 1}, "sain.Iterator.copied": {"tf": 1.4142135623730951}, "sain.Iterator.map": {"tf": 1.4142135623730951}, "sain.Iterator.take_while": {"tf": 1}, "sain.Iterator.drop_while": {"tf": 1}, "sain.Iterator.all": {"tf": 1}, "sain.Iterator.any": {"tf": 1}, "sain.Iterator.for_each": {"tf": 1.7320508075688772}, "sain.Iterator.async_for_each": {"tf": 1.7320508075688772}, "sain.Vec.iter": {"tf": 1}, "sain.collections.Vec.iter": {"tf": 1}, "sain.collections.Bytes.iter": {"tf": 1}, "sain.collections.buf.Bytes.iter": {"tf": 1}, "sain.collections.vec.Vec.iter": {"tf": 1}, "sain.convert": {"tf": 1}, "sain.iter.Iterator.collect": {"tf": 1}, "sain.iter.Iterator.cloned": {"tf": 1}, "sain.iter.Iterator.copied": {"tf": 1.4142135623730951}, "sain.iter.Iterator.map": {"tf": 1.4142135623730951}, "sain.iter.Iterator.take_while": {"tf": 1}, "sain.iter.Iterator.drop_while": {"tf": 1}, "sain.iter.Iterator.all": {"tf": 1}, "sain.iter.Iterator.any": {"tf": 1}, "sain.iter.Iterator.for_each": {"tf": 1.7320508075688772}, "sain.iter.Iterator.async_for_each": {"tf": 1.7320508075688772}, "sain.iter.Empty.any": {"tf": 1}, "sain.iter.Empty.all": {"tf": 1}}, "df": 28}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {"sain.Iterator.take": {"tf": 1}, "sain.Vec": {"tf": 1}, "sain.Vec.push": {"tf": 1}, "sain.collections.Vec": {"tf": 1}, "sain.collections.Vec.push": {"tf": 1}, "sain.collections.Bytes.put": {"tf": 1}, "sain.collections.Bytes.iter": {"tf": 1}, "sain.collections.Bytes.insert": {"tf": 1}, "sain.collections.buf.Bytes.put": {"tf": 1}, "sain.collections.buf.Bytes.iter": {"tf": 1}, "sain.collections.buf.Bytes.insert": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1}, "sain.collections.vec.Vec.push": {"tf": 1}, "sain.iter.Iterator.take": {"tf": 1}}, "df": 14}, "u": {"docs": {}, "df": 0, "m": {"docs": {"sain.result": {"tf": 2.6457513110645907}}, "df": 1, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"sain.Iterator.enumerate": {"tf": 1}, "sain.MaybeUninit": {"tf": 1}, "sain.iter.Iterator.enumerate": {"tf": 1}, "sain.iter.Enumerate": {"tf": 1}}, "df": 4}}}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.collections.Bytes.from_str": {"tf": 1}, "sain.collections.buf.Bytes.from_str": {"tf": 1}}, "df": 2}}}, "e": {"docs": {"sain.convert": {"tf": 1}}, "df": 1, "d": {"docs": {"sain.collections.Bytes.put_str": {"tf": 1}, "sain.collections.buf.Bytes.put_str": {"tf": 1}}, "df": 2}}}}}, "v": {"docs": {"sain.error": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.error": {"tf": 1}}, "df": 1}}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"sain.sync.Lazy": {"tf": 1}, "sain.sync.LazyFuture": {"tf": 1}}, "df": 2}}}, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"sain.sync.Lazy.get": {"tf": 1}, "sain.sync.LazyFuture.get": {"tf": 1}}, "df": 2}}}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"sain.Vec.index": {"tf": 1}, "sain.collections.Vec.index": {"tf": 1}, "sain.collections.vec.Vec.index": {"tf": 1}}, "df": 3}}, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"sain.MaybeUninit": {"tf": 1.4142135623730951}, "sain.result": {"tf": 1}}, "df": 2}}}}}}}}}, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"sain.collections.Bytes": {"tf": 1}, "sain.collections.buf.Bytes": {"tf": 1}}, "df": 2}}}}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"sain.futures.loop": {"tf": 1}}, "df": 1}}}}}, "p": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain": {"tf": 1}, "sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 2.23606797749979}, "sain.From": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 2.23606797749979}, "sain.cfg.cfg": {"tf": 1.7320508075688772}, "sain.convert.From": {"tf": 1}, "sain.sync.Lazy": {"tf": 1}, "sain.sync.LazyFuture": {"tf": 1}}, "df": 9}}}}, "p": {"docs": {}, "df": 0, "y": {"docs": {"sain.cfg_attr": {"tf": 1.7320508075688772}, "sain.cfg": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1.7320508075688772}}, "df": 3}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {"sain.Vec": {"tf": 1}, "sain.collections.Vec": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1}}, "df": 3, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"sain.cfg": {"tf": 1}, "sain.Some.filter": {"tf": 1.4142135623730951}, "sain.Some.take_if": {"tf": 1}, "sain.Some.is_some_and": {"tf": 1}, "sain.Iterator.map": {"tf": 1}, "sain.Iterator.filter": {"tf": 1}, "sain.Iterator.take_while": {"tf": 2}, "sain.Iterator.drop_while": {"tf": 1.7320508075688772}, "sain.Iterator.all": {"tf": 1.4142135623730951}, "sain.Iterator.any": {"tf": 1.4142135623730951}, "sain.cfg.cfg": {"tf": 1}, "sain.iter.Iterator.map": {"tf": 1}, "sain.iter.Iterator.filter": {"tf": 1}, "sain.iter.Iterator.take_while": {"tf": 2}, "sain.iter.Iterator.drop_while": {"tf": 1.7320508075688772}, "sain.iter.Iterator.all": {"tf": 1.4142135623730951}, "sain.iter.Iterator.any": {"tf": 1.4142135623730951}, "sain.iter.Filter": {"tf": 1}, "sain.iter.TakeWhile": {"tf": 1}, "sain.iter.DropWhile": {"tf": 1}, "sain.iter.Empty.any": {"tf": 1.4142135623730951}, "sain.iter.Empty.all": {"tf": 1.4142135623730951}, "sain.option.Some.filter": {"tf": 1.4142135623730951}, "sain.option.Some.take_if": {"tf": 1}, "sain.option.Some.is_some_and": {"tf": 1}}, "df": 25}}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.MaybeUninit": {"tf": 1}}, "df": 1}}}}}}}}}, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {"sain.MaybeUninit.write": {"tf": 1}}, "df": 1}}}}}, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sain.From": {"tf": 1}, "sain.convert.From": {"tf": 1}}, "df": 2}}}, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"sain.collections": {"tf": 1}}, "df": 1}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"sain.error": {"tf": 1}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"sain.cfg": {"tf": 1.7320508075688772}, "sain.Default": {"tf": 1}, "sain.Some": {"tf": 1.7320508075688772}, "sain.Some.unwrap": {"tf": 1.4142135623730951}, "sain.Some.unwrap_or": {"tf": 1.4142135623730951}, "sain.Some.unwrap_or_else": {"tf": 1.4142135623730951}, "sain.Some.unwrap_unchecked": {"tf": 1}, "sain.Some.expect": {"tf": 1.4142135623730951}, "sain.Some.map": {"tf": 1.4142135623730951}, "sain.Some.map_or": {"tf": 1.4142135623730951}, "sain.Some.map_or_else": {"tf": 1.4142135623730951}, "sain.Some.filter": {"tf": 1.4142135623730951}, "sain.Some.take": {"tf": 1}, "sain.Some.and_then": {"tf": 1.4142135623730951}, "sain.Some.as_ref": {"tf": 1.7320508075688772}, "sain.Some.as_mut": {"tf": 1.4142135623730951}, "sain.Some.is_some": {"tf": 1.4142135623730951}, "sain.Some.is_some_and": {"tf": 1.4142135623730951}, "sain.Some.is_none": {"tf": 1.4142135623730951}, "sain.Iter": {"tf": 1.7320508075688772}, "sain.Iterator": {"tf": 1}, "sain.Iterator.filter": {"tf": 1}, "sain.Iterator.skip": {"tf": 1}, "sain.Iterator.enumerate": {"tf": 1}, "sain.Iterator.take_while": {"tf": 1}, "sain.Iterator.drop_while": {"tf": 1}, "sain.Iterator.all": {"tf": 1}, "sain.Iterator.any": {"tf": 1}, "sain.Iterator.sort": {"tf": 1}, "sain.Iterator.reversed": {"tf": 1}, "sain.Iterator.union": {"tf": 1}, "sain.Iterator.for_each": {"tf": 1}, "sain.Ok.inspect": {"tf": 1}, "sain.Ok.inspect_err": {"tf": 1}, "sain.Vec": {"tf": 1.7320508075688772}, "sain.Vec.with_capacity": {"tf": 1}, "sain.Vec.iter": {"tf": 1}, "sain.Vec.split_off": {"tf": 1}, "sain.Vec.push_within_capacity": {"tf": 1.4142135623730951}, "sain.Vec.reserve": {"tf": 1.4142135623730951}, "sain.Vec.copy": {"tf": 1}, "sain.Error": {"tf": 1}, "sain.Box.on_expire": {"tf": 1}, "sain.MaybeUninit.write": {"tf": 1}, "sain.boxed.Box.on_expire": {"tf": 1}, "sain.cfg.cfg": {"tf": 1.7320508075688772}, "sain.collections.Vec": {"tf": 1.7320508075688772}, "sain.collections.Vec.with_capacity": {"tf": 1}, "sain.collections.Vec.iter": {"tf": 1}, "sain.collections.Vec.split_off": {"tf": 1}, "sain.collections.Vec.push_within_capacity": {"tf": 1.4142135623730951}, "sain.collections.Vec.reserve": {"tf": 1.4142135623730951}, "sain.collections.Vec.copy": {"tf": 1}, "sain.collections.Bytes": {"tf": 1}, "sain.collections.Bytes.iter": {"tf": 1}, "sain.collections.buf.Bytes": {"tf": 1}, "sain.collections.buf.Bytes.iter": {"tf": 1}, "sain.collections.vec": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1.7320508075688772}, "sain.collections.vec.Vec.with_capacity": {"tf": 1}, "sain.collections.vec.Vec.iter": {"tf": 1}, "sain.collections.vec.Vec.split_off": {"tf": 1}, "sain.collections.vec.Vec.push_within_capacity": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.reserve": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.copy": {"tf": 1}, "sain.convert": {"tf": 1.4142135623730951}, "sain.default.Default": {"tf": 1}, "sain.error.Error": {"tf": 1}, "sain.futures.spawn": {"tf": 1}, "sain.iter.Iter": {"tf": 1.7320508075688772}, "sain.iter.Iterator": {"tf": 1}, "sain.iter.Iterator.filter": {"tf": 1}, "sain.iter.Iterator.skip": {"tf": 1}, "sain.iter.Iterator.enumerate": {"tf": 1}, "sain.iter.Iterator.take_while": {"tf": 1}, "sain.iter.Iterator.drop_while": {"tf": 1}, "sain.iter.Iterator.all": {"tf": 1}, "sain.iter.Iterator.any": {"tf": 1}, "sain.iter.Iterator.sort": {"tf": 1}, "sain.iter.Iterator.reversed": {"tf": 1}, "sain.iter.Iterator.union": {"tf": 1}, "sain.iter.Iterator.for_each": {"tf": 1}, "sain.iter.Empty.any": {"tf": 1}, "sain.iter.Empty.all": {"tf": 1}, "sain.iter.into_iter": {"tf": 1}, "sain.option.Some": {"tf": 1}, "sain.option.Some.unwrap": {"tf": 1.4142135623730951}, "sain.option.Some.unwrap_or": {"tf": 1.4142135623730951}, "sain.option.Some.unwrap_or_else": {"tf": 1.4142135623730951}, "sain.option.Some.unwrap_unchecked": {"tf": 1}, "sain.option.Some.expect": {"tf": 1.4142135623730951}, "sain.option.Some.map": {"tf": 1.4142135623730951}, "sain.option.Some.map_or": {"tf": 1.4142135623730951}, "sain.option.Some.map_or_else": {"tf": 1.4142135623730951}, "sain.option.Some.filter": {"tf": 1.4142135623730951}, "sain.option.Some.take": {"tf": 1}, "sain.option.Some.and_then": {"tf": 1.4142135623730951}, "sain.option.Some.as_ref": {"tf": 1.7320508075688772}, "sain.option.Some.as_mut": {"tf": 1.4142135623730951}, "sain.option.Some.is_some": {"tf": 1.4142135623730951}, "sain.option.Some.is_some_and": {"tf": 1.4142135623730951}, "sain.option.Some.is_none": {"tf": 1.4142135623730951}, "sain.result": {"tf": 2.23606797749979}, "sain.result.Ok.inspect": {"tf": 1}, "sain.result.Ok.inspect_err": {"tf": 1}, "sain.sync.Lazy.set": {"tf": 1}, "sain.sync.LazyFuture.set": {"tf": 1}}, "df": 107}}, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"sain.sync.Once": {"tf": 1}, "sain.sync.AsyncOnce": {"tf": 1}}, "df": 2, "s": {"docs": {"sain.sync": {"tf": 1}}, "df": 1}}}}}}}}, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sain.Some": {"tf": 1}}, "df": 1}}}, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.Some.unwrap": {"tf": 1}, "sain.option.Some.unwrap": {"tf": 1}}, "df": 2}}}}}}}, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"sain.convert": {"tf": 1}}, "df": 1, "d": {"docs": {"sain.Iterator.collect": {"tf": 1}, "sain.deprecated": {"tf": 1.4142135623730951}, "sain.unimplemented": {"tf": 1}, "sain.Ok.map_or": {"tf": 1}, "sain.Ok.map_or_else": {"tf": 1}, "sain.iter.Iterator.collect": {"tf": 1}, "sain.macros.deprecated": {"tf": 1.4142135623730951}, "sain.macros.unimplemented": {"tf": 1}, "sain.result.Ok.map_or": {"tf": 1}, "sain.result.Ok.map_or_else": {"tf": 1}, "sain.sync.Once.set": {"tf": 1}, "sain.sync.AsyncOnce.set": {"tf": 1}}, "df": 12}, "s": {"docs": {"sain.From": {"tf": 1}, "sain.collections.Bytes": {"tf": 1}, "sain.collections.buf.Bytes": {"tf": 1}, "sain.convert.From": {"tf": 1}, "sain.result": {"tf": 1}}, "df": 5}}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"sain.Box": {"tf": 1}, "sain.boxed.Box": {"tf": 1}, "sain.collections.Bytes.to_str": {"tf": 1}, "sain.collections.buf.Bytes.to_str": {"tf": 1}}, "df": 4}}}}, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {"sain.sync.Once.get_unchecked": {"tf": 1}, "sain.sync.AsyncOnce.get_unchecked": {"tf": 1}}, "df": 2, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sain.MaybeUninit": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.futures": {"tf": 1}}, "df": 1}}}}}}}}, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"sain.convert": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.Iter": {"tf": 1}, "sain.Iterator.collect": {"tf": 1}, "sain.Iterator.map": {"tf": 1}, "sain.Iterator.take_while": {"tf": 1}, "sain.Iterator.drop_while": {"tf": 1}, "sain.Iterator.all": {"tf": 1}, "sain.Iterator.any": {"tf": 1}, "sain.Iterator.zip": {"tf": 1}, "sain.Iterator.sort": {"tf": 1}, "sain.Iterator.union": {"tf": 1}, "sain.Iterator.for_each": {"tf": 1}, "sain.Iterator.async_for_each": {"tf": 1}, "sain.todo": {"tf": 1}, "sain.deprecated": {"tf": 1}, "sain.unimplemented": {"tf": 1}, "sain.doc": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}, "sain.collections.Bytes.put": {"tf": 1}, "sain.collections.Bytes.put_raw": {"tf": 1}, "sain.collections.Bytes.put_bytes": {"tf": 1}, "sain.collections.Bytes.put_str": {"tf": 1}, "sain.collections.buf.Bytes.put": {"tf": 1}, "sain.collections.buf.Bytes.put_raw": {"tf": 1}, "sain.collections.buf.Bytes.put_bytes": {"tf": 1}, "sain.collections.buf.Bytes.put_str": {"tf": 1}, "sain.futures.spawn": {"tf": 1}, "sain.iter.Iter": {"tf": 1}, "sain.iter.Iterator.collect": {"tf": 1}, "sain.iter.Iterator.map": {"tf": 1}, "sain.iter.Iterator.take_while": {"tf": 1}, "sain.iter.Iterator.drop_while": {"tf": 1}, "sain.iter.Iterator.all": {"tf": 1}, "sain.iter.Iterator.any": {"tf": 1}, "sain.iter.Iterator.zip": {"tf": 1}, "sain.iter.Iterator.sort": {"tf": 1}, "sain.iter.Iterator.union": {"tf": 1}, "sain.iter.Iterator.for_each": {"tf": 1}, "sain.iter.Iterator.async_for_each": {"tf": 1}, "sain.iter.Empty.any": {"tf": 1}, "sain.iter.Empty.all": {"tf": 1}, "sain.iter.into_iter": {"tf": 1}, "sain.macros.deprecated": {"tf": 1}, "sain.macros.unimplemented": {"tf": 1}, "sain.macros.todo": {"tf": 1}, "sain.macros.doc": {"tf": 1}}, "df": 48}}}}}}}, "t": {"docs": {}, "df": 0, "s": {"docs": {"sain.Iterator.raw_parts": {"tf": 1}, "sain.iter.Iterator.raw_parts": {"tf": 1}}, "df": 2}}, "i": {"docs": {}, "df": 0, "s": {"docs": {"sain.Iterator.filter": {"tf": 1}, "sain.iter.Iterator.filter": {"tf": 1}}, "df": 2}}}, "s": {"docs": {}, "df": 0, "s": {"docs": {"sain.todo": {"tf": 1}, "sain.macros.todo": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.cfg_attr": {"tf": 1.4142135623730951}, "sain.Ok.expect": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1.4142135623730951}, "sain.result.Ok.expect": {"tf": 1}}, "df": 4}}}}, "y": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {"sain.todo": {"tf": 1}, "sain.convert": {"tf": 2.23606797749979}, "sain.macros.todo": {"tf": 1}}, "df": 3}}}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {"sain.doc": {"tf": 2.23606797749979}, "sain.Error": {"tf": 1}, "sain.error": {"tf": 1.4142135623730951}, "sain.error.Error": {"tf": 1}, "sain.macros.doc": {"tf": 2.23606797749979}, "sain.result": {"tf": 1.4142135623730951}}, "df": 6, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {"sain.doc": {"tf": 1}, "sain.macros.doc": {"tf": 1}}, "df": 2}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {"sain.result": {"tf": 1.4142135623730951}}, "df": 1}}}}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"sain.convert": {"tf": 1}}, "df": 1, "s": {"docs": {"sain.Iterator": {"tf": 1}, "sain.iter.Iterator": {"tf": 1}}, "df": 2}}}}}}, "s": {"docs": {}, "df": 0, "h": {"docs": {"sain.Vec": {"tf": 1.4142135623730951}, "sain.Vec.with_capacity": {"tf": 2.449489742783178}, "sain.Vec.push": {"tf": 1.4142135623730951}, "sain.Vec.push_within_capacity": {"tf": 2.23606797749979}, "sain.Vec.reserve": {"tf": 1}, "sain.Vec.append": {"tf": 1}, "sain.Vec.copy": {"tf": 1}, "sain.collections.Vec": {"tf": 1.4142135623730951}, "sain.collections.Vec.with_capacity": {"tf": 2.449489742783178}, "sain.collections.Vec.push": {"tf": 1.4142135623730951}, "sain.collections.Vec.push_within_capacity": {"tf": 2.23606797749979}, "sain.collections.Vec.reserve": {"tf": 1}, "sain.collections.Vec.append": {"tf": 1}, "sain.collections.Vec.copy": {"tf": 1}, "sain.collections.vec": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.with_capacity": {"tf": 2.449489742783178}, "sain.collections.vec.Vec.push": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.push_within_capacity": {"tf": 2.23606797749979}, "sain.collections.vec.Vec.reserve": {"tf": 1}, "sain.collections.vec.Vec.append": {"tf": 1}, "sain.collections.vec.Vec.copy": {"tf": 1}, "sain.collections.vec.from_args": {"tf": 1}}, "df": 23, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.Vec": {"tf": 1.4142135623730951}, "sain.Vec.swap_remove": {"tf": 1}, "sain.collections.Vec": {"tf": 1.4142135623730951}, "sain.collections.Vec.swap_remove": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.swap_remove": {"tf": 1}}, "df": 6}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.Vec": {"tf": 1}, "sain.Vec.with_capacity": {"tf": 1}, "sain.collections.Vec": {"tf": 1}, "sain.collections.Vec.with_capacity": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1}, "sain.collections.vec.Vec.with_capacity": {"tf": 1}}, "df": 6}}}}}, "t": {"docs": {"sain.collections.Bytes": {"tf": 1.4142135623730951}, "sain.collections.Bytes.try_to_str": {"tf": 1}, "sain.collections.Bytes.to_str": {"tf": 1}, "sain.collections.Bytes.put": {"tf": 1.7320508075688772}, "sain.collections.Bytes.put_raw": {"tf": 1.7320508075688772}, "sain.collections.Bytes.put_bytes": {"tf": 1.4142135623730951}, "sain.collections.Bytes.put_str": {"tf": 1.4142135623730951}, "sain.collections.Bytes.len": {"tf": 1}, "sain.collections.buf.Bytes": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.try_to_str": {"tf": 1}, "sain.collections.buf.Bytes.to_str": {"tf": 1}, "sain.collections.buf.Bytes.put": {"tf": 1.7320508075688772}, "sain.collections.buf.Bytes.put_raw": {"tf": 1.7320508075688772}, "sain.collections.buf.Bytes.put_bytes": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.put_str": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.len": {"tf": 1}}, "df": 16, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.collections.Bytes.put": {"tf": 1}, "sain.collections.buf.Bytes.put": {"tf": 1}}, "df": 2}}}}}}, "o": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"sain.Vec": {"tf": 1}, "sain.collections.Vec": {"tf": 1}, "sain.collections.Bytes.from_static": {"tf": 1}, "sain.collections.buf.Bytes.from_static": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1}, "sain.sync.Lazy": {"tf": 1}, "sain.sync.Once.get_unchecked": {"tf": 1}, "sain.sync.LazyFuture": {"tf": 1}, "sain.sync.AsyncOnce.get_unchecked": {"tf": 1}}, "df": 9, "s": {"docs": {"sain.Iterator.cloned": {"tf": 1}, "sain.Iterator.copied": {"tf": 1}, "sain.Vec": {"tf": 1}, "sain.collections.Vec": {"tf": 1}, "sain.collections.Bytes": {"tf": 1}, "sain.collections.buf.Bytes": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1}, "sain.iter.Iterator.cloned": {"tf": 1}, "sain.iter.Iterator.copied": {"tf": 1}}, "df": 9}, "e": {"docs": {}, "df": 0, "r": {"docs": {"sain.Iterator.cloned": {"tf": 1}, "sain.iter.Iterator.cloned": {"tf": 1}}, "df": 2}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"sain.Iterator.async_for_each": {"tf": 1}, "sain.Error": {"tf": 1}, "sain.error.Error": {"tf": 1}, "sain.iter.Iterator.async_for_each": {"tf": 1}}, "df": 4}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.Vec.split_off": {"tf": 1}, "sain.Vec.insert": {"tf": 1}, "sain.collections.Vec.split_off": {"tf": 1}, "sain.collections.Vec.insert": {"tf": 1}, "sain.collections.Bytes.insert": {"tf": 1}, "sain.collections.buf.Bytes.insert": {"tf": 1}, "sain.collections.vec.Vec.split_off": {"tf": 1}, "sain.collections.vec.Vec.insert": {"tf": 1}}, "df": 8}}}}}}, "p": {"docs": {"sain.Vec.pop": {"tf": 1}, "sain.collections.Vec.pop": {"tf": 1}, "sain.collections.Bytes.pop": {"tf": 1}, "sain.collections.buf.Bytes.pop": {"tf": 1}, "sain.collections.vec.Vec.pop": {"tf": 1}}, "df": 5}, "o": {"docs": {}, "df": 0, "l": {"docs": {"sain.MaybeUninit": {"tf": 1.7320508075688772}}, "df": 1}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sain.Iterator.filter": {"tf": 2}, "sain.todo": {"tf": 1}, "sain.Vec.copy": {"tf": 1}, "sain.Vec.sort": {"tf": 1}, "sain.collections.Vec.copy": {"tf": 1}, "sain.collections.Vec.sort": {"tf": 1}, "sain.collections.Bytes.from_raw": {"tf": 1}, "sain.collections.buf.Bytes.from_raw": {"tf": 1}, "sain.collections.vec.Vec.copy": {"tf": 1}, "sain.collections.vec.Vec.sort": {"tf": 1}, "sain.iter.Iterator.filter": {"tf": 2}, "sain.macros.todo": {"tf": 1}, "sain.option.NOTHING": {"tf": 1}}, "df": 13, "s": {"docs": {"sain.Iterator.filter": {"tf": 1.4142135623730951}, "sain.iter.Iterator.filter": {"tf": 1.4142135623730951}}, "df": 2}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.Vec.reserve": {"tf": 1.7320508075688772}, "sain.collections.Vec.reserve": {"tf": 1.7320508075688772}, "sain.collections.vec.Vec.reserve": {"tf": 1.7320508075688772}}, "df": 3}}}, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {"sain.From.from_t": {"tf": 1}, "sain.TryFrom.try_from": {"tf": 1}, "sain.Into.into": {"tf": 1}, "sain.TryInto.try_into": {"tf": 1}, "sain.collections": {"tf": 1}, "sain.convert": {"tf": 1}, "sain.convert.From.from_t": {"tf": 1}, "sain.convert.TryFrom.try_from": {"tf": 1}, "sain.convert.Into.into": {"tf": 1}, "sain.convert.TryInto.try_into": {"tf": 1}}, "df": 10}}}}}}, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "a": {"docs": {"sain.Box.get": {"tf": 2}, "sain.boxed.Box.get": {"tf": 2}}, "df": 2}}}}}, "f": {"docs": {"sain.Some.unwrap_or_else": {"tf": 1}, "sain.Some.and_then": {"tf": 1}, "sain.Iterator": {"tf": 1}, "sain.Iterator.async_for_each": {"tf": 1}, "sain.Ok.is_ok_and": {"tf": 1}, "sain.Ok.is_err_and": {"tf": 1}, "sain.Ok.unwrap_or_else": {"tf": 1}, "sain.Ok.map_or": {"tf": 1}, "sain.Ok.map_or_else": {"tf": 1}, "sain.Err.is_ok_and": {"tf": 1}, "sain.Err.is_err_and": {"tf": 1}, "sain.Vec.retain": {"tf": 1.4142135623730951}, "sain.Error": {"tf": 1.4142135623730951}, "sain.TryFrom": {"tf": 1}, "sain.TryInto": {"tf": 1}, "sain.collections.Vec.retain": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.retain": {"tf": 1.4142135623730951}, "sain.convert.TryFrom": {"tf": 1}, "sain.convert.TryInto": {"tf": 1}, "sain.error.Error": {"tf": 1.4142135623730951}, "sain.iter.Iterator": {"tf": 1}, "sain.iter.Iterator.async_for_each": {"tf": 1}, "sain.option.Some.unwrap_or_else": {"tf": 1}, "sain.option.Some.and_then": {"tf": 1}, "sain.result.Ok.is_ok_and": {"tf": 1}, "sain.result.Ok.is_err_and": {"tf": 1}, "sain.result.Ok.unwrap_or_else": {"tf": 1}, "sain.result.Ok.map_or": {"tf": 1}, "sain.result.Ok.map_or_else": {"tf": 1}, "sain.result.Err.is_ok_and": {"tf": 1}, "sain.result.Err.is_err_and": {"tf": 1}, "sain.sync.Once.get_or_with": {"tf": 1}, "sain.sync.AsyncOnce.get_or_with": {"tf": 1}}, "df": 33, "e": {"docs": {}, "df": 0, "w": {"docs": {"sain": {"tf": 1}}, "df": 1}, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"sain.Iterator": {"tf": 1}, "sain.iter.Iterator": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.Error": {"tf": 1}, "sain.error.Error": {"tf": 1}}, "df": 2}}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {"sain.Iterator.for_each": {"tf": 1.4142135623730951}, "sain.Iterator.async_for_each": {"tf": 1}, "sain.iter.Iterator.for_each": {"tf": 1.4142135623730951}, "sain.iter.Iterator.async_for_each": {"tf": 1}}, "df": 4, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.cfg": {"tf": 1.7320508075688772}, "sain.Iterator.map": {"tf": 1}, "sain.Iterator.take_while": {"tf": 1}, "sain.Iterator.drop_while": {"tf": 1}, "sain.Iterator.all": {"tf": 1}, "sain.Iterator.any": {"tf": 1}, "sain.Iterator.sort": {"tf": 1}, "sain.Iterator.for_each": {"tf": 1}, "sain.Iterator.async_for_each": {"tf": 1.4142135623730951}, "sain.todo": {"tf": 1}, "sain.deprecated": {"tf": 1.4142135623730951}, "sain.unimplemented": {"tf": 1}, "sain.Ok.inspect": {"tf": 1}, "sain.Ok.inspect_err": {"tf": 1}, "sain.Ok.map": {"tf": 1}, "sain.Ok.map_or_else": {"tf": 1}, "sain.cfg.cfg": {"tf": 1.7320508075688772}, "sain.iter.Iterator.map": {"tf": 1}, "sain.iter.Iterator.take_while": {"tf": 1}, "sain.iter.Iterator.drop_while": {"tf": 1}, "sain.iter.Iterator.all": {"tf": 1}, "sain.iter.Iterator.any": {"tf": 1}, "sain.iter.Iterator.sort": {"tf": 1}, "sain.iter.Iterator.for_each": {"tf": 1}, "sain.iter.Iterator.async_for_each": {"tf": 1.4142135623730951}, "sain.iter.Empty.any": {"tf": 1}, "sain.iter.Empty.all": {"tf": 1}, "sain.macros.deprecated": {"tf": 1.4142135623730951}, "sain.macros.unimplemented": {"tf": 1}, "sain.macros.todo": {"tf": 1}, "sain.macros.unsafe": {"tf": 1.4142135623730951}, "sain.result.Ok.inspect": {"tf": 1}, "sain.result.Ok.inspect_err": {"tf": 1}, "sain.result.Ok.map": {"tf": 1}, "sain.result.Ok.map_or_else": {"tf": 1}, "sain.sync.Lazy": {"tf": 1}, "sain.sync.Once.get_or": {"tf": 1}, "sain.sync.Once.get_or_with": {"tf": 1}, "sain.sync.LazyFuture": {"tf": 1}, "sain.sync.AsyncOnce.get_or": {"tf": 1}, "sain.sync.AsyncOnce.get_or_with": {"tf": 1}}, "df": 41, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"sain.Vec": {"tf": 1}, "sain.collections.Vec": {"tf": 1}, "sain.collections.vec": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1}}, "df": 4}}}}}}}, "s": {"docs": {"sain.sync.Once.get_or": {"tf": 1}, "sain.sync.Once.get_or_with": {"tf": 1}, "sain.sync.AsyncOnce.get_or": {"tf": 1}, "sain.sync.AsyncOnce.get_or_with": {"tf": 1}}, "df": 4}}}}}}}, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sain.Vec.with_capacity": {"tf": 1}, "sain.collections.Vec.with_capacity": {"tf": 1}, "sain.collections.vec.Vec.with_capacity": {"tf": 1}}, "df": 3}}}}}, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"sain.option.Option": {"tf": 1}}, "df": 1}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"sain.sync.Once.set": {"tf": 1}, "sain.sync.AsyncOnce.set": {"tf": 1}}, "df": 2}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1.4142135623730951}, "sain.Some.as_ref": {"tf": 1}, "sain.Some.is_some": {"tf": 1.4142135623730951}, "sain.Some.is_some_and": {"tf": 1.4142135623730951}, "sain.Some.is_none": {"tf": 1.4142135623730951}, "sain.Iterator.take_while": {"tf": 1}, "sain.Iterator.drop_while": {"tf": 1}, "sain.Ok.is_ok": {"tf": 1}, "sain.Ok.is_err": {"tf": 1}, "sain.Ok.is_err_and": {"tf": 1}, "sain.Err.is_ok": {"tf": 1.4142135623730951}, "sain.Err.is_ok_and": {"tf": 1}, "sain.Vec.reserve": {"tf": 1.4142135623730951}, "sain.Error": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1.4142135623730951}, "sain.cfg.cfg": {"tf": 1}, "sain.collections.Vec.reserve": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.reserve": {"tf": 1.4142135623730951}, "sain.error.Error": {"tf": 1}, "sain.iter.Iterator.take_while": {"tf": 1}, "sain.iter.Iterator.drop_while": {"tf": 1}, "sain.iter.DropWhile": {"tf": 1}, "sain.option.Some.as_ref": {"tf": 1}, "sain.option.Some.is_some": {"tf": 1.4142135623730951}, "sain.option.Some.is_some_and": {"tf": 1.4142135623730951}, "sain.option.Some.is_none": {"tf": 1.4142135623730951}, "sain.result": {"tf": 1}, "sain.result.Ok.is_ok": {"tf": 1}, "sain.result.Ok.is_err": {"tf": 1}, "sain.result.Ok.is_err_and": {"tf": 1}, "sain.result.Err.is_ok": {"tf": 1.4142135623730951}, "sain.result.Err.is_ok_and": {"tf": 1}, "sain.sync.Once.set": {"tf": 1}, "sain.sync.AsyncOnce.set": {"tf": 1}}, "df": 35}}}, "i": {"docs": {}, "df": 0, "l": {"docs": {"sain.TryFrom": {"tf": 1.4142135623730951}, "sain.TryInto": {"tf": 1}, "sain.collections.Bytes.try_to_str": {"tf": 1}, "sain.collections.buf.Bytes.try_to_str": {"tf": 1}, "sain.convert": {"tf": 1.4142135623730951}, "sain.convert.TryFrom": {"tf": 1.4142135623730951}, "sain.convert.TryInto": {"tf": 1}}, "df": 7, "s": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.TryFrom": {"tf": 1}, "sain.TryInto": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}, "sain.convert.TryFrom": {"tf": 1}, "sain.convert.TryInto": {"tf": 1}}, "df": 8}, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.collections.Bytes.try_to_str": {"tf": 1}, "sain.collections.buf.Bytes.try_to_str": {"tf": 1}}, "df": 2}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"sain.collections.Bytes.to_str": {"tf": 1}, "sain.collections.buf.Bytes.to_str": {"tf": 1}}, "df": 2, "s": {"docs": {"sain.collections.Bytes.to_str": {"tf": 1}, "sain.collections.buf.Bytes.to_str": {"tf": 1}}, "df": 2}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sain.collections.Bytes.put": {"tf": 1}, "sain.collections.buf.Bytes.put": {"tf": 1}}, "df": 2}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {"sain.cfg": {"tf": 2}, "sain.cfg_attr": {"tf": 2}, "sain.Default": {"tf": 1}, "sain.Some": {"tf": 1}, "sain.Some.default": {"tf": 1}, "sain.Iter": {"tf": 1.4142135623730951}, "sain.Iter.clone": {"tf": 1}, "sain.Iterator": {"tf": 2.23606797749979}, "sain.Iterator.default": {"tf": 1}, "sain.Iterator.raw_parts": {"tf": 1}, "sain.Iterator.cloned": {"tf": 1}, "sain.Iterator.copied": {"tf": 1.4142135623730951}, "sain.Iterator.map": {"tf": 1}, "sain.Iterator.filter": {"tf": 1}, "sain.Iterator.take": {"tf": 1}, "sain.Iterator.skip": {"tf": 1}, "sain.Iterator.enumerate": {"tf": 1}, "sain.Iterator.take_while": {"tf": 1}, "sain.Iterator.drop_while": {"tf": 1}, "sain.Iterator.zip": {"tf": 1}, "sain.Iterator.sort": {"tf": 1}, "sain.Iterator.reversed": {"tf": 1}, "sain.Iterator.union": {"tf": 1}, "sain.Iterator.for_each": {"tf": 1}, "sain.Iterator.async_for_each": {"tf": 1.4142135623730951}, "sain.deprecated": {"tf": 1.4142135623730951}, "sain.Vec": {"tf": 1.7320508075688772}, "sain.Vec.iter": {"tf": 1}, "sain.Vec.push_within_capacity": {"tf": 1}, "sain.Vec.reserve": {"tf": 2}, "sain.Vec.append": {"tf": 1}, "sain.Error": {"tf": 1.4142135623730951}, "sain.Error.description": {"tf": 1}, "sain.Box": {"tf": 1}, "sain.MaybeUninit": {"tf": 1.7320508075688772}, "sain.MaybeUninit.uninit_array": {"tf": 1}, "sain.From": {"tf": 1.4142135623730951}, "sain.boxed.Box": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 2}, "sain.cfg.cfg": {"tf": 2}, "sain.collections.Vec": {"tf": 1.7320508075688772}, "sain.collections.Vec.iter": {"tf": 1}, "sain.collections.Vec.push_within_capacity": {"tf": 1}, "sain.collections.Vec.reserve": {"tf": 2}, "sain.collections.Vec.append": {"tf": 1}, "sain.collections.Bytes": {"tf": 1.7320508075688772}, "sain.collections.Bytes.put_raw": {"tf": 1}, "sain.collections.Bytes.iter": {"tf": 1}, "sain.collections.Bytes.index": {"tf": 1}, "sain.collections.buf": {"tf": 1}, "sain.collections.buf.Bytes": {"tf": 1.7320508075688772}, "sain.collections.buf.Bytes.put_raw": {"tf": 1}, "sain.collections.buf.Bytes.iter": {"tf": 1}, "sain.collections.buf.Bytes.index": {"tf": 1}, "sain.collections.buf.Rawish": {"tf": 1}, "sain.collections.buf.Buffer": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1.7320508075688772}, "sain.collections.vec.Vec.iter": {"tf": 1}, "sain.collections.vec.Vec.push_within_capacity": {"tf": 1}, "sain.collections.vec.Vec.reserve": {"tf": 2}, "sain.collections.vec.Vec.append": {"tf": 1}, "sain.convert": {"tf": 2}, "sain.convert.From": {"tf": 1.4142135623730951}, "sain.default": {"tf": 1}, "sain.default.Default": {"tf": 1}, "sain.error": {"tf": 1.4142135623730951}, "sain.error.Error": {"tf": 1.4142135623730951}, "sain.error.Error.description": {"tf": 1}, "sain.futures": {"tf": 1}, "sain.futures.spawn": {"tf": 1}, "sain.iter": {"tf": 1}, "sain.iter.Iter": {"tf": 1.4142135623730951}, "sain.iter.Iter.clone": {"tf": 1}, "sain.iter.Iterator": {"tf": 2.23606797749979}, "sain.iter.Iterator.default": {"tf": 1}, "sain.iter.Iterator.raw_parts": {"tf": 1}, "sain.iter.Iterator.cloned": {"tf": 1}, "sain.iter.Iterator.copied": {"tf": 1.4142135623730951}, "sain.iter.Iterator.map": {"tf": 1}, "sain.iter.Iterator.filter": {"tf": 1}, "sain.iter.Iterator.take": {"tf": 1}, "sain.iter.Iterator.skip": {"tf": 1}, "sain.iter.Iterator.enumerate": {"tf": 1}, "sain.iter.Iterator.take_while": {"tf": 1}, "sain.iter.Iterator.drop_while": {"tf": 1}, "sain.iter.Iterator.zip": {"tf": 1}, "sain.iter.Iterator.sort": {"tf": 1}, "sain.iter.Iterator.reversed": {"tf": 1}, "sain.iter.Iterator.union": {"tf": 1}, "sain.iter.Iterator.for_each": {"tf": 1}, "sain.iter.Iterator.async_for_each": {"tf": 1.4142135623730951}, "sain.iter.into_iter": {"tf": 1}, "sain.macros": {"tf": 1}, "sain.macros.deprecated": {"tf": 1.4142135623730951}, "sain.macros.unsafe": {"tf": 1}, "sain.option.Some": {"tf": 1}, "sain.option.Option": {"tf": 1}, "sain.result": {"tf": 1.4142135623730951}}, "df": 98, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 4}}}, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"sain.result": {"tf": 1}}, "df": 1}}}}}, "o": {"docs": {"sain.Ok.map_or": {"tf": 1}, "sain.Vec": {"tf": 2.8284271247461903}, "sain.collections.Vec": {"tf": 2.8284271247461903}, "sain.collections.vec": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec": {"tf": 2.8284271247461903}, "sain.option.Option": {"tf": 1}, "sain.result.Ok.map_or": {"tf": 1}, "sain.sync.Lazy.set": {"tf": 1}, "sain.sync.LazyFuture.set": {"tf": 1}}, "df": 9}, "u": {"docs": {}, "df": 0, "r": {"docs": {"sain.Ok.map_or_else": {"tf": 1}, "sain.result.Ok.map_or_else": {"tf": 1}}, "df": 2}, "n": {"docs": {}, "df": 0, "d": {"docs": {"sain.Vec.count": {"tf": 1}, "sain.Error": {"tf": 1.4142135623730951}, "sain.collections.Vec.count": {"tf": 1}, "sain.collections.Bytes.index": {"tf": 1}, "sain.collections.buf.Bytes.index": {"tf": 1}, "sain.collections.vec.Vec.count": {"tf": 1}, "sain.error": {"tf": 1}, "sain.error.Error": {"tf": 1.4142135623730951}}, "df": 8}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.cfg": {"tf": 1.7320508075688772}}, "df": 1}}}}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"sain.Default": {"tf": 1}, "sain.Some.take": {"tf": 1}, "sain.Some.take_if": {"tf": 1}, "sain.Some.iter": {"tf": 1}, "sain.Iter": {"tf": 1}, "sain.Iterator": {"tf": 1.7320508075688772}, "sain.Iterator.sink": {"tf": 1}, "sain.Iterator.raw_parts": {"tf": 1}, "sain.Iterator.take_while": {"tf": 1}, "sain.Iterator.drop_while": {"tf": 1}, "sain.Iterator.union": {"tf": 1}, "sain.todo": {"tf": 1.4142135623730951}, "sain.deprecated": {"tf": 1}, "sain.unimplemented": {"tf": 1}, "sain.doc": {"tf": 1.7320508075688772}, "sain.Ok.unwrap_or_else": {"tf": 1}, "sain.Ok.map_or_else": {"tf": 1}, "sain.Vec": {"tf": 3}, "sain.Vec.retain": {"tf": 1}, "sain.Vec.swap_remove": {"tf": 1}, "sain.Vec.pop": {"tf": 1}, "sain.Vec.remove": {"tf": 1}, "sain.Vec.extend": {"tf": 1}, "sain.Error": {"tf": 2}, "sain.From": {"tf": 2.23606797749979}, "sain.TryFrom": {"tf": 1.4142135623730951}, "sain.Into": {"tf": 1}, "sain.TryInto": {"tf": 1}, "sain.collections": {"tf": 1}, "sain.collections.Vec": {"tf": 3}, "sain.collections.Vec.retain": {"tf": 1}, "sain.collections.Vec.swap_remove": {"tf": 1}, "sain.collections.Vec.pop": {"tf": 1}, "sain.collections.Vec.remove": {"tf": 1}, "sain.collections.Vec.extend": {"tf": 1}, "sain.collections.Bytes": {"tf": 2.8284271247461903}, "sain.collections.Bytes.from_str": {"tf": 1.4142135623730951}, "sain.collections.Bytes.from_static": {"tf": 1.4142135623730951}, "sain.collections.Bytes.from_bytes": {"tf": 1.4142135623730951}, "sain.collections.Bytes.from_raw": {"tf": 2}, "sain.collections.Bytes.try_to_str": {"tf": 1}, "sain.collections.Bytes.to_str": {"tf": 1.4142135623730951}, "sain.collections.Bytes.leak": {"tf": 1}, "sain.collections.Bytes.as_bytes": {"tf": 1}, "sain.collections.Bytes.as_ref": {"tf": 1}, "sain.collections.Bytes.as_mut": {"tf": 1}, "sain.collections.Bytes.put_raw": {"tf": 1}, "sain.collections.Bytes.put_bytes": {"tf": 1}, "sain.collections.Bytes.put_str": {"tf": 1}, "sain.collections.Bytes.size": {"tf": 1}, "sain.collections.Bytes.iter": {"tf": 1.4142135623730951}, "sain.collections.Bytes.copy": {"tf": 1}, "sain.collections.Bytes.pop": {"tf": 1}, "sain.collections.buf.Bytes": {"tf": 2.8284271247461903}, "sain.collections.buf.Bytes.from_str": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.from_static": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.from_bytes": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.from_raw": {"tf": 2}, "sain.collections.buf.Bytes.try_to_str": {"tf": 1}, "sain.collections.buf.Bytes.to_str": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.leak": {"tf": 1}, "sain.collections.buf.Bytes.as_bytes": {"tf": 1}, "sain.collections.buf.Bytes.as_ref": {"tf": 1}, "sain.collections.buf.Bytes.as_mut": {"tf": 1}, "sain.collections.buf.Bytes.put_raw": {"tf": 1}, "sain.collections.buf.Bytes.put_bytes": {"tf": 1}, "sain.collections.buf.Bytes.put_str": {"tf": 1}, "sain.collections.buf.Bytes.size": {"tf": 1}, "sain.collections.buf.Bytes.iter": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.copy": {"tf": 1}, "sain.collections.buf.Bytes.pop": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 3}, "sain.collections.vec.Vec.retain": {"tf": 1}, "sain.collections.vec.Vec.swap_remove": {"tf": 1}, "sain.collections.vec.Vec.pop": {"tf": 1}, "sain.collections.vec.Vec.remove": {"tf": 1}, "sain.collections.vec.Vec.extend": {"tf": 1}, "sain.collections.vec.from_args": {"tf": 1}, "sain.convert": {"tf": 3.1622776601683795}, "sain.convert.From": {"tf": 2.23606797749979}, "sain.convert.TryFrom": {"tf": 1.4142135623730951}, "sain.convert.Into": {"tf": 1}, "sain.convert.TryInto": {"tf": 1}, "sain.default": {"tf": 1}, "sain.default.Default": {"tf": 1}, "sain.error": {"tf": 1.7320508075688772}, "sain.error.Error": {"tf": 2}, "sain.iter.Iter": {"tf": 1}, "sain.iter.Iterator": {"tf": 1.7320508075688772}, "sain.iter.Iterator.sink": {"tf": 1}, "sain.iter.Iterator.raw_parts": {"tf": 1}, "sain.iter.Iterator.take_while": {"tf": 1}, "sain.iter.Iterator.drop_while": {"tf": 1}, "sain.iter.Iterator.union": {"tf": 1}, "sain.iter.Cloned": {"tf": 1}, "sain.iter.Copied": {"tf": 1}, "sain.macros.deprecated": {"tf": 1}, "sain.macros.unimplemented": {"tf": 1}, "sain.macros.todo": {"tf": 1.4142135623730951}, "sain.macros.doc": {"tf": 1.7320508075688772}, "sain.option.Some": {"tf": 1}, "sain.option.Some.take": {"tf": 1}, "sain.option.Some.take_if": {"tf": 1}, "sain.option.Some.iter": {"tf": 1}, "sain.option.Option": {"tf": 1.7320508075688772}, "sain.option.NOTHING": {"tf": 1}, "sain.result": {"tf": 1}, "sain.result.Ok.unwrap_or_else": {"tf": 1}, "sain.result.Ok.map_or_else": {"tf": 1}, "sain.sync.Once": {"tf": 1.4142135623730951}, "sain.sync.AsyncOnce": {"tf": 1.4142135623730951}, "sain.sync.AsyncOnce.get_or": {"tf": 1}, "sain.sync.AsyncOnce.get_or_with": {"tf": 1}}, "df": 113}, "z": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"sain.Some.as_ref": {"tf": 1}, "sain.option.Some.as_ref": {"tf": 1}}, "df": 2}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"sain.Some.as_ref": {"tf": 1}, "sain.option.Some.as_ref": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "e": {"docs": {"sain.Iterator": {"tf": 1}, "sain.iter.Iterator": {"tf": 1}}, "df": 2}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"sain.Some.unwrap_unchecked": {"tf": 1.4142135623730951}, "sain.Some.map_or": {"tf": 1.4142135623730951}, "sain.Some.map_or_else": {"tf": 1.4142135623730951}, "sain.Ok.map_err": {"tf": 1}, "sain.convert": {"tf": 1}, "sain.futures.spawn": {"tf": 1}, "sain.option.Some.unwrap_unchecked": {"tf": 1.4142135623730951}, "sain.option.Some.map_or": {"tf": 1.4142135623730951}, "sain.option.Some.map_or_else": {"tf": 1.4142135623730951}, "sain.result.Ok.map_err": {"tf": 1}, "sain.sync.Lazy.get_unchecked": {"tf": 1}, "sain.sync.Once.get_unchecked": {"tf": 1}, "sain.sync.AsyncOnce.get_unchecked": {"tf": 1}}, "df": 13}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "@": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "g": {"docs": {"sain.Some.take_if": {"tf": 1}, "sain.option.Some.take_if": {"tf": 1}}, "df": 2}}}}}, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.Iterator.sink": {"tf": 1}, "sain.iter.Iterator.sink": {"tf": 1}}, "df": 2}}}}}}, "a": {"docs": {}, "df": 0, "g": {"docs": {"sain.sync.Once.set": {"tf": 2.23606797749979}, "sain.sync.AsyncOnce.set": {"tf": 2.23606797749979}}, "df": 2}}}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sain.Some.filter": {"tf": 1.4142135623730951}, "sain.Iter": {"tf": 1.4142135623730951}, "sain.Iterator.filter": {"tf": 1}, "sain.Vec.retain": {"tf": 1}, "sain.collections.Vec.retain": {"tf": 1}, "sain.collections.vec.Vec.retain": {"tf": 1}, "sain.iter.Iter": {"tf": 1.4142135623730951}, "sain.iter.Iterator.filter": {"tf": 1}, "sain.iter.Filter": {"tf": 1}, "sain.option.Some.filter": {"tf": 1.4142135623730951}}, "df": 10, "s": {"docs": {"sain.Iterator.filter": {"tf": 1}, "sain.iter.Iterator.filter": {"tf": 1}, "sain.iter.Filter": {"tf": 1}}, "df": 3}}}}, "e": {"docs": {"sain.collections.Bytes.from_raw": {"tf": 1.7320508075688772}, "sain.collections.Bytes.put_raw": {"tf": 2}, "sain.collections.buf.Bytes.from_raw": {"tf": 1.7320508075688772}, "sain.collections.buf.Bytes.put_raw": {"tf": 2}, "sain.result": {"tf": 2.6457513110645907}}, "df": 5, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"sain.result": {"tf": 2.8284271247461903}}, "df": 1}}}}}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {"sain.Some.take_if": {"tf": 1}, "sain.Error": {"tf": 1.4142135623730951}, "sain.error.Error": {"tf": 1.4142135623730951}, "sain.option.Some.take_if": {"tf": 1}}, "df": 4}, "e": {"docs": {"sain.Some.as_ref": {"tf": 1}, "sain.option.Some.as_ref": {"tf": 1}}, "df": 2}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"sain.Iterator": {"tf": 1}, "sain.iter.Iterator": {"tf": 1}}, "df": 2}}}}}, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"sain.Iterator": {"tf": 1}, "sain.Iterator.take": {"tf": 1}, "sain.Iterator.skip": {"tf": 1}, "sain.Iterator.first": {"tf": 1.4142135623730951}, "sain.Vec": {"tf": 1.4142135623730951}, "sain.Vec.split_first": {"tf": 1.7320508075688772}, "sain.Vec.first": {"tf": 2}, "sain.Vec.truncate": {"tf": 1}, "sain.Vec.swap_remove": {"tf": 1}, "sain.Vec.index": {"tf": 1}, "sain.Box": {"tf": 1.7320508075688772}, "sain.Box.on_expire": {"tf": 1}, "sain.MaybeUninit.assume_init": {"tf": 1}, "sain.TryFrom": {"tf": 1}, "sain.TryInto": {"tf": 1}, "sain.boxed.Box": {"tf": 1.7320508075688772}, "sain.boxed.Box.on_expire": {"tf": 1}, "sain.collections.Vec": {"tf": 1.4142135623730951}, "sain.collections.Vec.split_first": {"tf": 1.7320508075688772}, "sain.collections.Vec.first": {"tf": 2}, "sain.collections.Vec.truncate": {"tf": 1}, "sain.collections.Vec.swap_remove": {"tf": 1}, "sain.collections.Vec.index": {"tf": 1}, "sain.collections.Bytes.index": {"tf": 1}, "sain.collections.buf.Bytes.index": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.split_first": {"tf": 1.7320508075688772}, "sain.collections.vec.Vec.first": {"tf": 2}, "sain.collections.vec.Vec.truncate": {"tf": 1}, "sain.collections.vec.Vec.swap_remove": {"tf": 1}, "sain.collections.vec.Vec.index": {"tf": 1}, "sain.convert.TryFrom": {"tf": 1}, "sain.convert.TryInto": {"tf": 1}, "sain.iter.Iterator": {"tf": 1}, "sain.iter.Iterator.take": {"tf": 1}, "sain.iter.Iterator.skip": {"tf": 1}, "sain.iter.Iterator.first": {"tf": 1.4142135623730951}, "sain.iter.Take": {"tf": 1}, "sain.iter.Skip": {"tf": 1}, "sain.sync.Lazy": {"tf": 1}, "sain.sync.Lazy.get_unchecked": {"tf": 1}, "sain.sync.Once": {"tf": 1.4142135623730951}, "sain.sync.Once.get_unchecked": {"tf": 1}, "sain.sync.Once.set": {"tf": 1}, "sain.sync.Once.get_or": {"tf": 1.4142135623730951}, "sain.sync.LazyFuture": {"tf": 1}, "sain.sync.AsyncOnce": {"tf": 1.4142135623730951}, "sain.sync.AsyncOnce.get_unchecked": {"tf": 1}, "sain.sync.AsyncOnce.set": {"tf": 1}}, "df": 49}}}}}, "c": {"docs": {"sain.Iterator.raw_parts": {"tf": 1}, "sain.Iterator.take": {"tf": 1.7320508075688772}, "sain.Ok.map": {"tf": 1.4142135623730951}, "sain.Ok.map_or": {"tf": 2}, "sain.Ok.map_or_else": {"tf": 2}, "sain.Ok.iter": {"tf": 2}, "sain.Vec.swap_remove": {"tf": 1.4142135623730951}, "sain.Vec.remove": {"tf": 1.4142135623730951}, "sain.MaybeUninit": {"tf": 1}, "sain.collections.Vec.swap_remove": {"tf": 1.4142135623730951}, "sain.collections.Vec.remove": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.swap_remove": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.remove": {"tf": 1.4142135623730951}, "sain.iter.Iterator.raw_parts": {"tf": 1}, "sain.iter.Iterator.take": {"tf": 1.7320508075688772}, "sain.result.Ok.map": {"tf": 1.4142135623730951}, "sain.result.Ok.map_or": {"tf": 2}, "sain.result.Ok.map_or_else": {"tf": 2}, "sain.result.Ok.iter": {"tf": 2}}, "df": 19, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"sain": {"tf": 1}}, "df": 1, ":": {"docs": {}, "df": 0, ":": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, ":": {"docs": {}, "df": 0, ":": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"sain.Iterator": {"tf": 1}, "sain.iter.Iterator": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"sain.Iterator.async_for_each": {"tf": 1}, "sain.iter.Iterator.async_for_each": {"tf": 1}}, "df": 2}}}}}}}}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {"sain.cfg": {"tf": 1}, "sain.Some.unwrap": {"tf": 1}, "sain.todo": {"tf": 1}, "sain.Error": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}, "sain.error.Error": {"tf": 1}, "sain.macros.todo": {"tf": 1}, "sain.option.Some.unwrap": {"tf": 1}}, "df": 8}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 2, "a": {"docs": {}, "df": 0, "l": {"docs": {"sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}}, "df": 2}}}}}}}}, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {"sain.sync.Lazy": {"tf": 2}, "sain.sync.LazyFuture": {"tf": 2}}, "df": 2, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.cfg_attr": {"tf": 1}, "sain.cfg": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}}, "df": 3}}}}}}}}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"sain.MaybeUninit": {"tf": 1}, "sain.result": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.Some": {"tf": 1.4142135623730951}, "sain.Some.unwrap_unchecked": {"tf": 1}, "sain.Some.expect": {"tf": 1}, "sain.Some.filter": {"tf": 1}, "sain.Some.replace": {"tf": 1}, "sain.Some.and_ok": {"tf": 1}, "sain.Some.and_then": {"tf": 1}, "sain.Some.iter": {"tf": 1}, "sain.Some.as_ref": {"tf": 1.4142135623730951}, "sain.Some.as_mut": {"tf": 1}, "sain.Some.is_some": {"tf": 1}, "sain.Some.is_some_and": {"tf": 1}, "sain.Some.is_none": {"tf": 1}, "sain.Ok.is_ok": {"tf": 1}, "sain.Ok.is_ok_and": {"tf": 1}, "sain.Ok.is_err": {"tf": 1}, "sain.Ok.is_err_and": {"tf": 1}, "sain.Ok.unwrap_or_else": {"tf": 1}, "sain.Ok.unwrap_err": {"tf": 1}, "sain.Ok.ok": {"tf": 1}, "sain.Ok.err": {"tf": 1}, "sain.Ok.inspect": {"tf": 1}, "sain.Ok.inspect_err": {"tf": 1}, "sain.Ok.iter": {"tf": 1}, "sain.Err.is_ok": {"tf": 1}, "sain.Err.is_ok_and": {"tf": 1}, "sain.Err.is_err": {"tf": 1}, "sain.Err.is_err_and": {"tf": 1}, "sain.Box.get": {"tf": 1}, "sain.boxed.Box.get": {"tf": 1}, "sain.option.Some.unwrap_unchecked": {"tf": 1}, "sain.option.Some.expect": {"tf": 1}, "sain.option.Some.filter": {"tf": 1}, "sain.option.Some.replace": {"tf": 1}, "sain.option.Some.and_ok": {"tf": 1}, "sain.option.Some.and_then": {"tf": 1}, "sain.option.Some.iter": {"tf": 1}, "sain.option.Some.as_ref": {"tf": 1.4142135623730951}, "sain.option.Some.as_mut": {"tf": 1}, "sain.option.Some.is_some": {"tf": 1}, "sain.option.Some.is_some_and": {"tf": 1}, "sain.option.Some.is_none": {"tf": 1}, "sain.result": {"tf": 1}, "sain.result.Ok.is_ok": {"tf": 1}, "sain.result.Ok.is_ok_and": {"tf": 1}, "sain.result.Ok.is_err": {"tf": 1}, "sain.result.Ok.is_err_and": {"tf": 1}, "sain.result.Ok.unwrap_or_else": {"tf": 1}, "sain.result.Ok.unwrap_err": {"tf": 1}, "sain.result.Ok.ok": {"tf": 1}, "sain.result.Ok.err": {"tf": 1}, "sain.result.Ok.inspect": {"tf": 1}, "sain.result.Ok.inspect_err": {"tf": 1}, "sain.result.Ok.iter": {"tf": 1}, "sain.result.Err.is_ok": {"tf": 1}, "sain.result.Err.is_ok_and": {"tf": 1}, "sain.result.Err.is_err": {"tf": 1}, "sain.result.Err.is_err_and": {"tf": 1}, "sain.sync.Lazy.is_initialized": {"tf": 1}, "sain.sync.Lazy.get": {"tf": 1}, "sain.sync.Lazy.get_unchecked": {"tf": 1}, "sain.sync.Lazy.set": {"tf": 1}, "sain.sync.Once.get_unchecked": {"tf": 1}, "sain.sync.LazyFuture.is_initialized": {"tf": 1}, "sain.sync.LazyFuture.get": {"tf": 1}, "sain.sync.LazyFuture.set": {"tf": 1}, "sain.sync.AsyncOnce.get_unchecked": {"tf": 1}}, "df": 67}, "r": {"docs": {"sain.collections.Bytes": {"tf": 1}, "sain.collections.buf": {"tf": 1}, "sain.collections.buf.Bytes": {"tf": 1}}, "df": 3, "s": {"docs": {"sain.collections": {"tf": 1}}, "df": 1}}}, "s": {"docs": {"sain.Ok": {"tf": 1}, "sain.Err": {"tf": 1}, "sain.Vec.is_empty": {"tf": 1}, "sain.Box": {"tf": 1}, "sain.MaybeUninit": {"tf": 1.7320508075688772}, "sain.boxed.Box": {"tf": 1}, "sain.collections.Vec.is_empty": {"tf": 1}, "sain.collections.Bytes.from_raw": {"tf": 1}, "sain.collections.Bytes.try_to_str": {"tf": 1}, "sain.collections.Bytes.to_str": {"tf": 1}, "sain.collections.Bytes.raw_parts": {"tf": 1}, "sain.collections.Bytes.is_empty": {"tf": 1}, "sain.collections.buf.Bytes.from_raw": {"tf": 1}, "sain.collections.buf.Bytes.try_to_str": {"tf": 1}, "sain.collections.buf.Bytes.to_str": {"tf": 1}, "sain.collections.buf.Bytes.raw_parts": {"tf": 1}, "sain.collections.buf.Bytes.is_empty": {"tf": 1}, "sain.collections.vec.Vec.is_empty": {"tf": 1}, "sain.macros": {"tf": 1}, "sain.result.Ok": {"tf": 1}, "sain.result.Err": {"tf": 1}}, "df": 21}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.collections.Bytes.raw_parts": {"tf": 1}, "sain.collections.buf.Bytes.raw_parts": {"tf": 1}, "sain.collections.vec.from_args": {"tf": 1}}, "df": 3}}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"sain.Iterator": {"tf": 1}, "sain.doc": {"tf": 1}, "sain.MaybeUninit.uninit_array": {"tf": 1}, "sain.MaybeUninit.write": {"tf": 1}, "sain.convert": {"tf": 2.449489742783178}, "sain.iter.Iterator": {"tf": 1}, "sain.macros.doc": {"tf": 1}}, "df": 7, "s": {"docs": {"sain.collections.Bytes.put_raw": {"tf": 1}, "sain.collections.buf.Bytes.put_raw": {"tf": 1}, "sain.sync.Once.get_or_with": {"tf": 1}, "sain.sync.AsyncOnce.get_or": {"tf": 1}, "sain.sync.AsyncOnce.get_or_with": {"tf": 1}}, "df": 5}}}, "x": {"docs": {}, "df": 0, "t": {"docs": {"sain.Error": {"tf": 1.4142135623730951}, "sain.Error.description": {"tf": 1}, "sain.error.Error": {"tf": 1.4142135623730951}, "sain.error.Error.description": {"tf": 1}}, "df": 4}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"sain.Iterator.all": {"tf": 1}, "sain.Vec.reserve": {"tf": 1}, "sain.collections.Vec.reserve": {"tf": 1}, "sain.collections.vec.Vec.reserve": {"tf": 1}, "sain.iter.Iterator.all": {"tf": 1}, "sain.iter.Empty.all": {"tf": 1}}, "df": 6}}}, "g": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {"sain.Vec": {"tf": 1}, "sain.collections.Vec": {"tf": 1}, "sain.collections.vec": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1}}, "df": 4}}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.TryFrom": {"tf": 1}, "sain.convert.TryFrom": {"tf": 1}}, "df": 2}}}}}}}, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"sain.Some.into_inner": {"tf": 1}, "sain.Iterator.sink": {"tf": 1}, "sain.iter.Iterator.sink": {"tf": 1}, "sain.option.Some.into_inner": {"tf": 1}}, "df": 4, "d": {"docs": {"sain.Iterator.copied": {"tf": 1}, "sain.collections.Bytes.leak": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.leak": {"tf": 1.4142135623730951}, "sain.iter.Iterator.copied": {"tf": 1}}, "df": 4}, "s": {"docs": {"sain.collections.Bytes.leak": {"tf": 1}, "sain.collections.buf.Bytes.leak": {"tf": 1}}, "df": 2}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.From": {"tf": 1}, "sain.convert": {"tf": 1.4142135623730951}, "sain.convert.From": {"tf": 1}}, "df": 3}}}}}, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.Some.unwrap_unchecked": {"tf": 1}, "sain.MaybeUninit.assume_init": {"tf": 1}, "sain.option.Some.unwrap_unchecked": {"tf": 1}, "sain.sync.Lazy.get_unchecked": {"tf": 1}, "sain.sync.Once.get_unchecked": {"tf": 1}, "sain.sync.LazyFuture.get": {"tf": 1}, "sain.sync.AsyncOnce.get_unchecked": {"tf": 1}}, "df": 7}}}}}}, "t": {"docs": {"sain.sync.Once.set": {"tf": 1}, "sain.sync.AsyncOnce.set": {"tf": 1}}, "df": 2, "r": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"sain.MaybeUninit": {"tf": 1}, "sain.collections.vec.from_args": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.Vec": {"tf": 1}, "sain.collections.Vec": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1}}, "df": 3}}, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.collections.Bytes": {"tf": 1}, "sain.collections.buf.Bytes": {"tf": 1}}, "df": 2}}}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"sain.option.NOTHING": {"tf": 1}}, "df": 1}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"sain.Iterator.to_vec": {"tf": 1}, "sain.Ok.ok": {"tf": 1}, "sain.Ok.err": {"tf": 1}, "sain.TryFrom": {"tf": 1.4142135623730951}, "sain.collections.Bytes.try_to_str": {"tf": 1}, "sain.collections.Bytes.to_str": {"tf": 1.4142135623730951}, "sain.collections.Bytes.as_bytes": {"tf": 1}, "sain.collections.Bytes.as_ref": {"tf": 1}, "sain.collections.buf.Bytes.try_to_str": {"tf": 1}, "sain.collections.buf.Bytes.to_str": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.as_bytes": {"tf": 1}, "sain.collections.buf.Bytes.as_ref": {"tf": 1}, "sain.convert": {"tf": 1}, "sain.convert.TryFrom": {"tf": 1.4142135623730951}, "sain.iter.Iterator.to_vec": {"tf": 1}, "sain.iter.into_iter": {"tf": 1.4142135623730951}, "sain.result.Ok.ok": {"tf": 1}, "sain.result.Ok.err": {"tf": 1}}, "df": 18, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.TryFrom": {"tf": 1.4142135623730951}, "sain.TryInto": {"tf": 1}, "sain.collections.Bytes.to_str": {"tf": 1}, "sain.collections.buf.Bytes.to_str": {"tf": 1}, "sain.convert.TryFrom": {"tf": 1.4142135623730951}, "sain.convert.TryInto": {"tf": 1}, "sain.error": {"tf": 1}}, "df": 7}}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.From.from_t": {"tf": 1}, "sain.TryFrom": {"tf": 1.4142135623730951}, "sain.TryFrom.try_from": {"tf": 1}, "sain.Into": {"tf": 1}, "sain.Into.into": {"tf": 1}, "sain.TryInto": {"tf": 1.7320508075688772}, "sain.TryInto.try_into": {"tf": 1}, "sain.collections.Bytes.to_str": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.to_str": {"tf": 1.4142135623730951}, "sain.convert": {"tf": 1.7320508075688772}, "sain.convert.From.from_t": {"tf": 1}, "sain.convert.TryFrom": {"tf": 1.4142135623730951}, "sain.convert.TryFrom.try_from": {"tf": 1}, "sain.convert.Into": {"tf": 1}, "sain.convert.Into.into": {"tf": 1}, "sain.convert.TryInto": {"tf": 1.7320508075688772}, "sain.convert.TryInto.try_into": {"tf": 1}}, "df": 17, "s": {"docs": {"sain.From": {"tf": 1}, "sain.TryFrom": {"tf": 1}, "sain.collections": {"tf": 1}, "sain.convert": {"tf": 2.23606797749979}, "sain.convert.From": {"tf": 1}, "sain.convert.TryFrom": {"tf": 1}}, "df": 6}}}}}}}}, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"sain.Iterator.async_for_each": {"tf": 1}, "sain.futures.spawn": {"tf": 1}, "sain.iter.Iterator.async_for_each": {"tf": 1}, "sain.sync.Once.get_or": {"tf": 1}, "sain.sync.Once.get_or_with": {"tf": 1}, "sain.sync.AsyncOnce.get_or": {"tf": 1}, "sain.sync.AsyncOnce.get_or_with": {"tf": 1}}, "df": 7}}}}}}}}}}, "m": {"docs": {"sain.Some.take_if": {"tf": 1.4142135623730951}, "sain.Error": {"tf": 1}, "sain.error.Error": {"tf": 1}, "sain.futures.spawn": {"tf": 1}, "sain.option.Some.take_if": {"tf": 1.4142135623730951}}, "df": 5, "/": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"sain.Iterator": {"tf": 1}, "sain.iter.Iterator": {"tf": 1}}, "df": 2}}}}}}}}}, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"sain.Ok.unwrap_or_else": {"tf": 1}, "sain.result.Ok.unwrap_or_else": {"tf": 1}}, "df": 2}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.Vec": {"tf": 1}, "sain.collections.Vec": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1}}, "df": 3, "s": {"docs": {"sain.Vec.sort": {"tf": 1}, "sain.collections.Vec.sort": {"tf": 1}, "sain.collections.vec.Vec.sort": {"tf": 1}}, "df": 3}}}}, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.Vec": {"tf": 1.4142135623730951}, "sain.collections.Vec": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec": {"tf": 1.4142135623730951}}, "df": 3}}}, "e": {"docs": {"sain.Vec": {"tf": 1.4142135623730951}, "sain.collections.Vec": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec": {"tf": 1.4142135623730951}}, "df": 3}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sain.collections.Bytes": {"tf": 1}, "sain.collections.buf.Bytes": {"tf": 1}}, "df": 2}}}}}}, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sain.iter": {"tf": 1}}, "df": 1}}}}}}}}, "p": {"docs": {}, "df": 0, "y": {"docs": {"sain.Some.as_ref": {"tf": 2}, "sain.Iter.clone": {"tf": 1}, "sain.Iterator.cloned": {"tf": 2.23606797749979}, "sain.Iterator.copied": {"tf": 1.7320508075688772}, "sain.Vec": {"tf": 2.23606797749979}, "sain.Vec.copy": {"tf": 1.7320508075688772}, "sain.collections.Vec": {"tf": 2.23606797749979}, "sain.collections.Vec.copy": {"tf": 1.7320508075688772}, "sain.collections.Bytes.copy": {"tf": 1.7320508075688772}, "sain.collections.buf.Bytes.copy": {"tf": 1.7320508075688772}, "sain.collections.vec.Vec": {"tf": 2.23606797749979}, "sain.collections.vec.Vec.copy": {"tf": 1.7320508075688772}, "sain.iter.Iter.clone": {"tf": 1}, "sain.iter.Iterator.cloned": {"tf": 2.23606797749979}, "sain.iter.Iterator.copied": {"tf": 1.7320508075688772}, "sain.option.Some.as_ref": {"tf": 2}}, "df": 16, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.collections.Bytes": {"tf": 1}, "sain.collections.Bytes.from_static": {"tf": 1}, "sain.collections.Bytes.as_mut": {"tf": 1}, "sain.collections.buf.Bytes": {"tf": 1}, "sain.collections.buf.Bytes.from_static": {"tf": 1}, "sain.collections.buf.Bytes.as_mut": {"tf": 1}}, "df": 6}}}}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"sain.Iterator.cloned": {"tf": 1}, "sain.Iterator.copied": {"tf": 1}, "sain.Vec": {"tf": 1}, "sain.Vec.copy": {"tf": 1}, "sain.collections.Vec": {"tf": 1}, "sain.collections.Vec.copy": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1}, "sain.collections.vec.Vec.copy": {"tf": 1}, "sain.iter.Iterator.cloned": {"tf": 1}, "sain.iter.Iterator.copied": {"tf": 1}, "sain.iter.Cloned": {"tf": 1}, "sain.iter.Copied": {"tf": 1}}, "df": 12}, "d": {"docs": {"sain.Iterator.copied": {"tf": 1}, "sain.Vec": {"tf": 1}, "sain.collections.Vec": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1}, "sain.iter.Iterator.copied": {"tf": 1}, "sain.iter.Copied": {"tf": 1}}, "df": 6}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"sain.Iter.clone": {"tf": 1}, "sain.Iterator.raw_parts": {"tf": 1}, "sain.Iterator.count": {"tf": 1.4142135623730951}, "sain.Vec.count": {"tf": 1}, "sain.collections.Vec.count": {"tf": 1}, "sain.collections.Bytes.count": {"tf": 1}, "sain.collections.buf.Bytes.count": {"tf": 1}, "sain.collections.vec.Vec.count": {"tf": 1}, "sain.iter.Iter.clone": {"tf": 1}, "sain.iter.Iterator.raw_parts": {"tf": 1}, "sain.iter.Iterator.count": {"tf": 1.4142135623730951}, "sain.iter.Enumerate": {"tf": 1}, "sain.iter.Empty.count": {"tf": 1.4142135623730951}, "sain.iter.repeat": {"tf": 1}}, "df": 14}}, "l": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "n": {"docs": {"sain.Error": {"tf": 1.4142135623730951}, "sain.TryFrom": {"tf": 1}, "sain.convert.TryFrom": {"tf": 1}, "sain.error.Error": {"tf": 1.4142135623730951}, "sain.futures.spawn": {"tf": 1}}, "df": 5}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"sain.Iterator.collect": {"tf": 1.7320508075688772}, "sain.iter.Iterator.collect": {"tf": 1.7320508075688772}}, "df": 2, "s": {"docs": {"sain.Iterator.collect": {"tf": 1}, "sain.iter.Iterator.collect": {"tf": 1}}, "df": 2}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.Vec": {"tf": 1}, "sain.collections": {"tf": 1}, "sain.collections.Vec": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1}}, "df": 4, "s": {"docs": {"sain.Iterator.take_while": {"tf": 1}, "sain.Iterator.drop_while": {"tf": 1}, "sain.Iterator.all": {"tf": 1}, "sain.Iterator.any": {"tf": 1}, "sain.Iterator.sort": {"tf": 1}, "sain.Iterator.for_each": {"tf": 1}, "sain.Iterator.async_for_each": {"tf": 1}, "sain.Vec": {"tf": 1}, "sain.collections": {"tf": 1.7320508075688772}, "sain.collections.Vec": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1}, "sain.futures.spawn": {"tf": 1}, "sain.iter.Iterator.take_while": {"tf": 1}, "sain.iter.Iterator.drop_while": {"tf": 1}, "sain.iter.Iterator.all": {"tf": 1}, "sain.iter.Iterator.any": {"tf": 1}, "sain.iter.Iterator.sort": {"tf": 1}, "sain.iter.Iterator.for_each": {"tf": 1}, "sain.iter.Iterator.async_for_each": {"tf": 1}, "sain.iter.Empty.any": {"tf": 1}, "sain.iter.Empty.all": {"tf": 1}}, "df": 21}}}}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"sain.Vec": {"tf": 1.7320508075688772}, "sain.collections.Vec": {"tf": 1.7320508075688772}, "sain.collections.vec.Vec": {"tf": 1.7320508075688772}}, "df": 3}}}, "f": {"docs": {}, "df": 0, "g": {"docs": {"sain.cfg": {"tf": 1.7320508075688772}, "sain.cfg_attr": {"tf": 1.7320508075688772}, "sain.cfg.cfg_attr": {"tf": 1.7320508075688772}, "sain.cfg.cfg": {"tf": 1.7320508075688772}}, "df": 4}}, "p": {"docs": {}, "df": 0, "u": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 4}, "y": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.cfg": {"tf": 1}}, "df": 1}}}}}}, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {"sain.Vec.with_capacity": {"tf": 1}, "sain.collections.Vec.with_capacity": {"tf": 1}, "sain.collections.Bytes.is_empty": {"tf": 1}, "sain.collections.buf.Bytes.is_empty": {"tf": 1}, "sain.collections.vec.Vec.with_capacity": {"tf": 1}}, "df": 5, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 2}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.Some.unwrap_unchecked": {"tf": 1}, "sain.option.Some.unwrap_unchecked": {"tf": 1}, "sain.option.Option": {"tf": 1}, "sain.sync.Lazy.get_unchecked": {"tf": 1}, "sain.sync.Once.get_unchecked": {"tf": 1}, "sain.sync.AsyncOnce.get_unchecked": {"tf": 1}}, "df": 6}}}}}, "a": {"docs": {}, "df": 0, "p": {"docs": {"sain.collections.buf": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {"sain.Some.into_inner": {"tf": 1}, "sain.option.Some.into_inner": {"tf": 1}}, "df": 2, "s": {"docs": {"sain.MaybeUninit": {"tf": 1.4142135623730951}}, "df": 1}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sain.collections.Bytes.to_str": {"tf": 1}, "sain.collections.Bytes.iter": {"tf": 1}, "sain.collections.buf.Bytes.to_str": {"tf": 1}, "sain.collections.buf.Bytes.iter": {"tf": 1}}, "df": 4}}}}}}}, "o": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sain.Vec.reserve": {"tf": 1}, "sain.collections.Vec.reserve": {"tf": 1}, "sain.collections.vec.Vec.reserve": {"tf": 1}}, "df": 3}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "s": {"docs": {"sain.collections.Bytes.leak": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.leak": {"tf": 1.4142135623730951}}, "df": 2}}}}, "r": {"docs": {"sain.collections.Bytes.iter": {"tf": 1}, "sain.collections.buf.Bytes.iter": {"tf": 1}}, "df": 2}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"sain.Some.and_then": {"tf": 1}, "sain.Iterator.for_each": {"tf": 1}, "sain.Iterator.async_for_each": {"tf": 1}, "sain.deprecated": {"tf": 1}, "sain.unimplemented": {"tf": 1}, "sain.Ok.inspect": {"tf": 1}, "sain.Ok.inspect_err": {"tf": 1}, "sain.Vec.push_within_capacity": {"tf": 1}, "sain.Box.on_expire": {"tf": 1.4142135623730951}, "sain.MaybeUninit": {"tf": 1}, "sain.MaybeUninit.uninit_array": {"tf": 1}, "sain.MaybeUninit.assume_init": {"tf": 1}, "sain.boxed.Box.on_expire": {"tf": 1.4142135623730951}, "sain.collections.Vec.push_within_capacity": {"tf": 1}, "sain.collections.Bytes.put": {"tf": 1}, "sain.collections.buf.Bytes.put": {"tf": 1}, "sain.collections.vec.Vec.push_within_capacity": {"tf": 1}, "sain.iter.Iterator.for_each": {"tf": 1}, "sain.iter.Iterator.async_for_each": {"tf": 1}, "sain.macros.deprecated": {"tf": 1}, "sain.macros.unimplemented": {"tf": 1}, "sain.option.Some.and_then": {"tf": 1}, "sain.result.Ok.inspect": {"tf": 1}, "sain.result.Ok.inspect_err": {"tf": 1}, "sain.sync.Lazy": {"tf": 1}, "sain.sync.Lazy.set": {"tf": 1}, "sain.sync.Once.get_or": {"tf": 1}, "sain.sync.Once.get_or_with": {"tf": 1}, "sain.sync.LazyFuture": {"tf": 1}, "sain.sync.LazyFuture.set": {"tf": 1}, "sain.sync.AsyncOnce.get_or": {"tf": 1}, "sain.sync.AsyncOnce.get_or_with": {"tf": 1}}, "df": 32, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.cfg_attr": {"tf": 1}, "sain.unimplemented": {"tf": 1}, "sain.Ok.inspect": {"tf": 1.4142135623730951}, "sain.Ok.inspect_err": {"tf": 1.4142135623730951}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.macros.unimplemented": {"tf": 1}, "sain.result.Ok.inspect": {"tf": 1.4142135623730951}, "sain.result.Ok.inspect_err": {"tf": 1.4142135623730951}}, "df": 8}, "r": {"docs": {"sain.MaybeUninit.assume_init": {"tf": 1}, "sain.macros.unsafe": {"tf": 1}}, "df": 2}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.Some.unwrap_or_else": {"tf": 1}, "sain.Some.unwrap_unchecked": {"tf": 1}, "sain.todo": {"tf": 1}, "sain.MaybeUninit.assume_init": {"tf": 1}, "sain.error": {"tf": 1}, "sain.macros.todo": {"tf": 1}, "sain.option.Some.unwrap_or_else": {"tf": 1}, "sain.option.Some.unwrap_unchecked": {"tf": 1}, "sain.sync.Lazy": {"tf": 1}, "sain.sync.Lazy.get_unchecked": {"tf": 1}, "sain.sync.Once.get_unchecked": {"tf": 1}, "sain.sync.LazyFuture": {"tf": 1}, "sain.sync.LazyFuture.get": {"tf": 1}, "sain.sync.AsyncOnce.get_unchecked": {"tf": 1}}, "df": 14}}}, "s": {"docs": {"sain.Some.filter": {"tf": 1}, "sain.Iterator.cloned": {"tf": 1}, "sain.Iterator.copied": {"tf": 1}, "sain.Iterator.for_each": {"tf": 1}, "sain.Iterator.async_for_each": {"tf": 1}, "sain.iter.Iterator.cloned": {"tf": 1}, "sain.iter.Iterator.copied": {"tf": 1}, "sain.iter.Iterator.for_each": {"tf": 1}, "sain.iter.Iterator.async_for_each": {"tf": 1}, "sain.option.Some.filter": {"tf": 1}}, "df": 10}, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sain.iter.Map": {"tf": 1}}, "df": 1, "[": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {"sain.Iterator.map": {"tf": 1}, "sain.Iterator.take_while": {"tf": 1}, "sain.Iterator.drop_while": {"tf": 1}, "sain.Iterator.all": {"tf": 1}, "sain.Iterator.any": {"tf": 1}, "sain.Iterator.sort": {"tf": 1}, "sain.Iterator.for_each": {"tf": 1}, "sain.Iterator.async_for_each": {"tf": 1}, "sain.iter.Iterator.map": {"tf": 1}, "sain.iter.Iterator.take_while": {"tf": 1}, "sain.iter.Iterator.drop_while": {"tf": 1}, "sain.iter.Iterator.all": {"tf": 1}, "sain.iter.Iterator.any": {"tf": 1}, "sain.iter.Iterator.sort": {"tf": 1}, "sain.iter.Iterator.for_each": {"tf": 1}, "sain.iter.Iterator.async_for_each": {"tf": 1}, "sain.iter.Empty.any": {"tf": 1}, "sain.iter.Empty.all": {"tf": 1}}, "df": 18}}}}}}}}}}, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {"sain.Box.on_expire": {"tf": 1.7320508075688772}, "sain.boxed.Box.on_expire": {"tf": 1.7320508075688772}}, "df": 2, "s": {"docs": {"sain.Box.on_expire": {"tf": 1}, "sain.boxed.Box.on_expire": {"tf": 1}}, "df": 2}}}}}}}, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {"sain.Default": {"tf": 2.23606797749979}, "sain.Box": {"tf": 1.7320508075688772}, "sain.boxed.Box": {"tf": 1.7320508075688772}, "sain.default.Default": {"tf": 2.23606797749979}, "sain.option.Some": {"tf": 2.23606797749979}}, "df": 5}}}, "n": {"docs": {"sain.Some.take_if": {"tf": 1}, "sain.Iter": {"tf": 1.4142135623730951}, "sain.Iterator": {"tf": 1}, "sain.Vec": {"tf": 1.4142135623730951}, "sain.Vec.push_within_capacity": {"tf": 1}, "sain.Vec.reserve": {"tf": 1}, "sain.collections.Vec": {"tf": 1.4142135623730951}, "sain.collections.Vec.push_within_capacity": {"tf": 1}, "sain.collections.Vec.reserve": {"tf": 1}, "sain.collections.Bytes": {"tf": 1}, "sain.collections.Bytes.put_bytes": {"tf": 1}, "sain.collections.Bytes.index": {"tf": 1}, "sain.collections.buf.Bytes": {"tf": 1}, "sain.collections.buf.Bytes.put_bytes": {"tf": 1}, "sain.collections.buf.Bytes.index": {"tf": 1}, "sain.collections.buf.Rawish": {"tf": 1}, "sain.collections.buf.Buffer": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.push_within_capacity": {"tf": 1}, "sain.collections.vec.Vec.reserve": {"tf": 1}, "sain.convert": {"tf": 1}, "sain.default": {"tf": 1}, "sain.error": {"tf": 1.7320508075688772}, "sain.iter.Iter": {"tf": 1.4142135623730951}, "sain.iter.Iterator": {"tf": 1}, "sain.option": {"tf": 1}, "sain.option.Some.take_if": {"tf": 1}, "sain.option.Option": {"tf": 1}, "sain.result": {"tf": 1}, "sain.sync.Once": {"tf": 1}, "sain.sync.AsyncOnce": {"tf": 1}}, "df": 31, "t": {"docs": {"sain.Vec.push_within_capacity": {"tf": 1}, "sain.collections.Vec.push_within_capacity": {"tf": 1}, "sain.collections.vec.Vec.push_within_capacity": {"tf": 1}}, "df": 3}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {"sain.collections.Bytes.to_str": {"tf": 1}, "sain.collections.buf.Bytes.to_str": {"tf": 1}}, "df": 2}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"sain.Iterator.collect": {"tf": 1.7320508075688772}, "sain.iter.Iterator.collect": {"tf": 1.7320508075688772}}, "df": 2}, "e": {"docs": {"sain.Vec.push_within_capacity": {"tf": 1.4142135623730951}, "sain.Vec.reserve": {"tf": 1.4142135623730951}, "sain.Error": {"tf": 1.4142135623730951}, "sain.collections.Vec.push_within_capacity": {"tf": 1.4142135623730951}, "sain.collections.Vec.reserve": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.push_within_capacity": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.reserve": {"tf": 1.4142135623730951}, "sain.convert": {"tf": 1.4142135623730951}, "sain.error.Error": {"tf": 1.4142135623730951}, "sain.futures.spawn": {"tf": 1.7320508075688772}, "sain.result": {"tf": 2}}, "df": 11}}, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"sain.deprecated": {"tf": 1.4142135623730951}, "sain.unimplemented": {"tf": 1}, "sain.macros.deprecated": {"tf": 1.4142135623730951}, "sain.macros.unimplemented": {"tf": 1}}, "df": 4}}}, "p": {"docs": {"sain.Vec.capacity": {"tf": 1.4142135623730951}, "sain.Vec.push_within_capacity": {"tf": 1}, "sain.collections.Vec.capacity": {"tf": 1.4142135623730951}, "sain.collections.Vec.push_within_capacity": {"tf": 1}, "sain.collections.vec.Vec.capacity": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.push_within_capacity": {"tf": 1}}, "df": 6, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"sain.Vec": {"tf": 1}, "sain.Vec.with_capacity": {"tf": 2.23606797749979}, "sain.Vec.capacity": {"tf": 2}, "sain.Vec.push_within_capacity": {"tf": 2.449489742783178}, "sain.Vec.reserve": {"tf": 1.7320508075688772}, "sain.collections.Vec": {"tf": 1}, "sain.collections.Vec.with_capacity": {"tf": 2.23606797749979}, "sain.collections.Vec.capacity": {"tf": 2}, "sain.collections.Vec.push_within_capacity": {"tf": 2.449489742783178}, "sain.collections.Vec.reserve": {"tf": 1.7320508075688772}, "sain.collections.vec.Vec": {"tf": 1}, "sain.collections.vec.Vec.with_capacity": {"tf": 2.23606797749979}, "sain.collections.vec.Vec.capacity": {"tf": 2}, "sain.collections.vec.Vec.push_within_capacity": {"tf": 2.449489742783178}, "sain.collections.vec.Vec.reserve": {"tf": 1.7320508075688772}}, "df": 15}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {"sain.Vec": {"tf": 1}, "sain.collections.Vec": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1}}, "df": 3}}}}, "f": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {"sain.collections.Bytes.to_str": {"tf": 1}, "sain.collections.buf.Bytes.to_str": {"tf": 1}}, "df": 2}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}}, "df": 2}}}, "e": {"docs": {"sain.Some.as_ref": {"tf": 1.4142135623730951}, "sain.Iterator.enumerate": {"tf": 1}, "sain.Iterator.async_for_each": {"tf": 1.4142135623730951}, "sain.Vec": {"tf": 2.23606797749979}, "sain.Vec.with_capacity": {"tf": 1}, "sain.Vec.copy": {"tf": 1}, "sain.Box.on_expire": {"tf": 1}, "sain.MaybeUninit": {"tf": 1}, "sain.boxed.Box.on_expire": {"tf": 1}, "sain.collections.Vec": {"tf": 2.23606797749979}, "sain.collections.Vec.with_capacity": {"tf": 1}, "sain.collections.Vec.copy": {"tf": 1}, "sain.collections.Bytes": {"tf": 2}, "sain.collections.Bytes.from_str": {"tf": 1}, "sain.collections.Bytes.from_static": {"tf": 1}, "sain.collections.Bytes.from_bytes": {"tf": 1}, "sain.collections.Bytes.copy": {"tf": 1}, "sain.collections.buf.Bytes": {"tf": 2}, "sain.collections.buf.Bytes.from_str": {"tf": 1}, "sain.collections.buf.Bytes.from_static": {"tf": 1}, "sain.collections.buf.Bytes.from_bytes": {"tf": 1}, "sain.collections.buf.Bytes.copy": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 2.23606797749979}, "sain.collections.vec.Vec.with_capacity": {"tf": 1}, "sain.collections.vec.Vec.copy": {"tf": 1}, "sain.futures.loop": {"tf": 1}, "sain.iter.Iterator.enumerate": {"tf": 1}, "sain.iter.Iterator.async_for_each": {"tf": 1.4142135623730951}, "sain.iter.empty": {"tf": 1}, "sain.option.Some.as_ref": {"tf": 1.4142135623730951}}, "df": 30, "d": {"docs": {"sain.cfg_attr": {"tf": 1}, "sain.Iterator.copied": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.iter.Iterator.copied": {"tf": 1}, "sain.iter.Cloned": {"tf": 1}, "sain.iter.Copied": {"tf": 1}, "sain.iter.Take": {"tf": 1}, "sain.iter.Filter": {"tf": 1}, "sain.iter.Map": {"tf": 1}, "sain.iter.Skip": {"tf": 1}, "sain.iter.Enumerate": {"tf": 1}, "sain.iter.TakeWhile": {"tf": 1}, "sain.iter.DropWhile": {"tf": 1}, "sain.iter.Empty": {"tf": 1}}, "df": 14}, "s": {"docs": {"sain.Iterator.cloned": {"tf": 1}, "sain.Iterator.copied": {"tf": 1}, "sain.Vec": {"tf": 1}, "sain.MaybeUninit.uninit": {"tf": 1}, "sain.MaybeUninit.uninit_array": {"tf": 1}, "sain.collections.Vec": {"tf": 1}, "sain.collections.Bytes.__init__": {"tf": 1}, "sain.collections.buf.Bytes.__init__": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1}, "sain.iter.Iterator.cloned": {"tf": 1}, "sain.iter.Iterator.copied": {"tf": 1}}, "df": 11}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"sain.collections": {"tf": 1}, "sain.convert": {"tf": 1}}, "df": 2}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"sain.cfg_attr": {"tf": 1.4142135623730951}, "sain.Default": {"tf": 1}, "sain.Iterator": {"tf": 1.4142135623730951}, "sain.Iterator.cloned": {"tf": 1}, "sain.Iterator.copied": {"tf": 1}, "sain.deprecated": {"tf": 1}, "sain.unimplemented": {"tf": 1}, "sain.doc": {"tf": 1}, "sain.Error": {"tf": 1.7320508075688772}, "sain.From": {"tf": 1}, "sain.TryFrom": {"tf": 1.4142135623730951}, "sain.Into": {"tf": 1}, "sain.TryInto": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1.4142135623730951}, "sain.convert": {"tf": 1.4142135623730951}, "sain.convert.From": {"tf": 1}, "sain.convert.TryFrom": {"tf": 1.4142135623730951}, "sain.convert.Into": {"tf": 1}, "sain.convert.TryInto": {"tf": 1}, "sain.default": {"tf": 1}, "sain.default.Default": {"tf": 1}, "sain.error": {"tf": 1.4142135623730951}, "sain.error.Error": {"tf": 1.7320508075688772}, "sain.iter.Iterator": {"tf": 1.4142135623730951}, "sain.iter.Iterator.cloned": {"tf": 1}, "sain.iter.Iterator.copied": {"tf": 1}, "sain.macros.deprecated": {"tf": 1}, "sain.macros.unimplemented": {"tf": 1}, "sain.macros.doc": {"tf": 1}, "sain.option.Some": {"tf": 1}, "sain.result": {"tf": 1}, "sain.sync.Lazy": {"tf": 1.4142135623730951}, "sain.sync.LazyFuture": {"tf": 1.4142135623730951}}, "df": 33, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {"sain.Vec": {"tf": 1}, "sain.From": {"tf": 1}, "sain.TryFrom": {"tf": 1}, "sain.collections.Vec": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1}, "sain.convert": {"tf": 1.4142135623730951}, "sain.convert.From": {"tf": 1}, "sain.convert.TryFrom": {"tf": 1}}, "df": 8}}}}}}}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"sain.Some.as_ref": {"tf": 1.7320508075688772}, "sain.Iter.clone": {"tf": 1}, "sain.Iterator.cloned": {"tf": 1}, "sain.iter.Iter.clone": {"tf": 1}, "sain.iter.Iterator.cloned": {"tf": 1}, "sain.option.Some.as_ref": {"tf": 1.7320508075688772}}, "df": 6, "d": {"docs": {"sain.Iterator.cloned": {"tf": 1}, "sain.Iterator.copied": {"tf": 1}, "sain.iter.Iterator.cloned": {"tf": 1}, "sain.iter.Iterator.copied": {"tf": 1}, "sain.iter.Cloned": {"tf": 1}}, "df": 5}}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"sain.Vec.clear": {"tf": 1.4142135623730951}, "sain.collections.Vec.clear": {"tf": 1.4142135623730951}, "sain.collections.Bytes.clear": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.clear": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.clear": {"tf": 1.4142135623730951}, "sain.sync.Lazy.set": {"tf": 1}, "sain.sync.Once.clear": {"tf": 1}, "sain.sync.LazyFuture.set": {"tf": 1}, "sain.sync.AsyncOnce.clear": {"tf": 1}}, "df": 9}}}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"sain.Box.on_expire": {"tf": 1}, "sain.boxed.Box.on_expire": {"tf": 1}}, "df": 2}}}}, "s": {"docs": {"sain.From": {"tf": 1.4142135623730951}, "sain.TryFrom": {"tf": 1.4142135623730951}, "sain.convert": {"tf": 2}, "sain.convert.From": {"tf": 1.4142135623730951}, "sain.convert.TryFrom": {"tf": 1.4142135623730951}}, "df": 5}}, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"sain.Some.as_ref": {"tf": 1}, "sain.Some.as_mut": {"tf": 1}, "sain.option.Some.as_ref": {"tf": 1}, "sain.option.Some.as_mut": {"tf": 1}, "sain.sync.Once.get_unchecked": {"tf": 2}, "sain.sync.Once.set": {"tf": 1}, "sain.sync.Once.get_or_with": {"tf": 2.23606797749979}, "sain.sync.AsyncOnce.get_unchecked": {"tf": 2}, "sain.sync.AsyncOnce.set": {"tf": 1}, "sain.sync.AsyncOnce.get_or": {"tf": 2.23606797749979}, "sain.sync.AsyncOnce.get_or_with": {"tf": 2.23606797749979}}, "df": 11, "[": {"docs": {}, "df": 0, "t": {"docs": {"sain.Some.as_ref": {"tf": 1}, "sain.option.Some.as_ref": {"tf": 1}}, "df": 2}}, "s": {"docs": {"sain.Vec": {"tf": 2.449489742783178}, "sain.collections.Vec": {"tf": 2.449489742783178}, "sain.collections.vec.Vec": {"tf": 2.449489742783178}}, "df": 3}}}}, "b": {"docs": {}, "df": 0, "a": {"docs": {"sain.Iterator.raw_parts": {"tf": 1}, "sain.iter.Iterator.raw_parts": {"tf": 1}}, "df": 2}}, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"sain.TryFrom": {"tf": 1}, "sain.convert.TryFrom": {"tf": 1}}, "df": 2}}}}}}}}}}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"sain.convert": {"tf": 1}, "sain.futures.loop": {"tf": 1}, "sain.iter.Enumerate": {"tf": 1}}, "df": 3, "l": {"docs": {}, "df": 0, "y": {"docs": {"sain.collections.Bytes.raw_parts": {"tf": 1}, "sain.collections.buf.Bytes.raw_parts": {"tf": 1}}, "df": 2}}}}}}}}}, "l": {"docs": {"sain.Iterator.filter": {"tf": 1}, "sain.iter.Iterator.filter": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {"sain": {"tf": 1}, "sain.collections.Bytes": {"tf": 1}, "sain.collections.Bytes.to_str": {"tf": 1}, "sain.collections.buf.Bytes": {"tf": 1}, "sain.collections.buf.Bytes.to_str": {"tf": 1}, "sain.convert": {"tf": 1}}, "df": 6}}, "n": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "x": {"docs": {"sain.cfg": {"tf": 1.4142135623730951}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1.4142135623730951}}, "df": 4}}, "e": {"docs": {"sain.result": {"tf": 1.4142135623730951}}, "df": 1, "s": {"docs": {"sain.result": {"tf": 2.8284271247461903}}, "df": 1}}}, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"sain.Iter": {"tf": 1}, "sain.iter.Iter": {"tf": 1}}, "df": 2}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"sain.Iterator.cloned": {"tf": 1}, "sain.Iterator.copied": {"tf": 1.7320508075688772}, "sain.Vec": {"tf": 3.4641016151377544}, "sain.Vec.sort": {"tf": 1}, "sain.MaybeUninit": {"tf": 1.4142135623730951}, "sain.collections": {"tf": 1.4142135623730951}, "sain.collections.Vec": {"tf": 3.4641016151377544}, "sain.collections.Vec.sort": {"tf": 1}, "sain.collections.vec": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 3.4641016151377544}, "sain.collections.vec.Vec.sort": {"tf": 1}, "sain.iter.Iterator.cloned": {"tf": 1}, "sain.iter.Iterator.copied": {"tf": 1.7320508075688772}, "sain.result": {"tf": 1}}, "df": 14, "[": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {"sain.result": {"tf": 1}}, "df": 1}}}}}}, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sain.Vec": {"tf": 1}, "sain.collections.Vec": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1}}, "df": 3}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"sain.iter.Empty": {"tf": 1}}, "df": 1}}}}}}}}, "t": {"docs": {"sain": {"tf": 1.4142135623730951}, "sain.Some.map_or_else": {"tf": 1}, "sain.Iter": {"tf": 1}, "sain.Iterator.take": {"tf": 1}, "sain.Iterator.zip": {"tf": 1}, "sain.Iterator.sort": {"tf": 1}, "sain.Vec.push_within_capacity": {"tf": 1}, "sain.Vec.sort": {"tf": 1}, "sain.MaybeUninit": {"tf": 2}, "sain.MaybeUninit.uninit": {"tf": 1}, "sain.MaybeUninit.uninit_array": {"tf": 1}, "sain.From": {"tf": 1.4142135623730951}, "sain.TryFrom": {"tf": 1}, "sain.TryInto": {"tf": 1}, "sain.collections.Vec.push_within_capacity": {"tf": 1}, "sain.collections.Vec.sort": {"tf": 1}, "sain.collections.vec.Vec.push_within_capacity": {"tf": 1}, "sain.collections.vec.Vec.sort": {"tf": 1}, "sain.convert": {"tf": 1}, "sain.convert.From": {"tf": 1.4142135623730951}, "sain.convert.TryFrom": {"tf": 1}, "sain.convert.TryInto": {"tf": 1}, "sain.futures.spawn": {"tf": 1.4142135623730951}, "sain.iter.Iter": {"tf": 1}, "sain.iter.Iterator.take": {"tf": 1}, "sain.iter.Iterator.zip": {"tf": 1}, "sain.iter.Iterator.sort": {"tf": 1}, "sain.option": {"tf": 1}, "sain.option.Some.map_or_else": {"tf": 1}, "sain.option.Option": {"tf": 1}, "sain.option.NOTHING": {"tf": 1}}, "df": 31}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.Some": {"tf": 1}, "sain.convert": {"tf": 1}}, "df": 2}, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.Iterator.filter": {"tf": 1.4142135623730951}, "sain.iter.Iterator.filter": {"tf": 1.4142135623730951}}, "df": 2}}}}, "s": {"docs": {"sain.Iterator.filter": {"tf": 1.4142135623730951}, "sain.iter.Iterator.filter": {"tf": 1.4142135623730951}}, "df": 2}, "g": {"docs": {"sain.deprecated": {"tf": 1}, "sain.macros.deprecated": {"tf": 1}}, "df": 2}, "o": {"docs": {}, "df": 0, "p": {"docs": {"sain.Vec": {"tf": 1}, "sain.collections.Vec": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1}, "sain.futures.loop": {"tf": 1}}, "df": 4}, "k": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.Error": {"tf": 1}, "sain.error.Error": {"tf": 1}}, "df": 2}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"sain.MaybeUninit.assume_init": {"tf": 1}}, "df": 1}}}}}}}, "s": {"docs": {"sain.collections.Bytes.to_str": {"tf": 1}, "sain.collections.buf.Bytes.to_str": {"tf": 1}}, "df": 2}}}, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"sain.convert": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {"sain.Some.unwrap_or_else": {"tf": 1.4142135623730951}, "sain.Some.map": {"tf": 1}, "sain.Some.filter": {"tf": 1.4142135623730951}, "sain.Some.and_then": {"tf": 1.4142135623730951}, "sain.Some.is_some_and": {"tf": 1.4142135623730951}, "sain.Iter": {"tf": 1}, "sain.Iterator.filter": {"tf": 1}, "sain.Iterator.take_while": {"tf": 1}, "sain.Iterator.drop_while": {"tf": 1}, "sain.Iterator.all": {"tf": 1}, "sain.Iterator.any": {"tf": 1}, "sain.Iterator.sort": {"tf": 1}, "sain.Iterator.first": {"tf": 1}, "sain.Iterator.last": {"tf": 1}, "sain.Iterator.for_each": {"tf": 1}, "sain.Iterator.async_for_each": {"tf": 1}, "sain.Ok.is_ok_and": {"tf": 1}, "sain.Ok.is_err_and": {"tf": 1}, "sain.Ok.unwrap_or_else": {"tf": 1.4142135623730951}, "sain.Ok.map": {"tf": 1}, "sain.Ok.map_or": {"tf": 1.4142135623730951}, "sain.Ok.map_or_else": {"tf": 2}, "sain.Ok.map_err": {"tf": 1}, "sain.Err.is_ok_and": {"tf": 1}, "sain.Err.is_err_and": {"tf": 1}, "sain.Vec.retain": {"tf": 1}, "sain.collections.Vec.retain": {"tf": 1}, "sain.collections.vec.Vec.retain": {"tf": 1}, "sain.iter.Iter": {"tf": 1}, "sain.iter.Iterator.filter": {"tf": 1}, "sain.iter.Iterator.take_while": {"tf": 1}, "sain.iter.Iterator.drop_while": {"tf": 1}, "sain.iter.Iterator.all": {"tf": 1}, "sain.iter.Iterator.any": {"tf": 1}, "sain.iter.Iterator.sort": {"tf": 1}, "sain.iter.Iterator.first": {"tf": 1}, "sain.iter.Iterator.last": {"tf": 1}, "sain.iter.Iterator.for_each": {"tf": 1}, "sain.iter.Iterator.async_for_each": {"tf": 1}, "sain.iter.Empty.any": {"tf": 1}, "sain.iter.Empty.all": {"tf": 1}, "sain.option.Some.unwrap_or_else": {"tf": 1.4142135623730951}, "sain.option.Some.map": {"tf": 1}, "sain.option.Some.filter": {"tf": 1.4142135623730951}, "sain.option.Some.and_then": {"tf": 1.4142135623730951}, "sain.option.Some.is_some_and": {"tf": 1.4142135623730951}, "sain.result.Ok.is_ok_and": {"tf": 1}, "sain.result.Ok.is_err_and": {"tf": 1}, "sain.result.Ok.unwrap_or_else": {"tf": 1.4142135623730951}, "sain.result.Ok.map": {"tf": 1}, "sain.result.Ok.map_or": {"tf": 1.4142135623730951}, "sain.result.Ok.map_or_else": {"tf": 2}, "sain.result.Ok.map_err": {"tf": 1}, "sain.result.Err.is_ok_and": {"tf": 1}, "sain.result.Err.is_err_and": {"tf": 1}, "sain.sync.Once.get_or_with": {"tf": 1.4142135623730951}, "sain.sync.AsyncOnce.get_or_with": {"tf": 1.4142135623730951}}, "df": 57}}}}, "z": {"docs": {}, "df": 0, "y": {"docs": {"sain.Iter": {"tf": 1}, "sain.iter.Iter": {"tf": 1}, "sain.sync.Lazy": {"tf": 1.7320508075688772}, "sain.sync.Lazy.get": {"tf": 1}, "sain.sync.Lazy.get_unchecked": {"tf": 1}, "sain.sync.Lazy.set": {"tf": 1.7320508075688772}, "sain.sync.LazyFuture": {"tf": 1.4142135623730951}, "sain.sync.LazyFuture.set": {"tf": 1.4142135623730951}}, "df": 8, "f": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"sain.sync.LazyFuture": {"tf": 1}, "sain.sync.LazyFuture.set": {"tf": 1}}, "df": 2}}}}}}}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"sain.Iterator": {"tf": 1}, "sain.iter.Iterator": {"tf": 1}, "sain.sync.Lazy": {"tf": 1.4142135623730951}, "sain.sync.LazyFuture": {"tf": 1.4142135623730951}}, "df": 4}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"sain.Iterator.last": {"tf": 1.4142135623730951}, "sain.Vec.pop": {"tf": 1}, "sain.Box.on_expire": {"tf": 1}, "sain.boxed.Box.on_expire": {"tf": 1}, "sain.collections.Vec.pop": {"tf": 1}, "sain.collections.Bytes.pop": {"tf": 1}, "sain.collections.buf.Bytes.pop": {"tf": 1}, "sain.collections.vec.Vec.pop": {"tf": 1}, "sain.iter.Iterator.last": {"tf": 1.4142135623730951}}, "df": 9}}, "y": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"sain.Vec": {"tf": 1}, "sain.collections.Vec": {"tf": 1}, "sain.collections.Bytes": {"tf": 1}, "sain.collections.buf.Bytes": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1}}, "df": 5}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {"sain.Iterator.cloned": {"tf": 1}, "sain.Iterator.copied": {"tf": 1}, "sain.Ok.unwrap_or_else": {"tf": 1}, "sain.Ok.map_or": {"tf": 1.4142135623730951}, "sain.Ok.map_or_else": {"tf": 2}, "sain.Vec": {"tf": 1}, "sain.Vec.with_capacity": {"tf": 1.4142135623730951}, "sain.Vec.len": {"tf": 1}, "sain.Vec.split_off": {"tf": 1}, "sain.Vec.push_within_capacity": {"tf": 1}, "sain.Vec.clear": {"tf": 1}, "sain.MaybeUninit.uninit_array": {"tf": 1}, "sain.collections.Vec": {"tf": 1}, "sain.collections.Vec.with_capacity": {"tf": 1.4142135623730951}, "sain.collections.Vec.len": {"tf": 1}, "sain.collections.Vec.split_off": {"tf": 1}, "sain.collections.Vec.push_within_capacity": {"tf": 1}, "sain.collections.Vec.clear": {"tf": 1}, "sain.collections.Bytes.len": {"tf": 1}, "sain.collections.buf.Bytes.len": {"tf": 1}, "sain.collections.vec": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1}, "sain.collections.vec.Vec.with_capacity": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.len": {"tf": 1}, "sain.collections.vec.Vec.split_off": {"tf": 1}, "sain.collections.vec.Vec.push_within_capacity": {"tf": 1}, "sain.collections.vec.Vec.clear": {"tf": 1}, "sain.futures.spawn": {"tf": 1}, "sain.iter.Iterator.cloned": {"tf": 1}, "sain.iter.Iterator.copied": {"tf": 1}, "sain.result.Ok.unwrap_or_else": {"tf": 1}, "sain.result.Ok.map_or": {"tf": 1.4142135623730951}, "sain.result.Ok.map_or_else": {"tf": 2}}, "df": 33, "g": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"sain.collections.Bytes.size": {"tf": 1}, "sain.collections.buf.Bytes.size": {"tf": 1}}, "df": 2}}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"sain.Iterator.any": {"tf": 1.4142135623730951}, "sain.Vec.with_capacity": {"tf": 1}, "sain.Vec.reserve": {"tf": 1}, "sain.collections.Vec.with_capacity": {"tf": 1}, "sain.collections.Vec.reserve": {"tf": 1}, "sain.collections.vec.Vec.with_capacity": {"tf": 1}, "sain.collections.vec.Vec.reserve": {"tf": 1}, "sain.iter.Iterator.any": {"tf": 1.4142135623730951}, "sain.iter.Empty.any": {"tf": 1.4142135623730951}}, "df": 9}}, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.Ok.map": {"tf": 1}, "sain.Ok.map_err": {"tf": 1}, "sain.result.Ok.map": {"tf": 1}, "sain.result.Ok.map_err": {"tf": 1}}, "df": 4}}}}, "k": {"docs": {"sain.collections.Bytes.leak": {"tf": 1}, "sain.collections.buf.Bytes.leak": {"tf": 1}}, "df": 2, "s": {"docs": {"sain.collections.Bytes.leak": {"tf": 1}, "sain.collections.buf.Bytes.leak": {"tf": 1}}, "df": 2}}}, "g": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {"sain.Iterator.async_for_each": {"tf": 1}, "sain.iter.Iterator.async_for_each": {"tf": 1}}, "df": 2}}}}}, "f": {"docs": {}, "df": 0, "t": {"docs": {"sain.Vec": {"tf": 1}, "sain.collections.Vec": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1}}, "df": 3}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.collections.vec.from_args": {"tf": 1}}, "df": 1}}}, "t": {"docs": {}, "df": 0, "s": {"docs": {"sain.error": {"tf": 1}}, "df": 1}}}}, "v": {"docs": {"sain.Some.unwrap_unchecked": {"tf": 2}, "sain.Iterator.async_for_each": {"tf": 1}, "sain.MaybeUninit.uninit": {"tf": 1}, "sain.MaybeUninit.uninit_array": {"tf": 1.7320508075688772}, "sain.collections.Bytes.index": {"tf": 1}, "sain.collections.buf.Bytes.index": {"tf": 1}, "sain.iter.Iterator.async_for_each": {"tf": 1}, "sain.option.Some.unwrap_unchecked": {"tf": 2}}, "df": 8, "e": {"docs": {}, "df": 0, "c": {"docs": {"sain": {"tf": 1}, "sain.Iterator.to_vec": {"tf": 1.4142135623730951}, "sain.Vec": {"tf": 6.164414002968976}, "sain.Vec.with_capacity": {"tf": 3.4641016151377544}, "sain.Vec.as_ref": {"tf": 1.7320508075688772}, "sain.Vec.len": {"tf": 1.7320508075688772}, "sain.Vec.capacity": {"tf": 2.449489742783178}, "sain.Vec.iter": {"tf": 1.7320508075688772}, "sain.Vec.split_off": {"tf": 2.23606797749979}, "sain.Vec.split_first": {"tf": 2.6457513110645907}, "sain.Vec.first": {"tf": 2}, "sain.Vec.truncate": {"tf": 2.23606797749979}, "sain.Vec.retain": {"tf": 2.23606797749979}, "sain.Vec.swap_remove": {"tf": 1.7320508075688772}, "sain.Vec.push": {"tf": 2}, "sain.Vec.push_within_capacity": {"tf": 3.4641016151377544}, "sain.Vec.reserve": {"tf": 2.23606797749979}, "sain.Vec.append": {"tf": 1}, "sain.Vec.get": {"tf": 2}, "sain.Vec.insert": {"tf": 2}, "sain.Vec.pop": {"tf": 2}, "sain.Vec.remove": {"tf": 1.7320508075688772}, "sain.Vec.extend": {"tf": 2}, "sain.Vec.copy": {"tf": 1}, "sain.Vec.clear": {"tf": 2}, "sain.Vec.sort": {"tf": 2}, "sain.Vec.index": {"tf": 2}, "sain.Vec.count": {"tf": 2}, "sain.collections": {"tf": 1}, "sain.collections.Vec": {"tf": 6.164414002968976}, "sain.collections.Vec.with_capacity": {"tf": 3.4641016151377544}, "sain.collections.Vec.as_ref": {"tf": 1.7320508075688772}, "sain.collections.Vec.len": {"tf": 1.7320508075688772}, "sain.collections.Vec.capacity": {"tf": 2.449489742783178}, "sain.collections.Vec.iter": {"tf": 1.7320508075688772}, "sain.collections.Vec.split_off": {"tf": 2.23606797749979}, "sain.collections.Vec.split_first": {"tf": 2.6457513110645907}, "sain.collections.Vec.first": {"tf": 2}, "sain.collections.Vec.truncate": {"tf": 2.23606797749979}, "sain.collections.Vec.retain": {"tf": 2.23606797749979}, "sain.collections.Vec.swap_remove": {"tf": 1.7320508075688772}, "sain.collections.Vec.push": {"tf": 2}, "sain.collections.Vec.push_within_capacity": {"tf": 3.4641016151377544}, "sain.collections.Vec.reserve": {"tf": 2.23606797749979}, "sain.collections.Vec.append": {"tf": 1}, "sain.collections.Vec.get": {"tf": 2}, "sain.collections.Vec.insert": {"tf": 2}, "sain.collections.Vec.pop": {"tf": 2}, "sain.collections.Vec.remove": {"tf": 1.7320508075688772}, "sain.collections.Vec.extend": {"tf": 2}, "sain.collections.Vec.copy": {"tf": 1}, "sain.collections.Vec.clear": {"tf": 2}, "sain.collections.Vec.sort": {"tf": 2}, "sain.collections.Vec.index": {"tf": 2}, "sain.collections.Vec.count": {"tf": 2}, "sain.collections.vec": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 6.164414002968976}, "sain.collections.vec.Vec.with_capacity": {"tf": 3.4641016151377544}, "sain.collections.vec.Vec.as_ref": {"tf": 1.7320508075688772}, "sain.collections.vec.Vec.len": {"tf": 1.7320508075688772}, "sain.collections.vec.Vec.capacity": {"tf": 2.449489742783178}, "sain.collections.vec.Vec.iter": {"tf": 1.7320508075688772}, "sain.collections.vec.Vec.split_off": {"tf": 2.23606797749979}, "sain.collections.vec.Vec.split_first": {"tf": 2.6457513110645907}, "sain.collections.vec.Vec.first": {"tf": 2}, "sain.collections.vec.Vec.truncate": {"tf": 2.23606797749979}, "sain.collections.vec.Vec.retain": {"tf": 2.23606797749979}, "sain.collections.vec.Vec.swap_remove": {"tf": 1.7320508075688772}, "sain.collections.vec.Vec.push": {"tf": 2}, "sain.collections.vec.Vec.push_within_capacity": {"tf": 3.4641016151377544}, "sain.collections.vec.Vec.reserve": {"tf": 2.23606797749979}, "sain.collections.vec.Vec.append": {"tf": 1}, "sain.collections.vec.Vec.get": {"tf": 2}, "sain.collections.vec.Vec.insert": {"tf": 2}, "sain.collections.vec.Vec.pop": {"tf": 2}, "sain.collections.vec.Vec.remove": {"tf": 1.7320508075688772}, "sain.collections.vec.Vec.extend": {"tf": 2}, "sain.collections.vec.Vec.copy": {"tf": 1}, "sain.collections.vec.Vec.clear": {"tf": 2}, "sain.collections.vec.Vec.sort": {"tf": 2}, "sain.collections.vec.Vec.index": {"tf": 2}, "sain.collections.vec.Vec.count": {"tf": 2}, "sain.collections.vec.from_args": {"tf": 1.7320508075688772}, "sain.iter.Iterator.to_vec": {"tf": 1.4142135623730951}}, "df": 84, "[": {"docs": {}, "df": 0, "t": {"docs": {"sain.Iterator.to_vec": {"tf": 1}, "sain.iter.Iterator.to_vec": {"tf": 1}}, "df": 2}}, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"sain.Vec.as_ref": {"tf": 1}, "sain.Vec.len": {"tf": 1}, "sain.Vec.capacity": {"tf": 1}, "sain.Vec.iter": {"tf": 1}, "sain.Vec.is_empty": {"tf": 1}, "sain.Vec.split_off": {"tf": 1}, "sain.Vec.split_first": {"tf": 1}, "sain.Vec.retain": {"tf": 1}, "sain.Vec.swap_remove": {"tf": 2}, "sain.Vec.push": {"tf": 1}, "sain.Vec.pop": {"tf": 1}, "sain.Vec.remove": {"tf": 1.4142135623730951}, "sain.Vec.extend": {"tf": 1}, "sain.Vec.copy": {"tf": 1.4142135623730951}, "sain.Vec.clear": {"tf": 1}, "sain.Vec.count": {"tf": 1}, "sain.collections.Vec.as_ref": {"tf": 1}, "sain.collections.Vec.len": {"tf": 1}, "sain.collections.Vec.capacity": {"tf": 1}, "sain.collections.Vec.iter": {"tf": 1}, "sain.collections.Vec.is_empty": {"tf": 1}, "sain.collections.Vec.split_off": {"tf": 1}, "sain.collections.Vec.split_first": {"tf": 1}, "sain.collections.Vec.retain": {"tf": 1}, "sain.collections.Vec.swap_remove": {"tf": 2}, "sain.collections.Vec.push": {"tf": 1}, "sain.collections.Vec.pop": {"tf": 1}, "sain.collections.Vec.remove": {"tf": 1.4142135623730951}, "sain.collections.Vec.extend": {"tf": 1}, "sain.collections.Vec.copy": {"tf": 1.4142135623730951}, "sain.collections.Vec.clear": {"tf": 1}, "sain.collections.Vec.count": {"tf": 1}, "sain.collections.vec.Vec.as_ref": {"tf": 1}, "sain.collections.vec.Vec.len": {"tf": 1}, "sain.collections.vec.Vec.capacity": {"tf": 1}, "sain.collections.vec.Vec.iter": {"tf": 1}, "sain.collections.vec.Vec.is_empty": {"tf": 1}, "sain.collections.vec.Vec.split_off": {"tf": 1}, "sain.collections.vec.Vec.split_first": {"tf": 1}, "sain.collections.vec.Vec.retain": {"tf": 1}, "sain.collections.vec.Vec.swap_remove": {"tf": 2}, "sain.collections.vec.Vec.push": {"tf": 1}, "sain.collections.vec.Vec.pop": {"tf": 1}, "sain.collections.vec.Vec.remove": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.extend": {"tf": 1}, "sain.collections.vec.Vec.copy": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.clear": {"tf": 1}, "sain.collections.vec.Vec.count": {"tf": 1}, "sain.collections.vec.from_args": {"tf": 1}}, "df": 49}}}}, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.cfg": {"tf": 1.4142135623730951}, "sain.cfg_attr": {"tf": 1.4142135623730951}, "sain.deprecated": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1.4142135623730951}, "sain.cfg.cfg": {"tf": 1.4142135623730951}, "sain.macros.deprecated": {"tf": 1}, "sain.sync.AsyncOnce": {"tf": 1}}, "df": 7}}}}, "y": {"docs": {"sain.collections.Bytes": {"tf": 1}, "sain.collections.buf.Bytes": {"tf": 1}}, "df": 2}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {"sain.MaybeUninit.assume_init": {"tf": 1.4142135623730951}}, "df": 1, "u": {"docs": {}, "df": 0, "e": {"docs": {"sain.Default": {"tf": 1}, "sain.Default.default": {"tf": 1}, "sain.Some": {"tf": 3.1622776601683795}, "sain.Some.default": {"tf": 1}, "sain.Some.into_inner": {"tf": 1}, "sain.Some.unwrap": {"tf": 2.449489742783178}, "sain.Some.unwrap_or": {"tf": 2.23606797749979}, "sain.Some.unwrap_or_else": {"tf": 2.449489742783178}, "sain.Some.unwrap_unchecked": {"tf": 1.4142135623730951}, "sain.Some.expect": {"tf": 2.8284271247461903}, "sain.Some.map": {"tf": 2.23606797749979}, "sain.Some.map_or": {"tf": 2.23606797749979}, "sain.Some.map_or_else": {"tf": 2.23606797749979}, "sain.Some.filter": {"tf": 2.23606797749979}, "sain.Some.take": {"tf": 1}, "sain.Some.take_if": {"tf": 1}, "sain.Some.replace": {"tf": 2.23606797749979}, "sain.Some.and_ok": {"tf": 1.4142135623730951}, "sain.Some.and_then": {"tf": 2.449489742783178}, "sain.Some.iter": {"tf": 2.23606797749979}, "sain.Some.as_ref": {"tf": 2.8284271247461903}, "sain.Some.as_mut": {"tf": 2.449489742783178}, "sain.Some.is_some": {"tf": 2.23606797749979}, "sain.Some.is_some_and": {"tf": 2.23606797749979}, "sain.Some.is_none": {"tf": 2.23606797749979}, "sain.Iterator.copied": {"tf": 1}, "sain.Ok": {"tf": 1}, "sain.Ok.is_ok": {"tf": 2}, "sain.Ok.is_ok_and": {"tf": 2.23606797749979}, "sain.Ok.is_err": {"tf": 2}, "sain.Ok.is_err_and": {"tf": 2.23606797749979}, "sain.Ok.expect": {"tf": 1}, "sain.Ok.unwrap": {"tf": 1}, "sain.Ok.unwrap_or": {"tf": 1}, "sain.Ok.unwrap_or_else": {"tf": 1}, "sain.Ok.unwrap_err": {"tf": 1}, "sain.Ok.ok": {"tf": 2.23606797749979}, "sain.Ok.err": {"tf": 2.23606797749979}, "sain.Ok.inspect": {"tf": 2}, "sain.Ok.inspect_err": {"tf": 2}, "sain.Ok.map_or": {"tf": 1.4142135623730951}, "sain.Ok.map_or_else": {"tf": 1.4142135623730951}, "sain.Ok.iter": {"tf": 1}, "sain.Err": {"tf": 1}, "sain.Err.is_ok": {"tf": 1.7320508075688772}, "sain.Err.is_ok_and": {"tf": 2}, "sain.Err.is_err": {"tf": 1.7320508075688772}, "sain.Err.is_err_and": {"tf": 1.7320508075688772}, "sain.Vec.index": {"tf": 1}, "sain.Box": {"tf": 1.4142135623730951}, "sain.Box.has_expired": {"tf": 1}, "sain.Box.on_expire": {"tf": 1.4142135623730951}, "sain.Box.get": {"tf": 1.4142135623730951}, "sain.MaybeUninit": {"tf": 2}, "sain.MaybeUninit.uninit_array": {"tf": 1}, "sain.MaybeUninit.assume_init": {"tf": 1}, "sain.MaybeUninit.write": {"tf": 2}, "sain.From": {"tf": 2.6457513110645907}, "sain.TryFrom": {"tf": 2.449489742783178}, "sain.Into": {"tf": 1.4142135623730951}, "sain.TryInto": {"tf": 2}, "sain.boxed": {"tf": 1}, "sain.boxed.Box": {"tf": 1.4142135623730951}, "sain.boxed.Box.has_expired": {"tf": 1}, "sain.boxed.Box.on_expire": {"tf": 1.4142135623730951}, "sain.boxed.Box.get": {"tf": 1.4142135623730951}, "sain.collections.Vec.index": {"tf": 1}, "sain.collections.Bytes.insert": {"tf": 1}, "sain.collections.buf.Bytes.insert": {"tf": 1}, "sain.collections.vec.Vec.index": {"tf": 1}, "sain.convert": {"tf": 2.8284271247461903}, "sain.convert.From": {"tf": 2.6457513110645907}, "sain.convert.TryFrom": {"tf": 2.449489742783178}, "sain.convert.Into": {"tf": 1.4142135623730951}, "sain.convert.TryInto": {"tf": 2}, "sain.default.Default": {"tf": 1}, "sain.default.Default.default": {"tf": 1}, "sain.iter.Iterator.copied": {"tf": 1}, "sain.option": {"tf": 1}, "sain.option.Some": {"tf": 1}, "sain.option.Some.default": {"tf": 1}, "sain.option.Some.into_inner": {"tf": 1}, "sain.option.Some.unwrap": {"tf": 2.449489742783178}, "sain.option.Some.unwrap_or": {"tf": 2.23606797749979}, "sain.option.Some.unwrap_or_else": {"tf": 2.449489742783178}, "sain.option.Some.unwrap_unchecked": {"tf": 1.4142135623730951}, "sain.option.Some.expect": {"tf": 2.8284271247461903}, "sain.option.Some.map": {"tf": 2.23606797749979}, "sain.option.Some.map_or": {"tf": 2.23606797749979}, "sain.option.Some.map_or_else": {"tf": 2.23606797749979}, "sain.option.Some.filter": {"tf": 2.23606797749979}, "sain.option.Some.take": {"tf": 1}, "sain.option.Some.take_if": {"tf": 1}, "sain.option.Some.replace": {"tf": 2.23606797749979}, "sain.option.Some.and_ok": {"tf": 1.4142135623730951}, "sain.option.Some.and_then": {"tf": 2.449489742783178}, "sain.option.Some.iter": {"tf": 2.23606797749979}, "sain.option.Some.as_ref": {"tf": 2.8284271247461903}, "sain.option.Some.as_mut": {"tf": 2.449489742783178}, "sain.option.Some.is_some": {"tf": 2.23606797749979}, "sain.option.Some.is_some_and": {"tf": 2.23606797749979}, "sain.option.Some.is_none": {"tf": 2.23606797749979}, "sain.option.Option": {"tf": 1}, "sain.result": {"tf": 2}, "sain.result.Ok": {"tf": 1}, "sain.result.Ok.is_ok": {"tf": 2}, "sain.result.Ok.is_ok_and": {"tf": 2.23606797749979}, "sain.result.Ok.is_err": {"tf": 2}, "sain.result.Ok.is_err_and": {"tf": 2.23606797749979}, "sain.result.Ok.expect": {"tf": 1}, "sain.result.Ok.unwrap": {"tf": 1}, "sain.result.Ok.unwrap_or": {"tf": 1}, "sain.result.Ok.unwrap_or_else": {"tf": 1}, "sain.result.Ok.unwrap_err": {"tf": 1}, "sain.result.Ok.ok": {"tf": 2.23606797749979}, "sain.result.Ok.err": {"tf": 2.23606797749979}, "sain.result.Ok.inspect": {"tf": 2}, "sain.result.Ok.inspect_err": {"tf": 2}, "sain.result.Ok.map_or": {"tf": 1.4142135623730951}, "sain.result.Ok.map_or_else": {"tf": 1.4142135623730951}, "sain.result.Ok.iter": {"tf": 1}, "sain.result.Err": {"tf": 1}, "sain.result.Err.is_ok": {"tf": 1.7320508075688772}, "sain.result.Err.is_ok_and": {"tf": 2}, "sain.result.Err.is_err": {"tf": 1.7320508075688772}, "sain.result.Err.is_err_and": {"tf": 1.7320508075688772}, "sain.sync.Lazy": {"tf": 1.4142135623730951}, "sain.sync.Lazy.is_initialized": {"tf": 1}, "sain.sync.Lazy.get": {"tf": 1.4142135623730951}, "sain.sync.Lazy.get_unchecked": {"tf": 1}, "sain.sync.Lazy.set": {"tf": 1.7320508075688772}, "sain.sync.Once.get": {"tf": 1}, "sain.sync.Once.get_unchecked": {"tf": 1.4142135623730951}, "sain.sync.Once.set": {"tf": 2}, "sain.sync.Once.clear": {"tf": 1}, "sain.sync.Once.get_or": {"tf": 1.4142135623730951}, "sain.sync.Once.get_or_with": {"tf": 2}, "sain.sync.LazyFuture": {"tf": 1.4142135623730951}, "sain.sync.LazyFuture.is_initialized": {"tf": 1}, "sain.sync.LazyFuture.get": {"tf": 1.4142135623730951}, "sain.sync.LazyFuture.set": {"tf": 1.7320508075688772}, "sain.sync.AsyncOnce.is_set": {"tf": 1}, "sain.sync.AsyncOnce.get": {"tf": 1}, "sain.sync.AsyncOnce.get_unchecked": {"tf": 1.4142135623730951}, "sain.sync.AsyncOnce.set": {"tf": 2}, "sain.sync.AsyncOnce.clear": {"tf": 1}, "sain.sync.AsyncOnce.get_or": {"tf": 2}, "sain.sync.AsyncOnce.get_or_with": {"tf": 2}}, "df": 148, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"sain.cfg_attr": {"tf": 1}, "sain.Vec.swap_remove": {"tf": 1}, "sain.Vec.index": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.collections.Vec.swap_remove": {"tf": 1}, "sain.collections.Vec.index": {"tf": 1}, "sain.collections.Bytes.from_raw": {"tf": 1}, "sain.collections.Bytes.index": {"tf": 1}, "sain.collections.buf.Bytes.from_raw": {"tf": 1}, "sain.collections.buf.Bytes.index": {"tf": 1}, "sain.collections.vec.Vec.swap_remove": {"tf": 1}, "sain.collections.vec.Vec.index": {"tf": 1}}, "df": 12}}}}}, "s": {"docs": {"sain.Error": {"tf": 1}, "sain.MaybeUninit.write": {"tf": 1}, "sain.collections.Bytes.insert": {"tf": 1}, "sain.collections.buf.Bytes.insert": {"tf": 1}, "sain.error.Error": {"tf": 1}}, "df": 5}}}, "i": {"docs": {}, "df": 0, "d": {"docs": {"sain.Some.take_if": {"tf": 1}, "sain.collections.Bytes.from_raw": {"tf": 1}, "sain.collections.Bytes.try_to_str": {"tf": 1}, "sain.collections.Bytes.put_raw": {"tf": 1}, "sain.collections.buf.Bytes.from_raw": {"tf": 1}, "sain.collections.buf.Bytes.try_to_str": {"tf": 1}, "sain.collections.buf.Bytes.put_raw": {"tf": 1}, "sain.option.Some.take_if": {"tf": 1}}, "df": 8, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"sain.Some.take_if": {"tf": 2}, "sain.option.Some.take_if": {"tf": 2}}, "df": 2}}}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sain.error": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"sain.result": {"tf": 1}}, "df": 1}}}}}}, "i": {"docs": {}, "df": 0, "a": {"docs": {"sain.Iter": {"tf": 1}, "sain.iter.Iter": {"tf": 1}}, "df": 2}, "e": {"docs": {}, "df": 0, "w": {"docs": {"sain.Vec.as_ref": {"tf": 1}, "sain.collections.Vec.as_ref": {"tf": 1}, "sain.collections.vec.Vec.as_ref": {"tf": 1}}, "df": 3}}, "p": {"docs": {"sain.Vec.reserve": {"tf": 2.23606797749979}, "sain.collections.Vec.reserve": {"tf": 2.23606797749979}, "sain.collections.vec.Vec.reserve": {"tf": 2.23606797749979}}, "df": 3}}, "c": {"docs": {"sain.Iterator.to_vec": {"tf": 1}, "sain.iter.Iterator.to_vec": {"tf": 1}}, "df": 2}}, "g": {"docs": {}, "df": 0, "t": {"docs": {"sain": {"tf": 1.4142135623730951}, "sain.cfg_attr": {"tf": 1}, "sain.Default": {"tf": 1}, "sain.Some.map_or_else": {"tf": 1}, "sain.Some.take_if": {"tf": 1}, "sain.Some.is_some_and": {"tf": 1.4142135623730951}, "sain.Iter": {"tf": 1.4142135623730951}, "sain.Iterator": {"tf": 1.4142135623730951}, "sain.Iterator.take": {"tf": 1}, "sain.Iterator.zip": {"tf": 1}, "sain.Iterator.async_for_each": {"tf": 1}, "sain.todo": {"tf": 1}, "sain.doc": {"tf": 1}, "sain.Ok.inspect": {"tf": 1}, "sain.Ok.inspect_err": {"tf": 1}, "sain.Vec": {"tf": 1}, "sain.Vec.with_capacity": {"tf": 1}, "sain.Vec.split_off": {"tf": 1}, "sain.Vec.retain": {"tf": 1}, "sain.Error": {"tf": 2.449489742783178}, "sain.Box.on_expire": {"tf": 1}, "sain.MaybeUninit": {"tf": 2}, "sain.MaybeUninit.uninit": {"tf": 1}, "sain.MaybeUninit.uninit_array": {"tf": 1}, "sain.MaybeUninit.write": {"tf": 1}, "sain.From": {"tf": 1.7320508075688772}, "sain.TryFrom": {"tf": 1.4142135623730951}, "sain.Into": {"tf": 1}, "sain.TryInto": {"tf": 1.4142135623730951}, "sain.boxed.Box.on_expire": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.collections.Vec": {"tf": 1}, "sain.collections.Vec.with_capacity": {"tf": 1}, "sain.collections.Vec.split_off": {"tf": 1}, "sain.collections.Vec.retain": {"tf": 1}, "sain.collections.Bytes.put_raw": {"tf": 1}, "sain.collections.Bytes.put_bytes": {"tf": 1}, "sain.collections.buf.Bytes.put_raw": {"tf": 1}, "sain.collections.buf.Bytes.put_bytes": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1}, "sain.collections.vec.Vec.with_capacity": {"tf": 1}, "sain.collections.vec.Vec.split_off": {"tf": 1}, "sain.collections.vec.Vec.retain": {"tf": 1}, "sain.convert": {"tf": 2.23606797749979}, "sain.convert.From": {"tf": 1.7320508075688772}, "sain.convert.TryFrom": {"tf": 1.4142135623730951}, "sain.convert.Into": {"tf": 1}, "sain.convert.TryInto": {"tf": 1.4142135623730951}, "sain.default": {"tf": 1}, "sain.default.Default": {"tf": 1}, "sain.error": {"tf": 1}, "sain.error.Error": {"tf": 2.449489742783178}, "sain.futures.spawn": {"tf": 1.4142135623730951}, "sain.iter.Iter": {"tf": 1.4142135623730951}, "sain.iter.Iterator": {"tf": 1.4142135623730951}, "sain.iter.Iterator.take": {"tf": 1}, "sain.iter.Iterator.zip": {"tf": 1}, "sain.iter.Iterator.async_for_each": {"tf": 1}, "sain.macros.todo": {"tf": 1}, "sain.macros.doc": {"tf": 1}, "sain.option": {"tf": 1}, "sain.option.Some": {"tf": 1}, "sain.option.Some.map_or_else": {"tf": 1}, "sain.option.Some.take_if": {"tf": 1}, "sain.option.Some.is_some_and": {"tf": 1.4142135623730951}, "sain.option.Option": {"tf": 1}, "sain.option.NOTHING": {"tf": 1}, "sain.result": {"tf": 1}, "sain.result.Ok.inspect": {"tf": 1}, "sain.result.Ok.inspect_err": {"tf": 1}, "sain.sync.Lazy": {"tf": 1}, "sain.sync.Once": {"tf": 1}, "sain.sync.Once.get_or": {"tf": 1}, "sain.sync.LazyFuture": {"tf": 1}, "sain.sync.AsyncOnce": {"tf": 1}}, "df": 75}, "e": {"docs": {}, "df": 0, "t": {"docs": {"sain.Some.unwrap_or_else": {"tf": 1}, "sain.Iterator": {"tf": 1.4142135623730951}, "sain.Vec": {"tf": 1.4142135623730951}, "sain.Vec.first": {"tf": 1}, "sain.Vec.get": {"tf": 1.7320508075688772}, "sain.Error": {"tf": 1}, "sain.Box": {"tf": 1.4142135623730951}, "sain.Box.on_expire": {"tf": 2}, "sain.Box.remaining": {"tf": 1}, "sain.Box.get": {"tf": 1.7320508075688772}, "sain.MaybeUninit.assume_init": {"tf": 1}, "sain.MaybeUninit.write": {"tf": 1}, "sain.boxed.Box": {"tf": 1.4142135623730951}, "sain.boxed.Box.on_expire": {"tf": 2}, "sain.boxed.Box.remaining": {"tf": 1}, "sain.boxed.Box.get": {"tf": 1.7320508075688772}, "sain.collections.Vec": {"tf": 1.4142135623730951}, "sain.collections.Vec.first": {"tf": 1}, "sain.collections.Vec.get": {"tf": 1.7320508075688772}, "sain.collections.Bytes.try_to_str": {"tf": 1}, "sain.collections.Bytes.to_str": {"tf": 1}, "sain.collections.buf.Bytes.try_to_str": {"tf": 1}, "sain.collections.buf.Bytes.to_str": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.first": {"tf": 1}, "sain.collections.vec.Vec.get": {"tf": 1.7320508075688772}, "sain.error": {"tf": 1}, "sain.error.Error": {"tf": 1}, "sain.futures.spawn": {"tf": 1.7320508075688772}, "sain.futures.loop": {"tf": 1}, "sain.iter.Iterator": {"tf": 1.4142135623730951}, "sain.option.Some.unwrap_or_else": {"tf": 1}, "sain.sync.Lazy.get_unchecked": {"tf": 1.7320508075688772}, "sain.sync.Lazy.set": {"tf": 1}, "sain.sync.Once": {"tf": 1.7320508075688772}, "sain.sync.Once.get_unchecked": {"tf": 2}, "sain.sync.Once.set": {"tf": 1}, "sain.sync.Once.get_or": {"tf": 2.23606797749979}, "sain.sync.Once.get_or_with": {"tf": 1.7320508075688772}, "sain.sync.LazyFuture.set": {"tf": 1}, "sain.sync.AsyncOnce": {"tf": 1.7320508075688772}, "sain.sync.AsyncOnce.get_unchecked": {"tf": 2}, "sain.sync.AsyncOnce.set": {"tf": 1}, "sain.sync.AsyncOnce.get_or": {"tf": 1.7320508075688772}, "sain.sync.AsyncOnce.get_or_with": {"tf": 1.7320508075688772}}, "df": 45, "s": {"docs": {"sain.cfg_attr": {"tf": 1}, "sain.Vec": {"tf": 2}, "sain.Box.on_expire": {"tf": 1}, "sain.boxed.Box.on_expire": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.collections.Vec": {"tf": 2}, "sain.collections.vec.Vec": {"tf": 2}, "sain.sync.Lazy": {"tf": 1.7320508075688772}, "sain.sync.Once.get": {"tf": 1}, "sain.sync.Once.get_or_with": {"tf": 1}, "sain.sync.LazyFuture": {"tf": 1.7320508075688772}, "sain.sync.AsyncOnce.get": {"tf": 1}, "sain.sync.AsyncOnce.get_or": {"tf": 1}, "sain.sync.AsyncOnce.get_or_with": {"tf": 1}}, "df": 14, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "f": {"docs": {"sain.Some.map_or_else": {"tf": 1}, "sain.option.Some.map_or_else": {"tf": 1}}, "df": 2}}}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.Box": {"tf": 1}, "sain.boxed.Box": {"tf": 1}}, "df": 2}}}}}, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"sain.Iterator": {"tf": 1}, "sain.collections": {"tf": 1}, "sain.iter.Iterator": {"tf": 1}}, "df": 3}, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"sain.Iterator.raw_parts": {"tf": 1}, "sain.default": {"tf": 2}, "sain.iter.Iterator.raw_parts": {"tf": 1}}, "df": 3}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.sync.Lazy.get": {"tf": 1}, "sain.sync.LazyFuture.get": {"tf": 1}}, "df": 2}}}}, "i": {"docs": {}, "df": 0, "c": {"docs": {"sain.TryFrom": {"tf": 1.4142135623730951}, "sain.TryInto": {"tf": 1.4142135623730951}, "sain.convert.TryFrom": {"tf": 1.4142135623730951}, "sain.convert.TryInto": {"tf": 1.4142135623730951}}, "df": 4}}}}}}, "g": {"docs": {"sain.Some.iter": {"tf": 1.4142135623730951}, "sain.option.Some.iter": {"tf": 1.4142135623730951}}, "df": 2}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sain.Vec": {"tf": 1}, "sain.collections": {"tf": 1}, "sain.collections.Vec": {"tf": 1}, "sain.collections.vec": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1}}, "df": 5}}}}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sain.collections.Bytes.put_raw": {"tf": 1}, "sain.collections.Bytes.put_bytes": {"tf": 1}, "sain.collections.buf.Bytes.put_raw": {"tf": 1}, "sain.collections.buf.Bytes.put_bytes": {"tf": 1}}, "df": 4}}}}}, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"sain.collections.vec.from_args": {"tf": 1}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {"sain.Vec.push_within_capacity": {"tf": 1}, "sain.Vec.reserve": {"tf": 1}, "sain.collections.Vec.push_within_capacity": {"tf": 1}, "sain.collections.Vec.reserve": {"tf": 1}, "sain.collections.vec.Vec.push_within_capacity": {"tf": 1}, "sain.collections.vec.Vec.reserve": {"tf": 1}, "sain.error": {"tf": 1}}, "df": 7}}, "e": {"docs": {}, "df": 0, "s": {"docs": {"sain.convert": {"tf": 1}}, "df": 1}}, "t": {"docs": {"sain.sync.Once": {"tf": 1}, "sain.sync.Once.get_or": {"tf": 1}, "sain.sync.AsyncOnce": {"tf": 1}}, "df": 3}}, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"sain.Vec.reserve": {"tf": 1}, "sain.Vec.get": {"tf": 1}, "sain.Box": {"tf": 1}, "sain.boxed": {"tf": 1}, "sain.boxed.Box": {"tf": 1}, "sain.collections.Vec.reserve": {"tf": 1}, "sain.collections.Vec.get": {"tf": 1}, "sain.collections.Bytes.from_str": {"tf": 1}, "sain.collections.buf.Bytes.from_str": {"tf": 1}, "sain.collections.vec.Vec.reserve": {"tf": 1}, "sain.collections.vec.Vec.get": {"tf": 1}, "sain.futures.spawn": {"tf": 1}}, "df": 12}, "s": {"docs": {"sain.Error": {"tf": 1.4142135623730951}, "sain.error.Error": {"tf": 1.4142135623730951}}, "df": 2}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sain.futures.spawn": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.futures.spawn": {"tf": 1}}, "df": 1}}}}}}}, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.sync.Once.get_unchecked": {"tf": 1}, "sain.sync.Once.set": {"tf": 1}, "sain.sync.Once.get_or": {"tf": 1}, "sain.sync.Once.get_or_with": {"tf": 1}, "sain.sync.AsyncOnce.get_unchecked": {"tf": 1}, "sain.sync.AsyncOnce.set": {"tf": 1}, "sain.sync.AsyncOnce.get_or": {"tf": 1}, "sain.sync.AsyncOnce.get_or_with": {"tf": 1}}, "df": 8}}}}}}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"sain.sync.AsyncOnce": {"tf": 1}}, "df": 1}}}}}}, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"sain.cfg": {"tf": 1.7320508075688772}, "sain.cfg_attr": {"tf": 2}, "sain.Some": {"tf": 1.4142135623730951}, "sain.Iterator.collect": {"tf": 1}, "sain.todo": {"tf": 1}, "sain.deprecated": {"tf": 2.23606797749979}, "sain.unimplemented": {"tf": 1.7320508075688772}, "sain.Ok.iter": {"tf": 1.4142135623730951}, "sain.Vec": {"tf": 2.23606797749979}, "sain.Vec.with_capacity": {"tf": 1}, "sain.Vec.split_off": {"tf": 1}, "sain.Vec.push_within_capacity": {"tf": 1}, "sain.Box": {"tf": 1}, "sain.Box.on_expire": {"tf": 1.7320508075688772}, "sain.Box.remaining": {"tf": 1}, "sain.MaybeUninit.write": {"tf": 1}, "sain.TryFrom": {"tf": 1}, "sain.TryInto": {"tf": 1}, "sain.boxed.Box": {"tf": 1}, "sain.boxed.Box.on_expire": {"tf": 1.7320508075688772}, "sain.boxed.Box.remaining": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 2}, "sain.cfg.cfg": {"tf": 1.7320508075688772}, "sain.collections.Vec": {"tf": 2.23606797749979}, "sain.collections.Vec.with_capacity": {"tf": 1}, "sain.collections.Vec.split_off": {"tf": 1}, "sain.collections.Vec.push_within_capacity": {"tf": 1}, "sain.collections.Bytes.__init__": {"tf": 1}, "sain.collections.Bytes.from_static": {"tf": 1}, "sain.collections.Bytes.to_str": {"tf": 1}, "sain.collections.Bytes.put": {"tf": 1}, "sain.collections.buf.Bytes.__init__": {"tf": 1}, "sain.collections.buf.Bytes.from_static": {"tf": 1}, "sain.collections.buf.Bytes.to_str": {"tf": 1}, "sain.collections.buf.Bytes.put": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 2.23606797749979}, "sain.collections.vec.Vec.with_capacity": {"tf": 1}, "sain.collections.vec.Vec.split_off": {"tf": 1}, "sain.collections.vec.Vec.push_within_capacity": {"tf": 1}, "sain.convert.TryFrom": {"tf": 1}, "sain.convert.TryInto": {"tf": 1}, "sain.iter.Iterator.collect": {"tf": 1}, "sain.macros.deprecated": {"tf": 2.23606797749979}, "sain.macros.unimplemented": {"tf": 1.7320508075688772}, "sain.macros.todo": {"tf": 1}, "sain.result": {"tf": 1}, "sain.result.Ok.iter": {"tf": 1.4142135623730951}, "sain.sync.Lazy.set": {"tf": 1}, "sain.sync.Once.get": {"tf": 1}, "sain.sync.Once.get_or": {"tf": 1}, "sain.sync.Once.get_or_with": {"tf": 1}, "sain.sync.LazyFuture.set": {"tf": 1}, "sain.sync.AsyncOnce.get": {"tf": 1}, "sain.sync.AsyncOnce.get_or": {"tf": 1}, "sain.sync.AsyncOnce.get_or_with": {"tf": 1}}, "df": 55}}, "n": {"3": {"2": {"docs": {"sain.cfg": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "s": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 2.23606797749979}, "sain.cfg.cfg_attr": {"tf": 2.23606797749979}, "sain.cfg.cfg": {"tf": 1.4142135623730951}}, "df": 4}}}}}, "t": {"docs": {"sain.Vec": {"tf": 1}, "sain.collections.Vec": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1}}, "df": 3, "h": {"docs": {"sain.cfg_attr": {"tf": 1}, "sain.Some": {"tf": 1}, "sain.Some.replace": {"tf": 1}, "sain.Some.as_ref": {"tf": 1}, "sain.Iterator": {"tf": 1.4142135623730951}, "sain.Iterator.zip": {"tf": 1.4142135623730951}, "sain.Iterator.union": {"tf": 1}, "sain.Iterator.async_for_each": {"tf": 1}, "sain.Ok.expect": {"tf": 1}, "sain.Ok.inspect": {"tf": 1}, "sain.Ok.inspect_err": {"tf": 1}, "sain.Vec": {"tf": 2.6457513110645907}, "sain.Vec.with_capacity": {"tf": 1.4142135623730951}, "sain.Vec.capacity": {"tf": 1.7320508075688772}, "sain.Vec.push_within_capacity": {"tf": 1.7320508075688772}, "sain.Vec.reserve": {"tf": 1}, "sain.Error": {"tf": 1.4142135623730951}, "sain.Box": {"tf": 1}, "sain.Box.get": {"tf": 1}, "sain.From": {"tf": 1.4142135623730951}, "sain.boxed.Box": {"tf": 1}, "sain.boxed.Box.get": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.collections.Vec": {"tf": 2.6457513110645907}, "sain.collections.Vec.with_capacity": {"tf": 1.4142135623730951}, "sain.collections.Vec.capacity": {"tf": 1.7320508075688772}, "sain.collections.Vec.push_within_capacity": {"tf": 1.7320508075688772}, "sain.collections.Vec.reserve": {"tf": 1}, "sain.collections.Bytes": {"tf": 1.4142135623730951}, "sain.collections.Bytes.from_str": {"tf": 1}, "sain.collections.Bytes.from_raw": {"tf": 1}, "sain.collections.Bytes.put": {"tf": 1}, "sain.collections.Bytes.put_raw": {"tf": 1}, "sain.collections.Bytes.insert": {"tf": 1}, "sain.collections.buf": {"tf": 1}, "sain.collections.buf.Bytes": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.from_str": {"tf": 1}, "sain.collections.buf.Bytes.from_raw": {"tf": 1}, "sain.collections.buf.Bytes.put": {"tf": 1}, "sain.collections.buf.Bytes.put_raw": {"tf": 1}, "sain.collections.buf.Bytes.insert": {"tf": 1}, "sain.collections.vec": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 2.6457513110645907}, "sain.collections.vec.Vec.with_capacity": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.capacity": {"tf": 1.7320508075688772}, "sain.collections.vec.Vec.push_within_capacity": {"tf": 1.7320508075688772}, "sain.collections.vec.Vec.reserve": {"tf": 1}, "sain.convert": {"tf": 1}, "sain.convert.From": {"tf": 1.4142135623730951}, "sain.error": {"tf": 1}, "sain.error.Error": {"tf": 1.4142135623730951}, "sain.iter.Iterator": {"tf": 1.4142135623730951}, "sain.iter.Iterator.zip": {"tf": 1.4142135623730951}, "sain.iter.Iterator.union": {"tf": 1}, "sain.iter.Iterator.async_for_each": {"tf": 1}, "sain.option.Some.replace": {"tf": 1}, "sain.option.Some.as_ref": {"tf": 1}, "sain.result": {"tf": 1.7320508075688772}, "sain.result.Ok.expect": {"tf": 1}, "sain.result.Ok.inspect": {"tf": 1}, "sain.result.Ok.inspect_err": {"tf": 1}, "sain.sync.Lazy": {"tf": 1}, "sain.sync.Lazy.get": {"tf": 1}, "sain.sync.Once.get_or": {"tf": 1}, "sain.sync.Once.get_or_with": {"tf": 2.23606797749979}, "sain.sync.LazyFuture": {"tf": 1}, "sain.sync.AsyncOnce.get_or": {"tf": 1.4142135623730951}, "sain.sync.AsyncOnce.get_or_with": {"tf": 2}}, "df": 68, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"sain.Some.unwrap_unchecked": {"tf": 1}, "sain.Vec.with_capacity": {"tf": 1}, "sain.collections.Vec.with_capacity": {"tf": 1}, "sain.collections.Bytes": {"tf": 1}, "sain.collections.Bytes.from_static": {"tf": 1}, "sain.collections.Bytes.as_mut": {"tf": 1}, "sain.collections.buf.Bytes": {"tf": 1}, "sain.collections.buf.Bytes.from_static": {"tf": 1}, "sain.collections.buf.Bytes.as_mut": {"tf": 1}, "sain.collections.vec.Vec.with_capacity": {"tf": 1}, "sain.option.Some.unwrap_unchecked": {"tf": 1}, "sain.sync.Lazy.get_unchecked": {"tf": 1}, "sain.sync.Once.get_unchecked": {"tf": 1}, "sain.sync.AsyncOnce.get_unchecked": {"tf": 1}}, "df": 14}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {"sain.Vec.with_capacity": {"tf": 1}, "sain.Vec.push_within_capacity": {"tf": 1.4142135623730951}, "sain.Vec.reserve": {"tf": 1}, "sain.collections.Vec.with_capacity": {"tf": 1}, "sain.collections.Vec.push_within_capacity": {"tf": 1.4142135623730951}, "sain.collections.Vec.reserve": {"tf": 1}, "sain.collections.Bytes": {"tf": 1}, "sain.collections.Bytes.index": {"tf": 1}, "sain.collections.buf.Bytes": {"tf": 1}, "sain.collections.buf.Bytes.index": {"tf": 1}, "sain.collections.vec.Vec.with_capacity": {"tf": 1}, "sain.collections.vec.Vec.push_within_capacity": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.reserve": {"tf": 1}}, "df": 13}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {"sain.result": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {"sain.cfg": {"tf": 1}, "sain.todo": {"tf": 1}, "sain.deprecated": {"tf": 1}, "sain.Ok.expect": {"tf": 1.4142135623730951}, "sain.Ok.unwrap": {"tf": 1.4142135623730951}, "sain.Ok.unwrap_or": {"tf": 1.4142135623730951}, "sain.Ok.unwrap_or_else": {"tf": 1}, "sain.Ok.unwrap_err": {"tf": 1}, "sain.Ok.ok": {"tf": 1.4142135623730951}, "sain.Ok.err": {"tf": 1.4142135623730951}, "sain.Ok.inspect": {"tf": 1.4142135623730951}, "sain.Ok.inspect_err": {"tf": 1.4142135623730951}, "sain.Ok.iter": {"tf": 1}, "sain.Vec.reserve": {"tf": 1}, "sain.Error": {"tf": 1}, "sain.Box.get": {"tf": 1}, "sain.MaybeUninit.assume_init": {"tf": 1}, "sain.MaybeUninit.write": {"tf": 1}, "sain.boxed.Box.get": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}, "sain.collections.Vec.reserve": {"tf": 1}, "sain.collections.Bytes.leak": {"tf": 1}, "sain.collections.buf.Bytes.leak": {"tf": 1}, "sain.collections.vec.Vec.reserve": {"tf": 1}, "sain.error.Error": {"tf": 1}, "sain.macros.deprecated": {"tf": 1}, "sain.macros.todo": {"tf": 1}, "sain.result": {"tf": 1}, "sain.result.Ok.expect": {"tf": 1.4142135623730951}, "sain.result.Ok.unwrap": {"tf": 1.4142135623730951}, "sain.result.Ok.unwrap_or": {"tf": 1.4142135623730951}, "sain.result.Ok.unwrap_or_else": {"tf": 1}, "sain.result.Ok.unwrap_err": {"tf": 1}, "sain.result.Ok.ok": {"tf": 1.4142135623730951}, "sain.result.Ok.err": {"tf": 1.4142135623730951}, "sain.result.Ok.inspect": {"tf": 1.4142135623730951}, "sain.result.Ok.inspect_err": {"tf": 1.4142135623730951}, "sain.result.Ok.iter": {"tf": 1}, "sain.sync.Lazy.get_unchecked": {"tf": 1}, "sain.sync.Once.get_unchecked": {"tf": 1}, "sain.sync.Once.set": {"tf": 1.4142135623730951}, "sain.sync.Once.get_or": {"tf": 1}, "sain.sync.Once.get_or_with": {"tf": 1}, "sain.sync.AsyncOnce.get_unchecked": {"tf": 1}, "sain.sync.AsyncOnce.set": {"tf": 1.4142135623730951}, "sain.sync.AsyncOnce.get_or": {"tf": 1}, "sain.sync.AsyncOnce.get_or_with": {"tf": 1}}, "df": 47}, "n": {"docs": {}, "df": 0, "t": {"docs": {"sain.Iterator": {"tf": 1}, "sain.From": {"tf": 1}, "sain.collections": {"tf": 1.7320508075688772}, "sain.convert.From": {"tf": 1}, "sain.iter.Iterator": {"tf": 1}}, "df": 5}}, "r": {"docs": {}, "df": 0, "n": {"docs": {"sain.deprecated": {"tf": 1}, "sain.unimplemented": {"tf": 1}, "sain.macros": {"tf": 1}, "sain.macros.deprecated": {"tf": 1}, "sain.macros.unimplemented": {"tf": 1}}, "df": 5, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.deprecated": {"tf": 1}, "sain.macros.deprecated": {"tf": 1}}, "df": 2}}}}}, "y": {"docs": {"sain.TryFrom": {"tf": 1.7320508075688772}, "sain.TryInto": {"tf": 1.4142135623730951}, "sain.convert": {"tf": 1}, "sain.convert.TryFrom": {"tf": 1.7320508075688772}, "sain.convert.TryInto": {"tf": 1.4142135623730951}, "sain.result": {"tf": 1}}, "df": 6, "s": {"docs": {"sain.Vec": {"tf": 1}, "sain.collections.Vec": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1}}, "df": 3}}}, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"sain.cfg_attr": {"tf": 1}, "sain.Some.as_ref": {"tf": 1}, "sain.deprecated": {"tf": 1}, "sain.unimplemented": {"tf": 1}, "sain.Vec": {"tf": 1}, "sain.Box.on_expire": {"tf": 1}, "sain.Box.remaining": {"tf": 1}, "sain.MaybeUninit": {"tf": 1}, "sain.TryFrom": {"tf": 1}, "sain.TryInto": {"tf": 1}, "sain.boxed.Box.on_expire": {"tf": 1}, "sain.boxed.Box.remaining": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.collections": {"tf": 1.7320508075688772}, "sain.collections.Vec": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1}, "sain.convert": {"tf": 1.4142135623730951}, "sain.convert.TryFrom": {"tf": 1}, "sain.convert.TryInto": {"tf": 1}, "sain.macros.deprecated": {"tf": 1}, "sain.macros.unimplemented": {"tf": 1}, "sain.option.Some.as_ref": {"tf": 1}, "sain.sync.Lazy": {"tf": 1.4142135623730951}, "sain.sync.LazyFuture": {"tf": 1.4142135623730951}}, "df": 24}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sain.Iterator.sort": {"tf": 1}, "sain.MaybeUninit": {"tf": 1}, "sain.collections.Bytes.is_empty": {"tf": 1}, "sain.collections.buf.Bytes.is_empty": {"tf": 1}, "sain.iter.Iterator.sort": {"tf": 1}, "sain.sync.Lazy.is_initialized": {"tf": 1}, "sain.sync.LazyFuture.is_initialized": {"tf": 1}, "sain.sync.AsyncOnce.is_set": {"tf": 1}}, "df": 8}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {"sain.Error": {"tf": 1}, "sain.error": {"tf": 1}, "sain.error.Error": {"tf": 1}, "sain.result": {"tf": 1}}, "df": 4}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {"sain.unimplemented": {"tf": 1}, "sain.Vec": {"tf": 1.4142135623730951}, "sain.Error": {"tf": 1}, "sain.MaybeUninit": {"tf": 1.4142135623730951}, "sain.TryFrom": {"tf": 1}, "sain.TryInto": {"tf": 1}, "sain.collections.Vec": {"tf": 1.4142135623730951}, "sain.collections.Bytes.to_str": {"tf": 1}, "sain.collections.buf.Bytes.to_str": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1.4142135623730951}, "sain.convert.TryFrom": {"tf": 1}, "sain.convert.TryInto": {"tf": 1}, "sain.error.Error": {"tf": 1}, "sain.macros.unimplemented": {"tf": 1}}, "df": 14, "s": {"docs": {"sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}}, "df": 2}}}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sain.Some": {"tf": 1}, "sain.Iterator.take_while": {"tf": 1.4142135623730951}, "sain.Iterator.drop_while": {"tf": 1.4142135623730951}, "sain.Iterator.all": {"tf": 1}, "sain.Vec.retain": {"tf": 1}, "sain.Box.on_expire": {"tf": 1}, "sain.Box.get": {"tf": 1.4142135623730951}, "sain.From": {"tf": 1}, "sain.boxed.Box.on_expire": {"tf": 1}, "sain.boxed.Box.get": {"tf": 1.4142135623730951}, "sain.collections.Vec.retain": {"tf": 1}, "sain.collections.vec.Vec.retain": {"tf": 1}, "sain.convert.From": {"tf": 1}, "sain.iter.Iterator.take_while": {"tf": 1.4142135623730951}, "sain.iter.Iterator.drop_while": {"tf": 1.4142135623730951}, "sain.iter.Iterator.all": {"tf": 1}, "sain.iter.TakeWhile": {"tf": 1.4142135623730951}, "sain.iter.DropWhile": {"tf": 1.4142135623730951}, "sain.iter.Empty.all": {"tf": 1}}, "df": 19}}, "c": {"docs": {}, "df": 0, "h": {"docs": {"sain.Iter": {"tf": 1}, "sain.Iterator.cloned": {"tf": 1.4142135623730951}, "sain.Iterator.copied": {"tf": 1.4142135623730951}, "sain.Vec": {"tf": 2.23606797749979}, "sain.Box": {"tf": 1}, "sain.MaybeUninit": {"tf": 1}, "sain.TryFrom": {"tf": 1.4142135623730951}, "sain.Into": {"tf": 1}, "sain.TryInto": {"tf": 1}, "sain.boxed.Box": {"tf": 1}, "sain.cfg": {"tf": 1}, "sain.collections": {"tf": 1}, "sain.collections.Vec": {"tf": 2.23606797749979}, "sain.collections.Bytes.to_str": {"tf": 1.4142135623730951}, "sain.collections.Bytes.put": {"tf": 1}, "sain.collections.Bytes.put_raw": {"tf": 1}, "sain.collections.Bytes.put_bytes": {"tf": 1}, "sain.collections.buf.Bytes.to_str": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.put": {"tf": 1}, "sain.collections.buf.Bytes.put_raw": {"tf": 1}, "sain.collections.buf.Bytes.put_bytes": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 2.23606797749979}, "sain.convert": {"tf": 1.4142135623730951}, "sain.convert.TryFrom": {"tf": 1.4142135623730951}, "sain.convert.Into": {"tf": 1}, "sain.convert.TryInto": {"tf": 1}, "sain.iter.Iter": {"tf": 1}, "sain.iter.Iterator.cloned": {"tf": 1.4142135623730951}, "sain.iter.Iterator.copied": {"tf": 1.4142135623730951}, "sain.result": {"tf": 1.7320508075688772}, "sain.sync.Once": {"tf": 1}, "sain.sync.AsyncOnce": {"tf": 1}}, "df": 32, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sain.From": {"tf": 1}, "sain.convert.From": {"tf": 1}}, "df": 2}}}}}}}, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"sain.Vec.index": {"tf": 1}, "sain.collections.Vec.index": {"tf": 1}, "sain.collections.vec.Vec.index": {"tf": 1}}, "df": 3}}}, "y": {"docs": {"sain.Error": {"tf": 1.4142135623730951}, "sain.error.Error": {"tf": 1.4142135623730951}, "sain.futures.spawn": {"tf": 1.4142135623730951}}, "df": 3}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.Some.default": {"tf": 1}, "sain.Some.into_inner": {"tf": 1}, "sain.option.Some.into_inner": {"tf": 1}}, "df": 3}, "r": {"docs": {"sain.MaybeUninit": {"tf": 1.4142135623730951}, "sain.boxed": {"tf": 1}}, "df": 2}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"sain.MaybeUninit": {"tf": 1.4142135623730951}, "sain.MaybeUninit.uninit_array": {"tf": 1.4142135623730951}, "sain.MaybeUninit.assume_init": {"tf": 1}, "sain.MaybeUninit.write": {"tf": 1}, "sain.result": {"tf": 1.4142135623730951}}, "df": 5}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"sain.sync.Once": {"tf": 1}, "sain.sync.AsyncOnce": {"tf": 1}}, "df": 2}}}}}}, "e": {"docs": {"sain.Iterator.cloned": {"tf": 1}, "sain.Iterator.copied": {"tf": 1}, "sain.iter.Iterator.cloned": {"tf": 1}, "sain.iter.Iterator.copied": {"tf": 1}, "sain.sync.Once.set": {"tf": 1}, "sain.sync.AsyncOnce.set": {"tf": 1}}, "df": 6, "l": {"docs": {}, "df": 0, "l": {"docs": {"sain.Vec.with_capacity": {"tf": 1}, "sain.Vec.count": {"tf": 1}, "sain.collections.Vec.with_capacity": {"tf": 1}, "sain.collections.Vec.count": {"tf": 1}, "sain.collections.Bytes": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.with_capacity": {"tf": 1}, "sain.collections.vec.Vec.count": {"tf": 1}, "sain.sync.Lazy": {"tf": 1}, "sain.sync.LazyFuture": {"tf": 1}}, "df": 10}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"sain.Ok.unwrap_or_else": {"tf": 1}, "sain.result.Ok.unwrap_or_else": {"tf": 1}}, "df": 2, "s": {"docs": {"sain.Vec.retain": {"tf": 1}, "sain.collections.Vec.retain": {"tf": 1}, "sain.collections.vec.Vec.retain": {"tf": 1}}, "df": 3}}, "k": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.collections.Bytes": {"tf": 1}, "sain.collections.buf.Bytes": {"tf": 1}, "sain.error": {"tf": 1}, "sain.result": {"tf": 1}}, "df": 4}}}}, "l": {"docs": {}, "df": 0, "d": {"docs": {"sain.collections.Bytes.to_str": {"tf": 1.4142135623730951}, "sain.collections.Bytes.put_bytes": {"tf": 1}, "sain.collections.buf.Bytes.to_str": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.put_bytes": {"tf": 1}}, "df": 4}}}, "n": {"docs": {"sain.Vec.with_capacity": {"tf": 1}, "sain.Box": {"tf": 1}, "sain.boxed.Box": {"tf": 1}, "sain.collections.Vec.with_capacity": {"tf": 1}, "sain.collections.Bytes.__init__": {"tf": 1}, "sain.collections.buf.Bytes.__init__": {"tf": 1}, "sain.collections.vec.Vec.with_capacity": {"tf": 1}, "sain.sync.Once": {"tf": 1}, "sain.sync.Once.get_or": {"tf": 1}, "sain.sync.AsyncOnce": {"tf": 1}}, "df": 10}}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sain.cfg": {"tf": 1}, "sain.MaybeUninit": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 3}}, "t": {"docs": {"sain.Vec": {"tf": 1}, "sain.collections.Vec": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1}, "sain.convert": {"tf": 1}, "sain.result": {"tf": 1}, "sain.sync.Once.get_or": {"tf": 1}, "sain.sync.Once.get_or_with": {"tf": 1}, "sain.sync.AsyncOnce.get_or": {"tf": 1}, "sain.sync.AsyncOnce.get_or_with": {"tf": 1}}, "df": 9}}}}}}}, "c": {"docs": {}, "df": 0, "t": {"docs": {"sain.Default": {"tf": 1.4142135623730951}, "sain.todo": {"tf": 1}, "sain.Box": {"tf": 1}, "sain.boxed.Box": {"tf": 1}, "sain.convert": {"tf": 1}, "sain.default.Default": {"tf": 1.4142135623730951}, "sain.futures.spawn": {"tf": 1}, "sain.macros.todo": {"tf": 1}, "sain.option.Some": {"tf": 1.4142135623730951}}, "df": 9}}, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.Iterator.take_while": {"tf": 1}, "sain.iter.Iterator.take_while": {"tf": 1}}, "df": 2}}}}}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.unimplemented": {"tf": 1}, "sain.macros.unimplemented": {"tf": 1}}, "df": 2}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"sain.collections.Bytes.from_static": {"tf": 1}, "sain.collections.buf.Bytes.from_static": {"tf": 1}}, "df": 2}}}}}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.macros.unsafe": {"tf": 1}}, "df": 3}}, "o": {"docs": {}, "df": 0, "r": {"docs": {"sain.deprecated": {"tf": 1}, "sain.unimplemented": {"tf": 1}, "sain.macros.deprecated": {"tf": 1}, "sain.macros.unimplemented": {"tf": 1}}, "df": 4, "s": {"docs": {"sain.macros": {"tf": 1}}, "df": 1}}}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"sain.Iterator.raw_parts": {"tf": 1}, "sain.iter.Iterator.raw_parts": {"tf": 1}}, "df": 2}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.collections.Bytes.try_to_str": {"tf": 1.4142135623730951}, "sain.collections.Bytes.to_str": {"tf": 1}, "sain.collections.buf.Bytes.try_to_str": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.to_str": {"tf": 1}}, "df": 4}, "r": {"docs": {"sain.convert": {"tf": 1}}, "df": 1}}}}}, "f": {"docs": {"sain.cfg_attr": {"tf": 1.4142135623730951}, "sain.Default": {"tf": 1}, "sain.Some.map_or_else": {"tf": 1}, "sain.Some.take_if": {"tf": 1}, "sain.Iterator": {"tf": 1.4142135623730951}, "sain.Iterator.async_for_each": {"tf": 1.4142135623730951}, "sain.todo": {"tf": 1}, "sain.doc": {"tf": 1}, "sain.Ok.inspect": {"tf": 1}, "sain.Ok.inspect_err": {"tf": 1}, "sain.Error": {"tf": 2.449489742783178}, "sain.Box.on_expire": {"tf": 1}, "sain.MaybeUninit.write": {"tf": 1}, "sain.From": {"tf": 1}, "sain.TryFrom": {"tf": 1}, "sain.Into": {"tf": 1}, "sain.TryInto": {"tf": 1}, "sain.boxed.Box.on_expire": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1.4142135623730951}, "sain.convert": {"tf": 2}, "sain.convert.From": {"tf": 1}, "sain.convert.TryFrom": {"tf": 1}, "sain.convert.Into": {"tf": 1}, "sain.convert.TryInto": {"tf": 1}, "sain.default": {"tf": 1}, "sain.default.Default": {"tf": 1}, "sain.error": {"tf": 1}, "sain.error.Error": {"tf": 2.449489742783178}, "sain.futures.spawn": {"tf": 1.4142135623730951}, "sain.iter.Iterator": {"tf": 1.4142135623730951}, "sain.iter.Iterator.async_for_each": {"tf": 1.4142135623730951}, "sain.macros.todo": {"tf": 1}, "sain.macros.doc": {"tf": 1}, "sain.option.Some": {"tf": 1}, "sain.option.Some.map_or_else": {"tf": 1}, "sain.option.Some.take_if": {"tf": 1}, "sain.result": {"tf": 1}, "sain.result.Ok.inspect": {"tf": 1}, "sain.result.Ok.inspect_err": {"tf": 1}, "sain.sync.Lazy": {"tf": 1}, "sain.sync.Once": {"tf": 1}, "sain.sync.Once.get_or": {"tf": 1}, "sain.sync.LazyFuture": {"tf": 1}, "sain.sync.AsyncOnce": {"tf": 1}}, "df": 44, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"sain.Default": {"tf": 2.449489742783178}, "sain.Default.default": {"tf": 1}, "sain.Some": {"tf": 1}, "sain.Some.default": {"tf": 1.4142135623730951}, "sain.Some.unwrap_or": {"tf": 1}, "sain.Some.unwrap_or_else": {"tf": 1}, "sain.Some.map_or": {"tf": 1}, "sain.Some.map_or_else": {"tf": 2}, "sain.Iterator.default": {"tf": 1.4142135623730951}, "sain.unimplemented": {"tf": 1}, "sain.Ok.unwrap_or": {"tf": 1}, "sain.Ok.map_or": {"tf": 1}, "sain.Ok.map_or_else": {"tf": 1}, "sain.MaybeUninit": {"tf": 1.4142135623730951}, "sain.default": {"tf": 2.6457513110645907}, "sain.default.Default": {"tf": 2.449489742783178}, "sain.default.Default.default": {"tf": 1}, "sain.iter.Iterator.default": {"tf": 1.4142135623730951}, "sain.iter.Empty": {"tf": 1.4142135623730951}, "sain.macros.unimplemented": {"tf": 1}, "sain.option.Some": {"tf": 2.449489742783178}, "sain.option.Some.default": {"tf": 1}, "sain.option.Some.unwrap_or": {"tf": 1}, "sain.option.Some.unwrap_or_else": {"tf": 1}, "sain.option.Some.map_or": {"tf": 1}, "sain.option.Some.map_or_else": {"tf": 2}, "sain.result": {"tf": 2}, "sain.result.Ok.unwrap_or": {"tf": 1}, "sain.result.Ok.map_or": {"tf": 1}, "sain.result.Ok.map_or_else": {"tf": 1}}, "df": 30}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"sain.Error": {"tf": 1.4142135623730951}, "sain.error.Error": {"tf": 1.4142135623730951}}, "df": 2}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {"sain.Error": {"tf": 1.4142135623730951}, "sain.From": {"tf": 1}, "sain.convert": {"tf": 1}, "sain.convert.From": {"tf": 1}, "sain.error.Error": {"tf": 1.4142135623730951}}, "df": 5, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.Some.as_ref": {"tf": 1}, "sain.Iterator": {"tf": 1}, "sain.collections.buf": {"tf": 1}, "sain.iter.Iterator": {"tf": 1}, "sain.option.Some.as_ref": {"tf": 1}}, "df": 5}}}}}, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.Iterator": {"tf": 1}, "sain.Error": {"tf": 1.4142135623730951}, "sain.error": {"tf": 1}, "sain.error.Error": {"tf": 1.4142135623730951}, "sain.iter.Iterator": {"tf": 1}}, "df": 5}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {"sain.collections.Bytes.put_raw": {"tf": 1}, "sain.collections.buf.Bytes.put_raw": {"tf": 1}}, "df": 2}}}}}}}}, "e": {"docs": {}, "df": 0, "p": {"docs": {"sain.Iterator.copied": {"tf": 1}, "sain.iter.Iterator.copied": {"tf": 1}}, "df": 2, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "y": {"docs": {"sain.Iterator.copied": {"tf": 1}, "sain.iter.Iterator.copied": {"tf": 1}}, "df": 2}}}}, "l": {"docs": {}, "df": 0, "y": {"docs": {"sain.iter.Copied": {"tf": 1}}, "df": 1}}}}, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.deprecated": {"tf": 2}, "sain.macros.deprecated": {"tf": 2}}, "df": 2}}}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.Vec": {"tf": 1}, "sain.collections.Vec": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1}}, "df": 3}}}}}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"sain.collections.Bytes.put_raw": {"tf": 1}, "sain.collections.buf.Bytes.put_raw": {"tf": 1}, "sain.iter": {"tf": 1}}, "df": 3}}}}}}, "o": {"docs": {"sain.cfg_attr": {"tf": 1}, "sain.Ok.inspect": {"tf": 1.4142135623730951}, "sain.Ok.inspect_err": {"tf": 1.4142135623730951}, "sain.Box.get": {"tf": 1}, "sain.From": {"tf": 1}, "sain.boxed.Box.get": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.convert.From": {"tf": 1}, "sain.result.Ok.inspect": {"tf": 1.4142135623730951}, "sain.result.Ok.inspect_err": {"tf": 1.4142135623730951}}, "df": 10, "c": {"docs": {"sain.doc": {"tf": 1.7320508075688772}, "sain.macros.doc": {"tf": 1.7320508075688772}}, "df": 2, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.doc": {"tf": 1}, "sain.From": {"tf": 1}, "sain.convert.From": {"tf": 1}, "sain.macros": {"tf": 1}, "sain.macros.doc": {"tf": 1}}, "df": 5}}}}}}}}}}, "s": {"docs": {"sain.doc": {"tf": 1}, "sain.macros.doc": {"tf": 1}}, "df": 2}}, "e": {"docs": {}, "df": 0, "s": {"docs": {"sain.Vec": {"tf": 1}, "sain.collections.Vec": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1}}, "df": 3, "n": {"docs": {"sain.Vec": {"tf": 1.4142135623730951}, "sain.Box": {"tf": 1}, "sain.MaybeUninit": {"tf": 1}, "sain.MaybeUninit.uninit_array": {"tf": 1}, "sain.boxed.Box": {"tf": 1}, "sain.collections.Vec": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec": {"tf": 1.4142135623730951}, "sain.result": {"tf": 1}}, "df": 8}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.convert": {"tf": 1}}, "df": 1}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {"sain.Some": {"tf": 1}, "sain.Iterator.drop_while": {"tf": 1}, "sain.iter.Iterator.drop_while": {"tf": 1}, "sain.iter.DropWhile": {"tf": 1}, "sain.result": {"tf": 1}}, "df": 5, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.Vec.truncate": {"tf": 1}, "sain.collections.Vec.truncate": {"tf": 1}, "sain.collections.vec.Vec.truncate": {"tf": 1}}, "df": 3}}}}, "s": {"docs": {"sain.iter.Take": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"sain.Box": {"tf": 1.4142135623730951}, "sain.MaybeUninit.write": {"tf": 1.4142135623730951}, "sain.boxed.Box": {"tf": 1.4142135623730951}, "sain.collections.Bytes": {"tf": 1}, "sain.collections.Bytes.from_raw": {"tf": 1.7320508075688772}, "sain.collections.Bytes.leak": {"tf": 1.4142135623730951}, "sain.collections.Bytes.put_raw": {"tf": 2}, "sain.collections.buf.Bytes": {"tf": 1}, "sain.collections.buf.Bytes.from_raw": {"tf": 1.7320508075688772}, "sain.collections.buf.Bytes.leak": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.put_raw": {"tf": 2}, "sain.collections.buf.Rawish": {"tf": 1}, "sain.collections.buf.Buffer": {"tf": 1}}, "df": 13, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"sain.Iterator": {"tf": 1}, "sain.Iterator.cloned": {"tf": 1}, "sain.Iterator.copied": {"tf": 1}, "sain.Error": {"tf": 1.7320508075688772}, "sain.From": {"tf": 1}, "sain.TryFrom": {"tf": 1}, "sain.Into": {"tf": 1}, "sain.TryInto": {"tf": 1}, "sain.convert": {"tf": 1.4142135623730951}, "sain.convert.From": {"tf": 1}, "sain.convert.TryFrom": {"tf": 1}, "sain.convert.Into": {"tf": 1}, "sain.convert.TryInto": {"tf": 1}, "sain.error": {"tf": 1.4142135623730951}, "sain.error.Error": {"tf": 1.7320508075688772}, "sain.iter.Iterator": {"tf": 1}, "sain.iter.Iterator.cloned": {"tf": 1}, "sain.iter.Iterator.copied": {"tf": 1}, "sain.sync.Lazy": {"tf": 1.4142135623730951}, "sain.sync.LazyFuture": {"tf": 1.4142135623730951}}, "df": 20, "e": {"docs": {}, "df": 0, "s": {"docs": {"sain.Some.as_ref": {"tf": 1}, "sain.Error": {"tf": 1}, "sain.error": {"tf": 1}, "sain.error.Error": {"tf": 1}, "sain.option.Some.as_ref": {"tf": 1}}, "df": 5}}}}}}}}}, "n": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "y": {"docs": {"sain.Iterator.async_for_each": {"tf": 1}, "sain.iter.Iterator.async_for_each": {"tf": 1}}, "df": 2}}}, "y": {"docs": {"sain.Box.get": {"tf": 1}, "sain.boxed.Box.get": {"tf": 1}}, "df": 2, "s": {"docs": {"sain.Box.get": {"tf": 1}, "sain.boxed.Box.get": {"tf": 1}}, "df": 2}}, "r": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"sain.cfg": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "y": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"sain.collections": {"tf": 1}}, "df": 1}}}}}}}}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.collections.Bytes.to_str": {"tf": 1}, "sain.collections.buf.Bytes.to_str": {"tf": 1}, "sain.iter.Enumerate": {"tf": 1}}, "df": 3}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "s": {"docs": {"sain.convert": {"tf": 1}}, "df": 1}}}}}, "n": {"docs": {}, "df": 0, "o": {"docs": {"sain.Vec": {"tf": 1}, "sain.Vec.is_empty": {"tf": 1}, "sain.Vec.index": {"tf": 1}, "sain.From": {"tf": 1}, "sain.collections.Vec": {"tf": 1}, "sain.collections.Vec.is_empty": {"tf": 1}, "sain.collections.Vec.index": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1}, "sain.collections.vec.Vec.is_empty": {"tf": 1}, "sain.collections.vec.Vec.index": {"tf": 1}, "sain.convert.From": {"tf": 1}, "sain.result": {"tf": 1}}, "df": 12, "t": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1.4142135623730951}, "sain.Some": {"tf": 1}, "sain.Some.into_inner": {"tf": 1}, "sain.Some.unwrap": {"tf": 1.4142135623730951}, "sain.Some.unwrap_or": {"tf": 1}, "sain.Some.unwrap_or_else": {"tf": 1}, "sain.Some.unwrap_unchecked": {"tf": 1}, "sain.Some.expect": {"tf": 1}, "sain.Some.filter": {"tf": 1}, "sain.Some.and_then": {"tf": 1}, "sain.Some.as_ref": {"tf": 1}, "sain.Some.as_mut": {"tf": 1}, "sain.Some.is_some": {"tf": 1}, "sain.Some.is_some_and": {"tf": 1}, "sain.Iterator.collect": {"tf": 1}, "sain.Iterator.cloned": {"tf": 1}, "sain.unimplemented": {"tf": 1}, "sain.Vec": {"tf": 2}, "sain.Vec.capacity": {"tf": 1}, "sain.Vec.swap_remove": {"tf": 1}, "sain.Vec.push_within_capacity": {"tf": 1}, "sain.Vec.count": {"tf": 1}, "sain.Error": {"tf": 2}, "sain.Box": {"tf": 1}, "sain.Box.get": {"tf": 1.7320508075688772}, "sain.MaybeUninit.assume_init": {"tf": 1}, "sain.TryFrom": {"tf": 1}, "sain.Into": {"tf": 1}, "sain.TryInto": {"tf": 1.7320508075688772}, "sain.boxed.Box": {"tf": 1}, "sain.boxed.Box.get": {"tf": 1.7320508075688772}, "sain.cfg.cfg_attr": {"tf": 1.4142135623730951}, "sain.cfg.cfg": {"tf": 1}, "sain.collections.Vec": {"tf": 2}, "sain.collections.Vec.capacity": {"tf": 1}, "sain.collections.Vec.swap_remove": {"tf": 1}, "sain.collections.Vec.push_within_capacity": {"tf": 1}, "sain.collections.Vec.count": {"tf": 1}, "sain.collections.Bytes.from_raw": {"tf": 1}, "sain.collections.Bytes.to_str": {"tf": 1}, "sain.collections.Bytes.put": {"tf": 1}, "sain.collections.Bytes.is_empty": {"tf": 1}, "sain.collections.Bytes.index": {"tf": 1}, "sain.collections.buf.Bytes.from_raw": {"tf": 1}, "sain.collections.buf.Bytes.to_str": {"tf": 1}, "sain.collections.buf.Bytes.put": {"tf": 1}, "sain.collections.buf.Bytes.is_empty": {"tf": 1}, "sain.collections.buf.Bytes.index": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 2}, "sain.collections.vec.Vec.capacity": {"tf": 1}, "sain.collections.vec.Vec.swap_remove": {"tf": 1}, "sain.collections.vec.Vec.push_within_capacity": {"tf": 1}, "sain.collections.vec.Vec.count": {"tf": 1}, "sain.convert.TryFrom": {"tf": 1}, "sain.convert.Into": {"tf": 1}, "sain.convert.TryInto": {"tf": 1.7320508075688772}, "sain.error": {"tf": 1.4142135623730951}, "sain.error.Error": {"tf": 2}, "sain.iter.Iterator.collect": {"tf": 1}, "sain.iter.Iterator.cloned": {"tf": 1}, "sain.macros.unimplemented": {"tf": 1}, "sain.option.Some.into_inner": {"tf": 1}, "sain.option.Some.unwrap": {"tf": 1.4142135623730951}, "sain.option.Some.unwrap_or": {"tf": 1}, "sain.option.Some.unwrap_or_else": {"tf": 1}, "sain.option.Some.unwrap_unchecked": {"tf": 1}, "sain.option.Some.expect": {"tf": 1}, "sain.option.Some.filter": {"tf": 1}, "sain.option.Some.and_then": {"tf": 1}, "sain.option.Some.as_ref": {"tf": 1}, "sain.option.Some.as_mut": {"tf": 1}, "sain.option.Some.is_some": {"tf": 1}, "sain.option.Some.is_some_and": {"tf": 1}, "sain.result": {"tf": 1.4142135623730951}, "sain.sync.Lazy.is_initialized": {"tf": 1}, "sain.sync.Once.get": {"tf": 1}, "sain.sync.Once.set": {"tf": 1.7320508075688772}, "sain.sync.Once.get_or": {"tf": 1}, "sain.sync.LazyFuture.is_initialized": {"tf": 1}, "sain.sync.AsyncOnce.is_set": {"tf": 1}, "sain.sync.AsyncOnce.set": {"tf": 1.7320508075688772}}, "df": 82, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.Some.default": {"tf": 1}, "sain.Ok.inspect": {"tf": 1}, "sain.Ok.inspect_err": {"tf": 1}, "sain.Vec.swap_remove": {"tf": 1}, "sain.MaybeUninit": {"tf": 1}, "sain.collections.Vec.swap_remove": {"tf": 1}, "sain.collections.vec.Vec.swap_remove": {"tf": 1}, "sain.iter.Empty": {"tf": 1}, "sain.iter.empty": {"tf": 1}, "sain.option.NOTHING": {"tf": 1.7320508075688772}, "sain.result.Ok.inspect": {"tf": 1}, "sain.result.Ok.inspect_err": {"tf": 1}, "sain.sync.AsyncOnce.get": {"tf": 1}}, "df": 13}}}}, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"sain.Error": {"tf": 2.23606797749979}, "sain.error": {"tf": 1}, "sain.error.Error": {"tf": 2.23606797749979}}, "df": 3}}}}}, "e": {"docs": {"sain.MaybeUninit.uninit_array": {"tf": 1}}, "df": 1, "s": {"docs": {"sain.cfg": {"tf": 1}}, "df": 1}}}, "n": {"docs": {"sain.Vec.reserve": {"tf": 1}, "sain.collections.Vec.reserve": {"tf": 1}, "sain.collections.vec.Vec.reserve": {"tf": 1}}, "df": 3, "e": {"docs": {"sain.cfg": {"tf": 2}, "sain.cfg_attr": {"tf": 2.23606797749979}, "sain.Some": {"tf": 2.449489742783178}, "sain.Some.default": {"tf": 1}, "sain.Some.into_inner": {"tf": 2}, "sain.Some.unwrap": {"tf": 1.7320508075688772}, "sain.Some.unwrap_or": {"tf": 1.4142135623730951}, "sain.Some.unwrap_or_else": {"tf": 1.4142135623730951}, "sain.Some.unwrap_unchecked": {"tf": 1.7320508075688772}, "sain.Some.expect": {"tf": 2.23606797749979}, "sain.Some.map": {"tf": 2}, "sain.Some.map_or": {"tf": 1.4142135623730951}, "sain.Some.map_or_else": {"tf": 1.4142135623730951}, "sain.Some.filter": {"tf": 2}, "sain.Some.take": {"tf": 1.4142135623730951}, "sain.Some.take_if": {"tf": 1.7320508075688772}, "sain.Some.replace": {"tf": 1}, "sain.Some.and_ok": {"tf": 2}, "sain.Some.and_then": {"tf": 2.23606797749979}, "sain.Some.iter": {"tf": 1.4142135623730951}, "sain.Some.as_ref": {"tf": 2.23606797749979}, "sain.Some.as_mut": {"tf": 2.23606797749979}, "sain.Some.is_some": {"tf": 1.4142135623730951}, "sain.Some.is_some_and": {"tf": 1.4142135623730951}, "sain.Some.is_none": {"tf": 2}, "sain.Iterator": {"tf": 2.23606797749979}, "sain.Iterator.default": {"tf": 1}, "sain.Iterator.collect": {"tf": 1}, "sain.Iterator.sink": {"tf": 1}, "sain.Iterator.next": {"tf": 1.4142135623730951}, "sain.Iterator.async_for_each": {"tf": 1}, "sain.todo": {"tf": 1}, "sain.deprecated": {"tf": 1.4142135623730951}, "sain.unimplemented": {"tf": 1.4142135623730951}, "sain.doc": {"tf": 1}, "sain.Ok.is_ok": {"tf": 1}, "sain.Ok.is_ok_and": {"tf": 1}, "sain.Ok.is_err": {"tf": 1}, "sain.Ok.is_err_and": {"tf": 1}, "sain.Ok.expect": {"tf": 1.7320508075688772}, "sain.Ok.unwrap": {"tf": 1.7320508075688772}, "sain.Ok.unwrap_or": {"tf": 1.7320508075688772}, "sain.Ok.unwrap_err": {"tf": 2}, "sain.Ok.ok": {"tf": 1.4142135623730951}, "sain.Ok.err": {"tf": 1.4142135623730951}, "sain.Ok.inspect": {"tf": 1.7320508075688772}, "sain.Ok.inspect_err": {"tf": 1.7320508075688772}, "sain.Ok.iter": {"tf": 1}, "sain.Err.is_ok": {"tf": 1.4142135623730951}, "sain.Err.is_ok_and": {"tf": 1.4142135623730951}, "sain.Err.is_err": {"tf": 1.4142135623730951}, "sain.Err.is_err_and": {"tf": 1.7320508075688772}, "sain.Vec": {"tf": 1.4142135623730951}, "sain.Vec.capacity": {"tf": 1}, "sain.Vec.split_first": {"tf": 1}, "sain.Vec.first": {"tf": 1}, "sain.Vec.push_within_capacity": {"tf": 1}, "sain.Vec.get": {"tf": 1}, "sain.Vec.pop": {"tf": 1}, "sain.Error": {"tf": 1.4142135623730951}, "sain.Box.on_expire": {"tf": 1.7320508075688772}, "sain.Box.get": {"tf": 1.7320508075688772}, "sain.MaybeUninit": {"tf": 1.4142135623730951}, "sain.MaybeUninit.assume_init": {"tf": 1}, "sain.boxed.Box.on_expire": {"tf": 1.7320508075688772}, "sain.boxed.Box.get": {"tf": 1.7320508075688772}, "sain.cfg.cfg_attr": {"tf": 2.23606797749979}, "sain.cfg.cfg": {"tf": 2}, "sain.collections.Vec": {"tf": 1.4142135623730951}, "sain.collections.Vec.capacity": {"tf": 1}, "sain.collections.Vec.split_first": {"tf": 1}, "sain.collections.Vec.first": {"tf": 1}, "sain.collections.Vec.push_within_capacity": {"tf": 1}, "sain.collections.Vec.get": {"tf": 1}, "sain.collections.Vec.pop": {"tf": 1}, "sain.collections.Bytes.leak": {"tf": 1.7320508075688772}, "sain.collections.Bytes.pop": {"tf": 1}, "sain.collections.buf.Bytes.leak": {"tf": 1.7320508075688772}, "sain.collections.buf.Bytes.pop": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.capacity": {"tf": 1}, "sain.collections.vec.Vec.split_first": {"tf": 1}, "sain.collections.vec.Vec.first": {"tf": 1}, "sain.collections.vec.Vec.push_within_capacity": {"tf": 1}, "sain.collections.vec.Vec.get": {"tf": 1}, "sain.collections.vec.Vec.pop": {"tf": 1}, "sain.convert": {"tf": 1.7320508075688772}, "sain.error.Error": {"tf": 1.4142135623730951}, "sain.futures.spawn": {"tf": 1.4142135623730951}, "sain.iter.Iterator": {"tf": 2.23606797749979}, "sain.iter.Iterator.default": {"tf": 1}, "sain.iter.Iterator.collect": {"tf": 1}, "sain.iter.Iterator.sink": {"tf": 1}, "sain.iter.Iterator.next": {"tf": 1.4142135623730951}, "sain.iter.Iterator.async_for_each": {"tf": 1}, "sain.iter.Empty.next": {"tf": 1.4142135623730951}, "sain.iter.empty": {"tf": 1}, "sain.iter.once": {"tf": 1}, "sain.iter.repeat": {"tf": 1}, "sain.macros.deprecated": {"tf": 1.4142135623730951}, "sain.macros.unimplemented": {"tf": 1.4142135623730951}, "sain.macros.todo": {"tf": 1}, "sain.macros.doc": {"tf": 1}, "sain.option": {"tf": 1}, "sain.option.Some.into_inner": {"tf": 2}, "sain.option.Some.unwrap": {"tf": 1.7320508075688772}, "sain.option.Some.unwrap_or": {"tf": 1.4142135623730951}, "sain.option.Some.unwrap_or_else": {"tf": 1.4142135623730951}, "sain.option.Some.unwrap_unchecked": {"tf": 1.7320508075688772}, "sain.option.Some.expect": {"tf": 2.23606797749979}, "sain.option.Some.map": {"tf": 2}, "sain.option.Some.map_or": {"tf": 1.4142135623730951}, "sain.option.Some.map_or_else": {"tf": 1.4142135623730951}, "sain.option.Some.filter": {"tf": 2}, "sain.option.Some.take": {"tf": 1.4142135623730951}, "sain.option.Some.take_if": {"tf": 1.7320508075688772}, "sain.option.Some.replace": {"tf": 1}, "sain.option.Some.and_ok": {"tf": 2}, "sain.option.Some.and_then": {"tf": 2.23606797749979}, "sain.option.Some.iter": {"tf": 1.4142135623730951}, "sain.option.Some.as_ref": {"tf": 2.23606797749979}, "sain.option.Some.as_mut": {"tf": 2.23606797749979}, "sain.option.Some.is_some": {"tf": 1.4142135623730951}, "sain.option.Some.is_some_and": {"tf": 1.4142135623730951}, "sain.option.Some.is_none": {"tf": 2}, "sain.option.Option": {"tf": 1}, "sain.option.NOTHING": {"tf": 1.4142135623730951}, "sain.result.Ok.is_ok": {"tf": 1}, "sain.result.Ok.is_ok_and": {"tf": 1}, "sain.result.Ok.is_err": {"tf": 1}, "sain.result.Ok.is_err_and": {"tf": 1}, "sain.result.Ok.expect": {"tf": 1.7320508075688772}, "sain.result.Ok.unwrap": {"tf": 1.7320508075688772}, "sain.result.Ok.unwrap_or": {"tf": 1.7320508075688772}, "sain.result.Ok.unwrap_err": {"tf": 2}, "sain.result.Ok.ok": {"tf": 1.4142135623730951}, "sain.result.Ok.err": {"tf": 1.4142135623730951}, "sain.result.Ok.inspect": {"tf": 1.7320508075688772}, "sain.result.Ok.inspect_err": {"tf": 1.7320508075688772}, "sain.result.Ok.iter": {"tf": 1}, "sain.result.Err.is_ok": {"tf": 1.4142135623730951}, "sain.result.Err.is_ok_and": {"tf": 1.4142135623730951}, "sain.result.Err.is_err": {"tf": 1.4142135623730951}, "sain.result.Err.is_err_and": {"tf": 1.7320508075688772}, "sain.sync.Lazy": {"tf": 2}, "sain.sync.Lazy.get_unchecked": {"tf": 1}, "sain.sync.Once": {"tf": 1.4142135623730951}, "sain.sync.Once.get": {"tf": 1}, "sain.sync.Once.get_unchecked": {"tf": 1}, "sain.sync.Once.set": {"tf": 1}, "sain.sync.Once.clear": {"tf": 1}, "sain.sync.Once.get_or": {"tf": 1.4142135623730951}, "sain.sync.LazyFuture": {"tf": 2}, "sain.sync.LazyFuture.get": {"tf": 1}, "sain.sync.AsyncOnce": {"tf": 1.4142135623730951}, "sain.sync.AsyncOnce.get": {"tf": 1}, "sain.sync.AsyncOnce.get_unchecked": {"tf": 1}, "sain.sync.AsyncOnce.set": {"tf": 1}, "sain.sync.AsyncOnce.clear": {"tf": 1}}, "df": 159}}, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"sain.Iterator.raw_parts": {"tf": 1}, "sain.iter.Iterator.raw_parts": {"tf": 1}}, "df": 2, "l": {"docs": {}, "df": 0, "y": {"docs": {"sain.Vec": {"tf": 1}, "sain.collections.Vec": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1}}, "df": 3}}}}}}, "w": {"docs": {"sain.MaybeUninit.write": {"tf": 1}}, "df": 1}, "p": {"docs": {}, "df": 0, "e": {"docs": {"sain.iter.empty": {"tf": 1.4142135623730951}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sain.Some": {"tf": 1}, "sain.sync.Once.get": {"tf": 1}, "sain.sync.AsyncOnce.get": {"tf": 1}}, "df": 3}}}, "w": {"docs": {"sain.Some.take": {"tf": 1.4142135623730951}, "sain.Iterator.copied": {"tf": 1}, "sain.Iterator.enumerate": {"tf": 1}, "sain.Iterator.reversed": {"tf": 1}, "sain.Iterator.union": {"tf": 1}, "sain.Vec": {"tf": 1}, "sain.Vec.with_capacity": {"tf": 1}, "sain.Vec.copy": {"tf": 1}, "sain.MaybeUninit.uninit": {"tf": 1}, "sain.collections.Vec": {"tf": 1}, "sain.collections.Vec.with_capacity": {"tf": 1}, "sain.collections.Vec.copy": {"tf": 1}, "sain.collections.Bytes.__init__": {"tf": 1}, "sain.collections.Bytes.from_str": {"tf": 1}, "sain.collections.Bytes.from_static": {"tf": 1}, "sain.collections.Bytes.from_bytes": {"tf": 1}, "sain.collections.Bytes.from_raw": {"tf": 1}, "sain.collections.Bytes.insert": {"tf": 1}, "sain.collections.buf.Bytes.__init__": {"tf": 1}, "sain.collections.buf.Bytes.from_str": {"tf": 1}, "sain.collections.buf.Bytes.from_static": {"tf": 1}, "sain.collections.buf.Bytes.from_bytes": {"tf": 1}, "sain.collections.buf.Bytes.from_raw": {"tf": 1}, "sain.collections.buf.Bytes.insert": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1}, "sain.collections.vec.Vec.with_capacity": {"tf": 1}, "sain.collections.vec.Vec.copy": {"tf": 1}, "sain.futures.loop": {"tf": 1}, "sain.iter.Iterator.copied": {"tf": 1}, "sain.iter.Iterator.enumerate": {"tf": 1}, "sain.iter.Iterator.reversed": {"tf": 1}, "sain.iter.Iterator.union": {"tf": 1}, "sain.option.Some.take": {"tf": 1.4142135623730951}}, "df": 33}, "x": {"docs": {}, "df": 0, "t": {"docs": {"sain.Some.iter": {"tf": 1.4142135623730951}, "sain.Iter": {"tf": 1}, "sain.Iterator": {"tf": 1.4142135623730951}, "sain.Iterator.default": {"tf": 1}, "sain.Iterator.sink": {"tf": 1}, "sain.Iterator.next": {"tf": 2}, "sain.Ok.iter": {"tf": 1.4142135623730951}, "sain.Vec": {"tf": 1}, "sain.collections.Vec": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1}, "sain.iter.Iter": {"tf": 1}, "sain.iter.Iterator": {"tf": 1.4142135623730951}, "sain.iter.Iterator.default": {"tf": 1}, "sain.iter.Iterator.sink": {"tf": 1}, "sain.iter.Iterator.next": {"tf": 2}, "sain.iter.Empty.next": {"tf": 2}, "sain.iter.empty": {"tf": 1}, "sain.iter.once": {"tf": 1.4142135623730951}, "sain.iter.repeat": {"tf": 2}, "sain.option.Some.iter": {"tf": 1.4142135623730951}, "sain.result.Ok.iter": {"tf": 1.4142135623730951}, "sain.sync.Lazy.set": {"tf": 1}, "sain.sync.LazyFuture.set": {"tf": 1}}, "df": 23}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.Iterator.cloned": {"tf": 1}, "sain.Iterator.copied": {"tf": 1}, "sain.convert": {"tf": 1}, "sain.iter.Iterator.cloned": {"tf": 1}, "sain.iter.Iterator.copied": {"tf": 1}}, "df": 5, "s": {"docs": {"sain.Iterator": {"tf": 1}, "sain.Iterator.raw_parts": {"tf": 1}, "sain.collections.Bytes.try_to_str": {"tf": 1}, "sain.collections.buf.Bytes.try_to_str": {"tf": 1}, "sain.iter.Iterator": {"tf": 1}, "sain.iter.Iterator.raw_parts": {"tf": 1}, "sain.sync.Lazy": {"tf": 1}, "sain.sync.LazyFuture": {"tf": 1}}, "df": 8}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.Iterator.cloned": {"tf": 1}, "sain.iter.Iterator.cloned": {"tf": 1}}, "df": 2}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"sain.Error": {"tf": 1.4142135623730951}, "sain.error.Error": {"tf": 1.4142135623730951}}, "df": 2}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"sain.sync.Once.set": {"tf": 1}, "sain.sync.AsyncOnce.set": {"tf": 1}}, "df": 2}}}}}}}}}, "t": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.collections.Bytes": {"tf": 1}, "sain.collections.buf.Bytes": {"tf": 1}}, "df": 2}}}}}}}}, "g": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"sain.collections.Bytes.insert": {"tf": 1}, "sain.collections.buf.Bytes.insert": {"tf": 1}}, "df": 2}}}}}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sain.Iterator.take": {"tf": 1.4142135623730951}, "sain.Iterator.skip": {"tf": 1}, "sain.Vec.len": {"tf": 1}, "sain.Vec.count": {"tf": 1}, "sain.TryInto": {"tf": 1}, "sain.collections.Vec.len": {"tf": 1}, "sain.collections.Vec.count": {"tf": 1}, "sain.collections.Bytes.len": {"tf": 1}, "sain.collections.Bytes.count": {"tf": 1}, "sain.collections.buf.Bytes.len": {"tf": 1}, "sain.collections.buf.Bytes.count": {"tf": 1}, "sain.collections.vec.Vec.len": {"tf": 1}, "sain.collections.vec.Vec.count": {"tf": 1}, "sain.convert.TryInto": {"tf": 1}, "sain.iter.Iterator.take": {"tf": 1.4142135623730951}, "sain.iter.Iterator.skip": {"tf": 1}, "sain.iter.Take": {"tf": 1}, "sain.iter.Skip": {"tf": 1}, "sain.iter.repeat": {"tf": 1}}, "df": 19}}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"sain.deprecated": {"tf": 1}, "sain.Vec": {"tf": 1.4142135623730951}, "sain.collections.Vec": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec": {"tf": 1.4142135623730951}, "sain.macros.deprecated": {"tf": 1}, "sain.result": {"tf": 2.23606797749979}}, "df": 6, "s": {"docs": {"sain.Vec": {"tf": 2.6457513110645907}, "sain.collections.Vec": {"tf": 2.6457513110645907}, "sain.collections.vec": {"tf": 2.23606797749979}, "sain.collections.vec.Vec": {"tf": 2.6457513110645907}}, "df": 4}}}, "n": {"docs": {"sain.TryFrom": {"tf": 1}, "sain.convert.TryFrom": {"tf": 1}}, "df": 2}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {"sain.cfg": {"tf": 3.4641016151377544}, "sain.cfg_attr": {"tf": 3}, "sain.Some": {"tf": 2.449489742783178}, "sain.Some.expect": {"tf": 3.1622776601683795}, "sain.Some.take": {"tf": 2}, "sain.Some.take_if": {"tf": 2}, "sain.Some.replace": {"tf": 2}, "sain.Some.and_ok": {"tf": 2.449489742783178}, "sain.Some.iter": {"tf": 2}, "sain.Iterator": {"tf": 2}, "sain.Iterator.raw_parts": {"tf": 2.8284271247461903}, "sain.Iterator.next": {"tf": 2.8284271247461903}, "sain.Iterator.cloned": {"tf": 1.4142135623730951}, "sain.Iterator.map": {"tf": 2.449489742783178}, "sain.Iterator.all": {"tf": 1.4142135623730951}, "sain.Iterator.any": {"tf": 1.4142135623730951}, "sain.Iterator.async_for_each": {"tf": 2.449489742783178}, "sain.deprecated": {"tf": 2.8284271247461903}, "sain.unimplemented": {"tf": 1.4142135623730951}, "sain.doc": {"tf": 2}, "sain.Ok.is_ok": {"tf": 1.4142135623730951}, "sain.Ok.is_ok_and": {"tf": 2}, "sain.Ok.is_err": {"tf": 1.4142135623730951}, "sain.Ok.is_err_and": {"tf": 2}, "sain.Ok.expect": {"tf": 2.8284271247461903}, "sain.Ok.unwrap": {"tf": 1.4142135623730951}, "sain.Ok.unwrap_or": {"tf": 2.449489742783178}, "sain.Ok.unwrap_or_else": {"tf": 1.4142135623730951}, "sain.Ok.unwrap_err": {"tf": 1.4142135623730951}, "sain.Ok.ok": {"tf": 1.4142135623730951}, "sain.Ok.err": {"tf": 1.4142135623730951}, "sain.Ok.inspect": {"tf": 2.8284271247461903}, "sain.Ok.inspect_err": {"tf": 2.449489742783178}, "sain.Ok.map": {"tf": 1.4142135623730951}, "sain.Ok.map_or": {"tf": 2}, "sain.Ok.map_or_else": {"tf": 2}, "sain.Ok.map_err": {"tf": 2}, "sain.Ok.iter": {"tf": 2}, "sain.Err.is_ok_and": {"tf": 1.4142135623730951}, "sain.Vec": {"tf": 4}, "sain.Vec.push_within_capacity": {"tf": 2}, "sain.Vec.reserve": {"tf": 2}, "sain.Error": {"tf": 3.605551275463989}, "sain.Box": {"tf": 2.449489742783178}, "sain.Box.on_expire": {"tf": 2.449489742783178}, "sain.Box.remaining": {"tf": 2}, "sain.Box.get": {"tf": 1.4142135623730951}, "sain.MaybeUninit.write": {"tf": 1.4142135623730951}, "sain.TryFrom": {"tf": 1.4142135623730951}, "sain.TryInto": {"tf": 1.4142135623730951}, "sain.boxed.Box": {"tf": 2.449489742783178}, "sain.boxed.Box.on_expire": {"tf": 2.449489742783178}, "sain.boxed.Box.remaining": {"tf": 2}, "sain.boxed.Box.get": {"tf": 1.4142135623730951}, "sain.cfg.cfg_attr": {"tf": 3}, "sain.cfg.cfg": {"tf": 3.4641016151377544}, "sain.collections.Vec": {"tf": 4}, "sain.collections.Vec.push_within_capacity": {"tf": 2}, "sain.collections.Vec.reserve": {"tf": 2}, "sain.collections.Bytes": {"tf": 2}, "sain.collections.Bytes.from_str": {"tf": 1.4142135623730951}, "sain.collections.Bytes.from_static": {"tf": 1.4142135623730951}, "sain.collections.Bytes.from_bytes": {"tf": 2}, "sain.collections.Bytes.from_raw": {"tf": 2}, "sain.collections.Bytes.try_to_str": {"tf": 1.4142135623730951}, "sain.collections.Bytes.to_str": {"tf": 2.449489742783178}, "sain.collections.Bytes.leak": {"tf": 2}, "sain.collections.Bytes.as_bytes": {"tf": 1.4142135623730951}, "sain.collections.Bytes.as_ref": {"tf": 1.4142135623730951}, "sain.collections.Bytes.as_mut": {"tf": 1.4142135623730951}, "sain.collections.Bytes.put_raw": {"tf": 2}, "sain.collections.Bytes.put_bytes": {"tf": 2}, "sain.collections.Bytes.put_str": {"tf": 2}, "sain.collections.buf.Bytes": {"tf": 2}, "sain.collections.buf.Bytes.from_str": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.from_static": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.from_bytes": {"tf": 2}, "sain.collections.buf.Bytes.from_raw": {"tf": 2}, "sain.collections.buf.Bytes.try_to_str": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.to_str": {"tf": 2.449489742783178}, "sain.collections.buf.Bytes.leak": {"tf": 2}, "sain.collections.buf.Bytes.as_bytes": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.as_ref": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.as_mut": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.put_raw": {"tf": 2}, "sain.collections.buf.Bytes.put_bytes": {"tf": 2}, "sain.collections.buf.Bytes.put_str": {"tf": 2}, "sain.collections.vec.Vec": {"tf": 4}, "sain.collections.vec.Vec.push_within_capacity": {"tf": 2}, "sain.collections.vec.Vec.reserve": {"tf": 2}, "sain.convert": {"tf": 3.1622776601683795}, "sain.convert.TryFrom": {"tf": 1.4142135623730951}, "sain.convert.TryInto": {"tf": 1.4142135623730951}, "sain.error.Error": {"tf": 3.605551275463989}, "sain.futures.spawn": {"tf": 2}, "sain.iter.Iterator": {"tf": 2}, "sain.iter.Iterator.raw_parts": {"tf": 2.8284271247461903}, "sain.iter.Iterator.next": {"tf": 2.8284271247461903}, "sain.iter.Iterator.cloned": {"tf": 1.4142135623730951}, "sain.iter.Iterator.map": {"tf": 2.449489742783178}, "sain.iter.Iterator.all": {"tf": 1.4142135623730951}, "sain.iter.Iterator.any": {"tf": 1.4142135623730951}, "sain.iter.Iterator.async_for_each": {"tf": 2.449489742783178}, "sain.iter.Empty.next": {"tf": 2.8284271247461903}, "sain.iter.Empty.any": {"tf": 1.4142135623730951}, "sain.iter.Empty.all": {"tf": 1.4142135623730951}, "sain.macros.deprecated": {"tf": 2.8284271247461903}, "sain.macros.unimplemented": {"tf": 1.4142135623730951}, "sain.macros.doc": {"tf": 2}, "sain.option.Some.expect": {"tf": 3.1622776601683795}, "sain.option.Some.take": {"tf": 2}, "sain.option.Some.take_if": {"tf": 2}, "sain.option.Some.replace": {"tf": 2}, "sain.option.Some.and_ok": {"tf": 2.449489742783178}, "sain.option.Some.iter": {"tf": 2}, "sain.result": {"tf": 3.1622776601683795}, "sain.result.Ok.is_ok": {"tf": 1.4142135623730951}, "sain.result.Ok.is_ok_and": {"tf": 2}, "sain.result.Ok.is_err": {"tf": 1.4142135623730951}, "sain.result.Ok.is_err_and": {"tf": 2}, "sain.result.Ok.expect": {"tf": 2.8284271247461903}, "sain.result.Ok.unwrap": {"tf": 1.4142135623730951}, "sain.result.Ok.unwrap_or": {"tf": 2.449489742783178}, "sain.result.Ok.unwrap_or_else": {"tf": 1.4142135623730951}, "sain.result.Ok.unwrap_err": {"tf": 1.4142135623730951}, "sain.result.Ok.ok": {"tf": 1.4142135623730951}, "sain.result.Ok.err": {"tf": 1.4142135623730951}, "sain.result.Ok.inspect": {"tf": 2.8284271247461903}, "sain.result.Ok.inspect_err": {"tf": 2.449489742783178}, "sain.result.Ok.map": {"tf": 1.4142135623730951}, "sain.result.Ok.map_or": {"tf": 2}, "sain.result.Ok.map_or_else": {"tf": 2}, "sain.result.Ok.map_err": {"tf": 2}, "sain.result.Ok.iter": {"tf": 2}, "sain.result.Err.is_ok_and": {"tf": 1.4142135623730951}, "sain.sync.Lazy.set": {"tf": 1.4142135623730951}, "sain.sync.LazyFuture.set": {"tf": 1.4142135623730951}}, "df": 137, "e": {"docs": {}, "df": 0, "s": {"docs": {"sain.result": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.collections": {"tf": 1}}, "df": 1}}}}}}}}, "z": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {"sain.cfg_attr": {"tf": 2.449489742783178}, "sain.cfg.cfg_attr": {"tf": 2.449489742783178}}, "df": 2}}, "i": {"docs": {}, "df": 0, "p": {"docs": {"sain.Iterator.zip": {"tf": 1.4142135623730951}, "sain.iter.Iterator.zip": {"tf": 1.4142135623730951}}, "df": 2, "s": {"docs": {"sain.Iterator.zip": {"tf": 1}, "sain.iter.Iterator.zip": {"tf": 1}}, "df": 2}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.Iterator.zip": {"tf": 1}, "sain.iter.Iterator.zip": {"tf": 1}}, "df": 2}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {"sain.Vec": {"tf": 1.4142135623730951}, "sain.Vec.index": {"tf": 1}, "sain.collections.Vec": {"tf": 1.4142135623730951}, "sain.collections.Vec.index": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec.index": {"tf": 1}}, "df": 6}}}}, "u": {"8": {"docs": {"sain.collections.Bytes.put": {"tf": 1}, "sain.collections.Bytes.put_raw": {"tf": 1}, "sain.collections.Bytes.put_bytes": {"tf": 1}, "sain.collections.buf.Bytes.put": {"tf": 1}, "sain.collections.buf.Bytes.put_raw": {"tf": 1}, "sain.collections.buf.Bytes.put_bytes": {"tf": 1}}, "df": 6}, "docs": {"sain.Iterator.cloned": {"tf": 1.4142135623730951}, "sain.Iterator.copied": {"tf": 1.4142135623730951}, "sain.Ok.map_err": {"tf": 1}, "sain.iter.Iterator.cloned": {"tf": 1.4142135623730951}, "sain.iter.Iterator.copied": {"tf": 1.4142135623730951}, "sain.result.Ok.map_err": {"tf": 1}}, "df": 6, "n": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "n": {"docs": {"sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}}, "df": 2}}}}}, "w": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {"sain.Some": {"tf": 2.449489742783178}, "sain.Some.unwrap": {"tf": 1.7320508075688772}, "sain.Some.unwrap_or": {"tf": 1.7320508075688772}, "sain.Some.unwrap_or_else": {"tf": 1.7320508075688772}, "sain.Some.unwrap_unchecked": {"tf": 1.4142135623730951}, "sain.Some.as_ref": {"tf": 1}, "sain.Some.as_mut": {"tf": 1}, "sain.Iterator.async_for_each": {"tf": 1}, "sain.Ok.unwrap": {"tf": 1.4142135623730951}, "sain.Ok.unwrap_or": {"tf": 1.4142135623730951}, "sain.Ok.unwrap_or_else": {"tf": 1.4142135623730951}, "sain.Ok.unwrap_err": {"tf": 1.4142135623730951}, "sain.Vec.capacity": {"tf": 1}, "sain.Box": {"tf": 1}, "sain.Box.remaining": {"tf": 1}, "sain.boxed.Box": {"tf": 1}, "sain.boxed.Box.remaining": {"tf": 1}, "sain.collections.Vec.capacity": {"tf": 1}, "sain.collections.Bytes.try_to_str": {"tf": 1}, "sain.collections.Bytes.leak": {"tf": 1}, "sain.collections.buf.Bytes.try_to_str": {"tf": 1}, "sain.collections.buf.Bytes.leak": {"tf": 1}, "sain.collections.vec.Vec.capacity": {"tf": 1}, "sain.error": {"tf": 1.7320508075688772}, "sain.iter.Iterator.async_for_each": {"tf": 1}, "sain.option.Some.unwrap": {"tf": 1.7320508075688772}, "sain.option.Some.unwrap_or": {"tf": 1.7320508075688772}, "sain.option.Some.unwrap_or_else": {"tf": 1.7320508075688772}, "sain.option.Some.unwrap_unchecked": {"tf": 1.4142135623730951}, "sain.option.Some.as_ref": {"tf": 1}, "sain.option.Some.as_mut": {"tf": 1}, "sain.result": {"tf": 1}, "sain.result.Ok.unwrap": {"tf": 1.4142135623730951}, "sain.result.Ok.unwrap_or": {"tf": 1.4142135623730951}, "sain.result.Ok.unwrap_or_else": {"tf": 1.4142135623730951}, "sain.result.Ok.unwrap_err": {"tf": 1.4142135623730951}}, "df": 36}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sain.Some": {"tf": 1}}, "df": 1}}}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sain.collections.Bytes.to_str": {"tf": 1}, "sain.collections.buf.Bytes.to_str": {"tf": 1}}, "df": 2}}}}}}}}}}}, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.Some.unwrap_unchecked": {"tf": 1.4142135623730951}, "sain.option.Some.unwrap_unchecked": {"tf": 1.4142135623730951}, "sain.sync.Lazy.get_unchecked": {"tf": 1}, "sain.sync.Once.get_unchecked": {"tf": 1.4142135623730951}, "sain.sync.AsyncOnce.get_unchecked": {"tf": 1.4142135623730951}}, "df": 5}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.Vec": {"tf": 1}, "sain.Vec.split_off": {"tf": 1}, "sain.collections.Vec": {"tf": 1}, "sain.collections.Vec.split_off": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1}, "sain.collections.vec.Vec.split_off": {"tf": 1}}, "df": 6}}}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.Some.unwrap_unchecked": {"tf": 1.4142135623730951}, "sain.MaybeUninit.assume_init": {"tf": 1.4142135623730951}, "sain.macros.unsafe": {"tf": 1}, "sain.option.Some.unwrap_unchecked": {"tf": 1.4142135623730951}, "sain.sync.Lazy.get_unchecked": {"tf": 1.4142135623730951}, "sain.sync.Once.get_unchecked": {"tf": 1.4142135623730951}, "sain.sync.LazyFuture.get": {"tf": 1}, "sain.sync.AsyncOnce.get_unchecked": {"tf": 1.4142135623730951}}, "df": 8}}}}}, "r": {"docs": {"sain.MaybeUninit": {"tf": 1}, "sain.TryFrom": {"tf": 1}, "sain.collections": {"tf": 1}, "sain.convert.TryFrom": {"tf": 1}}, "df": 4, "l": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.Ok.expect": {"tf": 1}, "sain.Ok.unwrap": {"tf": 1}, "sain.Ok.unwrap_or": {"tf": 1}, "sain.Vec": {"tf": 1.4142135623730951}, "sain.collections.Vec": {"tf": 1.4142135623730951}, "sain.collections.Bytes.leak": {"tf": 1}, "sain.collections.buf.Bytes.leak": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1.4142135623730951}, "sain.iter.Cloned": {"tf": 1}, "sain.iter.Copied": {"tf": 1}, "sain.result.Ok.expect": {"tf": 1}, "sain.result.Ok.unwrap": {"tf": 1}, "sain.result.Ok.unwrap_or": {"tf": 1}}, "df": 13}}}}}}}}, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.Iterator.copied": {"tf": 1}, "sain.Ok.map": {"tf": 1}, "sain.Ok.map_err": {"tf": 1}, "sain.iter.Iterator.copied": {"tf": 1}, "sain.result.Ok.map": {"tf": 1}, "sain.result.Ok.map_err": {"tf": 1}}, "df": 6}}}}}}, "i": {"docs": {}, "df": 0, "l": {"docs": {"sain.Iterator.take": {"tf": 1}, "sain.Vec": {"tf": 1.4142135623730951}, "sain.Box": {"tf": 1}, "sain.MaybeUninit": {"tf": 1}, "sain.MaybeUninit.uninit_array": {"tf": 1}, "sain.boxed.Box": {"tf": 1}, "sain.collections.Vec": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec": {"tf": 1.4142135623730951}, "sain.iter.Iterator.take": {"tf": 1}, "sain.sync.Lazy": {"tf": 1}, "sain.sync.Lazy.get": {"tf": 1}, "sain.sync.Lazy.set": {"tf": 1}, "sain.sync.LazyFuture": {"tf": 1}, "sain.sync.LazyFuture.set": {"tf": 1}}, "df": 14}}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.Iterator.union": {"tf": 1.4142135623730951}, "sain.iter.Iterator.union": {"tf": 1.4142135623730951}}, "df": 2}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.unimplemented": {"tf": 1.7320508075688772}, "sain.macros.unimplemented": {"tf": 1.7320508075688772}}, "df": 2}}}}}}}}}}, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"sain.MaybeUninit": {"tf": 1.7320508075688772}, "sain.MaybeUninit.uninit": {"tf": 1}, "sain.MaybeUninit.uninit_array": {"tf": 2}, "sain.MaybeUninit.assume_init": {"tf": 2.23606797749979}}, "df": 4, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.MaybeUninit": {"tf": 1.7320508075688772}, "sain.MaybeUninit.uninit": {"tf": 1}, "sain.MaybeUninit.uninit_array": {"tf": 1}, "sain.MaybeUninit.assume_init": {"tf": 1}}, "df": 4}}}}}}}}}}, "x": {"docs": {"sain.cfg": {"tf": 1}}, "df": 1}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"sain.collections.Bytes.to_str": {"tf": 1}, "sain.collections.buf.Bytes.to_str": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.todo": {"tf": 1}, "sain.macros.todo": {"tf": 1}}, "df": 2}}}}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.Vec": {"tf": 1}, "sain.collections.Vec": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1}}, "df": 3}}}}}}}}, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sain.MaybeUninit": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "e": {"docs": {"sain.MaybeUninit": {"tf": 1}, "sain.MaybeUninit.assume_init": {"tf": 1.4142135623730951}, "sain.macros.unsafe": {"tf": 1}}, "df": 3}}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.collections.Bytes.put": {"tf": 1}, "sain.collections.buf.Bytes.put": {"tf": 1}}, "df": 2}}}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {"sain.collections.Bytes.put": {"tf": 1}, "sain.collections.buf.Bytes.put": {"tf": 1}}, "df": 2}}}}}, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"sain.Vec": {"tf": 1}, "sain.collections.Vec": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1}}, "df": 3, "l": {"docs": {}, "df": 0, "y": {"docs": {"sain.Some.unwrap": {"tf": 1}, "sain.Error": {"tf": 1}, "sain.collections.Bytes": {"tf": 1}, "sain.collections.buf.Bytes": {"tf": 1}, "sain.convert": {"tf": 1}, "sain.error": {"tf": 1}, "sain.error.Error": {"tf": 1}, "sain.option.Some.unwrap": {"tf": 1}}, "df": 8}}}}}, "e": {"docs": {"sain.Some.unwrap": {"tf": 1}, "sain.Some.as_ref": {"tf": 1.4142135623730951}, "sain.Iterator": {"tf": 1.4142135623730951}, "sain.Iterator.cloned": {"tf": 1}, "sain.Iterator.copied": {"tf": 1}, "sain.deprecated": {"tf": 1.4142135623730951}, "sain.Vec": {"tf": 1.4142135623730951}, "sain.collections": {"tf": 1.7320508075688772}, "sain.collections.Vec": {"tf": 1.4142135623730951}, "sain.collections.Bytes.to_str": {"tf": 1}, "sain.collections.buf.Bytes.to_str": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1.4142135623730951}, "sain.error": {"tf": 1}, "sain.iter.Iterator": {"tf": 1.4142135623730951}, "sain.iter.Iterator.cloned": {"tf": 1}, "sain.iter.Iterator.copied": {"tf": 1}, "sain.macros.deprecated": {"tf": 1.4142135623730951}, "sain.option.Some.unwrap": {"tf": 1}, "sain.option.Some.as_ref": {"tf": 1.4142135623730951}}, "df": 19, "d": {"docs": {"sain.Iterator.raw_parts": {"tf": 1}, "sain.deprecated": {"tf": 1}, "sain.unimplemented": {"tf": 1}, "sain.Vec": {"tf": 1}, "sain.Error": {"tf": 1}, "sain.From": {"tf": 1}, "sain.collections.Vec": {"tf": 1}, "sain.collections.Bytes": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes": {"tf": 1.4142135623730951}, "sain.collections.vec.Vec": {"tf": 1}, "sain.convert.From": {"tf": 1}, "sain.error.Error": {"tf": 1}, "sain.iter.Iterator.raw_parts": {"tf": 1}, "sain.macros.deprecated": {"tf": 1}, "sain.macros.unimplemented": {"tf": 1}, "sain.sync.Lazy": {"tf": 1}, "sain.sync.LazyFuture": {"tf": 1}}, "df": 17}, "r": {"docs": {"sain.Iterator.cloned": {"tf": 3.1622776601683795}, "sain.Iterator.copied": {"tf": 3}, "sain.Iterator.async_for_each": {"tf": 1.4142135623730951}, "sain.deprecated": {"tf": 2}, "sain.unimplemented": {"tf": 1.4142135623730951}, "sain.doc": {"tf": 1}, "sain.Error": {"tf": 2.449489742783178}, "sain.error.Error": {"tf": 2.449489742783178}, "sain.iter.Iterator.cloned": {"tf": 3.1622776601683795}, "sain.iter.Iterator.copied": {"tf": 3}, "sain.iter.Iterator.async_for_each": {"tf": 1.4142135623730951}, "sain.macros.deprecated": {"tf": 2}, "sain.macros.unimplemented": {"tf": 1.4142135623730951}, "sain.macros.doc": {"tf": 1}}, "df": 14, "s": {"docs": {"sain.Iterator.cloned": {"tf": 1}, "sain.Iterator.copied": {"tf": 1}, "sain.Iterator.async_for_each": {"tf": 1.4142135623730951}, "sain.iter.Iterator.cloned": {"tf": 1}, "sain.iter.Iterator.copied": {"tf": 1}, "sain.iter.Iterator.async_for_each": {"tf": 1.4142135623730951}}, "df": 6}, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"sain.Iterator.async_for_each": {"tf": 2}, "sain.iter.Iterator.async_for_each": {"tf": 2}, "sain.result": {"tf": 2}}, "df": 3}}}, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"sain.Error": {"tf": 1.4142135623730951}, "sain.error.Error": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {"sain.deprecated": {"tf": 1}, "sain.macros.deprecated": {"tf": 1}}, "df": 2}}}}}, "f": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {"sain.TryFrom": {"tf": 1}, "sain.TryInto": {"tf": 1}, "sain.convert": {"tf": 1}, "sain.convert.TryFrom": {"tf": 1}, "sain.convert.TryInto": {"tf": 1}, "sain.macros": {"tf": 1.4142135623730951}}, "df": 6}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.Vec.sort": {"tf": 1}, "sain.collections.Vec.sort": {"tf": 1}, "sain.collections.vec.Vec.sort": {"tf": 1}}, "df": 3}}}, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sain.futures.loop": {"tf": 1}}, "df": 1}}}}}, "x": {"docs": {"sain.deprecated": {"tf": 1}, "sain.macros.deprecated": {"tf": 1}}, "df": 2}, "w": {"docs": {}, "df": 0, "u": {"docs": {"sain.Ok.unwrap_or": {"tf": 1.7320508075688772}, "sain.result.Ok.unwrap_or": {"tf": 1.7320508075688772}}, "df": 2}}, "p": {"docs": {"sain.Vec": {"tf": 1}, "sain.collections.Vec": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1}}, "df": 3, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sain.Ok.map": {"tf": 1}, "sain.Vec": {"tf": 1}, "sain.collections.Vec": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1}, "sain.result.Ok.map": {"tf": 1}}, "df": 5}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.error": {"tf": 1}}, "df": 1}}}, "r": {"docs": {}, "df": 0, "l": {"docs": {"sain.Error": {"tf": 2.23606797749979}, "sain.error.Error": {"tf": 2.23606797749979}, "sain.futures.spawn": {"tf": 1.7320508075688772}}, "df": 3}}, "i": {"docs": {}, "df": 0, "d": {"docs": {"sain.Error": {"tf": 2}, "sain.error.Error": {"tf": 2}}, "df": 2}}, "t": {"docs": {}, "df": 0, "f": {"docs": {"sain.collections.Bytes": {"tf": 1}, "sain.collections.Bytes.try_to_str": {"tf": 1}, "sain.collections.Bytes.to_str": {"tf": 1}, "sain.collections.buf.Bytes": {"tf": 1}, "sain.collections.buf.Bytes.try_to_str": {"tf": 1}, "sain.collections.buf.Bytes.to_str": {"tf": 1}}, "df": 6}}, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"4": {"docs": {"sain.convert": {"tf": 1}, "sain.sync.Once": {"tf": 1.7320508075688772}, "sain.sync.Once.get_or": {"tf": 1.4142135623730951}, "sain.sync.AsyncOnce": {"tf": 1.7320508075688772}}, "df": 4}, "docs": {"sain.convert": {"tf": 2}, "sain.sync.Once": {"tf": 3.1622776601683795}, "sain.sync.Once.get_or": {"tf": 2.8284271247461903}, "sain.sync.AsyncOnce": {"tf": 3.3166247903554}}, "df": 4}}}}, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {"sain.Default": {"tf": 1}, "sain.Some": {"tf": 1}, "sain.Iter": {"tf": 1}, "sain.Iterator.count": {"tf": 1}, "sain.Vec.swap_remove": {"tf": 1}, "sain.Box": {"tf": 1}, "sain.Box.has_expired": {"tf": 1}, "sain.boxed.Box": {"tf": 1}, "sain.boxed.Box.has_expired": {"tf": 1}, "sain.collections.Vec.swap_remove": {"tf": 1}, "sain.collections.Bytes": {"tf": 1}, "sain.collections.buf.Bytes": {"tf": 1}, "sain.collections.vec.Vec.swap_remove": {"tf": 1}, "sain.default.Default": {"tf": 1}, "sain.iter.Iter": {"tf": 1}, "sain.iter.Iterator.count": {"tf": 1}, "sain.iter.Empty.count": {"tf": 1}, "sain.option.Some": {"tf": 1}, "sain.sync.AsyncOnce.is_set": {"tf": 1}}, "df": 19, "n": {"docs": {"sain.Iter.clone": {"tf": 1}, "sain.Vec.swap_remove": {"tf": 1}, "sain.Vec.copy": {"tf": 1}, "sain.Vec.count": {"tf": 1}, "sain.collections.Vec.swap_remove": {"tf": 1}, "sain.collections.Vec.copy": {"tf": 1}, "sain.collections.Vec.count": {"tf": 1}, "sain.collections.Bytes.as_ref": {"tf": 1}, "sain.collections.Bytes.as_mut": {"tf": 1}, "sain.collections.Bytes.put": {"tf": 1}, "sain.collections.buf.Bytes.as_ref": {"tf": 1}, "sain.collections.buf.Bytes.as_mut": {"tf": 1}, "sain.collections.buf.Bytes.put": {"tf": 1}, "sain.collections.vec.Vec.swap_remove": {"tf": 1}, "sain.collections.vec.Vec.copy": {"tf": 1}, "sain.collections.vec.Vec.count": {"tf": 1}, "sain.iter.Iter.clone": {"tf": 1}}, "df": 17}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sain.Some": {"tf": 1}, "sain.result": {"tf": 1}}, "df": 2, "s": {"docs": {"sain.Error": {"tf": 1}, "sain.error.Error": {"tf": 1}}, "df": 2}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.Error": {"tf": 1.4142135623730951}, "sain.convert": {"tf": 1}, "sain.error.Error": {"tf": 1.4142135623730951}, "sain.result": {"tf": 1}}, "df": 4}}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {"sain.Vec": {"tf": 1}, "sain.collections.Vec": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1}, "sain.default": {"tf": 1}}, "df": 4}}, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.MaybeUninit": {"tf": 1}}, "df": 1}}}}}}}}, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {"sain.Some": {"tf": 1.7320508075688772}, "sain.Some.expect": {"tf": 1.4142135623730951}, "sain.Some.replace": {"tf": 1.4142135623730951}, "sain.collections.Bytes": {"tf": 1.4142135623730951}, "sain.collections.Bytes.to_str": {"tf": 1.4142135623730951}, "sain.collections.Bytes.as_bytes": {"tf": 1.4142135623730951}, "sain.collections.Bytes.as_ref": {"tf": 1}, "sain.collections.Bytes.as_mut": {"tf": 1}, "sain.collections.Bytes.put_bytes": {"tf": 1.4142135623730951}, "sain.collections.Bytes.put_str": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.to_str": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.as_bytes": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.as_ref": {"tf": 1}, "sain.collections.buf.Bytes.as_mut": {"tf": 1}, "sain.collections.buf.Bytes.put_bytes": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.put_str": {"tf": 1.4142135623730951}, "sain.option.Some.expect": {"tf": 1.4142135623730951}, "sain.option.Some.replace": {"tf": 1.4142135623730951}}, "df": 19}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {"sain.Some.unwrap_or": {"tf": 1}, "sain.Box": {"tf": 1}, "sain.boxed.Box": {"tf": 1}, "sain.option.Some.unwrap_or": {"tf": 1}}, "df": 4}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"sain.collections.Bytes.try_to_str": {"tf": 1.4142135623730951}, "sain.collections.Bytes.to_str": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.try_to_str": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.to_str": {"tf": 1.4142135623730951}}, "df": 4}}}}, "i": {"docs": {"sain.Some.take": {"tf": 1.4142135623730951}, "sain.option.Some.take": {"tf": 1.4142135623730951}}, "df": 2, "n": {"docs": {}, "df": 0, "t": {"docs": {"sain.Some.unwrap_or": {"tf": 1}, "sain.deprecated": {"tf": 2}, "sain.collections.buf.Rawish": {"tf": 1}, "sain.collections.buf.Buffer": {"tf": 1}, "sain.macros.deprecated": {"tf": 2}, "sain.option.Some.unwrap_or": {"tf": 1}, "sain.option.Option": {"tf": 1}}, "df": 7, "s": {"docs": {"sain.Iterator": {"tf": 1}, "sain.iter.Iterator": {"tf": 1}}, "df": 2}}}}, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "p": {"docs": {"sain.Error": {"tf": 1}, "sain.error": {"tf": 1}, "sain.error.Error": {"tf": 1}, "sain.futures.spawn": {"tf": 1}}, "df": 4, "s": {"docs": {}, "df": 0, ":": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "j": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.Iterator": {"tf": 1}, "sain.iter.Iterator": {"tf": 1}}, "df": 2}}}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"sain.Error": {"tf": 2.23606797749979}, "sain.error": {"tf": 1.4142135623730951}, "sain.error.Error": {"tf": 2.23606797749979}}, "df": 3}}}}}}}, "m": {"docs": {}, "df": 0, "l": {"docs": {"sain.doc": {"tf": 1}, "sain.macros.doc": {"tf": 1}}, "df": 2}}}, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"sain.Vec": {"tf": 1}, "sain.Vec.with_capacity": {"tf": 1}, "sain.collections.Vec": {"tf": 1}, "sain.collections.Vec.with_capacity": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1}, "sain.collections.vec.Vec.with_capacity": {"tf": 1}, "sain.sync.Lazy.get": {"tf": 1}, "sain.sync.LazyFuture.get": {"tf": 1}}, "df": 8, "e": {"docs": {}, "df": 0, "r": {"docs": {"sain.todo": {"tf": 1}, "sain.macros.todo": {"tf": 1}, "sain.option.NOTHING": {"tf": 1}}, "df": 3}}}}, "o": {"docs": {}, "df": 0, "d": {"docs": {"sain.MaybeUninit": {"tf": 1}, "sain.collections": {"tf": 1}}, "df": 2}}, "w": {"docs": {"sain.collections.Bytes.raw_parts": {"tf": 1}, "sain.collections.buf.Bytes.raw_parts": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sain.MaybeUninit": {"tf": 1}}, "df": 1}}}}}}}, "x": {"8": {"6": {"docs": {"sain.cfg": {"tf": 1.4142135623730951}}, "df": 1}, "docs": {}, "df": 0}, "docs": {"sain.Some.into_inner": {"tf": 1.4142135623730951}, "sain.Some.map": {"tf": 1.4142135623730951}, "sain.Some.filter": {"tf": 2}, "sain.Some.and_ok": {"tf": 1.7320508075688772}, "sain.Some.and_then": {"tf": 1.7320508075688772}, "sain.Some.is_some_and": {"tf": 2}, "sain.Iterator.take": {"tf": 2.23606797749979}, "sain.Iterator.take_while": {"tf": 2}, "sain.Iterator.drop_while": {"tf": 2}, "sain.Iterator.first": {"tf": 1.4142135623730951}, "sain.Iterator.last": {"tf": 1.4142135623730951}, "sain.Ok.inspect": {"tf": 2}, "sain.Ok.inspect_err": {"tf": 2}, "sain.Ok.map_or": {"tf": 2}, "sain.Ok.map_or_else": {"tf": 2}, "sain.Ok.map_err": {"tf": 2}, "sain.collections.Bytes.index": {"tf": 1.4142135623730951}, "sain.collections.Bytes.count": {"tf": 1}, "sain.collections.buf.Bytes.index": {"tf": 1.4142135623730951}, "sain.collections.buf.Bytes.count": {"tf": 1}, "sain.iter.Iterator.take": {"tf": 2.23606797749979}, "sain.iter.Iterator.take_while": {"tf": 2}, "sain.iter.Iterator.drop_while": {"tf": 2}, "sain.iter.Iterator.first": {"tf": 1.4142135623730951}, "sain.iter.Iterator.last": {"tf": 1.4142135623730951}, "sain.option.Some.into_inner": {"tf": 1.4142135623730951}, "sain.option.Some.map": {"tf": 1.4142135623730951}, "sain.option.Some.filter": {"tf": 2}, "sain.option.Some.and_ok": {"tf": 1.7320508075688772}, "sain.option.Some.and_then": {"tf": 1.7320508075688772}, "sain.option.Some.is_some_and": {"tf": 2}, "sain.result.Ok.inspect": {"tf": 2}, "sain.result.Ok.inspect_err": {"tf": 2}, "sain.result.Ok.map_or": {"tf": 2}, "sain.result.Ok.map_or_else": {"tf": 2}, "sain.result.Ok.map_err": {"tf": 2}}, "df": 36, "d": {"docs": {"sain.Iterator.take_while": {"tf": 1}, "sain.Iterator.drop_while": {"tf": 1.4142135623730951}, "sain.iter.Iterator.take_while": {"tf": 1}, "sain.iter.Iterator.drop_while": {"tf": 1.4142135623730951}}, "df": 4}}, "y": {"docs": {"sain.Some.and_ok": {"tf": 2}, "sain.Iterator.take": {"tf": 1}, "sain.iter.Iterator.take": {"tf": 1}, "sain.option.Some.and_ok": {"tf": 2}}, "df": 4, "o": {"docs": {}, "df": 0, "u": {"docs": {"sain.Some.take_if": {"tf": 1}, "sain.Some.as_ref": {"tf": 1}, "sain.Iterator": {"tf": 1.4142135623730951}, "sain.Iterator.cloned": {"tf": 1}, "sain.Iterator.copied": {"tf": 1}, "sain.Vec": {"tf": 1.7320508075688772}, "sain.Vec.push_within_capacity": {"tf": 1}, "sain.Error": {"tf": 1}, "sain.MaybeUninit": {"tf": 1.7320508075688772}, "sain.MaybeUninit.uninit_array": {"tf": 1}, "sain.From": {"tf": 1.4142135623730951}, "sain.TryFrom": {"tf": 1}, "sain.TryInto": {"tf": 1}, "sain.collections": {"tf": 2}, "sain.collections.Vec": {"tf": 1.7320508075688772}, "sain.collections.Vec.push_within_capacity": {"tf": 1}, "sain.collections.Bytes.to_str": {"tf": 1}, "sain.collections.Bytes.put": {"tf": 1}, "sain.collections.buf.Bytes.to_str": {"tf": 1}, "sain.collections.buf.Bytes.put": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1.7320508075688772}, "sain.collections.vec.Vec.push_within_capacity": {"tf": 1}, "sain.convert": {"tf": 1}, "sain.convert.From": {"tf": 1.4142135623730951}, "sain.convert.TryFrom": {"tf": 1}, "sain.convert.TryInto": {"tf": 1}, "sain.error.Error": {"tf": 1}, "sain.iter.Iterator": {"tf": 1.4142135623730951}, "sain.iter.Iterator.cloned": {"tf": 1}, "sain.iter.Iterator.copied": {"tf": 1}, "sain.option.Some.take_if": {"tf": 1}, "sain.option.Some.as_ref": {"tf": 1}}, "df": 32}}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"sain.Iterator.filter": {"tf": 1}, "sain.iter.Iterator.filter": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.Iterator.raw_parts": {"tf": 1}, "sain.iter.Iterator.raw_parts": {"tf": 1}}, "df": 2}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.Iterator.next": {"tf": 1}, "sain.Iterator.cloned": {"tf": 1}, "sain.Iterator.copied": {"tf": 1}, "sain.Iterator.take": {"tf": 1}, "sain.iter.Iterator.next": {"tf": 1}, "sain.iter.Iterator.cloned": {"tf": 1}, "sain.iter.Iterator.copied": {"tf": 1}, "sain.iter.Iterator.take": {"tf": 1}, "sain.iter.Empty.next": {"tf": 1}}, "df": 9}}, "s": {"docs": {"sain.Iterator.enumerate": {"tf": 1}, "sain.Iterator.take_while": {"tf": 1}, "sain.Iterator.drop_while": {"tf": 1}, "sain.Iterator.reversed": {"tf": 1}, "sain.Iterator.union": {"tf": 1}, "sain.Vec": {"tf": 1}, "sain.collections.Vec": {"tf": 1}, "sain.collections.Bytes.iter": {"tf": 1}, "sain.collections.buf.Bytes.iter": {"tf": 1}, "sain.collections.vec.Vec": {"tf": 1}, "sain.iter.Iterator.enumerate": {"tf": 1}, "sain.iter.Iterator.take_while": {"tf": 1}, "sain.iter.Iterator.drop_while": {"tf": 1}, "sain.iter.Iterator.reversed": {"tf": 1}, "sain.iter.Iterator.union": {"tf": 1}, "sain.iter.Take": {"tf": 1}, "sain.iter.Skip": {"tf": 1}, "sain.iter.Enumerate": {"tf": 1}, "sain.iter.TakeWhile": {"tf": 1}, "sain.iter.DropWhile": {"tf": 1}, "sain.iter.Empty": {"tf": 1}, "sain.iter.empty": {"tf": 1}, "sain.iter.once": {"tf": 1}, "sain.iter.repeat": {"tf": 1}}, "df": 24}}}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {"sain.unimplemented": {"tf": 1}, "sain.macros.unimplemented": {"tf": 1}}, "df": 2}}}, "j": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"sain.Some.as_ref": {"tf": 1}, "sain.Vec.push_within_capacity": {"tf": 1}, "sain.Error": {"tf": 1.4142135623730951}, "sain.MaybeUninit.uninit": {"tf": 1}, "sain.collections.Vec.push_within_capacity": {"tf": 1}, "sain.collections.vec.Vec.push_within_capacity": {"tf": 1}, "sain.error.Error": {"tf": 1.4142135623730951}, "sain.option.Some.as_ref": {"tf": 1}, "sain.sync.Once.set": {"tf": 1}, "sain.sync.AsyncOnce.set": {"tf": 1}}, "df": 10}}}, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.Iterator": {"tf": 1}, "sain.Iterator.async_for_each": {"tf": 1}, "sain.todo": {"tf": 1}, "sain.Error": {"tf": 1}, "sain.convert": {"tf": 1.7320508075688772}, "sain.error.Error": {"tf": 1}, "sain.futures.spawn": {"tf": 1}, "sain.iter.Iterator": {"tf": 1}, "sain.iter.Iterator.async_for_each": {"tf": 1}, "sain.macros.todo": {"tf": 1}}, "df": 10, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"sain.convert": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}}}}}}, "o": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "o": {"docs": {"sain.Box.remaining": {"tf": 2.23606797749979}, "sain.boxed.Box.remaining": {"tf": 2.23606797749979}}, "df": 2}}}, "y": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.cfg": {"tf": 1}}, "df": 1}}}}}}, "k": {"docs": {"sain.Iterator.async_for_each": {"tf": 1}, "sain.iter.Iterator.async_for_each": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "y": {"docs": {"sain.Iterator.sort": {"tf": 1.4142135623730951}, "sain.iter.Iterator.sort": {"tf": 1.4142135623730951}}, "df": 2, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"sain.convert": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "s": {"docs": {"sain.convert": {"tf": 1}}, "df": 1}}, "e": {"docs": {}, "df": 0, "p": {"docs": {"sain.convert": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.Vec.truncate": {"tf": 1}, "sain.collections.Vec.truncate": {"tf": 1}, "sain.collections.vec.Vec.truncate": {"tf": 1}}, "df": 3}}}}}, "p": {"docs": {}, "df": 0, "t": {"docs": {"sain.sync.Lazy.get": {"tf": 1}, "sain.sync.LazyFuture.get": {"tf": 1}}, "df": 2}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {"sain.MaybeUninit": {"tf": 1}}, "df": 1}}}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {"sain.TryFrom": {"tf": 1}, "sain.TryInto": {"tf": 1}, "sain.convert.TryFrom": {"tf": 1}, "sain.convert.TryInto": {"tf": 1}}, "df": 4, "n": {"docs": {"sain.collections.Bytes.put": {"tf": 1}, "sain.collections.buf.Bytes.put": {"tf": 1}, "sain.sync.Lazy": {"tf": 1}, "sain.sync.LazyFuture": {"tf": 1}}, "df": 4}}}}}}}}, "pipeline": ["trimmer"], "_isPrebuiltIndex": true};

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();