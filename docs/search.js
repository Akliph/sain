window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = {"version": "0.9.5", "fields": ["qualname", "fullname", "annotation", "default_value", "signature", "bases", "doc"], "ref": "fullname", "documentStore": {"docs": {"sain": {"fullname": "sain", "modulename": "sain", "kind": "module", "doc": "<p>Standard Rust core types implementations for Python.</p>\n\n<h6 id=\"equivalent-types\">Equivalent types</h6>\n\n<ul>\n<li><code>Option&lt;T&gt;</code> -> <code>Option[T]</code> | <code>Some[T]</code></li>\n<li><code>Result&lt;T, E&gt;</code> -> <code>Result[T, E]</code></li>\n<li><code>Vec&lt;T&gt;</code> -> <code>Vec[T]</code></li>\n<li><code>Default&lt;T&gt;</code> -> <code>Default[T]</code></li>\n<li><code>AsRef&lt;T&gt;</code> -> <code>AsRef[T]</code></li>\n<li><code>AsMut&lt;T&gt;</code> -> <code>AsMut[T]</code></li>\n<li><code>Iter&lt;Item&gt;</code> -> <code>Iter[Item]</code></li>\n<li><code>OnceLock&lt;T&gt;</code> -> <code>Once[T]</code></li>\n</ul>\n\n<h6 id=\"equivalent-macros\">Equivalent macros</h6>\n\n<p>As decorators.</p>\n\n<ul>\n<li><code>cfg!()</code> -> <code>sain.cfg</code></li>\n<li><code>todo!()</code> -> <code>sain.todo</code>. This is not a decorator.</li>\n<li><code>deprecated!()</code> -> <code>sain.deprecated</code></li>\n<li><code>unimplemented!()</code> -> <code>sain.unimplemented</code></li>\n<li><code>#[cfg_attr]</code> -> <code>sain.cfg_attr</code></li>\n<li><code>#[doc(...)]</code> -> <code>sain.doc(...)</code></li>\n</ul>\n"}, "sain.cfg": {"fullname": "sain.cfg", "modulename": "sain.cfg", "kind": "module", "doc": "<p>Runtime attr configuration.</p>\n\n<h3 id=\"warning\">Warning</h3>\n\n<ul>\n<li>The <code>cfg_attr</code> currently is buggy, Specifically when passing multiple modules into the\n<code>required_modules</code> parameter.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">__futures__</span> <span class=\"kn\">import</span> <span class=\"n\">annotations</span>\n<span class=\"kn\">import</span> <span class=\"nn\">typing</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">sain</span> <span class=\"kn\">import</span> <span class=\"n\">cfg_attr</span><span class=\"p\">,</span> <span class=\"n\">cfg</span><span class=\"p\">,</span> <span class=\"n\">Some</span>\n\n<span class=\"c1\"># Required for type-hints only. Not affected by runtime.</span>\n<span class=\"k\">if</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">TYPE_CHECKING</span><span class=\"p\">:</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">sain</span> <span class=\"kn\">import</span> <span class=\"n\">Option</span>\n\n<span class=\"c1\"># If a non windows machine runs this function, A RuntimeError will be raised.</span>\n<span class=\"nd\">@cfg_attr</span><span class=\"p\">(</span><span class=\"n\">target_os</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;windows&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">windows_only</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Option</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]:</span>\n    <span class=\"k\">return</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@cfg_attr</span><span class=\"p\">(</span><span class=\"n\">requires</span><span class=\"o\">=</span><span class=\"s2\">&quot;uvloop&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">run_uvloop</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">uvloop</span>\n    <span class=\"n\">uvloop</span><span class=\"o\">.</span><span class=\"n\">install</span><span class=\"p\">()</span>\n\n<span class=\"nd\">@cfg_attr</span><span class=\"p\">(</span><span class=\"n\">python_version</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n<span class=\"k\">class</span> <span class=\"nc\">Tensor</span><span class=\"p\">:</span>\n    <span class=\"k\">if</span> <span class=\"n\">cfg</span><span class=\"p\">(</span><span class=\"n\">target_os</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;unix&quot;</span><span class=\"p\">):</span>\n        <span class=\"k\">def</span> <span class=\"nf\">calculate</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"p\">:</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"p\">:</span> <span class=\"nb\">float</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">float</span><span class=\"p\">:</span>\n            <span class=\"o\">...</span>\n</code></pre>\n</div>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>Target OS must be one of the following:</p>\n\n<ul>\n<li><code>linux</code></li>\n<li><code>win32</code> | <code>windows</code></li>\n<li><code>darwin</code></li>\n<li><code>unix</code>, which is assumed to be either linux or darwin.</li>\n</ul>\n\n<p>Target architecture must be one of the following:</p>\n\n<ul>\n<li><code>x86</code></li>\n<li><code>x64</code></li>\n<li><code>arm</code></li>\n<li><code>arm64</code></li>\n</ul>\n\n<p>Target Python implementation must be one of the following:</p>\n\n<ul>\n<li><code>CPython</code></li>\n<li><code>PyPy</code></li>\n<li><code>IronPython</code></li>\n<li><code>Jython</code></li>\n</ul>\n"}, "sain.cfg_attr": {"fullname": "sain.cfg_attr", "modulename": "sain", "qualname": "cfg_attr", "kind": "function", "doc": "<p>Conditional runtime object configuration based on passed arguments.</p>\n\n<p>If the decorated object gets called and one of the attributes returns <code>False</code>,\n<code>RuntimeError</code> will be raised and the object will not run.</p>\n\n<div class=\"pdoc-alert pdoc-alert-warning\">\n\n<p>The <code>require_modules</code> parameter is bugged and scheduled for deprecation\nand will be removed in a future release.\nInstead, directly import modules at the top of the file or function.</p>\n\n</div>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">sain</span>\n\n<span class=\"nd\">@sain</span><span class=\"o\">.</span><span class=\"n\">cfg_attr</span><span class=\"p\">(</span><span class=\"n\">target_os</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;windows&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">windows_only</span><span class=\"p\">():</span>\n    <span class=\"c1\"># Do stuff with Windows&#39;s API.</span>\n    <span class=\"o\">...</span>\n\n<span class=\"c1\"># Mut be PyPy Python implementation or `RuntimeError` will be raised</span>\n<span class=\"c1\"># when creating the instance.</span>\n<span class=\"nd\">@sain</span><span class=\"o\">.</span><span class=\"n\">cfg_attr</span><span class=\"p\">(</span><span class=\"n\">impl</span><span class=\"o\">=</span><span class=\"s2\">&quot;PyPy&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">Zoo</span><span class=\"p\">:</span>\n    <span class=\"nd\">@sain</span><span class=\"o\">.</span><span class=\"n\">cfg_attr</span><span class=\"p\">(</span><span class=\"n\">target_os</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;linux&quot;</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">bark</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">windows_only</span><span class=\"p\">()</span>  <span class=\"c1\"># RuntimeError(&quot;Windows OS only!)</span>\n\n<span class=\"c1\"># An instance will not be created if raised.</span>\n<span class=\"n\">zoo</span> <span class=\"o\">=</span> <span class=\"n\">Zoo</span><span class=\"p\">()</span>\n<span class=\"c1\"># RuntimeError(&quot;class Zoo requires PyPy implementation&quot;)</span>\n<span class=\"n\">zoo</span><span class=\"o\">.</span><span class=\"n\">bark</span><span class=\"p\">()</span>\n<span class=\"c1\"># Whats zoo??</span>\n</code></pre>\n</div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>requires</strong> (<code>str | None</code>):\nA required module to run the object.</li>\n<li><strong>target_os</strong> (<code>str | None</code>):\nThe targeted operating system thats required for the object.</li>\n<li><strong>python_version</strong> (<code>tuple[int, int, int] | None</code>):\nThe targeted Python version thats required for the object.\nFormat must be <code>(3, 9, 5)</code>.</li>\n<li><strong>target_arch</strong> (<code>str | None</code>):\nThe CPU targeted architecture thats required for the object.</li>\n<li><strong>impl</strong> (<code>str | None</code>):\nThe Python implementation thats required for the object.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong><code>RuntimeError</code></strong>: This fails if any of the attributes returns <code>False</code>. <code>required_modules</code> is not included.</li>\n<li><strong><code>ModuleNotFoundError</code></strong>: If the module check fails. i.e., if <code>required_modules</code> was provided and it returns <code>False</code>.</li>\n<li><strong><code>ValueError</code></strong>: If the passed Python implementation is unknown.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">requires</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">target_os</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"s1\">&#39;linux&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;win32&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;darwin&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;unix&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;windows&#39;</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">python_version</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">target_arch</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"s1\">&#39;x86&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;x64&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;arm&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;arm64&#39;</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">impl</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"s1\">&#39;CPython&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;PyPy&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;IronPython&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Jython&#39;</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">F</span><span class=\"p\">],</span> <span class=\"o\">~</span><span class=\"n\">F</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.Default": {"fullname": "sain.Default", "modulename": "sain", "qualname": "Default", "kind": "class", "doc": "<p>An interface for an object that has a default value.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">sain</span> <span class=\"kn\">import</span> <span class=\"n\">Default</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Cache</span><span class=\"p\">(</span><span class=\"n\">Default</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]):</span>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">default</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]:</span>\n        <span class=\"k\">return</span> <span class=\"p\">{}</span>\n\n<span class=\"n\">cache</span> <span class=\"o\">=</span> <span class=\"n\">Cache</span><span class=\"o\">.</span><span class=\"n\">default</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">cache</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">cache</span><span class=\"p\">,</span> <span class=\"n\">Default</span><span class=\"p\">)</span>\n<span class=\"c1\"># {}</span>\n</code></pre>\n</div>\n", "bases": "typing.Protocol[+_T_co]"}, "sain.Default.__init__": {"fullname": "sain.Default.__init__", "modulename": "sain", "qualname": "Default.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, "sain.Default.default": {"fullname": "sain.Default.default", "modulename": "sain", "qualname": "Default.default", "kind": "function", "doc": "<p>Return the default value of the object.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"o\">+</span><span class=\"n\">_T_co</span>:</span></span>", "funcdef": "def"}, "sain.AsRef": {"fullname": "sain.AsRef", "modulename": "sain", "qualname": "AsRef", "kind": "class", "doc": "<p>Represents an immutable reference to an object.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">dataclasses</span> <span class=\"kn\">import</span> <span class=\"n\">dataclass</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sain</span> <span class=\"kn\">import</span> <span class=\"n\">ref</span>\n\n<span class=\"nd\">@dataclass</span>\n<span class=\"k\">class</span> <span class=\"nc\">User</span><span class=\"p\">:</span>\n    <span class=\"nb\">id</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n    <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n\n<span class=\"n\">same_user</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s2\">&quot;sukuna&quot;</span><span class=\"p\">)</span>\n<span class=\"c1\"># Both keys point to the same user object.</span>\n<span class=\"n\">cache</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"mi\">0</span><span class=\"p\">:</span> <span class=\"n\">ref</span><span class=\"o\">.</span><span class=\"n\">ref</span><span class=\"p\">(</span><span class=\"n\">same_user</span><span class=\"p\">),</span>\n    <span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"n\">ref</span><span class=\"o\">.</span><span class=\"n\">ref</span><span class=\"p\">(</span><span class=\"n\">same_user</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">cache</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">object</span><span class=\"o\">.</span><span class=\"n\">id</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"k\">assert</span> <span class=\"n\">cache</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">object</span><span class=\"o\">.</span><span class=\"n\">id</span> <span class=\"o\">==</span> <span class=\"mi\">1</span>  <span class=\"c1\"># True</span>\n\n<span class=\"c1\"># Copying the object no longer points to it.</span>\n<span class=\"c1\"># Unless the object is a collection.</span>\n<span class=\"n\">copy</span> <span class=\"o\">=</span> <span class=\"n\">cache</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n<span class=\"n\">copy</span><span class=\"o\">.</span><span class=\"n\">id</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n<span class=\"k\">assert</span> <span class=\"n\">copy</span><span class=\"o\">.</span><span class=\"n\">id</span> <span class=\"o\">!=</span> <span class=\"n\">cache</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">object</span><span class=\"o\">.</span><span class=\"n\">id</span>  <span class=\"c1\"># True</span>\n</code></pre>\n</div>\n", "bases": "typing.Generic[+_T_co]"}, "sain.AsRef.__init__": {"fullname": "sain.AsRef.__init__", "modulename": "sain", "qualname": "AsRef.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"nb\">object</span><span class=\"p\">:</span> <span class=\"o\">+</span><span class=\"n\">_T_co</span></span>)</span>"}, "sain.AsRef.object": {"fullname": "sain.AsRef.object", "modulename": "sain", "qualname": "AsRef.object", "kind": "variable", "doc": "<p>The object that is being referenced.</p>\n", "annotation": ": +_T_co"}, "sain.AsRef.copy": {"fullname": "sain.AsRef.copy", "modulename": "sain", "qualname": "AsRef.copy", "kind": "function", "doc": "<p>Copy the referenced object.</p>\n\n<div class=\"pdoc-alert pdoc-alert-note\">\n\n<p>If the referenced object is a collection or contains a collection,\nThen this will copy its reference.</p>\n\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"o\">+</span><span class=\"n\">_T_co</span>:</span></span>", "funcdef": "def"}, "sain.AsMut": {"fullname": "sain.AsMut", "modulename": "sain", "qualname": "AsMut", "kind": "class", "doc": "<p>Represents a mutable reference to an object.</p>\n", "bases": "typing.Generic[+_T_co]"}, "sain.AsMut.__init__": {"fullname": "sain.AsMut.__init__", "modulename": "sain", "qualname": "AsMut.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"nb\">object</span><span class=\"p\">:</span> <span class=\"o\">+</span><span class=\"n\">_T_co</span></span>)</span>"}, "sain.AsMut.object": {"fullname": "sain.AsMut.object", "modulename": "sain", "qualname": "AsMut.object", "kind": "variable", "doc": "<p>The object that is being referenced.</p>\n", "annotation": ": +_T_co"}, "sain.AsMut.copy": {"fullname": "sain.AsMut.copy", "modulename": "sain", "qualname": "AsMut.copy", "kind": "function", "doc": "<p>Copy the referenced object.</p>\n\n<div class=\"pdoc-alert pdoc-alert-note\">\n\n<p>If the referenced object is a collection or contains a collection,\nThen this will copy its reference.</p>\n\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"o\">+</span><span class=\"n\">_T_co</span>:</span></span>", "funcdef": "def"}, "sain.Some": {"fullname": "sain.Some", "modulename": "sain", "qualname": "Some", "kind": "class", "doc": "<p>The <code>Option</code> type. An object that might be <code>T</code> or <code>None</code>.</p>\n\n<p>It is a drop-in replacement for <code>typing.Optional[T]</code>, But has proper methods to handle the contained value.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"s2\">&quot;Hello&quot;</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n<span class=\"c1\"># Some(&quot;Hello&quot;)</span>\n\n<span class=\"c1\"># This will unwrap the contained value as long as</span>\n<span class=\"c1\"># it is not `None` otherwise this will raise an error.</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">unwrap</span><span class=\"p\">())</span>\n<span class=\"c1\"># &quot;Hello&quot;</span>\n\n<span class=\"n\">none_value</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"k\">while</span> <span class=\"n\">none_value</span><span class=\"o\">.</span><span class=\"n\">unwrap</span><span class=\"p\">():</span>\n    <span class=\"c1\"># Never unreachable!</span>\n\n<span class=\"c1\"># Solving it with `unwrap_or` method to unwrap the value or return a default value.</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">none_value</span><span class=\"o\">.</span><span class=\"n\">unwrap_or</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">))</span>\n<span class=\"c1\"># 10</span>\n</code></pre>\n</div>\n", "bases": "typing.Generic[~ValueT], sain.default.Default[NoneType]"}, "sain.Some.__init__": {"fullname": "sain.Some.__init__", "modulename": "sain", "qualname": "Some.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">ValueT</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"o\">/</span></span>)</span>"}, "sain.Some.default": {"fullname": "sain.Some.default", "modulename": "sain", "qualname": "Some.default", "kind": "function", "doc": "<p>Default value for <code>Some</code>. Returns <code>None</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "sain.Some.read": {"fullname": "sain.Some.read", "modulename": "sain", "qualname": "Some.read", "kind": "variable", "doc": "<p>Read the contained value.</p>\n", "annotation": ": Optional[~ValueT]"}, "sain.Some.unwrap": {"fullname": "sain.Some.unwrap", "modulename": "sain", "qualname": "Some.unwrap", "kind": "function", "doc": "<p>Unwrap the inner value either returning if its not <code>None</code> or raising a <code>RuntimeError</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">unwrap</span><span class=\"p\">())</span>\n<span class=\"c1\"># 5</span>\n\n<span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">unwrap</span><span class=\"p\">())</span>\n<span class=\"c1\"># RuntimeError</span>\n</code></pre>\n</div>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong><code>RuntimeError</code></strong>: If the inner value is <code>None</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">ValueT</span>:</span></span>", "funcdef": "def"}, "sain.Some.unwrap_or": {"fullname": "sain.Some.unwrap_or", "modulename": "sain", "qualname": "Some.unwrap_or", "kind": "function", "doc": "<p>Unwrap the inner value either returning if its not <code>None</code> or returning <code>default</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">unwrap_or</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">))</span>\n<span class=\"c1\"># 5</span>\n\n<span class=\"c1\"># Type hint is required here.</span>\n<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Option</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">unwrap_or</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">))</span>\n<span class=\"c1\"># 10</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">default</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">ValueT</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">ValueT</span>:</span></span>", "funcdef": "def"}, "sain.Some.unwrap_or_else": {"fullname": "sain.Some.unwrap_or_else", "modulename": "sain", "qualname": "Some.unwrap_or_else", "kind": "function", "doc": "<p>Unwrap the inner value either returning if its not <code>None</code> or calling <code>f</code> to get a default value.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">unwrap_or_else</span><span class=\"p\">(</span><span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">))</span>\n<span class=\"c1\"># 5</span>\n\n<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Option</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">unwrap_or_else</span><span class=\"p\">(</span><span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">))</span>\n<span class=\"c1\"># True</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[],</span> <span class=\"o\">~</span><span class=\"n\">ValueT</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">ValueT</span>:</span></span>", "funcdef": "def"}, "sain.Some.unwrap_unchecked": {"fullname": "sain.Some.unwrap_unchecked", "modulename": "sain", "qualname": "Some.unwrap_unchecked", "kind": "function", "doc": "<p>Unwrap the inner value immediately returning it.</p>\n\n<h2 id=\"warning\">Warning</h2>\n\n<p>Unwrapping the value knowing its <code>None</code> is considered Undefined Behavior.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">v</span><span class=\"p\">:</span> <span class=\"n\">Option</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"mf\">1.2</span><span class=\"p\">)</span>\n<span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">unwrap_unchecked</span><span class=\"p\">()</span> <span class=\"c1\"># 1.2</span>\n\n<span class=\"n\">v</span><span class=\"p\">:</span> <span class=\"n\">Option</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">unwrap_unchecked</span><span class=\"p\">())</span> <span class=\"c1\"># Undefined Behavior</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">ValueT</span>:</span></span>", "funcdef": "def"}, "sain.Some.expect": {"fullname": "sain.Some.expect", "modulename": "sain", "qualname": "Some.expect", "kind": "function", "doc": "<p>Returns the contained value if it is not <code>None</code> otherwise raises a <code>RuntimeError</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"s2\">&quot;Hello&quot;</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s2\">&quot;Value is None&quot;</span><span class=\"p\">))</span>\n<span class=\"c1\"># &quot;Hello&quot;</span>\n\n<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Option</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s2\">&quot;Value is None&quot;</span><span class=\"p\">))</span>\n<span class=\"c1\"># RuntimeError(&quot;Value is None&quot;)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">ValueT</span>:</span></span>", "funcdef": "def"}, "sain.Some.map": {"fullname": "sain.Some.map", "modulename": "sain", "qualname": "Some.map", "kind": "function", "doc": "<p>Map the inner value to a new value. Returning <code>Some[None]</code> if <code>ValueT</code> is <code>None</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"mf\">5.0</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"mf\">2.0</span><span class=\"p\">))</span>\n<span class=\"c1\"># Some(10.0)</span>\n\n<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Option</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n<span class=\"c1\"># Some(None)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">ValueT</span><span class=\"p\">],</span> <span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"o\">/</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">option</span><span class=\"o\">.</span><span class=\"n\">Some</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.Some.map_or": {"fullname": "sain.Some.map_or", "modulename": "sain", "qualname": "Some.map_or", "kind": "function", "doc": "<p>Map the inner value to a new value or return <code>default</code> if its <code>None</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"mf\">5.0</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Since the value is not `None` this will get mapped.</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">map_or</span><span class=\"p\">(</span><span class=\"mf\">10.0</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"mf\">1.0</span><span class=\"p\">))</span>\n<span class=\"c1\"># 6.0</span>\n\n<span class=\"c1\"># This is `None`, so the default value will be returned.</span>\n<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Option</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">map_or</span><span class=\"p\">(</span><span class=\"s2\">&quot;5&quot;</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)))</span>\n<span class=\"c1\"># &quot;5&quot;</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">default</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">T</span>, </span><span class=\"param\"><span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">ValueT</span><span class=\"p\">],</span> <span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">T</span>:</span></span>", "funcdef": "def"}, "sain.Some.map_or_else": {"fullname": "sain.Some.map_or_else", "modulename": "sain", "qualname": "Some.map_or_else", "kind": "function", "doc": "<p>Map the inner value to a new value, Or return default which maps to <code>default()</code> if its <code>None</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"mf\">5.0</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Since the value is not `None` this will get mapped.</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">map_or_else</span><span class=\"p\">(</span><span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"mf\">10.0</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"mf\">1.0</span><span class=\"p\">))</span>\n<span class=\"c1\"># 6.0</span>\n\n<span class=\"c1\"># This is `None`, so the default func will be returned.</span>\n<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Option</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">map_or_else</span><span class=\"p\">(</span><span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"s2\">&quot;5&quot;</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)))</span>\n<span class=\"c1\"># &quot;5&quot;</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">default</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[],</span> <span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">ValueT</span><span class=\"p\">],</span> <span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"o\">/</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">T</span>:</span></span>", "funcdef": "def"}, "sain.Some.filter": {"fullname": "sain.Some.filter", "modulename": "sain", "qualname": "Some.filter", "kind": "function", "doc": "<p>Returns <code>Some[None]</code> if the contained value is <code>None</code>,</p>\n\n<p>otherwise calls the predicate and returns <code>Some[ValueT]</code> if the predicate returns <code>True</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"c1\"># Some([1, 2, 3])</span>\n\n<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Option</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">&gt;</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"c1\"># None</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">predicate</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">ValueT</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">option</span><span class=\"o\">.</span><span class=\"n\">Some</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">ValueT</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.Some.take": {"fullname": "sain.Some.take", "modulename": "sain", "qualname": "Some.take", "kind": "function", "doc": "<p>Take the value from the <code>Some</code> object setting it to <code>None</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"s2\">&quot;Hi&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n<span class=\"c1\"># None</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "sain.Some.replace": {"fullname": "sain.Some.replace", "modulename": "sain", "qualname": "Some.replace", "kind": "function", "doc": "<p>Replace the contained value with another value.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"s2\">&quot;Hi&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">&quot;Hello&quot;</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n<span class=\"c1\"># Some(&quot;Hello&quot;)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">ValueT</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">option</span><span class=\"o\">.</span><span class=\"n\">Some</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">ValueT</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.Some.and_ok": {"fullname": "sain.Some.and_ok", "modulename": "sain", "qualname": "Some.and_ok", "kind": "function", "doc": "<p>Returns <code>Some[None]</code> if the contained value is <code>None</code>,</p>\n\n<p>Otherwise return optb as <code>Some[T | None]</code> if optb is <code>Some[T]</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">and_ok</span><span class=\"p\">(</span><span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)))</span>\n<span class=\"c1\"># Some(10)</span>\n\n<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Option</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">and_ok</span><span class=\"p\">(</span><span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)))</span>  <span class=\"c1\"># optb is `None`.</span>\n<span class=\"c1\"># Some(None)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">optb</span><span class=\"p\">:</span> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">option</span><span class=\"o\">.</span><span class=\"n\">Some</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">option</span><span class=\"o\">.</span><span class=\"n\">Some</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.Some.and_then": {"fullname": "sain.Some.and_then", "modulename": "sain", "qualname": "Some.and_then", "kind": "function", "doc": "<p>Returns <code>Some[None]</code> if the contained value is <code>None</code>,</p>\n\n<p>otherwise call <code>f</code> on <code>ValueT</code> and return <code>Some[T]</code> if it's value not <code>None</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">and_then</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">Option</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"mi\">2</span><span class=\"p\">)))</span>\n<span class=\"c1\"># Some(10)</span>\n\n<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Option</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">and_then</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">Option</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)))</span>\n<span class=\"c1\"># Some(None)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">ValueT</span><span class=\"p\">],</span> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">option</span><span class=\"o\">.</span><span class=\"n\">Some</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">option</span><span class=\"o\">.</span><span class=\"n\">Some</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.Some.iter": {"fullname": "sain.Some.iter", "modulename": "sain", "qualname": "Some.iter", "kind": "function", "doc": "<p>Returns an iterator over the contained value.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">sain</span> <span class=\"kn\">import</span> <span class=\"n\">Some</span>\n<span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"s2\">&quot;gg&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">next</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"s2\">&quot;gg&quot;</span><span class=\"p\">)</span>\n\n<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Option</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">next</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">is_none</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"o\">.</span><span class=\"n\">Iter</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">ValueT</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.Some.as_ref": {"fullname": "sain.Some.as_ref", "modulename": "sain", "qualname": "Some.as_ref", "kind": "function", "doc": "<p>Returns immutable <code>Some[AsRef[ValueT]]</code> if the contained value is not <code>None</code>,</p>\n\n<p>Otherwise returns <code>Some[None]</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">as_ref</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">unwrap</span><span class=\"p\">()</span>\n<span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">object</span> <span class=\"o\">=</span> <span class=\"mi\">0</span> <span class=\"c1\"># FrozenError!</span>\n\n<span class=\"n\">owned</span> <span class=\"o\">=</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">object</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">owned</span><span class=\"p\">)</span> <span class=\"c1\"># 5</span>\n\n<span class=\"c1\"># Create a copy of object.</span>\n<span class=\"n\">clone</span> <span class=\"o\">=</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n<span class=\"n\">clone</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>  <span class=\"c1\"># Thats fine.</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">clone</span> <span class=\"o\">==</span> <span class=\"n\">owned</span><span class=\"p\">)</span> <span class=\"c1\"># False, 0 != 5</span>\n\n<span class=\"c1\"># None object.</span>\n<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Option</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">as_ref</span><span class=\"p\">())</span>\n<span class=\"c1\"># Some(AsRef(None))</span>\n</code></pre>\n</div>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong><code>dataclasses.FrozenInstanceError</code></strong>: When attempting to modify the contained value. Use <code>sain.AsRef.copy()</code> method to create a copy.</li>\n</ul>\n\n<p>Or just use <code>.as_mut()</code> if you're dealing with mutable objects.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">option</span><span class=\"o\">.</span><span class=\"n\">Some</span><span class=\"p\">[</span><span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">ref</span><span class=\"o\">.</span><span class=\"n\">AsRef</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">ValueT</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, "sain.Some.as_mut": {"fullname": "sain.Some.as_mut", "modulename": "sain", "qualname": "Some.as_mut", "kind": "function", "doc": "<p>Returns mutable <code>Some[AsMut[ValueT]]</code> if the contained value is not <code>None</code>,</p>\n\n<p>Otherwise returns <code>Some[None]</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">as_ref_mut</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">unwrap</span><span class=\"p\">()</span>\n<span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">object</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">object</span><span class=\"p\">)</span> <span class=\"c1\"># 0</span>\n\n<span class=\"c1\"># None object.</span>\n<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Option</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">as_ref_mut</span><span class=\"p\">())</span>\n<span class=\"c1\"># Some(AsMut(None))</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">option</span><span class=\"o\">.</span><span class=\"n\">Some</span><span class=\"p\">[</span><span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">ref</span><span class=\"o\">.</span><span class=\"n\">AsMut</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">ValueT</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, "sain.Some.is_some": {"fullname": "sain.Some.is_some", "modulename": "sain", "qualname": "Some.is_some", "kind": "function", "doc": "<p>Returns <code>True</code> if the contained value is not <code>None</code>, otherwise returns <code>False</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">is_some</span><span class=\"p\">())</span>\n<span class=\"c1\"># True</span>\n\n<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Option</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">is_some</span><span class=\"p\">())</span>\n<span class=\"c1\"># False</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "sain.Some.is_some_and": {"fullname": "sain.Some.is_some_and", "modulename": "sain", "qualname": "Some.is_some_and", "kind": "function", "doc": "<p>Returns <code>True</code> if the contained value is not <code>None</code> and\nthe predicate returns <code>True</code>, otherwise returns <code>False</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">is_some_and</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">&gt;</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"c1\"># True</span>\n\n<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Option</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">is_some_and</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">&gt;</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"c1\"># False</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">predicate</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">ValueT</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "sain.Some.is_none": {"fullname": "sain.Some.is_none", "modulename": "sain", "qualname": "Some.is_none", "kind": "function", "doc": "<p>Returns <code>True</code> if the contained value is <code>None</code>, otherwise returns <code>False</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">is_none</span><span class=\"p\">())</span>\n<span class=\"c1\"># False</span>\n\n<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Option</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">is_none</span><span class=\"p\">())</span>\n<span class=\"c1\"># True</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "sain.Option": {"fullname": "sain.Option", "modulename": "sain", "qualname": "Option", "kind": "variable", "doc": "<p></p>\n", "default_value": "sain.option.Some[~T]"}, "sain.NOTHING": {"fullname": "sain.NOTHING", "modulename": "sain", "qualname": "NOTHING", "kind": "variable", "doc": "<p></p>\n", "default_value": "Some(None)"}, "sain.Iter": {"fullname": "sain.Iter", "modulename": "sain", "qualname": "Iter", "kind": "class", "doc": "<p>Builds an in-memory iterator over some Python iterable.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"c1\"># Limit the results to 2.</span>\n<span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n<span class=\"c1\"># 1</span>\n<span class=\"c1\"># 2</span>\n\n<span class=\"c1\"># Filter the results.</span>\n<span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"n\">item</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">())</span>\n<span class=\"c1\"># 2</span>\n<span class=\"c1\"># 3</span>\n<span class=\"c1\"># 3</span>\n\n<span class=\"c1\"># Indexing is supported.</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">iterator</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"c1\"># 1</span>\n</code></pre>\n</div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>items</strong> (<code>Iterable[Item]</code>):\nThe items to iterate over. This must be an iterable.</li>\n</ul>\n", "bases": "collections.abc.Iterator[~Item], collections.abc.Iterable[~Item], sain.default.Default[ForwardRef('Iter[ty_ext.Never]')]"}, "sain.Iter.__init__": {"fullname": "sain.Iter.__init__", "modulename": "sain", "qualname": "Iter.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">items</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">]</span></span>)</span>"}, "sain.Iter.default": {"fullname": "sain.Iter.default", "modulename": "sain", "qualname": "Iter.default", "kind": "function", "doc": "<p>Return the default iterator for this type. It returns an empty iterator.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">it</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"o\">.</span><span class=\"n\">default</span><span class=\"p\">()</span>\n<span class=\"k\">assert</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">next</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">is_none</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"s1\">&#39;Iter[ty_ext.Never]&#39;</span>:</span></span>", "funcdef": "def"}, "sain.Iter.collect": {"fullname": "sain.Iter.collect", "modulename": "sain", "qualname": "Iter.collect", "kind": "function", "doc": "<p>Collects all items in the iterator into an immutable sequence.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"c1\"># (0, 1, 2, 3)</span>\n<span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">(</span><span class=\"n\">cast</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"c1\"># Map each element and collect it.</span>\n<span class=\"c1\"># (&#39;0&#39;, &#39;1&#39;, &#39;2&#39;, &#39;3&#39;)</span>\n</code></pre>\n</div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cast</strong> (<code>T | None</code>):\nAn optional type to cast the items into.\nIf not provided the items will be returned as it's original type.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">cast</span><span class=\"p\">:</span> <span class=\"s1\">&#39;_B | None&#39;</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"s1\">&#39;collections.Sequence[Item] | collections.Sequence[_B]&#39;</span>:</span></span>", "funcdef": "def"}, "sain.Iter.to_vec": {"fullname": "sain.Iter.to_vec", "modulename": "sain", "qualname": "Iter.to_vec", "kind": "function", "doc": "<p>Convert this iterator into <code>Vec[T]</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">it</span> <span class=\"o\">=</span> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"o\">.</span><span class=\"n\">once</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">vc</span> <span class=\"o\">=</span> <span class=\"n\">it</span><span class=\"o\">.</span><span class=\"n\">to_vec</span><span class=\"p\">()</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">to_vec</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">Vec</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.Iter.copied": {"fullname": "sain.Iter.copied", "modulename": "sain", "qualname": "Iter.copied", "kind": "function", "doc": "<p>Creates an iterator which copies all of its elements by value.</p>\n\n<div class=\"pdoc-alert pdoc-alert-note\">\n\n<p>If you only need a copy of the item reference, Use <code>by_ref</code> instead.</p>\n\n</div>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">it</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">])</span>\n<span class=\"n\">copied</span> <span class=\"o\">=</span> <span class=\"n\">it</span><span class=\"o\">.</span><span class=\"n\">copied</span><span class=\"p\">()</span>\n<span class=\"k\">assert</span> <span class=\"n\">it</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">copied</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"o\">.</span><span class=\"n\">Iter</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.Iter.by_ref": {"fullname": "sain.Iter.by_ref", "modulename": "sain", "qualname": "Iter.by_ref", "kind": "function", "doc": "<p>Creates an iterator which shallow copies its elements by reference.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">it</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">])</span>\n<span class=\"k\">for</span> <span class=\"n\">ref</span> <span class=\"ow\">in</span> <span class=\"n\">it</span><span class=\"o\">.</span><span class=\"n\">by_ref</span><span class=\"p\">():</span>\n    <span class=\"o\">...</span>\n\n<span class=\"c1\"># Original not consumed.</span>\n<span class=\"k\">assert</span> <span class=\"n\">it</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">3</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"o\">.</span><span class=\"n\">Iter</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.Iter.next": {"fullname": "sain.Iter.next", "modulename": "sain", "qualname": "Iter.next", "kind": "function", "doc": "<p>Returns the next item in the iterator, <code>Some(None)</code> if all items yielded.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]([</span><span class=\"s2\">&quot;1&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;2&quot;</span><span class=\"p\">])</span>\n<span class=\"k\">assert</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">next</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"s2\">&quot;1&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">next</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"s2\">&quot;2&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">next</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">is_none</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"s1\">&#39;Option[Item]&#39;</span>:</span></span>", "funcdef": "def"}, "sain.Iter.map": {"fullname": "sain.Iter.map", "modulename": "sain", "qualname": "Iter.map", "kind": "function", "doc": "<p>Maps each item in the iterator to its predicated value.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"s2\">&quot;1&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;2&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;3&quot;</span><span class=\"p\">])</span>\n    <span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># &lt;Iter([1, 2, 3])&gt;</span>\n<span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">iterator</span><span class=\"p\">:</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>predicate</strong> (<code>collections.Callable[[Item], Item]</code>):\nThe function to map each item in the iterator to its predicated value.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">predicate</span><span class=\"p\">:</span> <span class=\"s1\">&#39;collections.Callable[[Item], OtherItem]&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"s1\">&#39;Iter[OtherItem]&#39;</span>:</span></span>", "funcdef": "def"}, "sain.Iter.take": {"fullname": "sain.Iter.take", "modulename": "sain", "qualname": "Iter.take", "kind": "function", "doc": "<p>Take the first number of items until the number of items are yielded or\nthe end of the iterator is reached.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"s1\">&#39;c&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;x&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;y&#39;</span><span class=\"p\">])</span>\n<span class=\"k\">for</span> <span class=\"n\">mode</span> <span class=\"ow\">in</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">):</span>\n    <span class=\"k\">assert</span> <span class=\"n\">mode</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s1\">&#39;c&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;x&#39;</span><span class=\"p\">]</span>\n<span class=\"c1\"># &lt;Iter([&#39;c&#39;, &#39;x&#39;])&gt;</span>\n</code></pre>\n</div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>n</strong> (<code>int</code>):\nThe number of items to take.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"o\">.</span><span class=\"n\">Iter</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.Iter.take_while": {"fullname": "sain.Iter.take_while", "modulename": "sain", "qualname": "Iter.take_while", "kind": "function", "doc": "<p>Yields items from the iterator while predicate returns <code>True</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"s1\">&#39;VIP&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Regular&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Guard&#39;</span><span class=\"p\">])</span>\n<span class=\"k\">for</span> <span class=\"n\">membership</span> <span class=\"ow\">in</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">take_while</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">m</span><span class=\"p\">:</span> <span class=\"n\">m</span> <span class=\"ow\">is</span> <span class=\"s1\">&#39;VIP&#39;</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">membership</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># VIP</span>\n</code></pre>\n</div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>predicate</strong> (<code>collections.Callable[[Item], bool]</code>):\nThe function to predicate each item in the iterator.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong><code>StopIteration</code></strong>: If no elements are left in the iterator.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">predicate</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"o\">.</span><span class=\"n\">Iter</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.Iter.drop_while": {"fullname": "sain.Iter.drop_while", "modulename": "sain", "qualname": "Iter.drop_while", "kind": "function", "doc": "<p>Yields items from the iterator while predicate returns <code>False</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"s1\">&#39;VIP&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Regular&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Guard&#39;</span><span class=\"p\">])</span>\n<span class=\"k\">for</span> <span class=\"n\">membership</span> <span class=\"ow\">in</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">drop_while</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">m</span><span class=\"p\">:</span> <span class=\"n\">m</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"s1\">&#39;VIP&#39;</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">membership</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Regular</span>\n<span class=\"c1\"># Guard</span>\n</code></pre>\n</div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>predicate</strong> (<code>collections.Callable[[Item], bool]</code>):\nThe function to predicate each item in the iterator.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong><code>StopIteration</code></strong>: If no elements are left in the iterator.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">predicate</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"o\">.</span><span class=\"n\">Iter</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.Iter.filter": {"fullname": "sain.Iter.filter", "modulename": "sain", "qualname": "Iter.filter", "kind": "function", "doc": "<p>Filters the iterator to only yield items that match the predicate.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">places</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"s1\">&#39;London&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Paris&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Los Angeles&#39;</span><span class=\"p\">])</span>\n<span class=\"k\">for</span> <span class=\"n\">place</span> <span class=\"ow\">in</span> <span class=\"n\">places</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">place</span><span class=\"p\">:</span> <span class=\"n\">place</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s1\">&#39;L&#39;</span><span class=\"p\">)):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">place</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># London</span>\n<span class=\"c1\"># Los Angeles</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">predicate</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"o\">.</span><span class=\"n\">Iter</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.Iter.skip": {"fullname": "sain.Iter.skip", "modulename": "sain", "qualname": "Iter.skip", "kind": "function", "doc": "<p>Skips the first number of items in the iterator.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"n\">MembershipType</span><span class=\"o\">.</span><span class=\"n\">STEAM</span><span class=\"p\">,</span> <span class=\"n\">MembershipType</span><span class=\"o\">.</span><span class=\"n\">XBOX</span><span class=\"p\">,</span> <span class=\"n\">MembershipType</span><span class=\"o\">.</span><span class=\"n\">STADIA</span><span class=\"p\">])</span>\n<span class=\"k\">for</span> <span class=\"n\">platform</span> <span class=\"ow\">in</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">skip</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">platform</span><span class=\"p\">)</span>\n<span class=\"c1\"># Skip the first item in the iterator.</span>\n<span class=\"c1\"># &lt;Iter([MembershipType.XBOX, MembershipType.STADIA])&gt;</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"o\">.</span><span class=\"n\">Iter</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.Iter.zip": {"fullname": "sain.Iter.zip", "modulename": "sain", "qualname": "Iter.zip", "kind": "function", "doc": "<p>Zips the iterator with another iterable.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"n\">other</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">])</span>\n<span class=\"k\">for</span> <span class=\"n\">item</span><span class=\"p\">,</span> <span class=\"n\">other_item</span> <span class=\"ow\">in</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">zip</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">):</span>\n    <span class=\"k\">assert</span> <span class=\"n\">item</span> <span class=\"o\">==</span> <span class=\"n\">other_item</span>\n<span class=\"o\">&lt;</span><span class=\"n\">Iter</span><span class=\"p\">([(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">)])</span><span class=\"o\">&gt;</span>\n</code></pre>\n</div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>other</strong> (<code>Iter[OtherItem]</code>):\nThe iterable to zip with.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong><code>Iter[tuple[Item, OtherItem]]</code></strong>: The zipped iterator.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong><code>StopIteration</code></strong>: If no elements are left in the iterator.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Iter[OtherItem]&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"s1\">&#39;Iter[tuple[Item, OtherItem]]&#39;</span>:</span></span>", "funcdef": "def"}, "sain.Iter.all": {"fullname": "sain.Iter.all", "modulename": "sain", "qualname": "Iter.all", "kind": "function", "doc": "<p>Return <code>True</code> if all items in the iterator match the predicate.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"k\">while</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">)):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Still all integers&quot;</span><span class=\"p\">)</span>\n    <span class=\"k\">continue</span>\n    <span class=\"c1\"># Still all integers</span>\n</code></pre>\n</div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>predicate</strong> (<code>collections.Callable[[Item], bool]</code>):\nThe function to test each item in the iterator.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong><code>StopIteration</code></strong>: If no elements are left in the iterator.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">predicate</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "sain.Iter.any": {"fullname": "sain.Iter.any", "modulename": "sain", "qualname": "Iter.any", "kind": "function", "doc": "<p><code>True</code> if any items in the iterator match the predicate.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"k\">if</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">any</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">)):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;At least one item is an int.&quot;</span><span class=\"p\">)</span>\n<span class=\"c1\"># At least one item is an int.</span>\n</code></pre>\n</div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>predicate</strong> (<code>collections.Callable[[Item], bool]</code>):\nThe function to test each item in the iterator.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong><code>StopIteration</code></strong>: If no elements are left in the iterator.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">predicate</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "sain.Iter.sort": {"fullname": "sain.Iter.sort", "modulename": "sain", "qualname": "Iter.sort", "kind": "function", "doc": "<p>Sorts the iterator.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">])</span>\n<span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">sort</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"n\">item</span> <span class=\"o\">&lt;</span> <span class=\"mi\">3</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n<span class=\"c1\"># 1</span>\n<span class=\"c1\"># 3</span>\n<span class=\"c1\"># 6</span>\n<span class=\"c1\"># 7</span>\n</code></pre>\n</div>\n\n<hr />\n\n<p>key: <code>collections.Callable[[Item], Any]</code>\n    The function to sort by.\nreverse: <code>bool</code>\n    Whether to reverse the sort.</p>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong><code>StopIteration</code></strong>: If no elements are left in the iterator.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"s1\">&#39;collections.Callable[[Item], _typeshed.SupportsRichComparison]&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">reverse</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"o\">.</span><span class=\"n\">Iter</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.Iter.first": {"fullname": "sain.Iter.first", "modulename": "sain", "qualname": "Iter.first", "kind": "function", "doc": "<p>Returns the first item in the iterator.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">])</span>\n<span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">first</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">is_some_and</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong><code>StopIteration</code></strong>: If no elements are left in the iterator.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"s1\">&#39;Option[Item]&#39;</span>:</span></span>", "funcdef": "def"}, "sain.Iter.last": {"fullname": "sain.Iter.last", "modulename": "sain", "qualname": "Iter.last", "kind": "function", "doc": "<p>Returns the last item in the iterator.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">])</span>\n<span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">last</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">is_some_and</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"mi\">7</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong><code>StopIteration</code></strong></li>\n<li><strong>If no elements are left in the iterator.</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"s1\">&#39;Option[Item]&#39;</span>:</span></span>", "funcdef": "def"}, "sain.Iter.reversed": {"fullname": "sain.Iter.reversed", "modulename": "sain", "qualname": "Iter.reversed", "kind": "function", "doc": "<p>Returns a new iterator that yields the items in the iterator in reverse order.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">])</span>\n<span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">reversed</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n<span class=\"c1\"># 7</span>\n<span class=\"c1\"># 6</span>\n<span class=\"c1\"># 1</span>\n<span class=\"c1\"># 3</span>\n</code></pre>\n</div>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong><code>StopIteration</code></strong>: If no elements are left in the iterator.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"o\">.</span><span class=\"n\">Iter</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.Iter.count": {"fullname": "sain.Iter.count", "modulename": "sain", "qualname": "Iter.count", "kind": "function", "doc": "<p>Return the count of elements in memory this iterator has.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">it</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"k\">assert</span> <span class=\"n\">it</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">3</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "sain.Iter.union": {"fullname": "sain.Iter.union", "modulename": "sain", "qualname": "Iter.union", "kind": "function", "doc": "<p>Returns a new iterator that yields all items from both iterators.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"n\">other</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">])</span>\n<span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">union</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n<span class=\"c1\"># 1</span>\n<span class=\"c1\"># 2</span>\n<span class=\"c1\"># 3</span>\n<span class=\"c1\"># 4</span>\n<span class=\"c1\"># 5</span>\n<span class=\"c1\"># 6</span>\n</code></pre>\n</div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>other</strong> (<code>Iter[Item]</code>):\nThe iterable to union with.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong><code>StopIteration</code></strong>: If no elements are left in the iterator.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"o\">.</span><span class=\"n\">Iter</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"o\">.</span><span class=\"n\">Iter</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.Iter.for_each": {"fullname": "sain.Iter.for_each", "modulename": "sain", "qualname": "Iter.for_each", "kind": "function", "doc": "<p>Calls <code>func</code> on each item in the iterator.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">for_each</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">))</span>\n<span class=\"c1\"># 1</span>\n<span class=\"c1\"># 2</span>\n<span class=\"c1\"># 3</span>\n</code></pre>\n</div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>func</strong> (<code>collections.Callable[[Item], typing.Any]</code>):\nThe function to call on each item in the iterator.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">func</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">],</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "sain.Iter.async_for_each": {"fullname": "sain.Iter.async_for_each", "modulename": "sain", "qualname": "Iter.async_for_each", "kind": "function", "doc": "<p>Calls the async function on each item in the iterator concurrently.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">fetch</span><span class=\"p\">(</span><span class=\"n\">username</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]:</span>\n    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">aiohttp</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"p\">(</span><span class=\"s1\">&#39;GET&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;...&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">r</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"k\">await</span> <span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">()</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">users</span> <span class=\"o\">=</span> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">into_iter</span><span class=\"p\">([</span><span class=\"s2\">&quot;danny&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;legalia&quot;</span><span class=\"p\">])</span>\n    <span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">users</span><span class=\"o\">.</span><span class=\"n\">async_for_each</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">username</span><span class=\"p\">:</span> <span class=\"n\">fetch</span><span class=\"p\">(</span><span class=\"n\">username</span><span class=\"p\">))</span>\n    <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">results</span><span class=\"o\">.</span><span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n        <span class=\"o\">...</span>\n</code></pre>\n</div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>func</strong> (<code>collections.Callable[[Item], collections.Coroutine[None, None, None]]</code>):\nThe async function to call on each item in the iterator.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">func</span><span class=\"p\">:</span> <span class=\"s1\">&#39;collections.Callable[[Item], collections.Coroutine[None, typing.Any, OtherItem]]&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"s1\">&#39;_result.Result[collections.Sequence[OtherItem], str]&#39;</span>:</span></span>", "funcdef": "async def"}, "sain.Iter.enumerate": {"fullname": "sain.Iter.enumerate", "modulename": "sain", "qualname": "Iter.enumerate", "kind": "function", "doc": "<p>Returns a new iterator that yields tuples of the index and item.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"k\">for</span> <span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">enumerate</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">item</span><span class=\"p\">)</span>\n<span class=\"c1\"># 0, 1</span>\n<span class=\"c1\"># 1, 2</span>\n<span class=\"c1\"># 2, 3</span>\n</code></pre>\n</div>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong><code>StopIteration</code></strong>: If no elements are left in the iterator.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"o\">.</span><span class=\"n\">Iter</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, "sain.todo": {"fullname": "sain.todo", "modulename": "sain", "qualname": "todo", "kind": "function", "doc": "<p>A place holder that indicates unfinished code.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">sain</span> <span class=\"kn\">import</span> <span class=\"n\">todo</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">from_json</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">])</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n    <span class=\"c1\"># Calling this function will raise `Error`.</span>\n    <span class=\"n\">todo</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>message</strong> (<code>str | None</code>):\nMultiple optional arguments to pass if the error was raised.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"s1\">&#39;typing.LiteralString | None&#39;</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">NoReturn</span>:</span></span>", "funcdef": "def"}, "sain.deprecated": {"fullname": "sain.deprecated", "modulename": "sain", "qualname": "deprecated", "kind": "function", "doc": "<p>A decorator that marks a function as deprecated.</p>\n\n<p>An attempt to call the object that's marked will cause a runtime warn.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">sain</span> <span class=\"kn\">import</span> <span class=\"n\">deprecated</span>\n\n<span class=\"nd\">@deprecated</span><span class=\"p\">(</span>\n    <span class=\"n\">since</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;1.0.0&quot;</span><span class=\"p\">,</span>\n    <span class=\"n\">removed_in</span> <span class=\"o\">=</span><span class=\"s2\">&quot;3.0.0&quot;</span><span class=\"p\">,</span>\n    <span class=\"n\">use_instead</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;UserImpl()&quot;</span><span class=\"p\">,</span>\n    <span class=\"n\">hint</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Hint for ux.&quot;</span>\n<span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">User</span><span class=\"p\">:</span>\n    <span class=\"o\">...</span>\n\n<span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"p\">()</span> <span class=\"c1\"># This will cause a warning at runtime.</span>\n</code></pre>\n</div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>since</strong> (<code>str</code>):\nThe version that the function was deprecated.</li>\n<li><strong>removed_in</strong> (<code>str | None</code>):\nIf provided, It will log when will the object will be removed in.</li>\n<li><strong>use_instead</strong> (<code>str | None</code>):\nIf provided, This should be the alternative object name that should be used instead.</li>\n<li><strong>hint</strong> (<code>str</code>):\nAn optional hint for the user.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">since</span><span class=\"p\">:</span> <span class=\"s1\">&#39;typing.LiteralString | None&#39;</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">removed_in</span><span class=\"p\">:</span> <span class=\"s1\">&#39;typing.LiteralString | None&#39;</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">use_instead</span><span class=\"p\">:</span> <span class=\"s1\">&#39;typing.LiteralString | None&#39;</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">hint</span><span class=\"p\">:</span> <span class=\"s1\">&#39;typing.LiteralString | None&#39;</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"s1\">&#39;collections.Callable[[collections.Callable[P, U]], collections.Callable[P, U]]&#39;</span>:</span></span>", "funcdef": "def"}, "sain.unimplemented": {"fullname": "sain.unimplemented", "modulename": "sain", "qualname": "unimplemented", "kind": "function", "doc": "<p>A decorator that marks an object as unimplemented.</p>\n\n<p>An attempt to call the object that's marked will cause a runtime warn.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">sain</span> <span class=\"kn\">import</span> <span class=\"n\">unimplemented</span>\n\n<span class=\"nd\">@unimplemented</span><span class=\"p\">(</span><span class=\"s2\">&quot;User object is not implemented yet.&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">User</span><span class=\"p\">:</span>\n    <span class=\"o\">...</span>\n</code></pre>\n</div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>message</strong> (<code>str | None</code>):\nAn optional message to be displayed when the function is called. Otherwise default message will be used.</li>\n<li><strong>available_in</strong> (<code>str | None</code>):\nIf provided, This will be shown as what release this object be implemented.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"s1\">&#39;typing.LiteralString | None&#39;</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">available_in</span><span class=\"p\">:</span> <span class=\"s1\">&#39;typing.LiteralString | None&#39;</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"s1\">&#39;collections.Callable[[collections.Callable[P, U]], collections.Callable[P, U]]&#39;</span>:</span></span>", "funcdef": "def"}, "sain.doc": {"fullname": "sain.doc", "modulename": "sain", "qualname": "doc", "kind": "function", "doc": "<p>Set <code>path</code> to be the object's documentation.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">sain</span> <span class=\"kn\">import</span> <span class=\"n\">doc</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pathlib</span> <span class=\"kn\">import</span> <span class=\"n\">Path</span>\n\n<span class=\"nd\">@doc</span><span class=\"p\">(</span><span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"s2\">&quot;../README.md&quot;</span><span class=\"p\">))</span>\n<span class=\"k\">class</span> <span class=\"nc\">User</span><span class=\"p\">:</span>\n\n    <span class=\"nd\">@doc</span><span class=\"p\">(</span><span class=\"s2\">&quot;bool.html&quot;</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">bool_docs</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"o\">...</span>\n</code></pre>\n</div>\n\n<p>path: <code>type[int] | type[str] | type[bytes] | type[PathLike[str]] | type[PathLike[bytes]]</code>\n    The path to read the content from.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Read&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"s1\">&#39;collections.Callable[[collections.Callable[P, U]], collections.Callable[P, U]]&#39;</span>:</span></span>", "funcdef": "def"}, "sain.Once": {"fullname": "sain.Once", "modulename": "sain", "qualname": "Once", "kind": "class", "doc": "<p>A synchronization primitive which can be written to only once.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">sain.once</span> <span class=\"kn\">import</span> <span class=\"n\">Once</span>\n<span class=\"kn\">from</span> <span class=\"nn\">uuid</span> <span class=\"kn\">import</span> <span class=\"n\">uuid4</span><span class=\"p\">,</span> <span class=\"n\">UUID</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Application</span><span class=\"p\">:</span>\n    <span class=\"c1\"># Not initialized yet</span>\n    <span class=\"n\">uuid</span><span class=\"p\">:</span> <span class=\"n\">Once</span><span class=\"p\">[</span><span class=\"n\">UUID</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Once</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">send</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"nb\">id</span><span class=\"p\">:</span> <span class=\"n\">UUID</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"o\">...</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">spawn</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">:</span> <span class=\"n\">Application</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n    <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">uuid</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">is_none</span><span class=\"p\">()</span> <span class=\"c1\"># True</span>\n    <span class=\"n\">uid</span> <span class=\"o\">=</span> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">uuid</span><span class=\"o\">.</span><span class=\"n\">get_or_init</span><span class=\"p\">(</span><span class=\"n\">uuid4</span><span class=\"p\">())</span>\n    <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"n\">uid</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">run_application</span><span class=\"p\">():</span>\n    <span class=\"c1\"># This will init the uuid if its not set or return it if it already is.</span>\n    <span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Application</span><span class=\"p\">()</span>\n    <span class=\"n\">thread</span> <span class=\"o\">=</span> <span class=\"n\">threading</span><span class=\"o\">.</span><span class=\"n\">Thread</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"o\">=</span><span class=\"n\">spawn</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">,))</span>\n    <span class=\"n\">thread</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n\n    <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">uuid</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">is_some</span><span class=\"p\">()</span>  <span class=\"c1\"># True</span>\n</code></pre>\n</div>\n", "bases": "typing.Generic[~T]"}, "sain.Once.__init__": {"fullname": "sain.Once.__init__", "modulename": "sain", "qualname": "Once.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">blocking</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span>)</span>"}, "sain.Once.is_set": {"fullname": "sain.Once.is_set", "modulename": "sain", "qualname": "Once.is_set", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, "sain.Once.get": {"fullname": "sain.Once.get", "modulename": "sain", "qualname": "Once.get", "kind": "function", "doc": "<p>Gets the stored value.</p>\n\n<p><code>Option(None)</code> is returned if nothing is stored. This method will never block.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">option</span><span class=\"o\">.</span><span class=\"n\">Some</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.Once.set": {"fullname": "sain.Once.set", "modulename": "sain", "qualname": "Once.set", "kind": "function", "doc": "<p>Set the const value if its not set.</p>\n\n<p>This method may block if another thread is trying to access it.</p>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong><code>RuntimeError</code></strong>: If the value is already set. This will get raised.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">v</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">T</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">T</span>:</span></span>", "funcdef": "def"}, "sain.Once.clear": {"fullname": "sain.Once.clear", "modulename": "sain", "qualname": "Once.clear", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "sain.Once.get_or_init": {"fullname": "sain.Once.get_or_init", "modulename": "sain", "qualname": "Once.get_or_init", "kind": "function", "doc": "<p>Get the value if its not <code>None</code>, Otherwise call <code>f()</code> setting the value and returning it.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">T</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">T</span>:</span></span>", "funcdef": "def"}, "sain.Ok": {"fullname": "sain.Ok", "modulename": "sain", "qualname": "Ok", "kind": "class", "doc": "<p>Contains the success value of <code>Result[T, ...]</code>.</p>\n", "bases": "typing.Generic[~T]"}, "sain.Ok.__init__": {"fullname": "sain.Ok.__init__", "modulename": "sain", "qualname": "Ok.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">_inner</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">T</span></span>)</span>"}, "sain.Ok.is_ok": {"fullname": "sain.Ok.is_ok", "modulename": "sain", "qualname": "Ok.is_ok", "kind": "function", "doc": "<p>Returns <code>True</code> if the contained value is <code>Ok</code> and <code>False</code> if it an <code>Err</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Ok</span><span class=\"p\">(</span><span class=\"s2\">&quot;value&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">is_ok</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"kc\">True</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"kc\">True</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.Ok.is_ok_and": {"fullname": "sain.Ok.is_ok_and", "modulename": "sain", "qualname": "Ok.is_ok_and", "kind": "function", "doc": "<p>Returns <code>True</code> if the contained value is <code>Ok</code> and <code>f()</code> returns True..</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Ok</span><span class=\"p\">(</span><span class=\"s2\">&quot;value&quot;</span><span class=\"p\">)</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">is_ok_and</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">inner</span><span class=\"p\">:</span> <span class=\"n\">inner</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;value&quot;</span><span class=\"p\">)</span>\n<span class=\"c1\"># True</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "sain.Ok.is_err": {"fullname": "sain.Ok.is_err", "modulename": "sain", "qualname": "Ok.is_err", "kind": "function", "doc": "<p>Returns <code>True</code> if the contained value is <code>Err</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Ok</span><span class=\"p\">(</span><span class=\"s2\">&quot;value&quot;</span><span class=\"p\">)</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">is_err</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"kc\">False</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"kc\">False</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.Ok.is_err_and": {"fullname": "sain.Ok.is_err_and", "modulename": "sain", "qualname": "Ok.is_err_and", "kind": "function", "doc": "<p>Returns <code>True</code> if the contained value is <code>Ok</code> and <code>f()</code> returns True..</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Ok</span><span class=\"p\">(</span><span class=\"s2\">&quot;value&quot;</span><span class=\"p\">)</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">is_err_and</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">inner</span><span class=\"p\">:</span> <span class=\"n\">inner</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;value&quot;</span><span class=\"p\">)</span>\n<span class=\"c1\"># False</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"kc\">False</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.Ok.expect": {"fullname": "sain.Ok.expect", "modulename": "sain", "qualname": "Ok.expect", "kind": "function", "doc": "<p>Return the underlying value if it was <code>Ok</code>, Raising <code>RuntimeError</code>\nif it was <code>Err</code> with <code>message</code> passed to it.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">ok</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Ok</span><span class=\"p\">(</span><span class=\"s2\">&quot;owo&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">ok</span><span class=\"o\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s2\">&quot;err&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># owo</span>\n\n<span class=\"n\">err</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Err</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"n\">err</span><span class=\"o\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s2\">&quot;err&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># RuntimeError(&quot;err&quot;)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">T</span>:</span></span>", "funcdef": "def"}, "sain.Ok.unwrap": {"fullname": "sain.Ok.unwrap", "modulename": "sain", "qualname": "Ok.unwrap", "kind": "function", "doc": "<p>Return the underlying value if it was <code>Ok</code>, Raising <code>RuntimeError</code> if it was <code>Err</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">ok</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Ok</span><span class=\"p\">(</span><span class=\"s2\">&quot;owo&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">ok</span><span class=\"o\">.</span><span class=\"n\">unwrap</span><span class=\"p\">()</span> <span class=\"c1\"># owo</span>\n\n<span class=\"n\">err</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Err</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"n\">err</span><span class=\"o\">.</span><span class=\"n\">unwrap</span><span class=\"p\">()</span> <span class=\"c1\"># RuntimeError</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">T</span>:</span></span>", "funcdef": "def"}, "sain.Ok.unwrap_or": {"fullname": "sain.Ok.unwrap_or", "modulename": "sain", "qualname": "Ok.unwrap_or", "kind": "function", "doc": "<p>Return the underlying value if it was <code>Ok</code>, returning <code>default</code> if it was <code>Err</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">ok</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Ok</span><span class=\"p\">(</span><span class=\"s2\">&quot;OwO&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">ok</span><span class=\"o\">.</span><span class=\"n\">unwrap_or</span><span class=\"p\">(</span><span class=\"s2\">&quot;uwu&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># OwO</span>\n\n<span class=\"n\">err</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Err</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"n\">err</span><span class=\"o\">.</span><span class=\"n\">unwrap_or</span><span class=\"p\">(</span><span class=\"s2\">&quot;uwu&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># uwu</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">default</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">T</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">T</span>:</span></span>", "funcdef": "def"}, "sain.Ok.unwrap_or_else": {"fullname": "sain.Ok.unwrap_or_else", "modulename": "sain", "qualname": "Ok.unwrap_or_else", "kind": "function", "doc": "<p>Return the contained <code>Ok</code> value or computes it from <code>f()</code> if it was <code>Err</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">ok</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Ok</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"n\">ok</span><span class=\"o\">.</span><span class=\"n\">unwrap_or_else</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">e</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"c1\"># 4</span>\n\n<span class=\"n\">err</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Err</span><span class=\"p\">(</span><span class=\"s2\">&quot;word&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">err</span><span class=\"o\">.</span><span class=\"n\">unwrap_or_else</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">e</span><span class=\"p\">:</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">))</span> <span class=\"c1\"># 4</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">E</span><span class=\"p\">],</span> <span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">T</span>:</span></span>", "funcdef": "def"}, "sain.Ok.unwrap_err": {"fullname": "sain.Ok.unwrap_err", "modulename": "sain", "qualname": "Ok.unwrap_err", "kind": "function", "doc": "<p>Return the contained <code>Err</code> value, Raising if it was <code>Ok</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">ok</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Ok</span><span class=\"p\">(</span><span class=\"s2\">&quot;buh&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">ok</span><span class=\"o\">.</span><span class=\"n\">unwrap_err</span><span class=\"p\">()</span>  <span class=\"c1\"># RuntimeError</span>\n\n<span class=\"n\">err</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Err</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"n\">err</span><span class=\"o\">.</span><span class=\"n\">unwrap_err</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"kc\">None</span>\n<span class=\"c1\"># True</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">NoReturn</span>:</span></span>", "funcdef": "def"}, "sain.Ok.ok": {"fullname": "sain.Ok.ok", "modulename": "sain", "qualname": "Ok.ok", "kind": "function", "doc": "<p>Convert <code>Ok[T]</code> to <code>Option[T]</code> if the contained value was <code>Ok</code> and <code>Option[None]</code> if it was <code>Err</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Ok</span><span class=\"p\">(</span><span class=\"s2\">&quot;buh&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">ok</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">is_some</span><span class=\"p\">()</span> <span class=\"c1\"># True</span>\n\n<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Err</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">ok</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">is_none</span><span class=\"p\">()</span> <span class=\"c1\"># True</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">option</span><span class=\"o\">.</span><span class=\"n\">Some</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.Ok.err": {"fullname": "sain.Ok.err", "modulename": "sain", "qualname": "Ok.err", "kind": "function", "doc": "<p>Convert <code>Err[T]</code> to <code>Option[T]</code> if the contained value was <code>Err</code> and <code>Option[None]</code> if it was <code>Ok</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Ok</span><span class=\"p\">(</span><span class=\"s2\">&quot;buh&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">is_none</span><span class=\"p\">()</span> <span class=\"c1\"># True</span>\n\n<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Err</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">is_some</span><span class=\"p\">()</span> <span class=\"c1\"># True</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">option</span><span class=\"o\">.</span><span class=\"n\">Some</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.Ok.inspect": {"fullname": "sain.Ok.inspect", "modulename": "sain", "qualname": "Ok.inspect", "kind": "function", "doc": "<p>Call a function to the contained value if it was <code>Ok</code> and do nothing if it was <code>Err</code></p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"k\">def</span> <span class=\"nf\">sink</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n    <span class=\"c1\"># do something with value</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Called &quot;</span> <span class=\"o\">+</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n\n<span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Ok</span><span class=\"p\">(</span><span class=\"s2\">&quot;ok&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">inspect</span><span class=\"p\">(</span><span class=\"n\">sink</span><span class=\"p\">)</span> <span class=\"c1\"># &quot;Called ok&quot;</span>\n\n<span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Err</span><span class=\"p\">(</span><span class=\"s2\">&quot;err&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">inspect</span><span class=\"p\">(</span><span class=\"n\">sink</span><span class=\"p\">)</span> <span class=\"c1\"># None</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "sain.Ok.inspect_err": {"fullname": "sain.Ok.inspect_err", "modulename": "sain", "qualname": "Ok.inspect_err", "kind": "function", "doc": "<p>Call a function to the contained value if it was <code>Err</code> and do nothing if it was <code>Ok</code></p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"k\">def</span> <span class=\"nf\">sink</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n    <span class=\"c1\"># do something with value</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Called &quot;</span> <span class=\"o\">+</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n\n<span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Ok</span><span class=\"p\">(</span><span class=\"s2\">&quot;ok&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">inspect_err</span><span class=\"p\">(</span><span class=\"n\">sink</span><span class=\"p\">)</span> <span class=\"c1\"># None</span>\n\n<span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Err</span><span class=\"p\">(</span><span class=\"s2\">&quot;err&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">inspect_err</span><span class=\"p\">(</span><span class=\"n\">sink</span><span class=\"p\">)</span> <span class=\"c1\"># Called err</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">E</span><span class=\"p\">],</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "sain.Ok.map": {"fullname": "sain.Ok.map", "modulename": "sain", "qualname": "Ok.map", "kind": "function", "doc": "<p>Map <code>Ok[T]</code> to <code>Ok[U]</code> by applying a function to <code>T</code>, Leaving <code>Err</code> untouched.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">ok</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Ok</span><span class=\"p\">(</span><span class=\"s2\">&quot;1&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">ok</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">c</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"c1\"># Ok(2)</span>\n\n<span class=\"n\">err</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Err</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">err</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"o\">.</span><span class=\"n\">upper</span><span class=\"p\">)</span> <span class=\"c1\"># Err(0)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">Ok</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.Ok.map_or": {"fullname": "sain.Ok.map_or", "modulename": "sain", "qualname": "Ok.map_or", "kind": "function", "doc": "<p>Returns the provided default value if <code>Err</code>,</p>\n\n<p>Otherwise extracts the <code>Ok</code> value and maps it to <code>f()</code></p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Ok</span><span class=\"p\">(</span><span class=\"s2\">&quot;foo&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">map_or</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">c</span><span class=\"p\">:</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">),</span> <span class=\"mi\">42</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">3</span>\n\n<span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Err</span><span class=\"p\">(</span><span class=\"s2\">&quot;bar&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">map_or</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">c</span><span class=\"p\">:</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">),</span> <span class=\"mi\">42</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">42</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">default</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">U</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">U</span>:</span></span>", "funcdef": "def"}, "sain.Ok.map_or_else": {"fullname": "sain.Ok.map_or_else", "modulename": "sain", "qualname": "Ok.map_or_else", "kind": "function", "doc": "<p>Returns the provided default value from a function if <code>Err</code>,</p>\n\n<p>Otherwise extracts the <code>Ok</code> value and maps it to <code>f()</code></p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Ok</span><span class=\"p\">(</span><span class=\"s2\">&quot;four&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">map_or_else</span><span class=\"p\">(</span>\n    <span class=\"k\">lambda</span> <span class=\"n\">c</span><span class=\"p\">:</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">),</span>\n    <span class=\"k\">lambda</span> <span class=\"n\">err</span><span class=\"p\">:</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">)</span>\n<span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">8</span>\n\n<span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Err</span><span class=\"p\">(</span><span class=\"s2\">&quot;bar&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">map_or_else</span><span class=\"p\">(</span>\n    <span class=\"k\">lambda</span> <span class=\"n\">c</span><span class=\"p\">:</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">),</span>\n    <span class=\"k\">lambda</span> <span class=\"n\">err</span><span class=\"p\">:</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">)</span>\n<span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">3</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">default</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">E</span><span class=\"p\">],</span> <span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"o\">/</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">U</span>:</span></span>", "funcdef": "def"}, "sain.Ok.map_err": {"fullname": "sain.Ok.map_err", "modulename": "sain", "qualname": "Ok.map_err", "kind": "function", "doc": "<p>Maps a <code>Result[T, E]</code> to <code>Result[T, U]</code>, leaving <code>OK[T]</code> untouched.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Ok</span><span class=\"p\">(</span><span class=\"s2\">&quot;blue&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">map_err</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">err</span><span class=\"p\">:</span> <span class=\"n\">err</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"c1\"># Ok(&quot;blue&quot;)</span>\n\n<span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Err</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">map_err</span><span class=\"p\">(</span><span class=\"nb\">float</span><span class=\"p\">)</span> <span class=\"c1\"># Err(5.0)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">E</span><span class=\"p\">],</span> <span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">) -> <span class=\"n\">typing_extensions</span><span class=\"o\">.</span><span class=\"n\">Self</span>:</span></span>", "funcdef": "def"}, "sain.Ok.iter": {"fullname": "sain.Ok.iter", "modulename": "sain", "qualname": "Ok.iter", "kind": "function", "doc": "<p>Return an iterator over the contained value.</p>\n\n<p>If it was <code>Ok[T]</code> then it will return <code>Iter[T]</code>, otherwise it will return <code>Iter[Never]</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">c</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Ok</span><span class=\"p\">(</span><span class=\"s2\">&quot;blue&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">next</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"s2\">&quot;blue&quot;</span><span class=\"p\">)</span>\n\n<span class=\"n\">c</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Err</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">next</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"o\">.</span><span class=\"n\">Iter</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.Err": {"fullname": "sain.Err", "modulename": "sain", "qualname": "Err", "kind": "class", "doc": "<p>Contains the error value of <code>Result[..., E]</code>.</p>\n", "bases": "typing.Generic[~E]"}, "sain.Err.__init__": {"fullname": "sain.Err.__init__", "modulename": "sain", "qualname": "Err.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">_inner</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">E</span></span>)</span>"}, "sain.Err.is_ok": {"fullname": "sain.Err.is_ok", "modulename": "sain", "qualname": "Err.is_ok", "kind": "function", "doc": "<p>Returns <code>True</code> if the contained value is <code>Ok</code> and <code>False</code> if it an <code>Err</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Err</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">is_ok</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"kc\">False</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"kc\">False</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.Err.is_ok_and": {"fullname": "sain.Err.is_ok_and", "modulename": "sain", "qualname": "Err.is_ok_and", "kind": "function", "doc": "<p>Returns <code>True</code> if the contained value is <code>Ok</code> and <code>f()</code> returns True.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Err</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">is_ok_and</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">inner</span><span class=\"p\">:</span> <span class=\"n\">inner</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;value&quot;</span><span class=\"p\">)</span>\n<span class=\"c1\"># False</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">E</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"kc\">False</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.Err.is_err": {"fullname": "sain.Err.is_err", "modulename": "sain", "qualname": "Err.is_err", "kind": "function", "doc": "<p>Returns <code>True</code> if the contained value is <code>Err</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Err</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">is_err</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"kc\">True</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"kc\">True</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.Err.is_err_and": {"fullname": "sain.Err.is_err_and", "modulename": "sain", "qualname": "Err.is_err_and", "kind": "function", "doc": "<p>Returns <code>True</code> if the contained value is <code>Ok</code> and <code>f()</code> returns True..</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Err</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">is_err_and</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">err</span><span class=\"p\">:</span> <span class=\"n\">err</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"c1\"># True</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">E</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "sain.Err.expect": {"fullname": "sain.Err.expect", "modulename": "sain", "qualname": "Err.expect", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">msg</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">NoReturn</span>:</span></span>", "funcdef": "def"}, "sain.Err.expect_err": {"fullname": "sain.Err.expect_err", "modulename": "sain", "qualname": "Err.expect_err", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">E</span>:</span></span>", "funcdef": "def"}, "sain.Err.unwrap": {"fullname": "sain.Err.unwrap", "modulename": "sain", "qualname": "Err.unwrap", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">NoReturn</span>:</span></span>", "funcdef": "def"}, "sain.Err.unwrap_or": {"fullname": "sain.Err.unwrap_or", "modulename": "sain", "qualname": "Err.unwrap_or", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">_Err__default</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">T</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">T</span>:</span></span>", "funcdef": "def"}, "sain.Err.unwrap_or_else": {"fullname": "sain.Err.unwrap_or_else", "modulename": "sain", "qualname": "Err.unwrap_or_else", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">E</span><span class=\"p\">],</span> <span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">T</span>:</span></span>", "funcdef": "def"}, "sain.Err.unwrap_err": {"fullname": "sain.Err.unwrap_err", "modulename": "sain", "qualname": "Err.unwrap_err", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">E</span>:</span></span>", "funcdef": "def"}, "sain.Err.inspect": {"fullname": "sain.Err.inspect", "modulename": "sain", "qualname": "Err.inspect", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "sain.Err.inspect_err": {"fullname": "sain.Err.inspect_err", "modulename": "sain", "qualname": "Err.inspect_err", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">E</span><span class=\"p\">],</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "sain.Err.ok": {"fullname": "sain.Err.ok", "modulename": "sain", "qualname": "Err.ok", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">option</span><span class=\"o\">.</span><span class=\"n\">Some</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.Err.err": {"fullname": "sain.Err.err", "modulename": "sain", "qualname": "Err.err", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">option</span><span class=\"o\">.</span><span class=\"n\">Some</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">E</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.Err.map": {"fullname": "sain.Err.map", "modulename": "sain", "qualname": "Err.map", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">E</span><span class=\"p\">],</span> <span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">typing_extensions</span><span class=\"o\">.</span><span class=\"n\">Self</span>:</span></span>", "funcdef": "def"}, "sain.Err.map_or": {"fullname": "sain.Err.map_or", "modulename": "sain", "qualname": "Err.map_or", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">E</span><span class=\"p\">],</span> <span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">default</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">U</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">U</span>:</span></span>", "funcdef": "def"}, "sain.Err.map_or_else": {"fullname": "sain.Err.map_or_else", "modulename": "sain", "qualname": "Err.map_or_else", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">default</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">E</span><span class=\"p\">],</span> <span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"o\">/</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">U</span>:</span></span>", "funcdef": "def"}, "sain.Err.map_err": {"fullname": "sain.Err.map_err", "modulename": "sain", "qualname": "Err.map_err", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">E</span><span class=\"p\">],</span> <span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">Err</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.Err.iter": {"fullname": "sain.Err.iter", "modulename": "sain", "qualname": "Err.iter", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"o\">.</span><span class=\"n\">Iter</span><span class=\"p\">[</span><span class=\"n\">typing_extensions</span><span class=\"o\">.</span><span class=\"n\">Never</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.Result": {"fullname": "sain.Result", "modulename": "sain", "qualname": "Result", "kind": "variable", "doc": "<p></p>\n", "default_value": "typing.Union[sain.result.Ok[~T], sain.result.Err[~E]]"}, "sain.vec": {"fullname": "sain.vec", "modulename": "sain.vec", "kind": "module", "doc": "<p>A contiguous growable alternative to builtin <code>list</code> with extra functionalities.</p>\n\n<p>When initializing a vec, it will not build the underlying list until the first element gets pushed.\nWhich saves a little bit of memory.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">names</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">()</span>\n\n<span class=\"n\">names</span><span class=\"o\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"s1\">&#39;foo&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">names</span><span class=\"o\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"s1\">&#39;bar&#39;</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">names</span><span class=\"p\">)</span> <span class=\"c1\"># [&#39;foo&#39;, &#39;bar&#39;]</span>\n<span class=\"k\">assert</span> <span class=\"n\">names</span><span class=\"o\">.</span><span class=\"n\">len</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">2</span>\n</code></pre>\n</div>\n\n<p>Equality is supported.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"n\">vec</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"ow\">and</span> <span class=\"n\">vec</span> <span class=\"c1\"># True</span>\n</code></pre>\n</div>\n"}, "sain.Vec": {"fullname": "sain.Vec", "modulename": "sain", "qualname": "Vec", "kind": "class", "doc": "<p>A contiguous growable alternative to builtin <code>list</code> with extra functionalities.</p>\n\n<p>When initializing a vec, it will not build the underlying list until the first element gets pushed.\nWhich saves a little bit of memory.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">names</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">()</span>\n\n<span class=\"n\">names</span><span class=\"o\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"s1\">&#39;foo&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">names</span><span class=\"o\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"s1\">&#39;bar&#39;</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">names</span><span class=\"p\">)</span> <span class=\"c1\"># [&#39;foo&#39;, &#39;bar&#39;]</span>\n<span class=\"k\">assert</span> <span class=\"n\">names</span><span class=\"o\">.</span><span class=\"n\">len</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">2</span>\n</code></pre>\n</div>\n\n<p>Equality is supported.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"n\">vec</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"ow\">and</span> <span class=\"n\">vec</span> <span class=\"c1\"># True</span>\n</code></pre>\n</div>\n", "bases": "typing.Generic[~T]"}, "sain.Vec.__init__": {"fullname": "sain.Vec.__init__", "modulename": "sain", "qualname": "Vec.__init__", "kind": "function", "doc": "<p>Initializes a new vec, This won't actually create the internal list until an element is appended into it.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">names</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]()</span>\n\n<span class=\"n\">names</span><span class=\"o\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"s1\">&#39;foo&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">names</span><span class=\"o\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"s1\">&#39;bar&#39;</span><span class=\"p\">)</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">names</span><span class=\"o\">.</span><span class=\"n\">len</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">2</span>\n\n<span class=\"c1\"># Initialize a vec from another iterable.</span>\n<span class=\"n\">from_iter</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"k\">assert</span> <span class=\"n\">from_iter</span><span class=\"o\">.</span><span class=\"n\">len</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">3</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">iterable</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, "sain.Vec.with_capacity": {"fullname": "sain.Vec.with_capacity", "modulename": "sain", "qualname": "Vec.with_capacity", "kind": "function", "doc": "<p>Create a new <code>Vec</code> with at least the specified capacity.</p>\n\n<p>This vec will be able to hold <code>capacity</code> elements without pushing further if <code>len(vec) == capacity</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"o\">.</span><span class=\"n\">with_capacity</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">len</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"ow\">and</span> <span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">capacity</span><span class=\"p\">()</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">3</span>\n\n<span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">len</span><span class=\"p\">())</span> <span class=\"c1\"># 3</span>\n\n<span class=\"c1\"># This won&#39;t push.</span>\n<span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">capacity</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">Vec</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.Vec.into_inner": {"fullname": "sain.Vec.into_inner", "modulename": "sain", "qualname": "Vec.into_inner", "kind": "function", "doc": "<p>Return an immutable collection over this vector elements.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">into_inner</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Collection</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.Vec.len": {"fullname": "sain.Vec.len", "modulename": "sain", "qualname": "Vec.len", "kind": "function", "doc": "<p>Return the number of elements in this vector.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">len</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">3</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "sain.Vec.capacity": {"fullname": "sain.Vec.capacity", "modulename": "sain", "qualname": "Vec.capacity", "kind": "function", "doc": "<p>Return the capacity of this vector.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">TODO</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "sain.Vec.iter": {"fullname": "sain.Vec.iter", "modulename": "sain", "qualname": "Vec.iter", "kind": "function", "doc": "<p>Return an iterator over this vector elements.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Map each element to a str</span>\n<span class=\"k\">for</span> <span class=\"n\">element</span> <span class=\"ow\">in</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">element</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"o\">.</span><span class=\"n\">Iter</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.Vec.is_empty": {"fullname": "sain.Vec.is_empty", "modulename": "sain", "qualname": "Vec.is_empty", "kind": "function", "doc": "<p>Returns true if the vector contains no elements.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "sain.Vec.split_off": {"fullname": "sain.Vec.split_off", "modulename": "sain", "qualname": "Vec.split_off", "kind": "function", "doc": "<p>Split the vector off at the specified position.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"n\">split</span> <span class=\"o\">=</span> <span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">split_off</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">split</span><span class=\"p\">,</span> <span class=\"n\">vec</span><span class=\"p\">)</span>  <span class=\"c1\"># [1], [2, 3]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">at</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">Vec</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.Vec.split_first": {"fullname": "sain.Vec.split_first", "modulename": "sain", "qualname": "Vec.split_first", "kind": "function", "doc": "<p>Split the first and rest elements of the vector,\nif the rest is empty, <code>Some[None]</code> is returned.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"n\">split</span> <span class=\"o\">=</span> <span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">split_first</span><span class=\"p\">()</span>\n<span class=\"k\">assert</span> <span class=\"n\">split</span> <span class=\"o\">==</span> <span class=\"n\">Some</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)))</span>\n\n<span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"n\">split</span> <span class=\"o\">=</span> <span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">split_first</span><span class=\"p\">()</span>\n<span class=\"k\">assert</span> <span class=\"n\">split</span> <span class=\"o\">==</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">option</span><span class=\"o\">.</span><span class=\"n\">Some</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]]]</span>:</span></span>", "funcdef": "def"}, "sain.Vec.first": {"fullname": "sain.Vec.first", "modulename": "sain", "qualname": "Vec.first", "kind": "function", "doc": "<p>Get the first element in this vec, returning <code>Some[None]</code> if there's none.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"n\">first</span> <span class=\"o\">=</span> <span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">first</span><span class=\"p\">()</span>\n<span class=\"k\">assert</span> <span class=\"o\">~</span><span class=\"n\">first</span> <span class=\"o\">==</span> <span class=\"mi\">1</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">option</span><span class=\"o\">.</span><span class=\"n\">Some</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.Vec.truncate": {"fullname": "sain.Vec.truncate", "modulename": "sain", "qualname": "Vec.truncate", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">size</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "sain.Vec.retain": {"fullname": "sain.Vec.retain", "modulename": "sain", "qualname": "Vec.retain", "kind": "function", "doc": "<p>Remove elements from this vec while <code>f()</code> returns <code>True</code>.</p>\n\n<p>In other words, filter this vector based on <code>f()</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">vec</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">retain</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">elem</span><span class=\"p\">:</span> <span class=\"n\">elem</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">vec</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "sain.Vec.push": {"fullname": "sain.Vec.push", "modulename": "sain", "qualname": "Vec.push", "kind": "function", "doc": "<p>Push an element at the end of the vector.</p>\n\n<p>Example</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">()</span>\n<span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">vec</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">T</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "sain.Vec.append": {"fullname": "sain.Vec.append", "modulename": "sain", "qualname": "Vec.append", "kind": "function", "doc": "<p>An alias for <code>Vec.push</code> method.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">T</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "sain.Vec.get": {"fullname": "sain.Vec.get", "modulename": "sain", "qualname": "Vec.get", "kind": "function", "doc": "<p>Get the item at the given index, or <code>Some[None]</code> if its out of bounds.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">index</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">option</span><span class=\"o\">.</span><span class=\"n\">Some</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.Vec.insert": {"fullname": "sain.Vec.insert", "modulename": "sain", "qualname": "Vec.insert", "kind": "function", "doc": "<p>Insert an element at the position <code>index</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">((</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">vec</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">index</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">T</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "sain.Vec.pop": {"fullname": "sain.Vec.pop", "modulename": "sain", "qualname": "Vec.pop", "kind": "function", "doc": "<p>Removes the last element from a vector and returns it, or <code>sain.Some(None)</code> if it is empty.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"k\">assert</span> <span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">vec</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">index</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">option</span><span class=\"o\">.</span><span class=\"n\">Some</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.Vec.remove": {"fullname": "sain.Vec.remove", "modulename": "sain", "qualname": "Vec.remove", "kind": "function", "doc": "<p>Remove <code>item</code> from this vector.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vector</span><span class=\"p\">((</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">))</span>\n<span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">vec</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">T</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "sain.Vec.swap_remove": {"fullname": "sain.Vec.swap_remove", "modulename": "sain", "qualname": "Vec.swap_remove", "kind": "function", "doc": "<p>Remove the first appearance of <code>item</code> from this vector and return it.</p>\n\n<p>This will raise a <code>ValueError</code> if <code>item</code> is not in this vector.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vector</span><span class=\"p\">((</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">))</span>\n<span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">vec</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">T</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">T</span>:</span></span>", "funcdef": "def"}, "sain.Vec.extend": {"fullname": "sain.Vec.extend", "modulename": "sain", "qualname": "Vec.extend", "kind": "function", "doc": "<p>Extend this vector from another iterable.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">((</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">))</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">vec</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">iterable</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "sain.Vec.copy": {"fullname": "sain.Vec.copy", "modulename": "sain", "qualname": "Vec.copy", "kind": "function", "doc": "<p>Create a vector that copies all of its elements and place it into the new one.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">original</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"n\">copy</span> <span class=\"o\">=</span> <span class=\"n\">original</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n<span class=\"n\">copy</span><span class=\"o\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">original</span><span class=\"p\">)</span> <span class=\"c1\"># []</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">Vec</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.Vec.clear": {"fullname": "sain.Vec.clear", "modulename": "sain", "qualname": "Vec.clear", "kind": "function", "doc": "<p>Clear all elements of this vector.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">clear</span><span class=\"p\">()</span>\n<span class=\"k\">assert</span> <span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">len</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">0</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "sain.cfg.cfg_attr": {"fullname": "sain.cfg.cfg_attr", "modulename": "sain.cfg", "qualname": "cfg_attr", "kind": "function", "doc": "<p>Conditional runtime object configuration based on passed arguments.</p>\n\n<p>If the decorated object gets called and one of the attributes returns <code>False</code>,\n<code>RuntimeError</code> will be raised and the object will not run.</p>\n\n<div class=\"pdoc-alert pdoc-alert-warning\">\n\n<p>The <code>require_modules</code> parameter is bugged and scheduled for deprecation\nand will be removed in a future release.\nInstead, directly import modules at the top of the file or function.</p>\n\n</div>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">sain</span>\n\n<span class=\"nd\">@sain</span><span class=\"o\">.</span><span class=\"n\">cfg_attr</span><span class=\"p\">(</span><span class=\"n\">target_os</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;windows&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">windows_only</span><span class=\"p\">():</span>\n    <span class=\"c1\"># Do stuff with Windows&#39;s API.</span>\n    <span class=\"o\">...</span>\n\n<span class=\"c1\"># Mut be PyPy Python implementation or `RuntimeError` will be raised</span>\n<span class=\"c1\"># when creating the instance.</span>\n<span class=\"nd\">@sain</span><span class=\"o\">.</span><span class=\"n\">cfg_attr</span><span class=\"p\">(</span><span class=\"n\">impl</span><span class=\"o\">=</span><span class=\"s2\">&quot;PyPy&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">Zoo</span><span class=\"p\">:</span>\n    <span class=\"nd\">@sain</span><span class=\"o\">.</span><span class=\"n\">cfg_attr</span><span class=\"p\">(</span><span class=\"n\">target_os</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;linux&quot;</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">bark</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">windows_only</span><span class=\"p\">()</span>  <span class=\"c1\"># RuntimeError(&quot;Windows OS only!)</span>\n\n<span class=\"c1\"># An instance will not be created if raised.</span>\n<span class=\"n\">zoo</span> <span class=\"o\">=</span> <span class=\"n\">Zoo</span><span class=\"p\">()</span>\n<span class=\"c1\"># RuntimeError(&quot;class Zoo requires PyPy implementation&quot;)</span>\n<span class=\"n\">zoo</span><span class=\"o\">.</span><span class=\"n\">bark</span><span class=\"p\">()</span>\n<span class=\"c1\"># Whats zoo??</span>\n</code></pre>\n</div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>requires</strong> (<code>str | None</code>):\nA required module to run the object.</li>\n<li><strong>target_os</strong> (<code>str | None</code>):\nThe targeted operating system thats required for the object.</li>\n<li><strong>python_version</strong> (<code>tuple[int, int, int] | None</code>):\nThe targeted Python version thats required for the object.\nFormat must be <code>(3, 9, 5)</code>.</li>\n<li><strong>target_arch</strong> (<code>str | None</code>):\nThe CPU targeted architecture thats required for the object.</li>\n<li><strong>impl</strong> (<code>str | None</code>):\nThe Python implementation thats required for the object.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong><code>RuntimeError</code></strong>: This fails if any of the attributes returns <code>False</code>. <code>required_modules</code> is not included.</li>\n<li><strong><code>ModuleNotFoundError</code></strong>: If the module check fails. i.e., if <code>required_modules</code> was provided and it returns <code>False</code>.</li>\n<li><strong><code>ValueError</code></strong>: If the passed Python implementation is unknown.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">requires</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">target_os</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"s1\">&#39;linux&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;win32&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;darwin&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;unix&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;windows&#39;</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">python_version</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">target_arch</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"s1\">&#39;x86&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;x64&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;arm&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;arm64&#39;</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">impl</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"s1\">&#39;CPython&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;PyPy&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;IronPython&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Jython&#39;</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">F</span><span class=\"p\">],</span> <span class=\"o\">~</span><span class=\"n\">F</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.cfg.cfg": {"fullname": "sain.cfg.cfg", "modulename": "sain.cfg", "qualname": "cfg", "kind": "function", "doc": "<p>A function that will run the code only if all predicate attributes returns <code>True</code>.</p>\n\n<div class=\"pdoc-alert pdoc-alert-warning\">\n\n<p>The <code>require_modules</code> parameter is bugged and scheduled for deprecation and will be removed in a future release.\nInstead, directly import modules at the top of the file or function.</p>\n\n</div>\n\n<p>The difference between this function and <code>cfg_attr</code> is that this function will not raise an exception.\nInstead it will return <code>False</code> if any of the attributes fails.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">sain</span>\n\n<span class=\"k\">if</span> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">cfg</span><span class=\"p\">(</span><span class=\"n\">target_os</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;windows&quot;</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Windows&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">elif</span> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">cfg</span><span class=\"p\">(</span><span class=\"n\">target_os</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;linux&quot;</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Linux&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Something else&quot;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>requires</strong> (<code>str | None</code>):\nA required module to run the object.</li>\n<li><strong>target_os</strong> (<code>str | None</code>):\nThe targeted operating system thats required for the object to be ran.</li>\n<li><p><strong>python_version</strong> (<code>tuple[int, int, int] | None</code>):\nThe targeted Python version thats required for the object to be ran.</p>\n\n<p>Format must be <code>(3, 9, 5)</code>.</p></li>\n<li><strong>target_arch</strong> (<code>str | None</code>):\nThe CPU targeted architecture thats required for the object to be ran.</li>\n<li><strong>impl</strong> (<code>str | None</code>):\nThe Python implementation thats required for the object to be ran.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong><code>bool</code></strong>: The condition that was checked.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">target_os</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"s1\">&#39;linux&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;win32&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;darwin&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;unix&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;windows&#39;</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">requires</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">python_version</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">target_arch</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"s1\">&#39;x86&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;x64&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;arm&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;arm64&#39;</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">impl</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"s1\">&#39;CPython&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;PyPy&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;IronPython&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Jython&#39;</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "sain.futures": {"fullname": "sain.futures", "modulename": "sain.futures", "kind": "module", "doc": "<p>Abstractions for asynchronous programming.</p>\n"}, "sain.futures.spawn": {"fullname": "sain.futures.spawn", "modulename": "sain.futures", "qualname": "spawn", "kind": "function", "doc": "<p>Spawn all given awaitables concurrently.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">sain</span> <span class=\"kn\">import</span> <span class=\"n\">futures</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]:</span>\n    <span class=\"k\">return</span> <span class=\"k\">await</span> <span class=\"n\">http</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">()</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n    <span class=\"n\">tasks</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">futures</span><span class=\"o\">.</span><span class=\"n\">spawn</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;url.com&quot;</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)))</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">tasks</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>*aws</strong> (<code>collections.Awaitable[T]</code>):\nThe awaitables to gather.</li>\n<li><strong>timeout</strong> (<code>float | None</code>):\nAn optional timeout.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">aws</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Awaitable</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">T_co</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">timeout</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">Ok</span><span class=\"p\">[</span><span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">T_co</span><span class=\"p\">]],</span> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">Err</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "async def"}, "sain.futures.loop": {"fullname": "sain.futures.loop", "modulename": "sain.futures", "qualname": "loop", "kind": "function", "doc": "<p>Get the current usable event loop or create a new one.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong><code>asyncio.AbstractEventLoop</code></strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">AbstractEventLoop</span>:</span></span>", "funcdef": "def"}, "sain.iter": {"fullname": "sain.iter", "modulename": "sain.iter", "kind": "module", "doc": "<p>Module contains a Standard functional iterator implementation.</p>\n"}, "sain.iter.Iter": {"fullname": "sain.iter.Iter", "modulename": "sain.iter", "qualname": "Iter", "kind": "class", "doc": "<p>Builds an in-memory iterator over some Python iterable.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"c1\"># Limit the results to 2.</span>\n<span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n<span class=\"c1\"># 1</span>\n<span class=\"c1\"># 2</span>\n\n<span class=\"c1\"># Filter the results.</span>\n<span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"n\">item</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">())</span>\n<span class=\"c1\"># 2</span>\n<span class=\"c1\"># 3</span>\n<span class=\"c1\"># 3</span>\n\n<span class=\"c1\"># Indexing is supported.</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">iterator</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"c1\"># 1</span>\n</code></pre>\n</div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>items</strong> (<code>Iterable[Item]</code>):\nThe items to iterate over. This must be an iterable.</li>\n</ul>\n", "bases": "collections.abc.Iterator[~Item], collections.abc.Iterable[~Item], sain.default.Default[ForwardRef('Iter[ty_ext.Never]')]"}, "sain.iter.Iter.__init__": {"fullname": "sain.iter.Iter.__init__", "modulename": "sain.iter", "qualname": "Iter.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">items</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">]</span></span>)</span>"}, "sain.iter.Iter.default": {"fullname": "sain.iter.Iter.default", "modulename": "sain.iter", "qualname": "Iter.default", "kind": "function", "doc": "<p>Return the default iterator for this type. It returns an empty iterator.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">it</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"o\">.</span><span class=\"n\">default</span><span class=\"p\">()</span>\n<span class=\"k\">assert</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">next</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">is_none</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"s1\">&#39;Iter[ty_ext.Never]&#39;</span>:</span></span>", "funcdef": "def"}, "sain.iter.Iter.collect": {"fullname": "sain.iter.Iter.collect", "modulename": "sain.iter", "qualname": "Iter.collect", "kind": "function", "doc": "<p>Collects all items in the iterator into an immutable sequence.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"c1\"># (0, 1, 2, 3)</span>\n<span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">(</span><span class=\"n\">cast</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"c1\"># Map each element and collect it.</span>\n<span class=\"c1\"># (&#39;0&#39;, &#39;1&#39;, &#39;2&#39;, &#39;3&#39;)</span>\n</code></pre>\n</div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cast</strong> (<code>T | None</code>):\nAn optional type to cast the items into.\nIf not provided the items will be returned as it's original type.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">cast</span><span class=\"p\">:</span> <span class=\"s1\">&#39;_B | None&#39;</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"s1\">&#39;collections.Sequence[Item] | collections.Sequence[_B]&#39;</span>:</span></span>", "funcdef": "def"}, "sain.iter.Iter.to_vec": {"fullname": "sain.iter.Iter.to_vec", "modulename": "sain.iter", "qualname": "Iter.to_vec", "kind": "function", "doc": "<p>Convert this iterator into <code>Vec[T]</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">it</span> <span class=\"o\">=</span> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"o\">.</span><span class=\"n\">once</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">vc</span> <span class=\"o\">=</span> <span class=\"n\">it</span><span class=\"o\">.</span><span class=\"n\">to_vec</span><span class=\"p\">()</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">to_vec</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">Vec</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.iter.Iter.copied": {"fullname": "sain.iter.Iter.copied", "modulename": "sain.iter", "qualname": "Iter.copied", "kind": "function", "doc": "<p>Creates an iterator which copies all of its elements by value.</p>\n\n<div class=\"pdoc-alert pdoc-alert-note\">\n\n<p>If you only need a copy of the item reference, Use <code>by_ref</code> instead.</p>\n\n</div>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">it</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">])</span>\n<span class=\"n\">copied</span> <span class=\"o\">=</span> <span class=\"n\">it</span><span class=\"o\">.</span><span class=\"n\">copied</span><span class=\"p\">()</span>\n<span class=\"k\">assert</span> <span class=\"n\">it</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">copied</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"o\">.</span><span class=\"n\">Iter</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.iter.Iter.by_ref": {"fullname": "sain.iter.Iter.by_ref", "modulename": "sain.iter", "qualname": "Iter.by_ref", "kind": "function", "doc": "<p>Creates an iterator which shallow copies its elements by reference.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">it</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">])</span>\n<span class=\"k\">for</span> <span class=\"n\">ref</span> <span class=\"ow\">in</span> <span class=\"n\">it</span><span class=\"o\">.</span><span class=\"n\">by_ref</span><span class=\"p\">():</span>\n    <span class=\"o\">...</span>\n\n<span class=\"c1\"># Original not consumed.</span>\n<span class=\"k\">assert</span> <span class=\"n\">it</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">3</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"o\">.</span><span class=\"n\">Iter</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.iter.Iter.next": {"fullname": "sain.iter.Iter.next", "modulename": "sain.iter", "qualname": "Iter.next", "kind": "function", "doc": "<p>Returns the next item in the iterator, <code>Some(None)</code> if all items yielded.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]([</span><span class=\"s2\">&quot;1&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;2&quot;</span><span class=\"p\">])</span>\n<span class=\"k\">assert</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">next</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"s2\">&quot;1&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">next</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"s2\">&quot;2&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">next</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">is_none</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"s1\">&#39;Option[Item]&#39;</span>:</span></span>", "funcdef": "def"}, "sain.iter.Iter.map": {"fullname": "sain.iter.Iter.map", "modulename": "sain.iter", "qualname": "Iter.map", "kind": "function", "doc": "<p>Maps each item in the iterator to its predicated value.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"s2\">&quot;1&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;2&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;3&quot;</span><span class=\"p\">])</span>\n    <span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># &lt;Iter([1, 2, 3])&gt;</span>\n<span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">iterator</span><span class=\"p\">:</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>predicate</strong> (<code>collections.Callable[[Item], Item]</code>):\nThe function to map each item in the iterator to its predicated value.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">predicate</span><span class=\"p\">:</span> <span class=\"s1\">&#39;collections.Callable[[Item], OtherItem]&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"s1\">&#39;Iter[OtherItem]&#39;</span>:</span></span>", "funcdef": "def"}, "sain.iter.Iter.take": {"fullname": "sain.iter.Iter.take", "modulename": "sain.iter", "qualname": "Iter.take", "kind": "function", "doc": "<p>Take the first number of items until the number of items are yielded or\nthe end of the iterator is reached.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"s1\">&#39;c&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;x&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;y&#39;</span><span class=\"p\">])</span>\n<span class=\"k\">for</span> <span class=\"n\">mode</span> <span class=\"ow\">in</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">):</span>\n    <span class=\"k\">assert</span> <span class=\"n\">mode</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s1\">&#39;c&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;x&#39;</span><span class=\"p\">]</span>\n<span class=\"c1\"># &lt;Iter([&#39;c&#39;, &#39;x&#39;])&gt;</span>\n</code></pre>\n</div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>n</strong> (<code>int</code>):\nThe number of items to take.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"o\">.</span><span class=\"n\">Iter</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.iter.Iter.take_while": {"fullname": "sain.iter.Iter.take_while", "modulename": "sain.iter", "qualname": "Iter.take_while", "kind": "function", "doc": "<p>Yields items from the iterator while predicate returns <code>True</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"s1\">&#39;VIP&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Regular&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Guard&#39;</span><span class=\"p\">])</span>\n<span class=\"k\">for</span> <span class=\"n\">membership</span> <span class=\"ow\">in</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">take_while</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">m</span><span class=\"p\">:</span> <span class=\"n\">m</span> <span class=\"ow\">is</span> <span class=\"s1\">&#39;VIP&#39;</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">membership</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># VIP</span>\n</code></pre>\n</div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>predicate</strong> (<code>collections.Callable[[Item], bool]</code>):\nThe function to predicate each item in the iterator.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong><code>StopIteration</code></strong>: If no elements are left in the iterator.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">predicate</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"o\">.</span><span class=\"n\">Iter</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.iter.Iter.drop_while": {"fullname": "sain.iter.Iter.drop_while", "modulename": "sain.iter", "qualname": "Iter.drop_while", "kind": "function", "doc": "<p>Yields items from the iterator while predicate returns <code>False</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"s1\">&#39;VIP&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Regular&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Guard&#39;</span><span class=\"p\">])</span>\n<span class=\"k\">for</span> <span class=\"n\">membership</span> <span class=\"ow\">in</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">drop_while</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">m</span><span class=\"p\">:</span> <span class=\"n\">m</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"s1\">&#39;VIP&#39;</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">membership</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Regular</span>\n<span class=\"c1\"># Guard</span>\n</code></pre>\n</div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>predicate</strong> (<code>collections.Callable[[Item], bool]</code>):\nThe function to predicate each item in the iterator.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong><code>StopIteration</code></strong>: If no elements are left in the iterator.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">predicate</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"o\">.</span><span class=\"n\">Iter</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.iter.Iter.filter": {"fullname": "sain.iter.Iter.filter", "modulename": "sain.iter", "qualname": "Iter.filter", "kind": "function", "doc": "<p>Filters the iterator to only yield items that match the predicate.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">places</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"s1\">&#39;London&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Paris&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Los Angeles&#39;</span><span class=\"p\">])</span>\n<span class=\"k\">for</span> <span class=\"n\">place</span> <span class=\"ow\">in</span> <span class=\"n\">places</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">place</span><span class=\"p\">:</span> <span class=\"n\">place</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s1\">&#39;L&#39;</span><span class=\"p\">)):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">place</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># London</span>\n<span class=\"c1\"># Los Angeles</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">predicate</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"o\">.</span><span class=\"n\">Iter</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.iter.Iter.skip": {"fullname": "sain.iter.Iter.skip", "modulename": "sain.iter", "qualname": "Iter.skip", "kind": "function", "doc": "<p>Skips the first number of items in the iterator.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"n\">MembershipType</span><span class=\"o\">.</span><span class=\"n\">STEAM</span><span class=\"p\">,</span> <span class=\"n\">MembershipType</span><span class=\"o\">.</span><span class=\"n\">XBOX</span><span class=\"p\">,</span> <span class=\"n\">MembershipType</span><span class=\"o\">.</span><span class=\"n\">STADIA</span><span class=\"p\">])</span>\n<span class=\"k\">for</span> <span class=\"n\">platform</span> <span class=\"ow\">in</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">skip</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">platform</span><span class=\"p\">)</span>\n<span class=\"c1\"># Skip the first item in the iterator.</span>\n<span class=\"c1\"># &lt;Iter([MembershipType.XBOX, MembershipType.STADIA])&gt;</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"o\">.</span><span class=\"n\">Iter</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.iter.Iter.zip": {"fullname": "sain.iter.Iter.zip", "modulename": "sain.iter", "qualname": "Iter.zip", "kind": "function", "doc": "<p>Zips the iterator with another iterable.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"n\">other</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">])</span>\n<span class=\"k\">for</span> <span class=\"n\">item</span><span class=\"p\">,</span> <span class=\"n\">other_item</span> <span class=\"ow\">in</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">zip</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">):</span>\n    <span class=\"k\">assert</span> <span class=\"n\">item</span> <span class=\"o\">==</span> <span class=\"n\">other_item</span>\n<span class=\"o\">&lt;</span><span class=\"n\">Iter</span><span class=\"p\">([(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">)])</span><span class=\"o\">&gt;</span>\n</code></pre>\n</div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>other</strong> (<code>Iter[OtherItem]</code>):\nThe iterable to zip with.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong><code>Iter[tuple[Item, OtherItem]]</code></strong>: The zipped iterator.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong><code>StopIteration</code></strong>: If no elements are left in the iterator.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Iter[OtherItem]&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"s1\">&#39;Iter[tuple[Item, OtherItem]]&#39;</span>:</span></span>", "funcdef": "def"}, "sain.iter.Iter.all": {"fullname": "sain.iter.Iter.all", "modulename": "sain.iter", "qualname": "Iter.all", "kind": "function", "doc": "<p>Return <code>True</code> if all items in the iterator match the predicate.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"k\">while</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">)):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Still all integers&quot;</span><span class=\"p\">)</span>\n    <span class=\"k\">continue</span>\n    <span class=\"c1\"># Still all integers</span>\n</code></pre>\n</div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>predicate</strong> (<code>collections.Callable[[Item], bool]</code>):\nThe function to test each item in the iterator.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong><code>StopIteration</code></strong>: If no elements are left in the iterator.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">predicate</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "sain.iter.Iter.any": {"fullname": "sain.iter.Iter.any", "modulename": "sain.iter", "qualname": "Iter.any", "kind": "function", "doc": "<p><code>True</code> if any items in the iterator match the predicate.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"k\">if</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">any</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">)):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;At least one item is an int.&quot;</span><span class=\"p\">)</span>\n<span class=\"c1\"># At least one item is an int.</span>\n</code></pre>\n</div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>predicate</strong> (<code>collections.Callable[[Item], bool]</code>):\nThe function to test each item in the iterator.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong><code>StopIteration</code></strong>: If no elements are left in the iterator.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">predicate</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "sain.iter.Iter.sort": {"fullname": "sain.iter.Iter.sort", "modulename": "sain.iter", "qualname": "Iter.sort", "kind": "function", "doc": "<p>Sorts the iterator.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">])</span>\n<span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">sort</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"n\">item</span> <span class=\"o\">&lt;</span> <span class=\"mi\">3</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n<span class=\"c1\"># 1</span>\n<span class=\"c1\"># 3</span>\n<span class=\"c1\"># 6</span>\n<span class=\"c1\"># 7</span>\n</code></pre>\n</div>\n\n<hr />\n\n<p>key: <code>collections.Callable[[Item], Any]</code>\n    The function to sort by.\nreverse: <code>bool</code>\n    Whether to reverse the sort.</p>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong><code>StopIteration</code></strong>: If no elements are left in the iterator.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"s1\">&#39;collections.Callable[[Item], _typeshed.SupportsRichComparison]&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">reverse</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"o\">.</span><span class=\"n\">Iter</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.iter.Iter.first": {"fullname": "sain.iter.Iter.first", "modulename": "sain.iter", "qualname": "Iter.first", "kind": "function", "doc": "<p>Returns the first item in the iterator.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">])</span>\n<span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">first</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">is_some_and</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong><code>StopIteration</code></strong>: If no elements are left in the iterator.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"s1\">&#39;Option[Item]&#39;</span>:</span></span>", "funcdef": "def"}, "sain.iter.Iter.last": {"fullname": "sain.iter.Iter.last", "modulename": "sain.iter", "qualname": "Iter.last", "kind": "function", "doc": "<p>Returns the last item in the iterator.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">])</span>\n<span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">last</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">is_some_and</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"mi\">7</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong><code>StopIteration</code></strong></li>\n<li><strong>If no elements are left in the iterator.</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"s1\">&#39;Option[Item]&#39;</span>:</span></span>", "funcdef": "def"}, "sain.iter.Iter.reversed": {"fullname": "sain.iter.Iter.reversed", "modulename": "sain.iter", "qualname": "Iter.reversed", "kind": "function", "doc": "<p>Returns a new iterator that yields the items in the iterator in reverse order.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">])</span>\n<span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">reversed</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n<span class=\"c1\"># 7</span>\n<span class=\"c1\"># 6</span>\n<span class=\"c1\"># 1</span>\n<span class=\"c1\"># 3</span>\n</code></pre>\n</div>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong><code>StopIteration</code></strong>: If no elements are left in the iterator.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"o\">.</span><span class=\"n\">Iter</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.iter.Iter.count": {"fullname": "sain.iter.Iter.count", "modulename": "sain.iter", "qualname": "Iter.count", "kind": "function", "doc": "<p>Return the count of elements in memory this iterator has.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">it</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"k\">assert</span> <span class=\"n\">it</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">3</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "sain.iter.Iter.union": {"fullname": "sain.iter.Iter.union", "modulename": "sain.iter", "qualname": "Iter.union", "kind": "function", "doc": "<p>Returns a new iterator that yields all items from both iterators.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"n\">other</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">])</span>\n<span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">union</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n<span class=\"c1\"># 1</span>\n<span class=\"c1\"># 2</span>\n<span class=\"c1\"># 3</span>\n<span class=\"c1\"># 4</span>\n<span class=\"c1\"># 5</span>\n<span class=\"c1\"># 6</span>\n</code></pre>\n</div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>other</strong> (<code>Iter[Item]</code>):\nThe iterable to union with.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong><code>StopIteration</code></strong>: If no elements are left in the iterator.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"o\">.</span><span class=\"n\">Iter</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"o\">.</span><span class=\"n\">Iter</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.iter.Iter.for_each": {"fullname": "sain.iter.Iter.for_each", "modulename": "sain.iter", "qualname": "Iter.for_each", "kind": "function", "doc": "<p>Calls <code>func</code> on each item in the iterator.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">for_each</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">))</span>\n<span class=\"c1\"># 1</span>\n<span class=\"c1\"># 2</span>\n<span class=\"c1\"># 3</span>\n</code></pre>\n</div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>func</strong> (<code>collections.Callable[[Item], typing.Any]</code>):\nThe function to call on each item in the iterator.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">func</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">],</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "sain.iter.Iter.async_for_each": {"fullname": "sain.iter.Iter.async_for_each", "modulename": "sain.iter", "qualname": "Iter.async_for_each", "kind": "function", "doc": "<p>Calls the async function on each item in the iterator concurrently.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">fetch</span><span class=\"p\">(</span><span class=\"n\">username</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]:</span>\n    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">aiohttp</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"p\">(</span><span class=\"s1\">&#39;GET&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;...&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">r</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"k\">await</span> <span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">()</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">users</span> <span class=\"o\">=</span> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">into_iter</span><span class=\"p\">([</span><span class=\"s2\">&quot;danny&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;legalia&quot;</span><span class=\"p\">])</span>\n    <span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">users</span><span class=\"o\">.</span><span class=\"n\">async_for_each</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">username</span><span class=\"p\">:</span> <span class=\"n\">fetch</span><span class=\"p\">(</span><span class=\"n\">username</span><span class=\"p\">))</span>\n    <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">results</span><span class=\"o\">.</span><span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n        <span class=\"o\">...</span>\n</code></pre>\n</div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>func</strong> (<code>collections.Callable[[Item], collections.Coroutine[None, None, None]]</code>):\nThe async function to call on each item in the iterator.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">func</span><span class=\"p\">:</span> <span class=\"s1\">&#39;collections.Callable[[Item], collections.Coroutine[None, typing.Any, OtherItem]]&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"s1\">&#39;_result.Result[collections.Sequence[OtherItem], str]&#39;</span>:</span></span>", "funcdef": "async def"}, "sain.iter.Iter.enumerate": {"fullname": "sain.iter.Iter.enumerate", "modulename": "sain.iter", "qualname": "Iter.enumerate", "kind": "function", "doc": "<p>Returns a new iterator that yields tuples of the index and item.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"k\">for</span> <span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">enumerate</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">item</span><span class=\"p\">)</span>\n<span class=\"c1\"># 0, 1</span>\n<span class=\"c1\"># 1, 2</span>\n<span class=\"c1\"># 2, 3</span>\n</code></pre>\n</div>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong><code>StopIteration</code></strong>: If no elements are left in the iterator.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"o\">.</span><span class=\"n\">Iter</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, "sain.iter.iter": {"fullname": "sain.iter.iter", "modulename": "sain.iter", "qualname": "iter", "kind": "function", "doc": "<p>Convert an iterable into <code>Iter</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">sequence</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"p\">(</span><span class=\"n\">sequence</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">reversed</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n<span class=\"c1\"># 3</span>\n<span class=\"c1\"># 2</span>\n<span class=\"c1\"># 1</span>\n</code></pre>\n</div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>iterable</strong> (<code>Iterable[Item]</code>):\nThe iterable to convert.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">iterable</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"o\">.</span><span class=\"n\">Iter</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.iter.empty": {"fullname": "sain.iter.empty", "modulename": "sain.iter", "qualname": "empty", "kind": "function", "doc": "<p>Create an iterator that yields nothing.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">nope</span> <span class=\"o\">=</span> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"o\">.</span><span class=\"n\">empty</span><span class=\"p\">()</span>\n<span class=\"k\">assert</span> <span class=\"n\">nope</span><span class=\"o\">.</span><span class=\"n\">next</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">is_none</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"s1\">&#39;Iter[ty_ext.Never]&#39;</span>:</span></span>", "funcdef": "def"}, "sain.iter.once": {"fullname": "sain.iter.once", "modulename": "sain.iter", "qualname": "once", "kind": "function", "doc": "<p>Returns an iterator that yields exactly a single item.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"o\">.</span><span class=\"n\">once</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">next</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">next</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">Item</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"o\">.</span><span class=\"n\">Iter</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Item</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.vec.Vec": {"fullname": "sain.vec.Vec", "modulename": "sain.vec", "qualname": "Vec", "kind": "class", "doc": "<p>A contiguous growable alternative to builtin <code>list</code> with extra functionalities.</p>\n\n<p>When initializing a vec, it will not build the underlying list until the first element gets pushed.\nWhich saves a little bit of memory.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">names</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">()</span>\n\n<span class=\"n\">names</span><span class=\"o\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"s1\">&#39;foo&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">names</span><span class=\"o\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"s1\">&#39;bar&#39;</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">names</span><span class=\"p\">)</span> <span class=\"c1\"># [&#39;foo&#39;, &#39;bar&#39;]</span>\n<span class=\"k\">assert</span> <span class=\"n\">names</span><span class=\"o\">.</span><span class=\"n\">len</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">2</span>\n</code></pre>\n</div>\n\n<p>Equality is supported.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"n\">vec</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"ow\">and</span> <span class=\"n\">vec</span> <span class=\"c1\"># True</span>\n</code></pre>\n</div>\n", "bases": "typing.Generic[~T]"}, "sain.vec.Vec.__init__": {"fullname": "sain.vec.Vec.__init__", "modulename": "sain.vec", "qualname": "Vec.__init__", "kind": "function", "doc": "<p>Initializes a new vec, This won't actually create the internal list until an element is appended into it.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">names</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]()</span>\n\n<span class=\"n\">names</span><span class=\"o\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"s1\">&#39;foo&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">names</span><span class=\"o\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"s1\">&#39;bar&#39;</span><span class=\"p\">)</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">names</span><span class=\"o\">.</span><span class=\"n\">len</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">2</span>\n\n<span class=\"c1\"># Initialize a vec from another iterable.</span>\n<span class=\"n\">from_iter</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"k\">assert</span> <span class=\"n\">from_iter</span><span class=\"o\">.</span><span class=\"n\">len</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">3</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">iterable</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, "sain.vec.Vec.with_capacity": {"fullname": "sain.vec.Vec.with_capacity", "modulename": "sain.vec", "qualname": "Vec.with_capacity", "kind": "function", "doc": "<p>Create a new <code>Vec</code> with at least the specified capacity.</p>\n\n<p>This vec will be able to hold <code>capacity</code> elements without pushing further if <code>len(vec) == capacity</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"o\">.</span><span class=\"n\">with_capacity</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">len</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"ow\">and</span> <span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">capacity</span><span class=\"p\">()</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">3</span>\n\n<span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">len</span><span class=\"p\">())</span> <span class=\"c1\"># 3</span>\n\n<span class=\"c1\"># This won&#39;t push.</span>\n<span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">capacity</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">Vec</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.vec.Vec.into_inner": {"fullname": "sain.vec.Vec.into_inner", "modulename": "sain.vec", "qualname": "Vec.into_inner", "kind": "function", "doc": "<p>Return an immutable collection over this vector elements.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">into_inner</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Collection</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.vec.Vec.len": {"fullname": "sain.vec.Vec.len", "modulename": "sain.vec", "qualname": "Vec.len", "kind": "function", "doc": "<p>Return the number of elements in this vector.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">len</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">3</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "sain.vec.Vec.capacity": {"fullname": "sain.vec.Vec.capacity", "modulename": "sain.vec", "qualname": "Vec.capacity", "kind": "function", "doc": "<p>Return the capacity of this vector.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">TODO</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "sain.vec.Vec.iter": {"fullname": "sain.vec.Vec.iter", "modulename": "sain.vec", "qualname": "Vec.iter", "kind": "function", "doc": "<p>Return an iterator over this vector elements.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Map each element to a str</span>\n<span class=\"k\">for</span> <span class=\"n\">element</span> <span class=\"ow\">in</span> <span class=\"n\">iterator</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">element</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"o\">.</span><span class=\"n\">Iter</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.vec.Vec.is_empty": {"fullname": "sain.vec.Vec.is_empty", "modulename": "sain.vec", "qualname": "Vec.is_empty", "kind": "function", "doc": "<p>Returns true if the vector contains no elements.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "sain.vec.Vec.split_off": {"fullname": "sain.vec.Vec.split_off", "modulename": "sain.vec", "qualname": "Vec.split_off", "kind": "function", "doc": "<p>Split the vector off at the specified position.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"n\">split</span> <span class=\"o\">=</span> <span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">split_off</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">split</span><span class=\"p\">,</span> <span class=\"n\">vec</span><span class=\"p\">)</span>  <span class=\"c1\"># [1], [2, 3]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">at</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">Vec</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.vec.Vec.split_first": {"fullname": "sain.vec.Vec.split_first", "modulename": "sain.vec", "qualname": "Vec.split_first", "kind": "function", "doc": "<p>Split the first and rest elements of the vector,\nif the rest is empty, <code>Some[None]</code> is returned.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"n\">split</span> <span class=\"o\">=</span> <span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">split_first</span><span class=\"p\">()</span>\n<span class=\"k\">assert</span> <span class=\"n\">split</span> <span class=\"o\">==</span> <span class=\"n\">Some</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)))</span>\n\n<span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"n\">split</span> <span class=\"o\">=</span> <span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">split_first</span><span class=\"p\">()</span>\n<span class=\"k\">assert</span> <span class=\"n\">split</span> <span class=\"o\">==</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">option</span><span class=\"o\">.</span><span class=\"n\">Some</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]]]</span>:</span></span>", "funcdef": "def"}, "sain.vec.Vec.first": {"fullname": "sain.vec.Vec.first", "modulename": "sain.vec", "qualname": "Vec.first", "kind": "function", "doc": "<p>Get the first element in this vec, returning <code>Some[None]</code> if there's none.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"n\">first</span> <span class=\"o\">=</span> <span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">first</span><span class=\"p\">()</span>\n<span class=\"k\">assert</span> <span class=\"o\">~</span><span class=\"n\">first</span> <span class=\"o\">==</span> <span class=\"mi\">1</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">option</span><span class=\"o\">.</span><span class=\"n\">Some</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.vec.Vec.truncate": {"fullname": "sain.vec.Vec.truncate", "modulename": "sain.vec", "qualname": "Vec.truncate", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">size</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "sain.vec.Vec.retain": {"fullname": "sain.vec.Vec.retain", "modulename": "sain.vec", "qualname": "Vec.retain", "kind": "function", "doc": "<p>Remove elements from this vec while <code>f()</code> returns <code>True</code>.</p>\n\n<p>In other words, filter this vector based on <code>f()</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">vec</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">retain</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">elem</span><span class=\"p\">:</span> <span class=\"n\">elem</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">vec</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "sain.vec.Vec.push": {"fullname": "sain.vec.Vec.push", "modulename": "sain.vec", "qualname": "Vec.push", "kind": "function", "doc": "<p>Push an element at the end of the vector.</p>\n\n<p>Example</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">()</span>\n<span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">vec</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">T</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "sain.vec.Vec.append": {"fullname": "sain.vec.Vec.append", "modulename": "sain.vec", "qualname": "Vec.append", "kind": "function", "doc": "<p>An alias for <code>Vec.push</code> method.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">T</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "sain.vec.Vec.get": {"fullname": "sain.vec.Vec.get", "modulename": "sain.vec", "qualname": "Vec.get", "kind": "function", "doc": "<p>Get the item at the given index, or <code>Some[None]</code> if its out of bounds.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">index</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">option</span><span class=\"o\">.</span><span class=\"n\">Some</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.vec.Vec.insert": {"fullname": "sain.vec.Vec.insert", "modulename": "sain.vec", "qualname": "Vec.insert", "kind": "function", "doc": "<p>Insert an element at the position <code>index</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">((</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">vec</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">index</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">T</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "sain.vec.Vec.pop": {"fullname": "sain.vec.Vec.pop", "modulename": "sain.vec", "qualname": "Vec.pop", "kind": "function", "doc": "<p>Removes the last element from a vector and returns it, or <code>sain.Some(None)</code> if it is empty.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"k\">assert</span> <span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">vec</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">index</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">option</span><span class=\"o\">.</span><span class=\"n\">Some</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.vec.Vec.remove": {"fullname": "sain.vec.Vec.remove", "modulename": "sain.vec", "qualname": "Vec.remove", "kind": "function", "doc": "<p>Remove <code>item</code> from this vector.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vector</span><span class=\"p\">((</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">))</span>\n<span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">vec</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">T</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "sain.vec.Vec.swap_remove": {"fullname": "sain.vec.Vec.swap_remove", "modulename": "sain.vec", "qualname": "Vec.swap_remove", "kind": "function", "doc": "<p>Remove the first appearance of <code>item</code> from this vector and return it.</p>\n\n<p>This will raise a <code>ValueError</code> if <code>item</code> is not in this vector.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vector</span><span class=\"p\">((</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">))</span>\n<span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">vec</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">T</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">T</span>:</span></span>", "funcdef": "def"}, "sain.vec.Vec.extend": {"fullname": "sain.vec.Vec.extend", "modulename": "sain.vec", "qualname": "Vec.extend", "kind": "function", "doc": "<p>Extend this vector from another iterable.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">((</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">))</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">vec</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">iterable</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "sain.vec.Vec.copy": {"fullname": "sain.vec.Vec.copy", "modulename": "sain.vec", "qualname": "Vec.copy", "kind": "function", "doc": "<p>Create a vector that copies all of its elements and place it into the new one.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">original</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"n\">copy</span> <span class=\"o\">=</span> <span class=\"n\">original</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n<span class=\"n\">copy</span><span class=\"o\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">original</span><span class=\"p\">)</span> <span class=\"c1\"># []</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">Vec</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sain.vec.Vec.clear": {"fullname": "sain.vec.Vec.clear", "modulename": "sain.vec", "qualname": "Vec.clear", "kind": "function", "doc": "<p>Clear all elements of this vector.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">Vec</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">clear</span><span class=\"p\">()</span>\n<span class=\"k\">assert</span> <span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">len</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">0</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "sain.vec.vec": {"fullname": "sain.vec.vec", "modulename": "sain.vec", "qualname": "vec", "kind": "function", "doc": "<p>Construct a vector containing <code>elements</code>.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"n\">vec</span><span class=\"p\">(</span><span class=\"s1\">&#39;Apple&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Orange&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Lemon&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">items</span><span class=\"o\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"s1\">&#39;Grape&#39;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">elements</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">T</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sain</span><span class=\"o\">.</span><span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">Vec</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}}, "docInfo": {"sain": {"qualname": 0, "fullname": 1, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 215}, "sain.cfg": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 510}, "sain.cfg_attr": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 306, "bases": 0, "doc": 531}, "sain.Default": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 4, "doc": 158}, "sain.Default.__init__": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 18, "bases": 0, "doc": 3}, "sain.Default.default": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 10}, "sain.AsRef": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 4, "doc": 331}, "sain.AsRef.__init__": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 18, "bases": 0, "doc": 3}, "sain.AsRef.object": {"qualname": 2, "fullname": 3, "annotation": 4, "default_value": 0, "signature": 0, "bases": 0, "doc": 9}, "sain.AsRef.copy": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 18, "bases": 0, "doc": 31}, "sain.AsMut": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 4, "doc": 10}, "sain.AsMut.__init__": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 18, "bases": 0, "doc": 3}, "sain.AsMut.object": {"qualname": 2, "fullname": 3, "annotation": 4, "default_value": 0, "signature": 0, "bases": 0, "doc": 9}, "sain.AsMut.copy": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 18, "bases": 0, "doc": 31}, "sain.Some": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 5, "doc": 232}, "sain.Some.__init__": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 27, "bases": 0, "doc": 3}, "sain.Some.default": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 10, "bases": 0, "doc": 13}, "sain.Some.read": {"qualname": 2, "fullname": 3, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 7}, "sain.Some.unwrap": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 134}, "sain.Some.unwrap_or": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 33, "bases": 0, "doc": 142}, "sain.Some.unwrap_or_else": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 51, "bases": 0, "doc": 150}, "sain.Some.unwrap_unchecked": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 140}, "sain.Some.expect": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 156}, "sain.Some.map": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 76, "bases": 0, "doc": 145}, "sain.Some.map_or": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 69, "bases": 0, "doc": 212}, "sain.Some.map_or_else": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 91, "bases": 0, "doc": 229}, "sain.Some.filter": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 68, "bases": 0, "doc": 201}, "sain.Some.take": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 87}, "sain.Some.replace": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 44, "bases": 0, "doc": 92}, "sain.Some.and_ok": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 60, "bases": 0, "doc": 167}, "sain.Some.and_then": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 84, "bases": 0, "doc": 189}, "sain.Some.iter": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 137}, "sain.Some.as_ref": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 46, "bases": 0, "doc": 304}, "sain.Some.as_mut": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 46, "bases": 0, "doc": 170}, "sain.Some.is_some": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 124}, "sain.Some.is_some_and": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 48, "bases": 0, "doc": 175}, "sain.Some.is_none": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 123}, "sain.Option": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 3, "signature": 0, "bases": 0, "doc": 3}, "sain.NOTHING": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 3, "signature": 0, "bases": 0, "doc": 3}, "sain.Iter": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 13, "doc": 249}, "sain.Iter.__init__": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 3}, "sain.Iter.default": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 70}, "sain.Iter.collect": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 54, "bases": 0, "doc": 156}, "sain.Iter.to_vec": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 89}, "sain.Iter.copied": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 128}, "sain.Iter.by_ref": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 110}, "sain.Iter.next": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 18, "bases": 0, "doc": 158}, "sain.Iter.map": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 36, "bases": 0, "doc": 172}, "sain.Iter.take": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 42, "bases": 0, "doc": 173}, "sain.Iter.take_while": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 68, "bases": 0, "doc": 180}, "sain.Iter.drop_while": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 68, "bases": 0, "doc": 187}, "sain.Iter.filter": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 68, "bases": 0, "doc": 138}, "sain.Iter.skip": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 42, "bases": 0, "doc": 129}, "sain.Iter.zip": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 33, "bases": 0, "doc": 250}, "sain.Iter.all": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 48, "bases": 0, "doc": 175}, "sain.Iter.any": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 48, "bases": 0, "doc": 180}, "sain.Iter.sort": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 75, "bases": 0, "doc": 177}, "sain.Iter.first": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 18, "bases": 0, "doc": 124}, "sain.Iter.last": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 18, "bases": 0, "doc": 128}, "sain.Iter.reversed": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 137}, "sain.Iter.count": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 71}, "sain.Iter.union": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 60, "bases": 0, "doc": 193}, "sain.Iter.for_each": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 53, "bases": 0, "doc": 129}, "sain.Iter.async_for_each": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 43, "bases": 0, "doc": 292}, "sain.Iter.enumerate": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 64, "bases": 0, "doc": 140}, "sain.todo": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 33, "bases": 0, "doc": 121}, "sain.deprecated": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 127, "bases": 0, "doc": 265}, "sain.unimplemented": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 76, "bases": 0, "doc": 148}, "sain.doc": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 34, "bases": 0, "doc": 142}, "sain.Once": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 364}, "sain.Once.__init__": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 26, "bases": 0, "doc": 3}, "sain.Once.is_set": {"qualname": 3, "fullname": 4, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sain.Once.get": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 26}, "sain.Once.set": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 28, "bases": 0, "doc": 51}, "sain.Once.clear": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 3}, "sain.Once.get_or_init": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 28, "bases": 0, "doc": 24}, "sain.Ok": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 12}, "sain.Ok.__init__": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 17, "bases": 0, "doc": 3}, "sain.Ok.is_ok": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 20, "bases": 0, "doc": 100}, "sain.Ok.is_ok_and": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 48, "bases": 0, "doc": 119}, "sain.Ok.is_err": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 20, "bases": 0, "doc": 90}, "sain.Ok.is_err_and": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 54, "bases": 0, "doc": 119}, "sain.Ok.expect": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 170}, "sain.Ok.unwrap": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 141}, "sain.Ok.unwrap_or": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 33, "bases": 0, "doc": 161}, "sain.Ok.unwrap_or_else": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 52, "bases": 0, "doc": 177}, "sain.Ok.unwrap_err": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 144}, "sain.Ok.ok": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 165}, "sain.Ok.err": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 30, "bases": 0, "doc": 165}, "sain.Ok.inspect": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 53, "bases": 0, "doc": 217}, "sain.Ok.inspect_err": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 53, "bases": 0, "doc": 216}, "sain.Ok.map": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 73, "bases": 0, "doc": 183}, "sain.Ok.map_or": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 69, "bases": 0, "doc": 213}, "sain.Ok.map_or_else": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 97, "bases": 0, "doc": 266}, "sain.Ok.map_err": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 61, "bases": 0, "doc": 170}, "sain.Ok.iter": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 193}, "sain.Err": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 12}, "sain.Err.__init__": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 17, "bases": 0, "doc": 3}, "sain.Err.is_ok": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 20, "bases": 0, "doc": 96}, "sain.Err.is_ok_and": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 54, "bases": 0, "doc": 115}, "sain.Err.is_err": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 20, "bases": 0, "doc": 86}, "sain.Err.is_err_and": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 48, "bases": 0, "doc": 110}, "sain.Err.expect": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 24, "bases": 0, "doc": 3}, "sain.Err.expect_err": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 3}, "sain.Err.unwrap": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 3}, "sain.Err.unwrap_or": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 35, "bases": 0, "doc": 3}, "sain.Err.unwrap_or_else": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 52, "bases": 0, "doc": 3}, "sain.Err.unwrap_err": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 3}, "sain.Err.inspect": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 53, "bases": 0, "doc": 3}, "sain.Err.inspect_err": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 53, "bases": 0, "doc": 3}, "sain.Err.ok": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 30, "bases": 0, "doc": 3}, "sain.Err.err": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 3}, "sain.Err.map": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 56, "bases": 0, "doc": 3}, "sain.Err.map_or": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 69, "bases": 0, "doc": 3}, "sain.Err.map_or_else": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 97, "bases": 0, "doc": 3}, "sain.Err.map_err": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 68, "bases": 0, "doc": 3}, "sain.Err.iter": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 36, "bases": 0, "doc": 3}, "sain.Result": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 7, "signature": 0, "bases": 0, "doc": 3}, "sain.vec": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 233}, "sain.Vec": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 233}, "sain.Vec.__init__": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 45, "bases": 0, "doc": 175}, "sain.Vec.with_capacity": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 42, "bases": 0, "doc": 212}, "sain.Vec.into_inner": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 91}, "sain.Vec.len": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 74}, "sain.Vec.capacity": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 26}, "sain.Vec.iter": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 115}, "sain.Vec.is_empty": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 11}, "sain.Vec.split_off": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 42, "bases": 0, "doc": 102}, "sain.Vec.split_first": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 58, "bases": 0, "doc": 179}, "sain.Vec.first": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 93}, "sain.Vec.truncate": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 24, "bases": 0, "doc": 3}, "sain.Vec.retain": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 45, "bases": 0, "doc": 131}, "sain.Vec.push": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 26, "bases": 0, "doc": 72}, "sain.Vec.append": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 26, "bases": 0, "doc": 11}, "sain.Vec.get": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 42, "bases": 0, "doc": 125}, "sain.Vec.insert": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 36, "bases": 0, "doc": 101}, "sain.Vec.pop": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 52, "bases": 0, "doc": 120}, "sain.Vec.remove": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 26, "bases": 0, "doc": 117}, "sain.Vec.swap_remove": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 28, "bases": 0, "doc": 143}, "sain.Vec.extend": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 42, "bases": 0, "doc": 128}, "sain.Vec.copy": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 110}, "sain.Vec.clear": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 83}, "sain.cfg.cfg_attr": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 306, "bases": 0, "doc": 531}, "sain.cfg.cfg": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 274, "bases": 0, "doc": 387}, "sain.futures": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 7}, "sain.futures.spawn": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 122, "bases": 0, "doc": 238}, "sain.futures.loop": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 20, "bases": 0, "doc": 29}, "sain.iter": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 10}, "sain.iter.Iter": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 13, "doc": 249}, "sain.iter.Iter.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 3}, "sain.iter.Iter.default": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 70}, "sain.iter.Iter.collect": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 54, "bases": 0, "doc": 156}, "sain.iter.Iter.to_vec": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 89}, "sain.iter.Iter.copied": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 128}, "sain.iter.Iter.by_ref": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 110}, "sain.iter.Iter.next": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 18, "bases": 0, "doc": 158}, "sain.iter.Iter.map": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 36, "bases": 0, "doc": 172}, "sain.iter.Iter.take": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 42, "bases": 0, "doc": 173}, "sain.iter.Iter.take_while": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 68, "bases": 0, "doc": 180}, "sain.iter.Iter.drop_while": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 68, "bases": 0, "doc": 187}, "sain.iter.Iter.filter": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 68, "bases": 0, "doc": 138}, "sain.iter.Iter.skip": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 42, "bases": 0, "doc": 129}, "sain.iter.Iter.zip": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 33, "bases": 0, "doc": 250}, "sain.iter.Iter.all": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 48, "bases": 0, "doc": 175}, "sain.iter.Iter.any": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 48, "bases": 0, "doc": 180}, "sain.iter.Iter.sort": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 75, "bases": 0, "doc": 177}, "sain.iter.Iter.first": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 18, "bases": 0, "doc": 124}, "sain.iter.Iter.last": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 18, "bases": 0, "doc": 128}, "sain.iter.Iter.reversed": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 137}, "sain.iter.Iter.count": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 71}, "sain.iter.Iter.union": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 60, "bases": 0, "doc": 193}, "sain.iter.Iter.for_each": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 53, "bases": 0, "doc": 129}, "sain.iter.Iter.async_for_each": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 43, "bases": 0, "doc": 292}, "sain.iter.Iter.enumerate": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 64, "bases": 0, "doc": 140}, "sain.iter.iter": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 55, "bases": 0, "doc": 125}, "sain.iter.empty": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 69}, "sain.iter.once": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 39, "bases": 0, "doc": 112}, "sain.vec.Vec": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 233}, "sain.vec.Vec.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 45, "bases": 0, "doc": 175}, "sain.vec.Vec.with_capacity": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 42, "bases": 0, "doc": 212}, "sain.vec.Vec.into_inner": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 91}, "sain.vec.Vec.len": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 74}, "sain.vec.Vec.capacity": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 26}, "sain.vec.Vec.iter": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 115}, "sain.vec.Vec.is_empty": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 11}, "sain.vec.Vec.split_off": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 42, "bases": 0, "doc": 102}, "sain.vec.Vec.split_first": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 58, "bases": 0, "doc": 179}, "sain.vec.Vec.first": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 93}, "sain.vec.Vec.truncate": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 24, "bases": 0, "doc": 3}, "sain.vec.Vec.retain": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 45, "bases": 0, "doc": 131}, "sain.vec.Vec.push": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 26, "bases": 0, "doc": 72}, "sain.vec.Vec.append": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 26, "bases": 0, "doc": 11}, "sain.vec.Vec.get": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 42, "bases": 0, "doc": 125}, "sain.vec.Vec.insert": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 36, "bases": 0, "doc": 101}, "sain.vec.Vec.pop": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 52, "bases": 0, "doc": 120}, "sain.vec.Vec.remove": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 26, "bases": 0, "doc": 117}, "sain.vec.Vec.swap_remove": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 28, "bases": 0, "doc": 143}, "sain.vec.Vec.extend": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 42, "bases": 0, "doc": 128}, "sain.vec.Vec.copy": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 110}, "sain.vec.Vec.clear": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 83}, "sain.vec.vec": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 41, "bases": 0, "doc": 86}}, "length": 201, "save": true}, "index": {"qualname": {"root": {"docs": {"sain.Default.__init__": {"tf": 1}, "sain.AsRef.__init__": {"tf": 1}, "sain.AsMut.__init__": {"tf": 1}, "sain.Some.__init__": {"tf": 1}, "sain.Iter.__init__": {"tf": 1}, "sain.Once.__init__": {"tf": 1}, "sain.Ok.__init__": {"tf": 1}, "sain.Err.__init__": {"tf": 1}, "sain.Vec.__init__": {"tf": 1}, "sain.iter.Iter.__init__": {"tf": 1}, "sain.vec.Vec.__init__": {"tf": 1}}, "df": 11, "c": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "g": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 4}}, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "y": {"docs": {"sain.AsRef.copy": {"tf": 1}, "sain.AsMut.copy": {"tf": 1}, "sain.Vec.copy": {"tf": 1}, "sain.vec.Vec.copy": {"tf": 1}}, "df": 4}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.Iter.copied": {"tf": 1}, "sain.iter.Iter.copied": {"tf": 1}}, "df": 2}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"sain.Iter.collect": {"tf": 1}, "sain.iter.Iter.collect": {"tf": 1}}, "df": 2}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"sain.Iter.count": {"tf": 1}, "sain.iter.Iter.count": {"tf": 1}}, "df": 2}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"sain.Once.clear": {"tf": 1}, "sain.Vec.clear": {"tf": 1}, "sain.vec.Vec.clear": {"tf": 1}}, "df": 3}}}}, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"sain.Vec.with_capacity": {"tf": 1}, "sain.Vec.capacity": {"tf": 1}, "sain.vec.Vec.with_capacity": {"tf": 1}, "sain.vec.Vec.capacity": {"tf": 1}}, "df": 4}}}}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {"sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}}, "df": 2}}}, "s": {"docs": {"sain.Some.as_ref": {"tf": 1}, "sain.Some.as_mut": {"tf": 1}}, "df": 2, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {"sain.AsRef": {"tf": 1}, "sain.AsRef.__init__": {"tf": 1}, "sain.AsRef.object": {"tf": 1}, "sain.AsRef.copy": {"tf": 1}}, "df": 4}}}, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"sain.AsMut": {"tf": 1}, "sain.AsMut.__init__": {"tf": 1}, "sain.AsMut.object": {"tf": 1}, "sain.AsMut.copy": {"tf": 1}}, "df": 4}}}, "y": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {"sain.Iter.async_for_each": {"tf": 1}, "sain.iter.Iter.async_for_each": {"tf": 1}}, "df": 2}}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {"sain.Some.and_ok": {"tf": 1}, "sain.Some.and_then": {"tf": 1}, "sain.Some.is_some_and": {"tf": 1}, "sain.Ok.is_ok_and": {"tf": 1}, "sain.Ok.is_err_and": {"tf": 1}, "sain.Err.is_ok_and": {"tf": 1}, "sain.Err.is_err_and": {"tf": 1}}, "df": 7}, "y": {"docs": {"sain.Iter.any": {"tf": 1}, "sain.iter.Iter.any": {"tf": 1}}, "df": 2}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"sain.Iter.all": {"tf": 1}, "sain.iter.Iter.all": {"tf": 1}}, "df": 2}}, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"sain.Vec.append": {"tf": 1}, "sain.vec.Vec.append": {"tf": 1}}, "df": 2}}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"sain.Default": {"tf": 1}, "sain.Default.__init__": {"tf": 1}, "sain.Default.default": {"tf": 1.4142135623730951}, "sain.Some.default": {"tf": 1}, "sain.Iter.default": {"tf": 1}, "sain.iter.Iter.default": {"tf": 1}}, "df": 6}}}}}, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.deprecated": {"tf": 1}}, "df": 1}}}}}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {"sain.Iter.drop_while": {"tf": 1}, "sain.iter.Iter.drop_while": {"tf": 1}}, "df": 2}}}, "o": {"docs": {}, "df": 0, "c": {"docs": {"sain.doc": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"sain.Default.__init__": {"tf": 1}, "sain.AsRef.__init__": {"tf": 1}, "sain.AsMut.__init__": {"tf": 1}, "sain.Some.__init__": {"tf": 1}, "sain.Iter.__init__": {"tf": 1}, "sain.Once.__init__": {"tf": 1}, "sain.Once.get_or_init": {"tf": 1}, "sain.Ok.__init__": {"tf": 1}, "sain.Err.__init__": {"tf": 1}, "sain.Vec.__init__": {"tf": 1}, "sain.iter.Iter.__init__": {"tf": 1}, "sain.vec.Vec.__init__": {"tf": 1}}, "df": 12}}, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"sain.Ok.inspect": {"tf": 1}, "sain.Ok.inspect_err": {"tf": 1}, "sain.Err.inspect": {"tf": 1}, "sain.Err.inspect_err": {"tf": 1}}, "df": 4}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"sain.Vec.insert": {"tf": 1}, "sain.vec.Vec.insert": {"tf": 1}}, "df": 2}}}}, "t": {"docs": {}, "df": 0, "o": {"docs": {"sain.Vec.into_inner": {"tf": 1}, "sain.vec.Vec.into_inner": {"tf": 1}}, "df": 2}}, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sain.Vec.into_inner": {"tf": 1}, "sain.vec.Vec.into_inner": {"tf": 1}}, "df": 2}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sain.Some.iter": {"tf": 1}, "sain.Iter": {"tf": 1}, "sain.Iter.__init__": {"tf": 1}, "sain.Iter.default": {"tf": 1}, "sain.Iter.collect": {"tf": 1}, "sain.Iter.to_vec": {"tf": 1}, "sain.Iter.copied": {"tf": 1}, "sain.Iter.by_ref": {"tf": 1}, "sain.Iter.next": {"tf": 1}, "sain.Iter.map": {"tf": 1}, "sain.Iter.take": {"tf": 1}, "sain.Iter.take_while": {"tf": 1}, "sain.Iter.drop_while": {"tf": 1}, "sain.Iter.filter": {"tf": 1}, "sain.Iter.skip": {"tf": 1}, "sain.Iter.zip": {"tf": 1}, "sain.Iter.all": {"tf": 1}, "sain.Iter.any": {"tf": 1}, "sain.Iter.sort": {"tf": 1}, "sain.Iter.first": {"tf": 1}, "sain.Iter.last": {"tf": 1}, "sain.Iter.reversed": {"tf": 1}, "sain.Iter.count": {"tf": 1}, "sain.Iter.union": {"tf": 1}, "sain.Iter.for_each": {"tf": 1}, "sain.Iter.async_for_each": {"tf": 1}, "sain.Iter.enumerate": {"tf": 1}, "sain.Ok.iter": {"tf": 1}, "sain.Err.iter": {"tf": 1}, "sain.Vec.iter": {"tf": 1}, "sain.iter.Iter": {"tf": 1}, "sain.iter.Iter.__init__": {"tf": 1}, "sain.iter.Iter.default": {"tf": 1}, "sain.iter.Iter.collect": {"tf": 1}, "sain.iter.Iter.to_vec": {"tf": 1}, "sain.iter.Iter.copied": {"tf": 1}, "sain.iter.Iter.by_ref": {"tf": 1}, "sain.iter.Iter.next": {"tf": 1}, "sain.iter.Iter.map": {"tf": 1}, "sain.iter.Iter.take": {"tf": 1}, "sain.iter.Iter.take_while": {"tf": 1}, "sain.iter.Iter.drop_while": {"tf": 1}, "sain.iter.Iter.filter": {"tf": 1}, "sain.iter.Iter.skip": {"tf": 1}, "sain.iter.Iter.zip": {"tf": 1}, "sain.iter.Iter.all": {"tf": 1}, "sain.iter.Iter.any": {"tf": 1}, "sain.iter.Iter.sort": {"tf": 1}, "sain.iter.Iter.first": {"tf": 1}, "sain.iter.Iter.last": {"tf": 1}, "sain.iter.Iter.reversed": {"tf": 1}, "sain.iter.Iter.count": {"tf": 1}, "sain.iter.Iter.union": {"tf": 1}, "sain.iter.Iter.for_each": {"tf": 1}, "sain.iter.Iter.async_for_each": {"tf": 1}, "sain.iter.Iter.enumerate": {"tf": 1}, "sain.iter.iter": {"tf": 1}, "sain.vec.Vec.iter": {"tf": 1}}, "df": 58}}}, "s": {"docs": {"sain.Some.is_some": {"tf": 1}, "sain.Some.is_some_and": {"tf": 1}, "sain.Some.is_none": {"tf": 1}, "sain.Once.is_set": {"tf": 1}, "sain.Ok.is_ok": {"tf": 1}, "sain.Ok.is_ok_and": {"tf": 1}, "sain.Ok.is_err": {"tf": 1}, "sain.Ok.is_err_and": {"tf": 1}, "sain.Err.is_ok": {"tf": 1}, "sain.Err.is_ok_and": {"tf": 1}, "sain.Err.is_err": {"tf": 1}, "sain.Err.is_err_and": {"tf": 1}, "sain.Vec.is_empty": {"tf": 1}, "sain.vec.Vec.is_empty": {"tf": 1}}, "df": 14}}, "o": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "j": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"sain.AsRef.object": {"tf": 1}, "sain.AsMut.object": {"tf": 1}}, "df": 2}}}}}, "r": {"docs": {"sain.Some.unwrap_or": {"tf": 1}, "sain.Some.unwrap_or_else": {"tf": 1}, "sain.Some.map_or": {"tf": 1}, "sain.Some.map_or_else": {"tf": 1}, "sain.Once.get_or_init": {"tf": 1}, "sain.Ok.unwrap_or": {"tf": 1}, "sain.Ok.unwrap_or_else": {"tf": 1}, "sain.Ok.map_or": {"tf": 1}, "sain.Ok.map_or_else": {"tf": 1}, "sain.Err.unwrap_or": {"tf": 1}, "sain.Err.unwrap_or_else": {"tf": 1}, "sain.Err.map_or": {"tf": 1}, "sain.Err.map_or_else": {"tf": 1}}, "df": 13}, "k": {"docs": {"sain.Some.and_ok": {"tf": 1}, "sain.Ok": {"tf": 1}, "sain.Ok.__init__": {"tf": 1}, "sain.Ok.is_ok": {"tf": 1.4142135623730951}, "sain.Ok.is_ok_and": {"tf": 1.4142135623730951}, "sain.Ok.is_err": {"tf": 1}, "sain.Ok.is_err_and": {"tf": 1}, "sain.Ok.expect": {"tf": 1}, "sain.Ok.unwrap": {"tf": 1}, "sain.Ok.unwrap_or": {"tf": 1}, "sain.Ok.unwrap_or_else": {"tf": 1}, "sain.Ok.unwrap_err": {"tf": 1}, "sain.Ok.ok": {"tf": 1.4142135623730951}, "sain.Ok.err": {"tf": 1}, "sain.Ok.inspect": {"tf": 1}, "sain.Ok.inspect_err": {"tf": 1}, "sain.Ok.map": {"tf": 1}, "sain.Ok.map_or": {"tf": 1}, "sain.Ok.map_or_else": {"tf": 1}, "sain.Ok.map_err": {"tf": 1}, "sain.Ok.iter": {"tf": 1}, "sain.Err.is_ok": {"tf": 1}, "sain.Err.is_ok_and": {"tf": 1}, "sain.Err.ok": {"tf": 1}}, "df": 24}, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.Option": {"tf": 1}}, "df": 1}}}}}, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sain.Once": {"tf": 1}, "sain.Once.__init__": {"tf": 1}, "sain.Once.is_set": {"tf": 1}, "sain.Once.get": {"tf": 1}, "sain.Once.set": {"tf": 1}, "sain.Once.clear": {"tf": 1}, "sain.Once.get_or_init": {"tf": 1}, "sain.iter.once": {"tf": 1}}, "df": 8}}}, "f": {"docs": {}, "df": 0, "f": {"docs": {"sain.Vec.split_off": {"tf": 1}, "sain.vec.Vec.split_off": {"tf": 1}}, "df": 2}}}, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"sain.Some": {"tf": 1}, "sain.Some.__init__": {"tf": 1}, "sain.Some.default": {"tf": 1}, "sain.Some.read": {"tf": 1}, "sain.Some.unwrap": {"tf": 1}, "sain.Some.unwrap_or": {"tf": 1}, "sain.Some.unwrap_or_else": {"tf": 1}, "sain.Some.unwrap_unchecked": {"tf": 1}, "sain.Some.expect": {"tf": 1}, "sain.Some.map": {"tf": 1}, "sain.Some.map_or": {"tf": 1}, "sain.Some.map_or_else": {"tf": 1}, "sain.Some.filter": {"tf": 1}, "sain.Some.take": {"tf": 1}, "sain.Some.replace": {"tf": 1}, "sain.Some.and_ok": {"tf": 1}, "sain.Some.and_then": {"tf": 1}, "sain.Some.iter": {"tf": 1}, "sain.Some.as_ref": {"tf": 1}, "sain.Some.as_mut": {"tf": 1}, "sain.Some.is_some": {"tf": 1.4142135623730951}, "sain.Some.is_some_and": {"tf": 1.4142135623730951}, "sain.Some.is_none": {"tf": 1}}, "df": 23}}, "r": {"docs": {}, "df": 0, "t": {"docs": {"sain.Iter.sort": {"tf": 1}, "sain.iter.Iter.sort": {"tf": 1}}, "df": 2}}}, "k": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {"sain.Iter.skip": {"tf": 1}, "sain.iter.Iter.skip": {"tf": 1}}, "df": 2}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {"sain.Once.is_set": {"tf": 1}, "sain.Once.set": {"tf": 1}}, "df": 2}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"sain.Vec.split_off": {"tf": 1}, "sain.Vec.split_first": {"tf": 1}, "sain.vec.Vec.split_off": {"tf": 1}, "sain.vec.Vec.split_first": {"tf": 1}}, "df": 4}}}, "a": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "n": {"docs": {"sain.futures.spawn": {"tf": 1}}, "df": 1}}}}, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {"sain.Vec.swap_remove": {"tf": 1}, "sain.vec.Vec.swap_remove": {"tf": 1}}, "df": 2}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {"sain.Some.read": {"tf": 1}}, "df": 1}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sain.Some.replace": {"tf": 1}}, "df": 1}}}}}, "f": {"docs": {"sain.Some.as_ref": {"tf": 1}, "sain.Iter.by_ref": {"tf": 1}, "sain.iter.Iter.by_ref": {"tf": 1}}, "df": 3}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.Iter.reversed": {"tf": 1}, "sain.iter.Iter.reversed": {"tf": 1}}, "df": 2}}}}}}, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"sain.Result": {"tf": 1}}, "df": 1}}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"sain.Vec.retain": {"tf": 1}, "sain.vec.Vec.retain": {"tf": 1}}, "df": 2}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"sain.Vec.remove": {"tf": 1}, "sain.Vec.swap_remove": {"tf": 1}, "sain.vec.Vec.remove": {"tf": 1}, "sain.vec.Vec.swap_remove": {"tf": 1}}, "df": 4}}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {"sain.Some.unwrap": {"tf": 1}, "sain.Some.unwrap_or": {"tf": 1}, "sain.Some.unwrap_or_else": {"tf": 1}, "sain.Some.unwrap_unchecked": {"tf": 1}, "sain.Ok.unwrap": {"tf": 1}, "sain.Ok.unwrap_or": {"tf": 1}, "sain.Ok.unwrap_or_else": {"tf": 1}, "sain.Ok.unwrap_err": {"tf": 1}, "sain.Err.unwrap": {"tf": 1}, "sain.Err.unwrap_or": {"tf": 1}, "sain.Err.unwrap_or_else": {"tf": 1}, "sain.Err.unwrap_err": {"tf": 1}}, "df": 12}}}}, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.Some.unwrap_unchecked": {"tf": 1}}, "df": 1}}}}}}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.Iter.union": {"tf": 1}, "sain.iter.Iter.union": {"tf": 1}}, "df": 2}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.unimplemented": {"tf": 1}}, "df": 1}}}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"sain.Some.unwrap_or_else": {"tf": 1}, "sain.Some.map_or_else": {"tf": 1}, "sain.Ok.unwrap_or_else": {"tf": 1}, "sain.Ok.map_or_else": {"tf": 1}, "sain.Err.unwrap_or_else": {"tf": 1}, "sain.Err.map_or_else": {"tf": 1}}, "df": 6}}}, "x": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"sain.Some.expect": {"tf": 1}, "sain.Ok.expect": {"tf": 1}, "sain.Err.expect": {"tf": 1}, "sain.Err.expect_err": {"tf": 1}}, "df": 4}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"sain.Vec.extend": {"tf": 1}, "sain.vec.Vec.extend": {"tf": 1}}, "df": 2}}}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"sain.Iter.for_each": {"tf": 1}, "sain.Iter.async_for_each": {"tf": 1}, "sain.iter.Iter.for_each": {"tf": 1}, "sain.iter.Iter.async_for_each": {"tf": 1}}, "df": 4}}}, "n": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"sain.Iter.enumerate": {"tf": 1}, "sain.iter.Iter.enumerate": {"tf": 1}}, "df": 2}}}}}}}}, "r": {"docs": {}, "df": 0, "r": {"docs": {"sain.Ok.is_err": {"tf": 1}, "sain.Ok.is_err_and": {"tf": 1}, "sain.Ok.unwrap_err": {"tf": 1}, "sain.Ok.err": {"tf": 1}, "sain.Ok.inspect_err": {"tf": 1}, "sain.Ok.map_err": {"tf": 1}, "sain.Err": {"tf": 1}, "sain.Err.__init__": {"tf": 1}, "sain.Err.is_ok": {"tf": 1}, "sain.Err.is_ok_and": {"tf": 1}, "sain.Err.is_err": {"tf": 1.4142135623730951}, "sain.Err.is_err_and": {"tf": 1.4142135623730951}, "sain.Err.expect": {"tf": 1}, "sain.Err.expect_err": {"tf": 1.4142135623730951}, "sain.Err.unwrap": {"tf": 1}, "sain.Err.unwrap_or": {"tf": 1}, "sain.Err.unwrap_or_else": {"tf": 1}, "sain.Err.unwrap_err": {"tf": 1.4142135623730951}, "sain.Err.inspect": {"tf": 1}, "sain.Err.inspect_err": {"tf": 1.4142135623730951}, "sain.Err.ok": {"tf": 1}, "sain.Err.err": {"tf": 1.4142135623730951}, "sain.Err.map": {"tf": 1}, "sain.Err.map_or": {"tf": 1}, "sain.Err.map_or_else": {"tf": 1}, "sain.Err.map_err": {"tf": 1.4142135623730951}, "sain.Err.iter": {"tf": 1}}, "df": 27}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"sain.Vec.is_empty": {"tf": 1}, "sain.iter.empty": {"tf": 1}, "sain.vec.Vec.is_empty": {"tf": 1}}, "df": 3}}}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {"sain.Some.map": {"tf": 1}, "sain.Some.map_or": {"tf": 1}, "sain.Some.map_or_else": {"tf": 1}, "sain.Iter.map": {"tf": 1}, "sain.Ok.map": {"tf": 1}, "sain.Ok.map_or": {"tf": 1}, "sain.Ok.map_or_else": {"tf": 1}, "sain.Ok.map_err": {"tf": 1}, "sain.Err.map": {"tf": 1}, "sain.Err.map_or": {"tf": 1}, "sain.Err.map_or_else": {"tf": 1}, "sain.Err.map_err": {"tf": 1}, "sain.iter.Iter.map": {"tf": 1}}, "df": 13}}, "u": {"docs": {}, "df": 0, "t": {"docs": {"sain.Some.as_mut": {"tf": 1}}, "df": 1}}}, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sain.Some.filter": {"tf": 1}, "sain.Iter.filter": {"tf": 1}, "sain.iter.Iter.filter": {"tf": 1}}, "df": 3}}}}, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"sain.Iter.first": {"tf": 1}, "sain.Vec.split_first": {"tf": 1}, "sain.Vec.first": {"tf": 1}, "sain.iter.Iter.first": {"tf": 1}, "sain.vec.Vec.split_first": {"tf": 1}, "sain.vec.Vec.first": {"tf": 1}}, "df": 6}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {"sain.Iter.for_each": {"tf": 1}, "sain.Iter.async_for_each": {"tf": 1}, "sain.iter.Iter.for_each": {"tf": 1}, "sain.iter.Iter.async_for_each": {"tf": 1}}, "df": 4}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {"sain.Some.take": {"tf": 1}, "sain.Iter.take": {"tf": 1}, "sain.Iter.take_while": {"tf": 1}, "sain.iter.Iter.take": {"tf": 1}, "sain.iter.Iter.take_while": {"tf": 1}}, "df": 5}}}, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"sain.Some.and_then": {"tf": 1}}, "df": 1}}}, "o": {"docs": {"sain.Iter.to_vec": {"tf": 1}, "sain.iter.Iter.to_vec": {"tf": 1}}, "df": 2, "d": {"docs": {}, "df": 0, "o": {"docs": {"sain.todo": {"tf": 1}}, "df": 1}}}, "r": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"sain.Vec.truncate": {"tf": 1}, "sain.vec.Vec.truncate": {"tf": 1}}, "df": 2}}}}}}}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"sain.Some.is_none": {"tf": 1}}, "df": 1}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.NOTHING": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "t": {"docs": {"sain.Iter.next": {"tf": 1}, "sain.iter.Iter.next": {"tf": 1}}, "df": 2}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {"sain.Iter.to_vec": {"tf": 1}, "sain.vec": {"tf": 1}, "sain.Vec": {"tf": 1}, "sain.Vec.__init__": {"tf": 1}, "sain.Vec.with_capacity": {"tf": 1}, "sain.Vec.into_inner": {"tf": 1}, "sain.Vec.len": {"tf": 1}, "sain.Vec.capacity": {"tf": 1}, "sain.Vec.iter": {"tf": 1}, "sain.Vec.is_empty": {"tf": 1}, "sain.Vec.split_off": {"tf": 1}, "sain.Vec.split_first": {"tf": 1}, "sain.Vec.first": {"tf": 1}, "sain.Vec.truncate": {"tf": 1}, "sain.Vec.retain": {"tf": 1}, "sain.Vec.push": {"tf": 1}, "sain.Vec.append": {"tf": 1}, "sain.Vec.get": {"tf": 1}, "sain.Vec.insert": {"tf": 1}, "sain.Vec.pop": {"tf": 1}, "sain.Vec.remove": {"tf": 1}, "sain.Vec.swap_remove": {"tf": 1}, "sain.Vec.extend": {"tf": 1}, "sain.Vec.copy": {"tf": 1}, "sain.Vec.clear": {"tf": 1}, "sain.iter.Iter.to_vec": {"tf": 1}, "sain.vec.Vec": {"tf": 1}, "sain.vec.Vec.__init__": {"tf": 1}, "sain.vec.Vec.with_capacity": {"tf": 1}, "sain.vec.Vec.into_inner": {"tf": 1}, "sain.vec.Vec.len": {"tf": 1}, "sain.vec.Vec.capacity": {"tf": 1}, "sain.vec.Vec.iter": {"tf": 1}, "sain.vec.Vec.is_empty": {"tf": 1}, "sain.vec.Vec.split_off": {"tf": 1}, "sain.vec.Vec.split_first": {"tf": 1}, "sain.vec.Vec.first": {"tf": 1}, "sain.vec.Vec.truncate": {"tf": 1}, "sain.vec.Vec.retain": {"tf": 1}, "sain.vec.Vec.push": {"tf": 1}, "sain.vec.Vec.append": {"tf": 1}, "sain.vec.Vec.get": {"tf": 1}, "sain.vec.Vec.insert": {"tf": 1}, "sain.vec.Vec.pop": {"tf": 1}, "sain.vec.Vec.remove": {"tf": 1}, "sain.vec.Vec.swap_remove": {"tf": 1}, "sain.vec.Vec.extend": {"tf": 1}, "sain.vec.Vec.copy": {"tf": 1}, "sain.vec.Vec.clear": {"tf": 1}, "sain.vec.vec": {"tf": 1}}, "df": 50}}}, "b": {"docs": {}, "df": 0, "y": {"docs": {"sain.Iter.by_ref": {"tf": 1}, "sain.iter.Iter.by_ref": {"tf": 1}}, "df": 2}}, "w": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sain.Iter.take_while": {"tf": 1}, "sain.Iter.drop_while": {"tf": 1}, "sain.iter.Iter.take_while": {"tf": 1}, "sain.iter.Iter.drop_while": {"tf": 1}}, "df": 4}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"sain.Vec.with_capacity": {"tf": 1}, "sain.vec.Vec.with_capacity": {"tf": 1}}, "df": 2}}}}, "z": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {"sain.Iter.zip": {"tf": 1}, "sain.iter.Iter.zip": {"tf": 1}}, "df": 2}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"sain.Iter.last": {"tf": 1}, "sain.iter.Iter.last": {"tf": 1}}, "df": 2}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {"sain.Vec.len": {"tf": 1}, "sain.vec.Vec.len": {"tf": 1}}, "df": 2}}, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {"sain.futures.loop": {"tf": 1}}, "df": 1}}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"sain.Once.get": {"tf": 1}, "sain.Once.get_or_init": {"tf": 1}, "sain.Vec.get": {"tf": 1}, "sain.vec.Vec.get": {"tf": 1}}, "df": 4}}}, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "h": {"docs": {"sain.Vec.push": {"tf": 1}, "sain.vec.Vec.push": {"tf": 1}}, "df": 2}}}, "o": {"docs": {}, "df": 0, "p": {"docs": {"sain.Vec.pop": {"tf": 1}, "sain.vec.Vec.pop": {"tf": 1}}, "df": 2}}}}}, "fullname": {"root": {"docs": {"sain.Default.__init__": {"tf": 1}, "sain.AsRef.__init__": {"tf": 1}, "sain.AsMut.__init__": {"tf": 1}, "sain.Some.__init__": {"tf": 1}, "sain.Iter.__init__": {"tf": 1}, "sain.Once.__init__": {"tf": 1}, "sain.Ok.__init__": {"tf": 1}, "sain.Err.__init__": {"tf": 1}, "sain.Vec.__init__": {"tf": 1}, "sain.iter.Iter.__init__": {"tf": 1}, "sain.vec.Vec.__init__": {"tf": 1}}, "df": 11, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"sain": {"tf": 1}, "sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.Default": {"tf": 1}, "sain.Default.__init__": {"tf": 1}, "sain.Default.default": {"tf": 1}, "sain.AsRef": {"tf": 1}, "sain.AsRef.__init__": {"tf": 1}, "sain.AsRef.object": {"tf": 1}, "sain.AsRef.copy": {"tf": 1}, "sain.AsMut": {"tf": 1}, "sain.AsMut.__init__": {"tf": 1}, "sain.AsMut.object": {"tf": 1}, "sain.AsMut.copy": {"tf": 1}, "sain.Some": {"tf": 1}, "sain.Some.__init__": {"tf": 1}, "sain.Some.default": {"tf": 1}, "sain.Some.read": {"tf": 1}, "sain.Some.unwrap": {"tf": 1}, "sain.Some.unwrap_or": {"tf": 1}, "sain.Some.unwrap_or_else": {"tf": 1}, "sain.Some.unwrap_unchecked": {"tf": 1}, "sain.Some.expect": {"tf": 1}, "sain.Some.map": {"tf": 1}, "sain.Some.map_or": {"tf": 1}, "sain.Some.map_or_else": {"tf": 1}, "sain.Some.filter": {"tf": 1}, "sain.Some.take": {"tf": 1}, "sain.Some.replace": {"tf": 1}, "sain.Some.and_ok": {"tf": 1}, "sain.Some.and_then": {"tf": 1}, "sain.Some.iter": {"tf": 1}, "sain.Some.as_ref": {"tf": 1}, "sain.Some.as_mut": {"tf": 1}, "sain.Some.is_some": {"tf": 1}, "sain.Some.is_some_and": {"tf": 1}, "sain.Some.is_none": {"tf": 1}, "sain.Option": {"tf": 1}, "sain.NOTHING": {"tf": 1}, "sain.Iter": {"tf": 1}, "sain.Iter.__init__": {"tf": 1}, "sain.Iter.default": {"tf": 1}, "sain.Iter.collect": {"tf": 1}, "sain.Iter.to_vec": {"tf": 1}, "sain.Iter.copied": {"tf": 1}, "sain.Iter.by_ref": {"tf": 1}, "sain.Iter.next": {"tf": 1}, "sain.Iter.map": {"tf": 1}, "sain.Iter.take": {"tf": 1}, "sain.Iter.take_while": {"tf": 1}, "sain.Iter.drop_while": {"tf": 1}, "sain.Iter.filter": {"tf": 1}, "sain.Iter.skip": {"tf": 1}, "sain.Iter.zip": {"tf": 1}, "sain.Iter.all": {"tf": 1}, "sain.Iter.any": {"tf": 1}, "sain.Iter.sort": {"tf": 1}, "sain.Iter.first": {"tf": 1}, "sain.Iter.last": {"tf": 1}, "sain.Iter.reversed": {"tf": 1}, "sain.Iter.count": {"tf": 1}, "sain.Iter.union": {"tf": 1}, "sain.Iter.for_each": {"tf": 1}, "sain.Iter.async_for_each": {"tf": 1}, "sain.Iter.enumerate": {"tf": 1}, "sain.todo": {"tf": 1}, "sain.deprecated": {"tf": 1}, "sain.unimplemented": {"tf": 1}, "sain.doc": {"tf": 1}, "sain.Once": {"tf": 1}, "sain.Once.__init__": {"tf": 1}, "sain.Once.is_set": {"tf": 1}, "sain.Once.get": {"tf": 1}, "sain.Once.set": {"tf": 1}, "sain.Once.clear": {"tf": 1}, "sain.Once.get_or_init": {"tf": 1}, "sain.Ok": {"tf": 1}, "sain.Ok.__init__": {"tf": 1}, "sain.Ok.is_ok": {"tf": 1}, "sain.Ok.is_ok_and": {"tf": 1}, "sain.Ok.is_err": {"tf": 1}, "sain.Ok.is_err_and": {"tf": 1}, "sain.Ok.expect": {"tf": 1}, "sain.Ok.unwrap": {"tf": 1}, "sain.Ok.unwrap_or": {"tf": 1}, "sain.Ok.unwrap_or_else": {"tf": 1}, "sain.Ok.unwrap_err": {"tf": 1}, "sain.Ok.ok": {"tf": 1}, "sain.Ok.err": {"tf": 1}, "sain.Ok.inspect": {"tf": 1}, "sain.Ok.inspect_err": {"tf": 1}, "sain.Ok.map": {"tf": 1}, "sain.Ok.map_or": {"tf": 1}, "sain.Ok.map_or_else": {"tf": 1}, "sain.Ok.map_err": {"tf": 1}, "sain.Ok.iter": {"tf": 1}, "sain.Err": {"tf": 1}, "sain.Err.__init__": {"tf": 1}, "sain.Err.is_ok": {"tf": 1}, "sain.Err.is_ok_and": {"tf": 1}, "sain.Err.is_err": {"tf": 1}, "sain.Err.is_err_and": {"tf": 1}, "sain.Err.expect": {"tf": 1}, "sain.Err.expect_err": {"tf": 1}, "sain.Err.unwrap": {"tf": 1}, "sain.Err.unwrap_or": {"tf": 1}, "sain.Err.unwrap_or_else": {"tf": 1}, "sain.Err.unwrap_err": {"tf": 1}, "sain.Err.inspect": {"tf": 1}, "sain.Err.inspect_err": {"tf": 1}, "sain.Err.ok": {"tf": 1}, "sain.Err.err": {"tf": 1}, "sain.Err.map": {"tf": 1}, "sain.Err.map_or": {"tf": 1}, "sain.Err.map_or_else": {"tf": 1}, "sain.Err.map_err": {"tf": 1}, "sain.Err.iter": {"tf": 1}, "sain.Result": {"tf": 1}, "sain.vec": {"tf": 1}, "sain.Vec": {"tf": 1}, "sain.Vec.__init__": {"tf": 1}, "sain.Vec.with_capacity": {"tf": 1}, "sain.Vec.into_inner": {"tf": 1}, "sain.Vec.len": {"tf": 1}, "sain.Vec.capacity": {"tf": 1}, "sain.Vec.iter": {"tf": 1}, "sain.Vec.is_empty": {"tf": 1}, "sain.Vec.split_off": {"tf": 1}, "sain.Vec.split_first": {"tf": 1}, "sain.Vec.first": {"tf": 1}, "sain.Vec.truncate": {"tf": 1}, "sain.Vec.retain": {"tf": 1}, "sain.Vec.push": {"tf": 1}, "sain.Vec.append": {"tf": 1}, "sain.Vec.get": {"tf": 1}, "sain.Vec.insert": {"tf": 1}, "sain.Vec.pop": {"tf": 1}, "sain.Vec.remove": {"tf": 1}, "sain.Vec.swap_remove": {"tf": 1}, "sain.Vec.extend": {"tf": 1}, "sain.Vec.copy": {"tf": 1}, "sain.Vec.clear": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}, "sain.futures": {"tf": 1}, "sain.futures.spawn": {"tf": 1}, "sain.futures.loop": {"tf": 1}, "sain.iter": {"tf": 1}, "sain.iter.Iter": {"tf": 1}, "sain.iter.Iter.__init__": {"tf": 1}, "sain.iter.Iter.default": {"tf": 1}, "sain.iter.Iter.collect": {"tf": 1}, "sain.iter.Iter.to_vec": {"tf": 1}, "sain.iter.Iter.copied": {"tf": 1}, "sain.iter.Iter.by_ref": {"tf": 1}, "sain.iter.Iter.next": {"tf": 1}, "sain.iter.Iter.map": {"tf": 1}, "sain.iter.Iter.take": {"tf": 1}, "sain.iter.Iter.take_while": {"tf": 1}, "sain.iter.Iter.drop_while": {"tf": 1}, "sain.iter.Iter.filter": {"tf": 1}, "sain.iter.Iter.skip": {"tf": 1}, "sain.iter.Iter.zip": {"tf": 1}, "sain.iter.Iter.all": {"tf": 1}, "sain.iter.Iter.any": {"tf": 1}, "sain.iter.Iter.sort": {"tf": 1}, "sain.iter.Iter.first": {"tf": 1}, "sain.iter.Iter.last": {"tf": 1}, "sain.iter.Iter.reversed": {"tf": 1}, "sain.iter.Iter.count": {"tf": 1}, "sain.iter.Iter.union": {"tf": 1}, "sain.iter.Iter.for_each": {"tf": 1}, "sain.iter.Iter.async_for_each": {"tf": 1}, "sain.iter.Iter.enumerate": {"tf": 1}, "sain.iter.iter": {"tf": 1}, "sain.iter.empty": {"tf": 1}, "sain.iter.once": {"tf": 1}, "sain.vec.Vec": {"tf": 1}, "sain.vec.Vec.__init__": {"tf": 1}, "sain.vec.Vec.with_capacity": {"tf": 1}, "sain.vec.Vec.into_inner": {"tf": 1}, "sain.vec.Vec.len": {"tf": 1}, "sain.vec.Vec.capacity": {"tf": 1}, "sain.vec.Vec.iter": {"tf": 1}, "sain.vec.Vec.is_empty": {"tf": 1}, "sain.vec.Vec.split_off": {"tf": 1}, "sain.vec.Vec.split_first": {"tf": 1}, "sain.vec.Vec.first": {"tf": 1}, "sain.vec.Vec.truncate": {"tf": 1}, "sain.vec.Vec.retain": {"tf": 1}, "sain.vec.Vec.push": {"tf": 1}, "sain.vec.Vec.append": {"tf": 1}, "sain.vec.Vec.get": {"tf": 1}, "sain.vec.Vec.insert": {"tf": 1}, "sain.vec.Vec.pop": {"tf": 1}, "sain.vec.Vec.remove": {"tf": 1}, "sain.vec.Vec.swap_remove": {"tf": 1}, "sain.vec.Vec.extend": {"tf": 1}, "sain.vec.Vec.copy": {"tf": 1}, "sain.vec.Vec.clear": {"tf": 1}, "sain.vec.vec": {"tf": 1}}, "df": 201}}}, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"sain.Some": {"tf": 1}, "sain.Some.__init__": {"tf": 1}, "sain.Some.default": {"tf": 1}, "sain.Some.read": {"tf": 1}, "sain.Some.unwrap": {"tf": 1}, "sain.Some.unwrap_or": {"tf": 1}, "sain.Some.unwrap_or_else": {"tf": 1}, "sain.Some.unwrap_unchecked": {"tf": 1}, "sain.Some.expect": {"tf": 1}, "sain.Some.map": {"tf": 1}, "sain.Some.map_or": {"tf": 1}, "sain.Some.map_or_else": {"tf": 1}, "sain.Some.filter": {"tf": 1}, "sain.Some.take": {"tf": 1}, "sain.Some.replace": {"tf": 1}, "sain.Some.and_ok": {"tf": 1}, "sain.Some.and_then": {"tf": 1}, "sain.Some.iter": {"tf": 1}, "sain.Some.as_ref": {"tf": 1}, "sain.Some.as_mut": {"tf": 1}, "sain.Some.is_some": {"tf": 1.4142135623730951}, "sain.Some.is_some_and": {"tf": 1.4142135623730951}, "sain.Some.is_none": {"tf": 1}}, "df": 23}}, "r": {"docs": {}, "df": 0, "t": {"docs": {"sain.Iter.sort": {"tf": 1}, "sain.iter.Iter.sort": {"tf": 1}}, "df": 2}}}, "k": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {"sain.Iter.skip": {"tf": 1}, "sain.iter.Iter.skip": {"tf": 1}}, "df": 2}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {"sain.Once.is_set": {"tf": 1}, "sain.Once.set": {"tf": 1}}, "df": 2}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"sain.Vec.split_off": {"tf": 1}, "sain.Vec.split_first": {"tf": 1}, "sain.vec.Vec.split_off": {"tf": 1}, "sain.vec.Vec.split_first": {"tf": 1}}, "df": 4}}}, "a": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "n": {"docs": {"sain.futures.spawn": {"tf": 1}}, "df": 1}}}}, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {"sain.Vec.swap_remove": {"tf": 1}, "sain.vec.Vec.swap_remove": {"tf": 1}}, "df": 2}}}}, "c": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "g": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1.4142135623730951}, "sain.cfg.cfg": {"tf": 1.4142135623730951}}, "df": 4}}, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "y": {"docs": {"sain.AsRef.copy": {"tf": 1}, "sain.AsMut.copy": {"tf": 1}, "sain.Vec.copy": {"tf": 1}, "sain.vec.Vec.copy": {"tf": 1}}, "df": 4}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.Iter.copied": {"tf": 1}, "sain.iter.Iter.copied": {"tf": 1}}, "df": 2}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"sain.Iter.collect": {"tf": 1}, "sain.iter.Iter.collect": {"tf": 1}}, "df": 2}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"sain.Iter.count": {"tf": 1}, "sain.iter.Iter.count": {"tf": 1}}, "df": 2}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"sain.Once.clear": {"tf": 1}, "sain.Vec.clear": {"tf": 1}, "sain.vec.Vec.clear": {"tf": 1}}, "df": 3}}}}, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"sain.Vec.with_capacity": {"tf": 1}, "sain.Vec.capacity": {"tf": 1}, "sain.vec.Vec.with_capacity": {"tf": 1}, "sain.vec.Vec.capacity": {"tf": 1}}, "df": 4}}}}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {"sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}}, "df": 2}}}, "s": {"docs": {"sain.Some.as_ref": {"tf": 1}, "sain.Some.as_mut": {"tf": 1}}, "df": 2, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {"sain.AsRef": {"tf": 1}, "sain.AsRef.__init__": {"tf": 1}, "sain.AsRef.object": {"tf": 1}, "sain.AsRef.copy": {"tf": 1}}, "df": 4}}}, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"sain.AsMut": {"tf": 1}, "sain.AsMut.__init__": {"tf": 1}, "sain.AsMut.object": {"tf": 1}, "sain.AsMut.copy": {"tf": 1}}, "df": 4}}}, "y": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {"sain.Iter.async_for_each": {"tf": 1}, "sain.iter.Iter.async_for_each": {"tf": 1}}, "df": 2}}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {"sain.Some.and_ok": {"tf": 1}, "sain.Some.and_then": {"tf": 1}, "sain.Some.is_some_and": {"tf": 1}, "sain.Ok.is_ok_and": {"tf": 1}, "sain.Ok.is_err_and": {"tf": 1}, "sain.Err.is_ok_and": {"tf": 1}, "sain.Err.is_err_and": {"tf": 1}}, "df": 7}, "y": {"docs": {"sain.Iter.any": {"tf": 1}, "sain.iter.Iter.any": {"tf": 1}}, "df": 2}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"sain.Iter.all": {"tf": 1}, "sain.iter.Iter.all": {"tf": 1}}, "df": 2}}, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"sain.Vec.append": {"tf": 1}, "sain.vec.Vec.append": {"tf": 1}}, "df": 2}}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"sain.Default": {"tf": 1}, "sain.Default.__init__": {"tf": 1}, "sain.Default.default": {"tf": 1.4142135623730951}, "sain.Some.default": {"tf": 1}, "sain.Iter.default": {"tf": 1}, "sain.iter.Iter.default": {"tf": 1}}, "df": 6}}}}}, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.deprecated": {"tf": 1}}, "df": 1}}}}}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {"sain.Iter.drop_while": {"tf": 1}, "sain.iter.Iter.drop_while": {"tf": 1}}, "df": 2}}}, "o": {"docs": {}, "df": 0, "c": {"docs": {"sain.doc": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"sain.Default.__init__": {"tf": 1}, "sain.AsRef.__init__": {"tf": 1}, "sain.AsMut.__init__": {"tf": 1}, "sain.Some.__init__": {"tf": 1}, "sain.Iter.__init__": {"tf": 1}, "sain.Once.__init__": {"tf": 1}, "sain.Once.get_or_init": {"tf": 1}, "sain.Ok.__init__": {"tf": 1}, "sain.Err.__init__": {"tf": 1}, "sain.Vec.__init__": {"tf": 1}, "sain.iter.Iter.__init__": {"tf": 1}, "sain.vec.Vec.__init__": {"tf": 1}}, "df": 12}}, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"sain.Ok.inspect": {"tf": 1}, "sain.Ok.inspect_err": {"tf": 1}, "sain.Err.inspect": {"tf": 1}, "sain.Err.inspect_err": {"tf": 1}}, "df": 4}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"sain.Vec.insert": {"tf": 1}, "sain.vec.Vec.insert": {"tf": 1}}, "df": 2}}}}, "t": {"docs": {}, "df": 0, "o": {"docs": {"sain.Vec.into_inner": {"tf": 1}, "sain.vec.Vec.into_inner": {"tf": 1}}, "df": 2}}, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sain.Vec.into_inner": {"tf": 1}, "sain.vec.Vec.into_inner": {"tf": 1}}, "df": 2}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sain.Some.iter": {"tf": 1}, "sain.Iter": {"tf": 1}, "sain.Iter.__init__": {"tf": 1}, "sain.Iter.default": {"tf": 1}, "sain.Iter.collect": {"tf": 1}, "sain.Iter.to_vec": {"tf": 1}, "sain.Iter.copied": {"tf": 1}, "sain.Iter.by_ref": {"tf": 1}, "sain.Iter.next": {"tf": 1}, "sain.Iter.map": {"tf": 1}, "sain.Iter.take": {"tf": 1}, "sain.Iter.take_while": {"tf": 1}, "sain.Iter.drop_while": {"tf": 1}, "sain.Iter.filter": {"tf": 1}, "sain.Iter.skip": {"tf": 1}, "sain.Iter.zip": {"tf": 1}, "sain.Iter.all": {"tf": 1}, "sain.Iter.any": {"tf": 1}, "sain.Iter.sort": {"tf": 1}, "sain.Iter.first": {"tf": 1}, "sain.Iter.last": {"tf": 1}, "sain.Iter.reversed": {"tf": 1}, "sain.Iter.count": {"tf": 1}, "sain.Iter.union": {"tf": 1}, "sain.Iter.for_each": {"tf": 1}, "sain.Iter.async_for_each": {"tf": 1}, "sain.Iter.enumerate": {"tf": 1}, "sain.Ok.iter": {"tf": 1}, "sain.Err.iter": {"tf": 1}, "sain.Vec.iter": {"tf": 1}, "sain.iter": {"tf": 1}, "sain.iter.Iter": {"tf": 1.4142135623730951}, "sain.iter.Iter.__init__": {"tf": 1.4142135623730951}, "sain.iter.Iter.default": {"tf": 1.4142135623730951}, "sain.iter.Iter.collect": {"tf": 1.4142135623730951}, "sain.iter.Iter.to_vec": {"tf": 1.4142135623730951}, "sain.iter.Iter.copied": {"tf": 1.4142135623730951}, "sain.iter.Iter.by_ref": {"tf": 1.4142135623730951}, "sain.iter.Iter.next": {"tf": 1.4142135623730951}, "sain.iter.Iter.map": {"tf": 1.4142135623730951}, "sain.iter.Iter.take": {"tf": 1.4142135623730951}, "sain.iter.Iter.take_while": {"tf": 1.4142135623730951}, "sain.iter.Iter.drop_while": {"tf": 1.4142135623730951}, "sain.iter.Iter.filter": {"tf": 1.4142135623730951}, "sain.iter.Iter.skip": {"tf": 1.4142135623730951}, "sain.iter.Iter.zip": {"tf": 1.4142135623730951}, "sain.iter.Iter.all": {"tf": 1.4142135623730951}, "sain.iter.Iter.any": {"tf": 1.4142135623730951}, "sain.iter.Iter.sort": {"tf": 1.4142135623730951}, "sain.iter.Iter.first": {"tf": 1.4142135623730951}, "sain.iter.Iter.last": {"tf": 1.4142135623730951}, "sain.iter.Iter.reversed": {"tf": 1.4142135623730951}, "sain.iter.Iter.count": {"tf": 1.4142135623730951}, "sain.iter.Iter.union": {"tf": 1.4142135623730951}, "sain.iter.Iter.for_each": {"tf": 1.4142135623730951}, "sain.iter.Iter.async_for_each": {"tf": 1.4142135623730951}, "sain.iter.Iter.enumerate": {"tf": 1.4142135623730951}, "sain.iter.iter": {"tf": 1.4142135623730951}, "sain.iter.empty": {"tf": 1}, "sain.iter.once": {"tf": 1}, "sain.vec.Vec.iter": {"tf": 1}}, "df": 61}}}, "s": {"docs": {"sain.Some.is_some": {"tf": 1}, "sain.Some.is_some_and": {"tf": 1}, "sain.Some.is_none": {"tf": 1}, "sain.Once.is_set": {"tf": 1}, "sain.Ok.is_ok": {"tf": 1}, "sain.Ok.is_ok_and": {"tf": 1}, "sain.Ok.is_err": {"tf": 1}, "sain.Ok.is_err_and": {"tf": 1}, "sain.Err.is_ok": {"tf": 1}, "sain.Err.is_ok_and": {"tf": 1}, "sain.Err.is_err": {"tf": 1}, "sain.Err.is_err_and": {"tf": 1}, "sain.Vec.is_empty": {"tf": 1}, "sain.vec.Vec.is_empty": {"tf": 1}}, "df": 14}}, "o": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "j": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"sain.AsRef.object": {"tf": 1}, "sain.AsMut.object": {"tf": 1}}, "df": 2}}}}}, "r": {"docs": {"sain.Some.unwrap_or": {"tf": 1}, "sain.Some.unwrap_or_else": {"tf": 1}, "sain.Some.map_or": {"tf": 1}, "sain.Some.map_or_else": {"tf": 1}, "sain.Once.get_or_init": {"tf": 1}, "sain.Ok.unwrap_or": {"tf": 1}, "sain.Ok.unwrap_or_else": {"tf": 1}, "sain.Ok.map_or": {"tf": 1}, "sain.Ok.map_or_else": {"tf": 1}, "sain.Err.unwrap_or": {"tf": 1}, "sain.Err.unwrap_or_else": {"tf": 1}, "sain.Err.map_or": {"tf": 1}, "sain.Err.map_or_else": {"tf": 1}}, "df": 13}, "k": {"docs": {"sain.Some.and_ok": {"tf": 1}, "sain.Ok": {"tf": 1}, "sain.Ok.__init__": {"tf": 1}, "sain.Ok.is_ok": {"tf": 1.4142135623730951}, "sain.Ok.is_ok_and": {"tf": 1.4142135623730951}, "sain.Ok.is_err": {"tf": 1}, "sain.Ok.is_err_and": {"tf": 1}, "sain.Ok.expect": {"tf": 1}, "sain.Ok.unwrap": {"tf": 1}, "sain.Ok.unwrap_or": {"tf": 1}, "sain.Ok.unwrap_or_else": {"tf": 1}, "sain.Ok.unwrap_err": {"tf": 1}, "sain.Ok.ok": {"tf": 1.4142135623730951}, "sain.Ok.err": {"tf": 1}, "sain.Ok.inspect": {"tf": 1}, "sain.Ok.inspect_err": {"tf": 1}, "sain.Ok.map": {"tf": 1}, "sain.Ok.map_or": {"tf": 1}, "sain.Ok.map_or_else": {"tf": 1}, "sain.Ok.map_err": {"tf": 1}, "sain.Ok.iter": {"tf": 1}, "sain.Err.is_ok": {"tf": 1}, "sain.Err.is_ok_and": {"tf": 1}, "sain.Err.ok": {"tf": 1}}, "df": 24}, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.Option": {"tf": 1}}, "df": 1}}}}}, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sain.Once": {"tf": 1}, "sain.Once.__init__": {"tf": 1}, "sain.Once.is_set": {"tf": 1}, "sain.Once.get": {"tf": 1}, "sain.Once.set": {"tf": 1}, "sain.Once.clear": {"tf": 1}, "sain.Once.get_or_init": {"tf": 1}, "sain.iter.once": {"tf": 1}}, "df": 8}}}, "f": {"docs": {}, "df": 0, "f": {"docs": {"sain.Vec.split_off": {"tf": 1}, "sain.vec.Vec.split_off": {"tf": 1}}, "df": 2}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {"sain.Some.read": {"tf": 1}}, "df": 1}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sain.Some.replace": {"tf": 1}}, "df": 1}}}}}, "f": {"docs": {"sain.Some.as_ref": {"tf": 1}, "sain.Iter.by_ref": {"tf": 1}, "sain.iter.Iter.by_ref": {"tf": 1}}, "df": 3}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.Iter.reversed": {"tf": 1}, "sain.iter.Iter.reversed": {"tf": 1}}, "df": 2}}}}}}, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"sain.Result": {"tf": 1}}, "df": 1}}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"sain.Vec.retain": {"tf": 1}, "sain.vec.Vec.retain": {"tf": 1}}, "df": 2}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"sain.Vec.remove": {"tf": 1}, "sain.Vec.swap_remove": {"tf": 1}, "sain.vec.Vec.remove": {"tf": 1}, "sain.vec.Vec.swap_remove": {"tf": 1}}, "df": 4}}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {"sain.Some.unwrap": {"tf": 1}, "sain.Some.unwrap_or": {"tf": 1}, "sain.Some.unwrap_or_else": {"tf": 1}, "sain.Some.unwrap_unchecked": {"tf": 1}, "sain.Ok.unwrap": {"tf": 1}, "sain.Ok.unwrap_or": {"tf": 1}, "sain.Ok.unwrap_or_else": {"tf": 1}, "sain.Ok.unwrap_err": {"tf": 1}, "sain.Err.unwrap": {"tf": 1}, "sain.Err.unwrap_or": {"tf": 1}, "sain.Err.unwrap_or_else": {"tf": 1}, "sain.Err.unwrap_err": {"tf": 1}}, "df": 12}}}}, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.Some.unwrap_unchecked": {"tf": 1}}, "df": 1}}}}}}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.Iter.union": {"tf": 1}, "sain.iter.Iter.union": {"tf": 1}}, "df": 2}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.unimplemented": {"tf": 1}}, "df": 1}}}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"sain.Some.unwrap_or_else": {"tf": 1}, "sain.Some.map_or_else": {"tf": 1}, "sain.Ok.unwrap_or_else": {"tf": 1}, "sain.Ok.map_or_else": {"tf": 1}, "sain.Err.unwrap_or_else": {"tf": 1}, "sain.Err.map_or_else": {"tf": 1}}, "df": 6}}}, "x": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"sain.Some.expect": {"tf": 1}, "sain.Ok.expect": {"tf": 1}, "sain.Err.expect": {"tf": 1}, "sain.Err.expect_err": {"tf": 1}}, "df": 4}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"sain.Vec.extend": {"tf": 1}, "sain.vec.Vec.extend": {"tf": 1}}, "df": 2}}}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"sain.Iter.for_each": {"tf": 1}, "sain.Iter.async_for_each": {"tf": 1}, "sain.iter.Iter.for_each": {"tf": 1}, "sain.iter.Iter.async_for_each": {"tf": 1}}, "df": 4}}}, "n": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"sain.Iter.enumerate": {"tf": 1}, "sain.iter.Iter.enumerate": {"tf": 1}}, "df": 2}}}}}}}}, "r": {"docs": {}, "df": 0, "r": {"docs": {"sain.Ok.is_err": {"tf": 1}, "sain.Ok.is_err_and": {"tf": 1}, "sain.Ok.unwrap_err": {"tf": 1}, "sain.Ok.err": {"tf": 1}, "sain.Ok.inspect_err": {"tf": 1}, "sain.Ok.map_err": {"tf": 1}, "sain.Err": {"tf": 1}, "sain.Err.__init__": {"tf": 1}, "sain.Err.is_ok": {"tf": 1}, "sain.Err.is_ok_and": {"tf": 1}, "sain.Err.is_err": {"tf": 1.4142135623730951}, "sain.Err.is_err_and": {"tf": 1.4142135623730951}, "sain.Err.expect": {"tf": 1}, "sain.Err.expect_err": {"tf": 1.4142135623730951}, "sain.Err.unwrap": {"tf": 1}, "sain.Err.unwrap_or": {"tf": 1}, "sain.Err.unwrap_or_else": {"tf": 1}, "sain.Err.unwrap_err": {"tf": 1.4142135623730951}, "sain.Err.inspect": {"tf": 1}, "sain.Err.inspect_err": {"tf": 1.4142135623730951}, "sain.Err.ok": {"tf": 1}, "sain.Err.err": {"tf": 1.4142135623730951}, "sain.Err.map": {"tf": 1}, "sain.Err.map_or": {"tf": 1}, "sain.Err.map_or_else": {"tf": 1}, "sain.Err.map_err": {"tf": 1.4142135623730951}, "sain.Err.iter": {"tf": 1}}, "df": 27}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"sain.Vec.is_empty": {"tf": 1}, "sain.iter.empty": {"tf": 1}, "sain.vec.Vec.is_empty": {"tf": 1}}, "df": 3}}}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {"sain.Some.map": {"tf": 1}, "sain.Some.map_or": {"tf": 1}, "sain.Some.map_or_else": {"tf": 1}, "sain.Iter.map": {"tf": 1}, "sain.Ok.map": {"tf": 1}, "sain.Ok.map_or": {"tf": 1}, "sain.Ok.map_or_else": {"tf": 1}, "sain.Ok.map_err": {"tf": 1}, "sain.Err.map": {"tf": 1}, "sain.Err.map_or": {"tf": 1}, "sain.Err.map_or_else": {"tf": 1}, "sain.Err.map_err": {"tf": 1}, "sain.iter.Iter.map": {"tf": 1}}, "df": 13}}, "u": {"docs": {}, "df": 0, "t": {"docs": {"sain.Some.as_mut": {"tf": 1}}, "df": 1}}}, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sain.Some.filter": {"tf": 1}, "sain.Iter.filter": {"tf": 1}, "sain.iter.Iter.filter": {"tf": 1}}, "df": 3}}}}, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"sain.Iter.first": {"tf": 1}, "sain.Vec.split_first": {"tf": 1}, "sain.Vec.first": {"tf": 1}, "sain.iter.Iter.first": {"tf": 1}, "sain.vec.Vec.split_first": {"tf": 1}, "sain.vec.Vec.first": {"tf": 1}}, "df": 6}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {"sain.Iter.for_each": {"tf": 1}, "sain.Iter.async_for_each": {"tf": 1}, "sain.iter.Iter.for_each": {"tf": 1}, "sain.iter.Iter.async_for_each": {"tf": 1}}, "df": 4}}, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"sain.futures": {"tf": 1}, "sain.futures.spawn": {"tf": 1}, "sain.futures.loop": {"tf": 1}}, "df": 3}}}}}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {"sain.Some.take": {"tf": 1}, "sain.Iter.take": {"tf": 1}, "sain.Iter.take_while": {"tf": 1}, "sain.iter.Iter.take": {"tf": 1}, "sain.iter.Iter.take_while": {"tf": 1}}, "df": 5}}}, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"sain.Some.and_then": {"tf": 1}}, "df": 1}}}, "o": {"docs": {"sain.Iter.to_vec": {"tf": 1}, "sain.iter.Iter.to_vec": {"tf": 1}}, "df": 2, "d": {"docs": {}, "df": 0, "o": {"docs": {"sain.todo": {"tf": 1}}, "df": 1}}}, "r": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"sain.Vec.truncate": {"tf": 1}, "sain.vec.Vec.truncate": {"tf": 1}}, "df": 2}}}}}}}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"sain.Some.is_none": {"tf": 1}}, "df": 1}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.NOTHING": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "t": {"docs": {"sain.Iter.next": {"tf": 1}, "sain.iter.Iter.next": {"tf": 1}}, "df": 2}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {"sain.Iter.to_vec": {"tf": 1}, "sain.vec": {"tf": 1}, "sain.Vec": {"tf": 1}, "sain.Vec.__init__": {"tf": 1}, "sain.Vec.with_capacity": {"tf": 1}, "sain.Vec.into_inner": {"tf": 1}, "sain.Vec.len": {"tf": 1}, "sain.Vec.capacity": {"tf": 1}, "sain.Vec.iter": {"tf": 1}, "sain.Vec.is_empty": {"tf": 1}, "sain.Vec.split_off": {"tf": 1}, "sain.Vec.split_first": {"tf": 1}, "sain.Vec.first": {"tf": 1}, "sain.Vec.truncate": {"tf": 1}, "sain.Vec.retain": {"tf": 1}, "sain.Vec.push": {"tf": 1}, "sain.Vec.append": {"tf": 1}, "sain.Vec.get": {"tf": 1}, "sain.Vec.insert": {"tf": 1}, "sain.Vec.pop": {"tf": 1}, "sain.Vec.remove": {"tf": 1}, "sain.Vec.swap_remove": {"tf": 1}, "sain.Vec.extend": {"tf": 1}, "sain.Vec.copy": {"tf": 1}, "sain.Vec.clear": {"tf": 1}, "sain.iter.Iter.to_vec": {"tf": 1}, "sain.vec.Vec": {"tf": 1.4142135623730951}, "sain.vec.Vec.__init__": {"tf": 1.4142135623730951}, "sain.vec.Vec.with_capacity": {"tf": 1.4142135623730951}, "sain.vec.Vec.into_inner": {"tf": 1.4142135623730951}, "sain.vec.Vec.len": {"tf": 1.4142135623730951}, "sain.vec.Vec.capacity": {"tf": 1.4142135623730951}, "sain.vec.Vec.iter": {"tf": 1.4142135623730951}, "sain.vec.Vec.is_empty": {"tf": 1.4142135623730951}, "sain.vec.Vec.split_off": {"tf": 1.4142135623730951}, "sain.vec.Vec.split_first": {"tf": 1.4142135623730951}, "sain.vec.Vec.first": {"tf": 1.4142135623730951}, "sain.vec.Vec.truncate": {"tf": 1.4142135623730951}, "sain.vec.Vec.retain": {"tf": 1.4142135623730951}, "sain.vec.Vec.push": {"tf": 1.4142135623730951}, "sain.vec.Vec.append": {"tf": 1.4142135623730951}, "sain.vec.Vec.get": {"tf": 1.4142135623730951}, "sain.vec.Vec.insert": {"tf": 1.4142135623730951}, "sain.vec.Vec.pop": {"tf": 1.4142135623730951}, "sain.vec.Vec.remove": {"tf": 1.4142135623730951}, "sain.vec.Vec.swap_remove": {"tf": 1.4142135623730951}, "sain.vec.Vec.extend": {"tf": 1.4142135623730951}, "sain.vec.Vec.copy": {"tf": 1.4142135623730951}, "sain.vec.Vec.clear": {"tf": 1.4142135623730951}, "sain.vec.vec": {"tf": 1.4142135623730951}}, "df": 50}}}, "b": {"docs": {}, "df": 0, "y": {"docs": {"sain.Iter.by_ref": {"tf": 1}, "sain.iter.Iter.by_ref": {"tf": 1}}, "df": 2}}, "w": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sain.Iter.take_while": {"tf": 1}, "sain.Iter.drop_while": {"tf": 1}, "sain.iter.Iter.take_while": {"tf": 1}, "sain.iter.Iter.drop_while": {"tf": 1}}, "df": 4}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"sain.Vec.with_capacity": {"tf": 1}, "sain.vec.Vec.with_capacity": {"tf": 1}}, "df": 2}}}}, "z": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {"sain.Iter.zip": {"tf": 1}, "sain.iter.Iter.zip": {"tf": 1}}, "df": 2}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"sain.Iter.last": {"tf": 1}, "sain.iter.Iter.last": {"tf": 1}}, "df": 2}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {"sain.Vec.len": {"tf": 1}, "sain.vec.Vec.len": {"tf": 1}}, "df": 2}}, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {"sain.futures.loop": {"tf": 1}}, "df": 1}}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"sain.Once.get": {"tf": 1}, "sain.Once.get_or_init": {"tf": 1}, "sain.Vec.get": {"tf": 1}, "sain.vec.Vec.get": {"tf": 1}}, "df": 4}}}, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "h": {"docs": {"sain.Vec.push": {"tf": 1}, "sain.vec.Vec.push": {"tf": 1}}, "df": 2}}}, "o": {"docs": {}, "df": 0, "p": {"docs": {"sain.Vec.pop": {"tf": 1}, "sain.vec.Vec.pop": {"tf": 1}}, "df": 2}}}}}, "annotation": {"root": {"docs": {"sain.AsRef.object": {"tf": 1.4142135623730951}, "sain.AsMut.object": {"tf": 1.4142135623730951}, "sain.Some.read": {"tf": 1}, "sain.Once.is_set": {"tf": 1}}, "df": 4, "t": {"docs": {"sain.AsRef.object": {"tf": 1}, "sain.AsMut.object": {"tf": 1}}, "df": 2}, "c": {"docs": {}, "df": 0, "o": {"docs": {"sain.AsRef.object": {"tf": 1}, "sain.AsMut.object": {"tf": 1}}, "df": 2}}, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "~": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"sain.Some.read": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"sain.Once.is_set": {"tf": 1}}, "df": 1}}}}}}, "default_value": {"root": {"docs": {"sain.NOTHING": {"tf": 1}}, "df": 1, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"sain.Option": {"tf": 1}, "sain.Result": {"tf": 1}}, "df": 2}}}, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"sain.NOTHING": {"tf": 1}}, "df": 1, "[": {"docs": {}, "df": 0, "~": {"docs": {}, "df": 0, "t": {"docs": {"sain.Option": {"tf": 1}}, "df": 1}}}}}}}, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.Option": {"tf": 1}}, "df": 1}}}}}, "k": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "~": {"docs": {}, "df": 0, "t": {"docs": {"sain.Result": {"tf": 1}}, "df": 1}}}}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"sain.NOTHING": {"tf": 1}}, "df": 1}}}}, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.Result": {"tf": 1}}, "df": 1}}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"sain.Result": {"tf": 1}}, "df": 1}}}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"sain.Result": {"tf": 1.4142135623730951}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "~": {"docs": {}, "df": 0, "e": {"docs": {"sain.Result": {"tf": 1}}, "df": 1}}}}}}}}, "signature": {"root": {"0": {"docs": {"sain.Iter.enumerate": {"tf": 1}, "sain.iter.Iter.enumerate": {"tf": 1}}, "df": 2}, "1": {"docs": {"sain.Vec.pop": {"tf": 1}, "sain.vec.Vec.pop": {"tf": 1}}, "df": 2}, "3": {"9": {"docs": {"sain.cfg": {"tf": 5.0990195135927845}, "sain.cfg_attr": {"tf": 5.0990195135927845}, "sain.Iter.default": {"tf": 1.4142135623730951}, "sain.Iter.collect": {"tf": 2}, "sain.Iter.next": {"tf": 1.4142135623730951}, "sain.Iter.map": {"tf": 2}, "sain.Iter.zip": {"tf": 2}, "sain.Iter.sort": {"tf": 1.4142135623730951}, "sain.Iter.first": {"tf": 1.4142135623730951}, "sain.Iter.last": {"tf": 1.4142135623730951}, "sain.Iter.async_for_each": {"tf": 2}, "sain.todo": {"tf": 1.4142135623730951}, "sain.deprecated": {"tf": 3.1622776601683795}, "sain.unimplemented": {"tf": 2.449489742783178}, "sain.doc": {"tf": 2}, "sain.cfg.cfg_attr": {"tf": 5.0990195135927845}, "sain.cfg.cfg": {"tf": 5.0990195135927845}, "sain.iter.Iter.default": {"tf": 1.4142135623730951}, "sain.iter.Iter.collect": {"tf": 2}, "sain.iter.Iter.next": {"tf": 1.4142135623730951}, "sain.iter.Iter.map": {"tf": 2}, "sain.iter.Iter.zip": {"tf": 2}, "sain.iter.Iter.sort": {"tf": 1.4142135623730951}, "sain.iter.Iter.first": {"tf": 1.4142135623730951}, "sain.iter.Iter.last": {"tf": 1.4142135623730951}, "sain.iter.Iter.async_for_each": {"tf": 2}, "sain.iter.empty": {"tf": 1.4142135623730951}}, "df": 27}, "docs": {}, "df": 0}, "docs": {"sain.cfg": {"tf": 14.422205101855956}, "sain.cfg_attr": {"tf": 15.362291495737216}, "sain.Default.__init__": {"tf": 4}, "sain.Default.default": {"tf": 3.4641016151377544}, "sain.AsRef.__init__": {"tf": 3.872983346207417}, "sain.AsRef.copy": {"tf": 3.872983346207417}, "sain.AsMut.__init__": {"tf": 3.872983346207417}, "sain.AsMut.copy": {"tf": 3.872983346207417}, "sain.Some.__init__": {"tf": 4.898979485566356}, "sain.Some.default": {"tf": 3}, "sain.Some.unwrap": {"tf": 3.7416573867739413}, "sain.Some.unwrap_or": {"tf": 5.385164807134504}, "sain.Some.unwrap_or_else": {"tf": 6.6332495807108}, "sain.Some.unwrap_unchecked": {"tf": 3.7416573867739413}, "sain.Some.expect": {"tf": 5.196152422706632}, "sain.Some.map": {"tf": 8.06225774829855}, "sain.Some.map_or": {"tf": 7.681145747868608}, "sain.Some.map_or_else": {"tf": 8.831760866327848}, "sain.Some.filter": {"tf": 7.54983443527075}, "sain.Some.take": {"tf": 3.4641016151377544}, "sain.Some.replace": {"tf": 6.082762530298219}, "sain.Some.and_ok": {"tf": 7.0710678118654755}, "sain.Some.and_then": {"tf": 8.366600265340756}, "sain.Some.iter": {"tf": 5.196152422706632}, "sain.Some.as_ref": {"tf": 6.164414002968976}, "sain.Some.as_mut": {"tf": 6.164414002968976}, "sain.Some.is_some": {"tf": 3.4641016151377544}, "sain.Some.is_some_and": {"tf": 6.324555320336759}, "sain.Some.is_none": {"tf": 3.4641016151377544}, "sain.Iter.__init__": {"tf": 5.196152422706632}, "sain.Iter.default": {"tf": 3.3166247903554}, "sain.Iter.collect": {"tf": 6.324555320336759}, "sain.Iter.to_vec": {"tf": 5.196152422706632}, "sain.Iter.copied": {"tf": 5.196152422706632}, "sain.Iter.by_ref": {"tf": 5.196152422706632}, "sain.Iter.next": {"tf": 3.7416573867739413}, "sain.Iter.map": {"tf": 5.0990195135927845}, "sain.Iter.take": {"tf": 5.916079783099616}, "sain.Iter.take_while": {"tf": 7.54983443527075}, "sain.Iter.drop_while": {"tf": 7.54983443527075}, "sain.Iter.filter": {"tf": 7.54983443527075}, "sain.Iter.skip": {"tf": 5.916079783099616}, "sain.Iter.zip": {"tf": 4.898979485566356}, "sain.Iter.all": {"tf": 6.324555320336759}, "sain.Iter.any": {"tf": 6.324555320336759}, "sain.Iter.sort": {"tf": 7.745966692414834}, "sain.Iter.first": {"tf": 3.7416573867739413}, "sain.Iter.last": {"tf": 3.7416573867739413}, "sain.Iter.reversed": {"tf": 5.196152422706632}, "sain.Iter.count": {"tf": 3.4641016151377544}, "sain.Iter.union": {"tf": 7.0710678118654755}, "sain.Iter.for_each": {"tf": 6.6332495807108}, "sain.Iter.async_for_each": {"tf": 5.0990195135927845}, "sain.Iter.enumerate": {"tf": 7.3484692283495345}, "sain.todo": {"tf": 5}, "sain.deprecated": {"tf": 9.38083151964686}, "sain.unimplemented": {"tf": 7.211102550927978}, "sain.doc": {"tf": 4.58257569495584}, "sain.Once.__init__": {"tf": 4.795831523312719}, "sain.Once.get": {"tf": 5.196152422706632}, "sain.Once.set": {"tf": 4.898979485566356}, "sain.Once.clear": {"tf": 3.4641016151377544}, "sain.Once.get_or_init": {"tf": 4.898979485566356}, "sain.Ok.__init__": {"tf": 3.872983346207417}, "sain.Ok.is_ok": {"tf": 4.123105625617661}, "sain.Ok.is_ok_and": {"tf": 6.324555320336759}, "sain.Ok.is_err": {"tf": 4.123105625617661}, "sain.Ok.is_err_and": {"tf": 6.708203932499369}, "sain.Ok.expect": {"tf": 5.196152422706632}, "sain.Ok.unwrap": {"tf": 3.7416573867739413}, "sain.Ok.unwrap_or": {"tf": 5.385164807134504}, "sain.Ok.unwrap_or_else": {"tf": 6.6332495807108}, "sain.Ok.unwrap_err": {"tf": 3.4641016151377544}, "sain.Ok.ok": {"tf": 5.196152422706632}, "sain.Ok.err": {"tf": 5}, "sain.Ok.inspect": {"tf": 6.6332495807108}, "sain.Ok.inspect_err": {"tf": 6.6332495807108}, "sain.Ok.map": {"tf": 7.874007874011811}, "sain.Ok.map_or": {"tf": 7.681145747868608}, "sain.Ok.map_or_else": {"tf": 9.1104335791443}, "sain.Ok.map_err": {"tf": 7.14142842854285}, "sain.Ok.iter": {"tf": 5.196152422706632}, "sain.Err.__init__": {"tf": 3.872983346207417}, "sain.Err.is_ok": {"tf": 4.123105625617661}, "sain.Err.is_ok_and": {"tf": 6.708203932499369}, "sain.Err.is_err": {"tf": 4.123105625617661}, "sain.Err.is_err_and": {"tf": 6.324555320336759}, "sain.Err.expect": {"tf": 4.47213595499958}, "sain.Err.expect_err": {"tf": 3.7416573867739413}, "sain.Err.unwrap": {"tf": 3.4641016151377544}, "sain.Err.unwrap_or": {"tf": 5.477225575051661}, "sain.Err.unwrap_or_else": {"tf": 6.6332495807108}, "sain.Err.unwrap_err": {"tf": 3.7416573867739413}, "sain.Err.inspect": {"tf": 6.6332495807108}, "sain.Err.inspect_err": {"tf": 6.6332495807108}, "sain.Err.ok": {"tf": 5}, "sain.Err.err": {"tf": 5.196152422706632}, "sain.Err.map": {"tf": 6.782329983125268}, "sain.Err.map_or": {"tf": 7.681145747868608}, "sain.Err.map_or_else": {"tf": 9.1104335791443}, "sain.Err.map_err": {"tf": 7.54983443527075}, "sain.Err.iter": {"tf": 5.385164807134504}, "sain.vec": {"tf": 5.916079783099616}, "sain.Vec.__init__": {"tf": 6.164414002968976}, "sain.Vec.with_capacity": {"tf": 5.916079783099616}, "sain.Vec.into_inner": {"tf": 5.196152422706632}, "sain.Vec.len": {"tf": 3.4641016151377544}, "sain.Vec.capacity": {"tf": 3.4641016151377544}, "sain.Vec.iter": {"tf": 5.196152422706632}, "sain.Vec.is_empty": {"tf": 3.4641016151377544}, "sain.Vec.split_off": {"tf": 5.916079783099616}, "sain.Vec.split_first": {"tf": 6.928203230275509}, "sain.Vec.first": {"tf": 5.196152422706632}, "sain.Vec.truncate": {"tf": 4.47213595499958}, "sain.Vec.retain": {"tf": 6.164414002968976}, "sain.Vec.push": {"tf": 4.69041575982343}, "sain.Vec.append": {"tf": 4.69041575982343}, "sain.Vec.get": {"tf": 5.916079783099616}, "sain.Vec.insert": {"tf": 5.477225575051661}, "sain.Vec.pop": {"tf": 6.6332495807108}, "sain.Vec.remove": {"tf": 4.69041575982343}, "sain.Vec.swap_remove": {"tf": 4.898979485566356}, "sain.Vec.extend": {"tf": 5.916079783099616}, "sain.Vec.copy": {"tf": 5.196152422706632}, "sain.Vec.clear": {"tf": 3.4641016151377544}, "sain.cfg.cfg_attr": {"tf": 15.362291495737216}, "sain.cfg.cfg": {"tf": 14.422205101855956}, "sain.futures.spawn": {"tf": 9.9498743710662}, "sain.futures.loop": {"tf": 4.123105625617661}, "sain.iter.Iter.__init__": {"tf": 5.196152422706632}, "sain.iter.Iter.default": {"tf": 3.3166247903554}, "sain.iter.Iter.collect": {"tf": 6.324555320336759}, "sain.iter.Iter.to_vec": {"tf": 5.196152422706632}, "sain.iter.Iter.copied": {"tf": 5.196152422706632}, "sain.iter.Iter.by_ref": {"tf": 5.196152422706632}, "sain.iter.Iter.next": {"tf": 3.7416573867739413}, "sain.iter.Iter.map": {"tf": 5.0990195135927845}, "sain.iter.Iter.take": {"tf": 5.916079783099616}, "sain.iter.Iter.take_while": {"tf": 7.54983443527075}, "sain.iter.Iter.drop_while": {"tf": 7.54983443527075}, "sain.iter.Iter.filter": {"tf": 7.54983443527075}, "sain.iter.Iter.skip": {"tf": 5.916079783099616}, "sain.iter.Iter.zip": {"tf": 4.898979485566356}, "sain.iter.Iter.all": {"tf": 6.324555320336759}, "sain.iter.Iter.any": {"tf": 6.324555320336759}, "sain.iter.Iter.sort": {"tf": 7.745966692414834}, "sain.iter.Iter.first": {"tf": 3.7416573867739413}, "sain.iter.Iter.last": {"tf": 3.7416573867739413}, "sain.iter.Iter.reversed": {"tf": 5.196152422706632}, "sain.iter.Iter.count": {"tf": 3.4641016151377544}, "sain.iter.Iter.union": {"tf": 7.0710678118654755}, "sain.iter.Iter.for_each": {"tf": 6.6332495807108}, "sain.iter.Iter.async_for_each": {"tf": 5.0990195135927845}, "sain.iter.Iter.enumerate": {"tf": 7.3484692283495345}, "sain.iter.iter": {"tf": 6.782329983125268}, "sain.iter.empty": {"tf": 3.3166247903554}, "sain.iter.once": {"tf": 5.744562646538029}, "sain.vec.Vec.__init__": {"tf": 6.164414002968976}, "sain.vec.Vec.with_capacity": {"tf": 5.916079783099616}, "sain.vec.Vec.into_inner": {"tf": 5.196152422706632}, "sain.vec.Vec.len": {"tf": 3.4641016151377544}, "sain.vec.Vec.capacity": {"tf": 3.4641016151377544}, "sain.vec.Vec.iter": {"tf": 5.196152422706632}, "sain.vec.Vec.is_empty": {"tf": 3.4641016151377544}, "sain.vec.Vec.split_off": {"tf": 5.916079783099616}, "sain.vec.Vec.split_first": {"tf": 6.928203230275509}, "sain.vec.Vec.first": {"tf": 5.196152422706632}, "sain.vec.Vec.truncate": {"tf": 4.47213595499958}, "sain.vec.Vec.retain": {"tf": 6.164414002968976}, "sain.vec.Vec.push": {"tf": 4.69041575982343}, "sain.vec.Vec.append": {"tf": 4.69041575982343}, "sain.vec.Vec.get": {"tf": 5.916079783099616}, "sain.vec.Vec.insert": {"tf": 5.477225575051661}, "sain.vec.Vec.pop": {"tf": 6.6332495807108}, "sain.vec.Vec.remove": {"tf": 4.69041575982343}, "sain.vec.Vec.swap_remove": {"tf": 4.898979485566356}, "sain.vec.Vec.extend": {"tf": 5.916079783099616}, "sain.vec.Vec.copy": {"tf": 5.196152422706632}, "sain.vec.Vec.clear": {"tf": 3.4641016151377544}, "sain.vec.vec": {"tf": 5.916079783099616}}, "df": 180, "t": {"docs": {"sain.Default.default": {"tf": 1}, "sain.AsRef.__init__": {"tf": 1}, "sain.AsRef.copy": {"tf": 1}, "sain.AsMut.__init__": {"tf": 1}, "sain.AsMut.copy": {"tf": 1}, "sain.Some.map": {"tf": 1.4142135623730951}, "sain.Some.map_or": {"tf": 1.7320508075688772}, "sain.Some.map_or_else": {"tf": 1.7320508075688772}, "sain.Some.and_ok": {"tf": 1.4142135623730951}, "sain.Some.and_then": {"tf": 1.4142135623730951}, "sain.Once.get": {"tf": 1}, "sain.Once.set": {"tf": 1.4142135623730951}, "sain.Once.get_or_init": {"tf": 1.4142135623730951}, "sain.Ok.__init__": {"tf": 1}, "sain.Ok.is_ok_and": {"tf": 1}, "sain.Ok.is_err_and": {"tf": 1}, "sain.Ok.expect": {"tf": 1}, "sain.Ok.unwrap": {"tf": 1}, "sain.Ok.unwrap_or": {"tf": 1.4142135623730951}, "sain.Ok.unwrap_or_else": {"tf": 1.4142135623730951}, "sain.Ok.ok": {"tf": 1}, "sain.Ok.inspect": {"tf": 1}, "sain.Ok.map": {"tf": 1}, "sain.Ok.map_or": {"tf": 1}, "sain.Ok.map_or_else": {"tf": 1}, "sain.Ok.iter": {"tf": 1}, "sain.Err.unwrap_or": {"tf": 1.4142135623730951}, "sain.Err.unwrap_or_else": {"tf": 1.4142135623730951}, "sain.Err.inspect": {"tf": 1}, "sain.Err.map_or_else": {"tf": 1}, "sain.vec": {"tf": 1.4142135623730951}, "sain.Vec.__init__": {"tf": 1}, "sain.Vec.with_capacity": {"tf": 1}, "sain.Vec.into_inner": {"tf": 1}, "sain.Vec.iter": {"tf": 1}, "sain.Vec.split_off": {"tf": 1}, "sain.Vec.split_first": {"tf": 1.4142135623730951}, "sain.Vec.first": {"tf": 1}, "sain.Vec.retain": {"tf": 1}, "sain.Vec.push": {"tf": 1}, "sain.Vec.append": {"tf": 1}, "sain.Vec.get": {"tf": 1}, "sain.Vec.insert": {"tf": 1}, "sain.Vec.pop": {"tf": 1}, "sain.Vec.remove": {"tf": 1}, "sain.Vec.swap_remove": {"tf": 1.4142135623730951}, "sain.Vec.extend": {"tf": 1}, "sain.Vec.copy": {"tf": 1}, "sain.futures.spawn": {"tf": 1.4142135623730951}, "sain.vec.Vec.__init__": {"tf": 1}, "sain.vec.Vec.with_capacity": {"tf": 1}, "sain.vec.Vec.into_inner": {"tf": 1}, "sain.vec.Vec.iter": {"tf": 1}, "sain.vec.Vec.split_off": {"tf": 1}, "sain.vec.Vec.split_first": {"tf": 1.4142135623730951}, "sain.vec.Vec.first": {"tf": 1}, "sain.vec.Vec.retain": {"tf": 1}, "sain.vec.Vec.push": {"tf": 1}, "sain.vec.Vec.append": {"tf": 1}, "sain.vec.Vec.get": {"tf": 1}, "sain.vec.Vec.insert": {"tf": 1}, "sain.vec.Vec.pop": {"tf": 1}, "sain.vec.Vec.remove": {"tf": 1}, "sain.vec.Vec.swap_remove": {"tf": 1.4142135623730951}, "sain.vec.Vec.extend": {"tf": 1}, "sain.vec.Vec.copy": {"tf": 1}, "sain.vec.vec": {"tf": 1.4142135623730951}}, "df": 67, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"sain.cfg": {"tf": 1.4142135623730951}, "sain.cfg_attr": {"tf": 1.4142135623730951}, "sain.cfg.cfg_attr": {"tf": 1.4142135623730951}, "sain.cfg.cfg": {"tf": 1.4142135623730951}}, "df": 4}}}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.Iter.enumerate": {"tf": 1}, "sain.Vec.split_first": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}, "sain.iter.Iter.enumerate": {"tf": 1}, "sain.vec.Vec.split_first": {"tf": 1}}, "df": 8}}}}, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.Iter.sort": {"tf": 1}, "sain.iter.Iter.sort": {"tf": 1}}, "df": 2}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.Iter.for_each": {"tf": 1}, "sain.Iter.async_for_each": {"tf": 1}, "sain.todo": {"tf": 1}, "sain.deprecated": {"tf": 2}, "sain.unimplemented": {"tf": 1.4142135623730951}, "sain.Ok.inspect": {"tf": 1}, "sain.Ok.inspect_err": {"tf": 1}, "sain.Ok.map_err": {"tf": 1}, "sain.Err.inspect": {"tf": 1}, "sain.Err.inspect_err": {"tf": 1}, "sain.Err.map": {"tf": 1}, "sain.Err.iter": {"tf": 1}, "sain.iter.Iter.for_each": {"tf": 1}, "sain.iter.Iter.async_for_each": {"tf": 1}}, "df": 14}}}}}, "r": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"sain.Once.__init__": {"tf": 1}, "sain.Ok.is_ok": {"tf": 1}, "sain.Err.is_err": {"tf": 1}}, "df": 3}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"sain.futures.spawn": {"tf": 1}}, "df": 1}}}}}}}, "o": {"docs": {}, "df": 0, "s": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 4}, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.Some.map": {"tf": 1}, "sain.Some.filter": {"tf": 1}, "sain.Some.replace": {"tf": 1}, "sain.Some.and_ok": {"tf": 1.4142135623730951}, "sain.Some.and_then": {"tf": 1.4142135623730951}, "sain.Some.as_ref": {"tf": 1}, "sain.Some.as_mut": {"tf": 1}, "sain.Once.get": {"tf": 1}, "sain.Ok.ok": {"tf": 1}, "sain.Ok.err": {"tf": 1}, "sain.Err.ok": {"tf": 1}, "sain.Err.err": {"tf": 1}, "sain.Vec.split_first": {"tf": 1}, "sain.Vec.first": {"tf": 1}, "sain.Vec.get": {"tf": 1}, "sain.Vec.pop": {"tf": 1}, "sain.vec.Vec.split_first": {"tf": 1}, "sain.vec.Vec.first": {"tf": 1}, "sain.vec.Vec.get": {"tf": 1}, "sain.vec.Vec.pop": {"tf": 1}}, "df": 20, "a": {"docs": {}, "df": 0, "l": {"docs": {"sain.cfg": {"tf": 1.7320508075688772}, "sain.cfg_attr": {"tf": 1.7320508075688772}, "sain.Some.__init__": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1.7320508075688772}, "sain.cfg.cfg": {"tf": 1.7320508075688772}}, "df": 5}}, "[": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {"sain.Iter.next": {"tf": 1}, "sain.Iter.first": {"tf": 1}, "sain.Iter.last": {"tf": 1}, "sain.iter.Iter.next": {"tf": 1}, "sain.iter.Iter.first": {"tf": 1}, "sain.iter.Iter.last": {"tf": 1}}, "df": 6}}}}}}}}, "b": {"docs": {"sain.Some.and_ok": {"tf": 1}}, "df": 1}}}, "b": {"docs": {}, "df": 0, "j": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"sain.AsRef.__init__": {"tf": 1}, "sain.AsMut.__init__": {"tf": 1}}, "df": 2}}}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sain.Iter.zip": {"tf": 1}, "sain.Iter.union": {"tf": 1}, "sain.iter.Iter.zip": {"tf": 1}, "sain.iter.Iter.union": {"tf": 1}}, "df": 4, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {"sain.Iter.map": {"tf": 1}, "sain.Iter.zip": {"tf": 1}, "sain.Iter.async_for_each": {"tf": 1}, "sain.iter.Iter.map": {"tf": 1}, "sain.iter.Iter.zip": {"tf": 1}, "sain.iter.Iter.async_for_each": {"tf": 1}}, "df": 6}}}}}}}}, "k": {"docs": {"sain.Ok.map": {"tf": 1}, "sain.futures.spawn": {"tf": 1}}, "df": 2}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"sain.cfg": {"tf": 1.7320508075688772}, "sain.cfg_attr": {"tf": 1.7320508075688772}, "sain.Ok.is_ok": {"tf": 1}, "sain.Ok.is_err": {"tf": 1}, "sain.Ok.is_err_and": {"tf": 1}, "sain.Err.is_ok": {"tf": 1}, "sain.Err.is_ok_and": {"tf": 1}, "sain.Err.is_err": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1.7320508075688772}, "sain.cfg.cfg": {"tf": 1.7320508075688772}}, "df": 10, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.todo": {"tf": 1}, "sain.deprecated": {"tf": 2}, "sain.unimplemented": {"tf": 1.4142135623730951}}, "df": 3}}}}}}}}}}}, "n": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "x": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 4}}}}}, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"3": {"2": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 4}, "docs": {}, "df": 0}, "docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "s": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 4}}}}}}}, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 4}}}}}, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"sain.Some.unwrap_or": {"tf": 1}, "sain.Some.map_or": {"tf": 1}, "sain.Some.map_or_else": {"tf": 1}, "sain.Ok.unwrap_or": {"tf": 1}, "sain.Ok.map_or": {"tf": 1}, "sain.Ok.map_or_else": {"tf": 1}, "sain.Err.unwrap_or": {"tf": 1}, "sain.Err.map_or": {"tf": 1}, "sain.Err.map_or_else": {"tf": 1}}, "df": 9}}}}}}}, "u": {"docs": {"sain.deprecated": {"tf": 1.4142135623730951}, "sain.unimplemented": {"tf": 1.4142135623730951}, "sain.doc": {"tf": 1.4142135623730951}, "sain.Ok.map": {"tf": 1.4142135623730951}, "sain.Ok.map_or": {"tf": 1.7320508075688772}, "sain.Ok.map_or_else": {"tf": 1.7320508075688772}, "sain.Ok.map_err": {"tf": 1}, "sain.Err.map": {"tf": 1}, "sain.Err.map_or": {"tf": 1.7320508075688772}, "sain.Err.map_or_else": {"tf": 1.7320508075688772}, "sain.Err.map_err": {"tf": 1.4142135623730951}}, "df": 11, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "x": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 4}, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.futures.spawn": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {"sain.deprecated": {"tf": 1}}, "df": 1}}}, "n": {"docs": {"sain.Iter.take": {"tf": 1}, "sain.Iter.skip": {"tf": 1}, "sain.iter.Iter.take": {"tf": 1}, "sain.iter.Iter.skip": {"tf": 1}}, "df": 4, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"sain.cfg": {"tf": 2.6457513110645907}, "sain.cfg_attr": {"tf": 2.6457513110645907}, "sain.Some.default": {"tf": 1}, "sain.Some.take": {"tf": 1}, "sain.Iter.collect": {"tf": 1.4142135623730951}, "sain.Iter.for_each": {"tf": 1}, "sain.todo": {"tf": 1.4142135623730951}, "sain.deprecated": {"tf": 2.8284271247461903}, "sain.unimplemented": {"tf": 2}, "sain.Once.clear": {"tf": 1}, "sain.Ok.inspect": {"tf": 1}, "sain.Ok.inspect_err": {"tf": 1}, "sain.Err.inspect": {"tf": 1}, "sain.Err.inspect_err": {"tf": 1}, "sain.Vec.__init__": {"tf": 1.4142135623730951}, "sain.Vec.truncate": {"tf": 1}, "sain.Vec.push": {"tf": 1}, "sain.Vec.append": {"tf": 1}, "sain.Vec.insert": {"tf": 1}, "sain.Vec.remove": {"tf": 1}, "sain.Vec.extend": {"tf": 1}, "sain.Vec.clear": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 2.6457513110645907}, "sain.cfg.cfg": {"tf": 2.6457513110645907}, "sain.futures.spawn": {"tf": 1.4142135623730951}, "sain.iter.Iter.collect": {"tf": 1.4142135623730951}, "sain.iter.Iter.for_each": {"tf": 1}, "sain.vec.Vec.__init__": {"tf": 1.4142135623730951}, "sain.vec.Vec.truncate": {"tf": 1}, "sain.vec.Vec.push": {"tf": 1}, "sain.vec.Vec.append": {"tf": 1}, "sain.vec.Vec.insert": {"tf": 1}, "sain.vec.Vec.remove": {"tf": 1}, "sain.vec.Vec.extend": {"tf": 1}, "sain.vec.Vec.clear": {"tf": 1}}, "df": 35, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"sain.Ok.err": {"tf": 1}, "sain.Err.ok": {"tf": 1}}, "df": 2}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {"sain.todo": {"tf": 1}, "sain.Ok.unwrap_err": {"tf": 1}, "sain.Err.expect": {"tf": 1}, "sain.Err.unwrap": {"tf": 1}}, "df": 4}}}}}}}, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sain.Iter.default": {"tf": 1}, "sain.Err.iter": {"tf": 1}, "sain.iter.Iter.default": {"tf": 1}, "sain.iter.empty": {"tf": 1}}, "df": 4}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 4}}}}}}, "f": {"docs": {"sain.Some.as_ref": {"tf": 1}, "sain.Some.as_mut": {"tf": 1}}, "df": 2}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"sain.Iter.sort": {"tf": 1}, "sain.iter.Iter.sort": {"tf": 1}}, "df": 2}}}}}, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"sain.Iter.async_for_each": {"tf": 1}, "sain.Ok.map": {"tf": 1}, "sain.Err.map_err": {"tf": 1}, "sain.futures.spawn": {"tf": 1.4142135623730951}, "sain.iter.Iter.async_for_each": {"tf": 1}}, "df": 5, "[": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"sain.Iter.async_for_each": {"tf": 1}, "sain.iter.Iter.async_for_each": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.deprecated": {"tf": 1}}, "df": 1}}}}}, "a": {"docs": {}, "df": 0, "d": {"docs": {"sain.doc": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.Some.expect": {"tf": 1}, "sain.Iter.async_for_each": {"tf": 1}, "sain.Ok.expect": {"tf": 1}, "sain.Err.expect": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}, "sain.futures.spawn": {"tf": 1}, "sain.iter.Iter.async_for_each": {"tf": 1}}, "df": 10}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"sain.Iter.enumerate": {"tf": 1}, "sain.iter.Iter.enumerate": {"tf": 1}}, "df": 2}}}}, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "f": {"docs": {"sain.AsRef.copy": {"tf": 1}, "sain.AsMut.copy": {"tf": 1}, "sain.Some.unwrap": {"tf": 1}, "sain.Some.unwrap_or": {"tf": 1}, "sain.Some.unwrap_or_else": {"tf": 1}, "sain.Some.unwrap_unchecked": {"tf": 1}, "sain.Some.expect": {"tf": 1}, "sain.Some.map": {"tf": 1}, "sain.Some.map_or": {"tf": 1}, "sain.Some.map_or_else": {"tf": 1}, "sain.Some.filter": {"tf": 1}, "sain.Some.take": {"tf": 1}, "sain.Some.replace": {"tf": 1}, "sain.Some.and_ok": {"tf": 1}, "sain.Some.and_then": {"tf": 1}, "sain.Some.iter": {"tf": 1}, "sain.Some.as_ref": {"tf": 1}, "sain.Some.as_mut": {"tf": 1}, "sain.Some.is_some": {"tf": 1}, "sain.Some.is_some_and": {"tf": 1}, "sain.Some.is_none": {"tf": 1}, "sain.Iter.collect": {"tf": 1}, "sain.Iter.to_vec": {"tf": 1}, "sain.Iter.copied": {"tf": 1}, "sain.Iter.by_ref": {"tf": 1}, "sain.Iter.next": {"tf": 1}, "sain.Iter.map": {"tf": 1}, "sain.Iter.take": {"tf": 1}, "sain.Iter.take_while": {"tf": 1}, "sain.Iter.drop_while": {"tf": 1}, "sain.Iter.filter": {"tf": 1}, "sain.Iter.skip": {"tf": 1}, "sain.Iter.zip": {"tf": 1}, "sain.Iter.all": {"tf": 1}, "sain.Iter.any": {"tf": 1}, "sain.Iter.sort": {"tf": 1}, "sain.Iter.first": {"tf": 1}, "sain.Iter.last": {"tf": 1}, "sain.Iter.reversed": {"tf": 1}, "sain.Iter.count": {"tf": 1}, "sain.Iter.union": {"tf": 1}, "sain.Iter.for_each": {"tf": 1}, "sain.Iter.async_for_each": {"tf": 1}, "sain.Iter.enumerate": {"tf": 1}, "sain.Once.get": {"tf": 1}, "sain.Once.set": {"tf": 1}, "sain.Once.clear": {"tf": 1}, "sain.Once.get_or_init": {"tf": 1}, "sain.Ok.is_ok": {"tf": 1}, "sain.Ok.is_ok_and": {"tf": 1}, "sain.Ok.is_err": {"tf": 1}, "sain.Ok.is_err_and": {"tf": 1}, "sain.Ok.expect": {"tf": 1}, "sain.Ok.unwrap": {"tf": 1}, "sain.Ok.unwrap_or": {"tf": 1}, "sain.Ok.unwrap_or_else": {"tf": 1}, "sain.Ok.unwrap_err": {"tf": 1}, "sain.Ok.ok": {"tf": 1}, "sain.Ok.err": {"tf": 1}, "sain.Ok.inspect": {"tf": 1}, "sain.Ok.inspect_err": {"tf": 1}, "sain.Ok.map": {"tf": 1}, "sain.Ok.map_or": {"tf": 1}, "sain.Ok.map_or_else": {"tf": 1}, "sain.Ok.map_err": {"tf": 1.4142135623730951}, "sain.Ok.iter": {"tf": 1}, "sain.Err.is_ok": {"tf": 1}, "sain.Err.is_ok_and": {"tf": 1}, "sain.Err.is_err": {"tf": 1}, "sain.Err.is_err_and": {"tf": 1}, "sain.Err.expect": {"tf": 1}, "sain.Err.expect_err": {"tf": 1}, "sain.Err.unwrap": {"tf": 1}, "sain.Err.unwrap_or": {"tf": 1}, "sain.Err.unwrap_or_else": {"tf": 1}, "sain.Err.unwrap_err": {"tf": 1}, "sain.Err.inspect": {"tf": 1}, "sain.Err.inspect_err": {"tf": 1}, "sain.Err.ok": {"tf": 1}, "sain.Err.err": {"tf": 1}, "sain.Err.map": {"tf": 1.4142135623730951}, "sain.Err.map_or": {"tf": 1}, "sain.Err.map_or_else": {"tf": 1}, "sain.Err.map_err": {"tf": 1}, "sain.Err.iter": {"tf": 1}, "sain.Vec.into_inner": {"tf": 1}, "sain.Vec.len": {"tf": 1}, "sain.Vec.capacity": {"tf": 1}, "sain.Vec.iter": {"tf": 1}, "sain.Vec.is_empty": {"tf": 1}, "sain.Vec.split_off": {"tf": 1}, "sain.Vec.split_first": {"tf": 1}, "sain.Vec.first": {"tf": 1}, "sain.Vec.truncate": {"tf": 1}, "sain.Vec.retain": {"tf": 1}, "sain.Vec.push": {"tf": 1}, "sain.Vec.append": {"tf": 1}, "sain.Vec.get": {"tf": 1}, "sain.Vec.insert": {"tf": 1}, "sain.Vec.pop": {"tf": 1}, "sain.Vec.remove": {"tf": 1}, "sain.Vec.swap_remove": {"tf": 1}, "sain.Vec.extend": {"tf": 1}, "sain.Vec.copy": {"tf": 1}, "sain.Vec.clear": {"tf": 1}, "sain.iter.Iter.collect": {"tf": 1}, "sain.iter.Iter.to_vec": {"tf": 1}, "sain.iter.Iter.copied": {"tf": 1}, "sain.iter.Iter.by_ref": {"tf": 1}, "sain.iter.Iter.next": {"tf": 1}, "sain.iter.Iter.map": {"tf": 1}, "sain.iter.Iter.take": {"tf": 1}, "sain.iter.Iter.take_while": {"tf": 1}, "sain.iter.Iter.drop_while": {"tf": 1}, "sain.iter.Iter.filter": {"tf": 1}, "sain.iter.Iter.skip": {"tf": 1}, "sain.iter.Iter.zip": {"tf": 1}, "sain.iter.Iter.all": {"tf": 1}, "sain.iter.Iter.any": {"tf": 1}, "sain.iter.Iter.sort": {"tf": 1}, "sain.iter.Iter.first": {"tf": 1}, "sain.iter.Iter.last": {"tf": 1}, "sain.iter.Iter.reversed": {"tf": 1}, "sain.iter.Iter.count": {"tf": 1}, "sain.iter.Iter.union": {"tf": 1}, "sain.iter.Iter.for_each": {"tf": 1}, "sain.iter.Iter.async_for_each": {"tf": 1}, "sain.iter.Iter.enumerate": {"tf": 1}, "sain.vec.Vec.into_inner": {"tf": 1}, "sain.vec.Vec.len": {"tf": 1}, "sain.vec.Vec.capacity": {"tf": 1}, "sain.vec.Vec.iter": {"tf": 1}, "sain.vec.Vec.is_empty": {"tf": 1}, "sain.vec.Vec.split_off": {"tf": 1}, "sain.vec.Vec.split_first": {"tf": 1}, "sain.vec.Vec.first": {"tf": 1}, "sain.vec.Vec.truncate": {"tf": 1}, "sain.vec.Vec.retain": {"tf": 1}, "sain.vec.Vec.push": {"tf": 1}, "sain.vec.Vec.append": {"tf": 1}, "sain.vec.Vec.get": {"tf": 1}, "sain.vec.Vec.insert": {"tf": 1}, "sain.vec.Vec.pop": {"tf": 1}, "sain.vec.Vec.remove": {"tf": 1}, "sain.vec.Vec.swap_remove": {"tf": 1}, "sain.vec.Vec.extend": {"tf": 1}, "sain.vec.Vec.copy": {"tf": 1}, "sain.vec.Vec.clear": {"tf": 1}}, "df": 148}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sain.Iter.collect": {"tf": 1}, "sain.Vec.split_first": {"tf": 1}, "sain.futures.spawn": {"tf": 1}, "sain.iter.Iter.collect": {"tf": 1}, "sain.vec.Vec.split_first": {"tf": 1}}, "df": 5, "[": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {"sain.Iter.collect": {"tf": 1}, "sain.iter.Iter.collect": {"tf": 1}}, "df": 2}}}}, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {"sain.Iter.async_for_each": {"tf": 1}, "sain.iter.Iter.async_for_each": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"sain.Some.map": {"tf": 1}, "sain.Some.filter": {"tf": 1}, "sain.Some.replace": {"tf": 1}, "sain.Some.and_ok": {"tf": 1.4142135623730951}, "sain.Some.and_then": {"tf": 1.4142135623730951}, "sain.Some.iter": {"tf": 1}, "sain.Some.as_ref": {"tf": 1.4142135623730951}, "sain.Some.as_mut": {"tf": 1.4142135623730951}, "sain.Iter.to_vec": {"tf": 1}, "sain.Iter.copied": {"tf": 1}, "sain.Iter.by_ref": {"tf": 1}, "sain.Iter.take": {"tf": 1}, "sain.Iter.take_while": {"tf": 1}, "sain.Iter.drop_while": {"tf": 1}, "sain.Iter.filter": {"tf": 1}, "sain.Iter.skip": {"tf": 1}, "sain.Iter.sort": {"tf": 1}, "sain.Iter.reversed": {"tf": 1}, "sain.Iter.union": {"tf": 1.4142135623730951}, "sain.Iter.enumerate": {"tf": 1}, "sain.Once.get": {"tf": 1}, "sain.Ok.ok": {"tf": 1}, "sain.Ok.err": {"tf": 1}, "sain.Ok.map": {"tf": 1}, "sain.Ok.iter": {"tf": 1}, "sain.Err.ok": {"tf": 1}, "sain.Err.err": {"tf": 1}, "sain.Err.map_err": {"tf": 1}, "sain.Err.iter": {"tf": 1}, "sain.vec": {"tf": 1}, "sain.Vec.with_capacity": {"tf": 1}, "sain.Vec.iter": {"tf": 1}, "sain.Vec.split_off": {"tf": 1}, "sain.Vec.split_first": {"tf": 1}, "sain.Vec.first": {"tf": 1}, "sain.Vec.get": {"tf": 1}, "sain.Vec.pop": {"tf": 1}, "sain.Vec.copy": {"tf": 1}, "sain.futures.spawn": {"tf": 1.4142135623730951}, "sain.iter.Iter.to_vec": {"tf": 1}, "sain.iter.Iter.copied": {"tf": 1}, "sain.iter.Iter.by_ref": {"tf": 1}, "sain.iter.Iter.take": {"tf": 1}, "sain.iter.Iter.take_while": {"tf": 1}, "sain.iter.Iter.drop_while": {"tf": 1}, "sain.iter.Iter.filter": {"tf": 1}, "sain.iter.Iter.skip": {"tf": 1}, "sain.iter.Iter.sort": {"tf": 1}, "sain.iter.Iter.reversed": {"tf": 1}, "sain.iter.Iter.union": {"tf": 1.4142135623730951}, "sain.iter.Iter.enumerate": {"tf": 1}, "sain.iter.iter": {"tf": 1}, "sain.iter.once": {"tf": 1}, "sain.vec.Vec.with_capacity": {"tf": 1}, "sain.vec.Vec.iter": {"tf": 1}, "sain.vec.Vec.split_off": {"tf": 1}, "sain.vec.Vec.split_first": {"tf": 1}, "sain.vec.Vec.first": {"tf": 1}, "sain.vec.Vec.get": {"tf": 1}, "sain.vec.Vec.pop": {"tf": 1}, "sain.vec.Vec.copy": {"tf": 1}, "sain.vec.vec": {"tf": 1}}, "df": 62}}}, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"sain.Some.map": {"tf": 1}, "sain.Some.filter": {"tf": 1}, "sain.Some.replace": {"tf": 1}, "sain.Some.and_ok": {"tf": 1.4142135623730951}, "sain.Some.and_then": {"tf": 1.4142135623730951}, "sain.Some.as_ref": {"tf": 1}, "sain.Some.as_mut": {"tf": 1}, "sain.Once.get": {"tf": 1}, "sain.Ok.ok": {"tf": 1}, "sain.Ok.err": {"tf": 1}, "sain.Err.ok": {"tf": 1}, "sain.Err.err": {"tf": 1}, "sain.Vec.split_first": {"tf": 1}, "sain.Vec.first": {"tf": 1}, "sain.Vec.get": {"tf": 1}, "sain.Vec.pop": {"tf": 1}, "sain.vec.Vec.split_first": {"tf": 1}, "sain.vec.Vec.first": {"tf": 1}, "sain.vec.Vec.get": {"tf": 1}, "sain.vec.Vec.pop": {"tf": 1}}, "df": 20}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.Iter.sort": {"tf": 1}, "sain.iter.Iter.sort": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sain.deprecated": {"tf": 1}}, "df": 1}}}, "z": {"docs": {}, "df": 0, "e": {"docs": {"sain.Vec.truncate": {"tf": 1}, "sain.vec.Vec.truncate": {"tf": 1}}, "df": 2}}}}, "p": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 4}}}}, "p": {"docs": {}, "df": 0, "y": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 4}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"sain.Some.filter": {"tf": 1}, "sain.Some.is_some_and": {"tf": 1}, "sain.Iter.map": {"tf": 1}, "sain.Iter.take_while": {"tf": 1}, "sain.Iter.drop_while": {"tf": 1}, "sain.Iter.filter": {"tf": 1}, "sain.Iter.all": {"tf": 1}, "sain.Iter.any": {"tf": 1}, "sain.iter.Iter.map": {"tf": 1}, "sain.iter.Iter.take_while": {"tf": 1}, "sain.iter.Iter.drop_while": {"tf": 1}, "sain.iter.Iter.filter": {"tf": 1}, "sain.iter.Iter.all": {"tf": 1}, "sain.iter.Iter.any": {"tf": 1}}, "df": 14}}}}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"sain.doc": {"tf": 1}}, "df": 1}}}}, "v": {"docs": {"sain.Once.set": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 4}}}}}, "c": {"docs": {"sain.Iter.to_vec": {"tf": 1.4142135623730951}, "sain.vec": {"tf": 1.4142135623730951}, "sain.Vec.with_capacity": {"tf": 1.4142135623730951}, "sain.Vec.split_off": {"tf": 1.4142135623730951}, "sain.Vec.copy": {"tf": 1.4142135623730951}, "sain.iter.Iter.to_vec": {"tf": 1.4142135623730951}, "sain.vec.Vec.with_capacity": {"tf": 1.4142135623730951}, "sain.vec.Vec.split_off": {"tf": 1.4142135623730951}, "sain.vec.Vec.copy": {"tf": 1.4142135623730951}, "sain.vec.vec": {"tf": 1.4142135623730951}}, "df": 10}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"sain.Some.__init__": {"tf": 1}, "sain.Some.replace": {"tf": 1}, "sain.Vec.insert": {"tf": 1}, "sain.vec.Vec.insert": {"tf": 1}}, "df": 4, "t": {"docs": {"sain.Some.__init__": {"tf": 1}, "sain.Some.unwrap": {"tf": 1}, "sain.Some.unwrap_or": {"tf": 1.4142135623730951}, "sain.Some.unwrap_or_else": {"tf": 1.4142135623730951}, "sain.Some.unwrap_unchecked": {"tf": 1}, "sain.Some.expect": {"tf": 1}, "sain.Some.map": {"tf": 1}, "sain.Some.map_or": {"tf": 1}, "sain.Some.map_or_else": {"tf": 1}, "sain.Some.filter": {"tf": 1.4142135623730951}, "sain.Some.replace": {"tf": 1.4142135623730951}, "sain.Some.and_then": {"tf": 1}, "sain.Some.iter": {"tf": 1}, "sain.Some.as_ref": {"tf": 1}, "sain.Some.as_mut": {"tf": 1}, "sain.Some.is_some_and": {"tf": 1}}, "df": 16}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {"sain.deprecated": {"tf": 1}, "sain.unimplemented": {"tf": 1}}, "df": 2, "t": {"docs": {"sain.cfg": {"tf": 1.7320508075688772}, "sain.cfg_attr": {"tf": 1.7320508075688772}, "sain.Iter.take": {"tf": 1}, "sain.Iter.skip": {"tf": 1}, "sain.Iter.count": {"tf": 1}, "sain.Iter.enumerate": {"tf": 1.4142135623730951}, "sain.Vec.with_capacity": {"tf": 1}, "sain.Vec.len": {"tf": 1}, "sain.Vec.capacity": {"tf": 1}, "sain.Vec.split_off": {"tf": 1}, "sain.Vec.truncate": {"tf": 1}, "sain.Vec.get": {"tf": 1}, "sain.Vec.insert": {"tf": 1}, "sain.Vec.pop": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1.7320508075688772}, "sain.cfg.cfg": {"tf": 1.7320508075688772}, "sain.iter.Iter.take": {"tf": 1}, "sain.iter.Iter.skip": {"tf": 1}, "sain.iter.Iter.count": {"tf": 1}, "sain.iter.Iter.enumerate": {"tf": 1.4142135623730951}, "sain.vec.Vec.with_capacity": {"tf": 1}, "sain.vec.Vec.len": {"tf": 1}, "sain.vec.Vec.capacity": {"tf": 1}, "sain.vec.Vec.split_off": {"tf": 1}, "sain.vec.Vec.truncate": {"tf": 1}, "sain.vec.Vec.get": {"tf": 1}, "sain.vec.Vec.insert": {"tf": 1}, "sain.vec.Vec.pop": {"tf": 1}}, "df": 28}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {"sain.deprecated": {"tf": 1}}, "df": 1}}}}}, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sain.Ok.__init__": {"tf": 1}, "sain.Err.__init__": {"tf": 1}}, "df": 2}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {"sain.Vec.get": {"tf": 1}, "sain.Vec.insert": {"tf": 1}, "sain.Vec.pop": {"tf": 1}, "sain.vec.Vec.get": {"tf": 1}, "sain.vec.Vec.insert": {"tf": 1}, "sain.vec.Vec.pop": {"tf": 1}}, "df": 6}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 4}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 4}}}}}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sain.Some.iter": {"tf": 1.4142135623730951}, "sain.Iter.copied": {"tf": 1.4142135623730951}, "sain.Iter.by_ref": {"tf": 1.4142135623730951}, "sain.Iter.take": {"tf": 1.4142135623730951}, "sain.Iter.take_while": {"tf": 1.4142135623730951}, "sain.Iter.drop_while": {"tf": 1.4142135623730951}, "sain.Iter.filter": {"tf": 1.4142135623730951}, "sain.Iter.skip": {"tf": 1.4142135623730951}, "sain.Iter.sort": {"tf": 1.4142135623730951}, "sain.Iter.reversed": {"tf": 1.4142135623730951}, "sain.Iter.union": {"tf": 2}, "sain.Iter.enumerate": {"tf": 1.4142135623730951}, "sain.Ok.iter": {"tf": 1.4142135623730951}, "sain.Err.iter": {"tf": 1.4142135623730951}, "sain.Vec.iter": {"tf": 1.4142135623730951}, "sain.iter.Iter.copied": {"tf": 1.4142135623730951}, "sain.iter.Iter.by_ref": {"tf": 1.4142135623730951}, "sain.iter.Iter.take": {"tf": 1.4142135623730951}, "sain.iter.Iter.take_while": {"tf": 1.4142135623730951}, "sain.iter.Iter.drop_while": {"tf": 1.4142135623730951}, "sain.iter.Iter.filter": {"tf": 1.4142135623730951}, "sain.iter.Iter.skip": {"tf": 1.4142135623730951}, "sain.iter.Iter.sort": {"tf": 1.4142135623730951}, "sain.iter.Iter.reversed": {"tf": 1.4142135623730951}, "sain.iter.Iter.union": {"tf": 2}, "sain.iter.Iter.enumerate": {"tf": 1.4142135623730951}, "sain.iter.iter": {"tf": 1.4142135623730951}, "sain.iter.once": {"tf": 1.4142135623730951}, "sain.vec.Vec.iter": {"tf": 1.4142135623730951}}, "df": 29, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sain.Iter.__init__": {"tf": 1}, "sain.Vec.__init__": {"tf": 1.4142135623730951}, "sain.Vec.extend": {"tf": 1.4142135623730951}, "sain.iter.Iter.__init__": {"tf": 1}, "sain.iter.iter": {"tf": 1.4142135623730951}, "sain.vec.Vec.__init__": {"tf": 1.4142135623730951}, "sain.vec.Vec.extend": {"tf": 1.4142135623730951}}, "df": 7}}}}, "[": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"sain.Iter.default": {"tf": 1}, "sain.iter.Iter.default": {"tf": 1}, "sain.iter.empty": {"tf": 1}}, "df": 3}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {"sain.Iter.zip": {"tf": 1}, "sain.iter.Iter.zip": {"tf": 1}}, "df": 2}}}}}}}}}}, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {"sain.Iter.map": {"tf": 1}, "sain.Iter.zip": {"tf": 1}, "sain.iter.Iter.map": {"tf": 1}, "sain.iter.Iter.zip": {"tf": 1}}, "df": 4}}}}}}}}}}}, "m": {"docs": {"sain.Iter.__init__": {"tf": 1}, "sain.Iter.to_vec": {"tf": 1}, "sain.Iter.copied": {"tf": 1}, "sain.Iter.by_ref": {"tf": 1}, "sain.Iter.take": {"tf": 1}, "sain.Iter.take_while": {"tf": 1.4142135623730951}, "sain.Iter.drop_while": {"tf": 1.4142135623730951}, "sain.Iter.filter": {"tf": 1.4142135623730951}, "sain.Iter.skip": {"tf": 1}, "sain.Iter.all": {"tf": 1}, "sain.Iter.any": {"tf": 1}, "sain.Iter.sort": {"tf": 1}, "sain.Iter.reversed": {"tf": 1}, "sain.Iter.union": {"tf": 1.4142135623730951}, "sain.Iter.for_each": {"tf": 1}, "sain.Iter.enumerate": {"tf": 1}, "sain.Vec.push": {"tf": 1}, "sain.Vec.append": {"tf": 1}, "sain.Vec.remove": {"tf": 1}, "sain.Vec.swap_remove": {"tf": 1}, "sain.iter.Iter.__init__": {"tf": 1}, "sain.iter.Iter.to_vec": {"tf": 1}, "sain.iter.Iter.copied": {"tf": 1}, "sain.iter.Iter.by_ref": {"tf": 1}, "sain.iter.Iter.take": {"tf": 1}, "sain.iter.Iter.take_while": {"tf": 1.4142135623730951}, "sain.iter.Iter.drop_while": {"tf": 1.4142135623730951}, "sain.iter.Iter.filter": {"tf": 1.4142135623730951}, "sain.iter.Iter.skip": {"tf": 1}, "sain.iter.Iter.all": {"tf": 1}, "sain.iter.Iter.any": {"tf": 1}, "sain.iter.Iter.sort": {"tf": 1}, "sain.iter.Iter.reversed": {"tf": 1}, "sain.iter.Iter.union": {"tf": 1.4142135623730951}, "sain.iter.Iter.for_each": {"tf": 1}, "sain.iter.Iter.enumerate": {"tf": 1}, "sain.iter.iter": {"tf": 1.4142135623730951}, "sain.iter.once": {"tf": 1.7320508075688772}, "sain.vec.Vec.push": {"tf": 1}, "sain.vec.Vec.append": {"tf": 1}, "sain.vec.Vec.remove": {"tf": 1}, "sain.vec.Vec.swap_remove": {"tf": 1}}, "df": 42, "s": {"docs": {"sain.Iter.__init__": {"tf": 1}, "sain.iter.Iter.__init__": {"tf": 1}}, "df": 2}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 4}}, "m": {"6": {"4": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 4}, "docs": {}, "df": 0}, "docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 4}, "g": {"docs": {}, "df": 0, "s": {"docs": {"sain.Default.__init__": {"tf": 1}}, "df": 1}}}, "b": {"docs": {}, "df": 0, "c": {"docs": {"sain.cfg_attr": {"tf": 1}, "sain.Some.unwrap_or_else": {"tf": 1}, "sain.Some.map": {"tf": 1}, "sain.Some.map_or": {"tf": 1}, "sain.Some.map_or_else": {"tf": 1.4142135623730951}, "sain.Some.filter": {"tf": 1}, "sain.Some.and_then": {"tf": 1}, "sain.Some.is_some_and": {"tf": 1}, "sain.Iter.__init__": {"tf": 1}, "sain.Iter.take_while": {"tf": 1}, "sain.Iter.drop_while": {"tf": 1}, "sain.Iter.filter": {"tf": 1}, "sain.Iter.all": {"tf": 1}, "sain.Iter.any": {"tf": 1}, "sain.Iter.for_each": {"tf": 1}, "sain.Ok.is_ok_and": {"tf": 1}, "sain.Ok.is_err_and": {"tf": 1}, "sain.Ok.unwrap_or_else": {"tf": 1}, "sain.Ok.inspect": {"tf": 1}, "sain.Ok.inspect_err": {"tf": 1}, "sain.Ok.map": {"tf": 1}, "sain.Ok.map_or": {"tf": 1}, "sain.Ok.map_or_else": {"tf": 1.4142135623730951}, "sain.Ok.map_err": {"tf": 1}, "sain.Err.is_ok_and": {"tf": 1}, "sain.Err.is_err_and": {"tf": 1}, "sain.Err.unwrap_or_else": {"tf": 1}, "sain.Err.inspect": {"tf": 1}, "sain.Err.inspect_err": {"tf": 1}, "sain.Err.map": {"tf": 1}, "sain.Err.map_or": {"tf": 1}, "sain.Err.map_or_else": {"tf": 1.4142135623730951}, "sain.Err.map_err": {"tf": 1}, "sain.Vec.__init__": {"tf": 1}, "sain.Vec.into_inner": {"tf": 1}, "sain.Vec.split_first": {"tf": 1}, "sain.Vec.retain": {"tf": 1}, "sain.Vec.extend": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.futures.spawn": {"tf": 1.4142135623730951}, "sain.iter.Iter.__init__": {"tf": 1}, "sain.iter.Iter.take_while": {"tf": 1}, "sain.iter.Iter.drop_while": {"tf": 1}, "sain.iter.Iter.filter": {"tf": 1}, "sain.iter.Iter.all": {"tf": 1}, "sain.iter.Iter.any": {"tf": 1}, "sain.iter.Iter.for_each": {"tf": 1}, "sain.iter.iter": {"tf": 1}, "sain.vec.Vec.__init__": {"tf": 1}, "sain.vec.Vec.into_inner": {"tf": 1}, "sain.vec.Vec.split_first": {"tf": 1}, "sain.vec.Vec.retain": {"tf": 1}, "sain.vec.Vec.extend": {"tf": 1}}, "df": 53}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {"sain.futures.loop": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}, "s": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {"sain.Some.as_ref": {"tf": 1}}, "df": 1}}}, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"sain.Some.as_mut": {"tf": 1}}, "df": 1}}}, "y": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {"sain.futures.loop": {"tf": 1}}, "df": 1}}}}}}, "n": {"docs": {}, "df": 0, "y": {"docs": {"sain.Iter.for_each": {"tf": 1}, "sain.Iter.async_for_each": {"tf": 1}, "sain.Ok.inspect": {"tf": 1}, "sain.Ok.inspect_err": {"tf": 1}, "sain.Err.inspect": {"tf": 1}, "sain.Err.inspect_err": {"tf": 1}, "sain.iter.Iter.for_each": {"tf": 1}, "sain.iter.Iter.async_for_each": {"tf": 1}}, "df": 8}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sain.unimplemented": {"tf": 1}}, "df": 1}}}}}}}}, "t": {"docs": {"sain.Vec.split_off": {"tf": 1}, "sain.vec.Vec.split_off": {"tf": 1}}, "df": 2}, "w": {"docs": {}, "df": 0, "s": {"docs": {"sain.futures.spawn": {"tf": 1}}, "df": 1}, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sain.futures.spawn": {"tf": 1}}, "df": 1}}}}}}}}}, "x": {"6": {"4": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 4}, "docs": {}, "df": 0}, "8": {"6": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 4}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "c": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 4}}}}}}, "o": {"docs": {"sain.Default.default": {"tf": 1}, "sain.AsRef.__init__": {"tf": 1}, "sain.AsRef.copy": {"tf": 1}, "sain.AsMut.__init__": {"tf": 1}, "sain.AsMut.copy": {"tf": 1}, "sain.futures.spawn": {"tf": 1.4142135623730951}}, "df": 6, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.Vec.into_inner": {"tf": 1}, "sain.vec.Vec.into_inner": {"tf": 1}}, "df": 2, "s": {"docs": {"sain.cfg_attr": {"tf": 1}, "sain.Some.unwrap_or_else": {"tf": 1}, "sain.Some.map": {"tf": 1}, "sain.Some.map_or": {"tf": 1}, "sain.Some.map_or_else": {"tf": 1.4142135623730951}, "sain.Some.filter": {"tf": 1}, "sain.Some.and_then": {"tf": 1}, "sain.Some.is_some_and": {"tf": 1}, "sain.Iter.__init__": {"tf": 1}, "sain.Iter.collect": {"tf": 1.4142135623730951}, "sain.Iter.map": {"tf": 1}, "sain.Iter.take_while": {"tf": 1}, "sain.Iter.drop_while": {"tf": 1}, "sain.Iter.filter": {"tf": 1}, "sain.Iter.all": {"tf": 1}, "sain.Iter.any": {"tf": 1}, "sain.Iter.sort": {"tf": 1}, "sain.Iter.for_each": {"tf": 1}, "sain.Iter.async_for_each": {"tf": 1.4142135623730951}, "sain.deprecated": {"tf": 1.4142135623730951}, "sain.unimplemented": {"tf": 1.4142135623730951}, "sain.doc": {"tf": 1.4142135623730951}, "sain.Ok.is_ok_and": {"tf": 1}, "sain.Ok.is_err_and": {"tf": 1}, "sain.Ok.unwrap_or_else": {"tf": 1}, "sain.Ok.inspect": {"tf": 1}, "sain.Ok.inspect_err": {"tf": 1}, "sain.Ok.map": {"tf": 1}, "sain.Ok.map_or": {"tf": 1}, "sain.Ok.map_or_else": {"tf": 1.4142135623730951}, "sain.Ok.map_err": {"tf": 1}, "sain.Err.is_ok_and": {"tf": 1}, "sain.Err.is_err_and": {"tf": 1}, "sain.Err.unwrap_or_else": {"tf": 1}, "sain.Err.inspect": {"tf": 1}, "sain.Err.inspect_err": {"tf": 1}, "sain.Err.map": {"tf": 1}, "sain.Err.map_or": {"tf": 1}, "sain.Err.map_or_else": {"tf": 1.4142135623730951}, "sain.Err.map_err": {"tf": 1}, "sain.Vec.__init__": {"tf": 1}, "sain.Vec.into_inner": {"tf": 1}, "sain.Vec.split_first": {"tf": 1}, "sain.Vec.retain": {"tf": 1}, "sain.Vec.extend": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.futures.spawn": {"tf": 1.4142135623730951}, "sain.iter.Iter.__init__": {"tf": 1}, "sain.iter.Iter.collect": {"tf": 1.4142135623730951}, "sain.iter.Iter.map": {"tf": 1}, "sain.iter.Iter.take_while": {"tf": 1}, "sain.iter.Iter.drop_while": {"tf": 1}, "sain.iter.Iter.filter": {"tf": 1}, "sain.iter.Iter.all": {"tf": 1}, "sain.iter.Iter.any": {"tf": 1}, "sain.iter.Iter.sort": {"tf": 1}, "sain.iter.Iter.for_each": {"tf": 1}, "sain.iter.Iter.async_for_each": {"tf": 1.4142135623730951}, "sain.iter.iter": {"tf": 1}, "sain.vec.Vec.__init__": {"tf": 1}, "sain.vec.Vec.into_inner": {"tf": 1}, "sain.vec.Vec.split_first": {"tf": 1}, "sain.vec.Vec.retain": {"tf": 1}, "sain.vec.Vec.extend": {"tf": 1}}, "df": 64}}}}}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"sain.Iter.async_for_each": {"tf": 1}, "sain.iter.Iter.async_for_each": {"tf": 1}}, "df": 2}}}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sain.cfg_attr": {"tf": 1}, "sain.Some.unwrap_or_else": {"tf": 1}, "sain.Some.map": {"tf": 1}, "sain.Some.map_or": {"tf": 1}, "sain.Some.map_or_else": {"tf": 1.4142135623730951}, "sain.Some.filter": {"tf": 1}, "sain.Some.and_then": {"tf": 1}, "sain.Some.is_some_and": {"tf": 1}, "sain.Iter.take_while": {"tf": 1}, "sain.Iter.drop_while": {"tf": 1}, "sain.Iter.filter": {"tf": 1}, "sain.Iter.all": {"tf": 1}, "sain.Iter.any": {"tf": 1}, "sain.Iter.for_each": {"tf": 1}, "sain.Ok.is_ok_and": {"tf": 1}, "sain.Ok.is_err_and": {"tf": 1}, "sain.Ok.unwrap_or_else": {"tf": 1}, "sain.Ok.inspect": {"tf": 1}, "sain.Ok.inspect_err": {"tf": 1}, "sain.Ok.map": {"tf": 1}, "sain.Ok.map_or": {"tf": 1}, "sain.Ok.map_or_else": {"tf": 1.4142135623730951}, "sain.Ok.map_err": {"tf": 1}, "sain.Err.is_ok_and": {"tf": 1}, "sain.Err.is_err_and": {"tf": 1}, "sain.Err.unwrap_or_else": {"tf": 1}, "sain.Err.inspect": {"tf": 1}, "sain.Err.inspect_err": {"tf": 1}, "sain.Err.map": {"tf": 1}, "sain.Err.map_or": {"tf": 1}, "sain.Err.map_or_else": {"tf": 1.4142135623730951}, "sain.Err.map_err": {"tf": 1}, "sain.Vec.retain": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.iter.Iter.take_while": {"tf": 1}, "sain.iter.Iter.drop_while": {"tf": 1}, "sain.iter.Iter.filter": {"tf": 1}, "sain.iter.Iter.all": {"tf": 1}, "sain.iter.Iter.any": {"tf": 1}, "sain.iter.Iter.for_each": {"tf": 1}, "sain.vec.Vec.retain": {"tf": 1}}, "df": 41, "[": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {"sain.Iter.map": {"tf": 1}, "sain.Iter.sort": {"tf": 1}, "sain.Iter.async_for_each": {"tf": 1}, "sain.iter.Iter.map": {"tf": 1}, "sain.iter.Iter.sort": {"tf": 1}, "sain.iter.Iter.async_for_each": {"tf": 1}}, "df": 6}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"sain.deprecated": {"tf": 1}, "sain.unimplemented": {"tf": 1}, "sain.doc": {"tf": 1}}, "df": 3}}}}}}}}}}}}, "p": {"docs": {"sain.deprecated": {"tf": 1.4142135623730951}, "sain.unimplemented": {"tf": 1.4142135623730951}, "sain.doc": {"tf": 1.4142135623730951}}, "df": 3}}}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"sain.Iter.collect": {"tf": 1}, "sain.iter.Iter.collect": {"tf": 1}}, "df": 2}}, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"sain.Vec.with_capacity": {"tf": 1}, "sain.vec.Vec.with_capacity": {"tf": 1}}, "df": 2}}}}}}}, "l": {"docs": {}, "df": 0, "s": {"docs": {"sain.Vec.with_capacity": {"tf": 1}, "sain.vec.Vec.with_capacity": {"tf": 1}}, "df": 2}}}, "j": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 4}}}}}}, "b": {"docs": {"sain.Iter.collect": {"tf": 1.4142135623730951}, "sain.iter.Iter.collect": {"tf": 1.4142135623730951}}, "df": 2, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"sain.cfg": {"tf": 1}, "sain.Some.filter": {"tf": 1}, "sain.Some.is_some": {"tf": 1}, "sain.Some.is_some_and": {"tf": 1.4142135623730951}, "sain.Some.is_none": {"tf": 1}, "sain.Iter.take_while": {"tf": 1}, "sain.Iter.drop_while": {"tf": 1}, "sain.Iter.filter": {"tf": 1}, "sain.Iter.all": {"tf": 1.4142135623730951}, "sain.Iter.any": {"tf": 1.4142135623730951}, "sain.Iter.sort": {"tf": 1}, "sain.Once.__init__": {"tf": 1}, "sain.Ok.is_ok_and": {"tf": 1.4142135623730951}, "sain.Ok.is_err_and": {"tf": 1}, "sain.Err.is_ok_and": {"tf": 1}, "sain.Err.is_err_and": {"tf": 1.4142135623730951}, "sain.Vec.is_empty": {"tf": 1}, "sain.Vec.retain": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}, "sain.iter.Iter.take_while": {"tf": 1}, "sain.iter.Iter.drop_while": {"tf": 1}, "sain.iter.Iter.filter": {"tf": 1}, "sain.iter.Iter.all": {"tf": 1.4142135623730951}, "sain.iter.Iter.any": {"tf": 1.4142135623730951}, "sain.iter.Iter.sort": {"tf": 1}, "sain.vec.Vec.is_empty": {"tf": 1}, "sain.vec.Vec.retain": {"tf": 1}}, "df": 27}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.Once.__init__": {"tf": 1}}, "df": 1}}}}}}}}, "f": {"docs": {"sain.cfg_attr": {"tf": 1.4142135623730951}, "sain.Some.unwrap_or_else": {"tf": 1}, "sain.Some.map": {"tf": 1}, "sain.Some.map_or": {"tf": 1}, "sain.Some.map_or_else": {"tf": 1}, "sain.Some.and_then": {"tf": 1}, "sain.Once.get_or_init": {"tf": 1}, "sain.Ok.is_ok_and": {"tf": 1}, "sain.Ok.is_err_and": {"tf": 1}, "sain.Ok.unwrap_or_else": {"tf": 1}, "sain.Ok.inspect": {"tf": 1}, "sain.Ok.inspect_err": {"tf": 1}, "sain.Ok.map": {"tf": 1}, "sain.Ok.map_or": {"tf": 1}, "sain.Ok.map_or_else": {"tf": 1}, "sain.Ok.map_err": {"tf": 1}, "sain.Err.is_ok_and": {"tf": 1}, "sain.Err.is_err_and": {"tf": 1}, "sain.Err.unwrap_or_else": {"tf": 1}, "sain.Err.inspect": {"tf": 1}, "sain.Err.inspect_err": {"tf": 1}, "sain.Err.map": {"tf": 1}, "sain.Err.map_or": {"tf": 1}, "sain.Err.map_or_else": {"tf": 1}, "sain.Err.map_err": {"tf": 1}, "sain.Vec.retain": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1.4142135623730951}, "sain.vec.Vec.retain": {"tf": 1}}, "df": 28, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"sain.Iter.sort": {"tf": 1}, "sain.Ok.is_err": {"tf": 1}, "sain.Ok.is_err_and": {"tf": 1}, "sain.Err.is_ok": {"tf": 1}, "sain.Err.is_ok_and": {"tf": 1}, "sain.iter.Iter.sort": {"tf": 1}}, "df": 6}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {"sain.Iter.for_each": {"tf": 1}, "sain.Iter.async_for_each": {"tf": 1}, "sain.iter.Iter.for_each": {"tf": 1}, "sain.iter.Iter.async_for_each": {"tf": 1}}, "df": 4}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"sain.futures.spawn": {"tf": 1}}, "df": 1}}}}}, "k": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "s": {"docs": {"sain.Default.__init__": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "y": {"docs": {"sain.Iter.sort": {"tf": 1}, "sain.iter.Iter.sort": {"tf": 1}}, "df": 2}}}, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"sain.Some.expect": {"tf": 1}, "sain.todo": {"tf": 1}, "sain.unimplemented": {"tf": 1}, "sain.Ok.expect": {"tf": 1}}, "df": 4}}}}}}, "s": {"docs": {}, "df": 0, "g": {"docs": {"sain.Err.expect": {"tf": 1}}, "df": 1}}}, "e": {"docs": {"sain.Ok.unwrap_or_else": {"tf": 1}, "sain.Ok.inspect_err": {"tf": 1}, "sain.Ok.map_or_else": {"tf": 1}, "sain.Ok.map_err": {"tf": 1}, "sain.Err.__init__": {"tf": 1}, "sain.Err.is_ok_and": {"tf": 1}, "sain.Err.is_err_and": {"tf": 1}, "sain.Err.expect_err": {"tf": 1}, "sain.Err.unwrap_or_else": {"tf": 1}, "sain.Err.unwrap_err": {"tf": 1}, "sain.Err.inspect_err": {"tf": 1}, "sain.Err.err": {"tf": 1}, "sain.Err.map": {"tf": 1}, "sain.Err.map_or": {"tf": 1}, "sain.Err.map_or_else": {"tf": 1}, "sain.Err.map_err": {"tf": 1}}, "df": 16, "x": {"docs": {}, "df": 0, "t": {"docs": {"sain.Iter.default": {"tf": 1}, "sain.iter.Iter.default": {"tf": 1}, "sain.iter.empty": {"tf": 1}}, "df": 3, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"sain.Ok.map_err": {"tf": 1}, "sain.Err.map": {"tf": 1}, "sain.Err.iter": {"tf": 1}}, "df": 3}}}}}}}}}, "r": {"docs": {}, "df": 0, "r": {"docs": {"sain.Err.unwrap_or": {"tf": 1}, "sain.Err.map_err": {"tf": 1}, "sain.futures.spawn": {"tf": 1}}, "df": 3}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"sain.vec": {"tf": 1}, "sain.vec.vec": {"tf": 1}}, "df": 2}}}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"sain.futures.loop": {"tf": 1}}, "df": 1}}}}}}, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"sain.deprecated": {"tf": 1}}, "df": 1}}}}}}, "bases": {"root": {"docs": {"sain.Iter": {"tf": 1}, "sain.iter.Iter": {"tf": 1}}, "df": 2, "t": {"docs": {"sain.Default": {"tf": 1}, "sain.AsRef": {"tf": 1}, "sain.AsMut": {"tf": 1}}, "df": 3, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.Default": {"tf": 1}, "sain.AsRef": {"tf": 1}, "sain.AsMut": {"tf": 1}, "sain.Some": {"tf": 1}, "sain.Once": {"tf": 1}, "sain.Ok": {"tf": 1}, "sain.Err": {"tf": 1}, "sain.Vec": {"tf": 1}, "sain.vec.Vec": {"tf": 1}}, "df": 9}}}}}}, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"sain.Default": {"tf": 1}}, "df": 1}}}}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {"sain.Default": {"tf": 1}, "sain.AsRef": {"tf": 1}, "sain.AsMut": {"tf": 1}}, "df": 3, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"sain.Iter": {"tf": 1.4142135623730951}, "sain.iter.Iter": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}}}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"sain.AsRef": {"tf": 1}, "sain.AsMut": {"tf": 1}}, "df": 2, "[": {"docs": {}, "df": 0, "~": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"sain.Some": {"tf": 1}}, "df": 1}}}}}}, "t": {"docs": {"sain.Once": {"tf": 1}, "sain.Ok": {"tf": 1}, "sain.Vec": {"tf": 1}, "sain.vec.Vec": {"tf": 1}}, "df": 4}, "e": {"docs": {"sain.Err": {"tf": 1}}, "df": 1}}}}}}}}}}, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"sain.Some": {"tf": 1}, "sain.Iter": {"tf": 1}, "sain.iter.Iter": {"tf": 1}}, "df": 3}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"sain.Some": {"tf": 1}, "sain.Iter": {"tf": 1}, "sain.iter.Iter": {"tf": 1}}, "df": 3, "[": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"sain.Some": {"tf": 1}}, "df": 1}}}}}}}}, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {"sain.Iter": {"tf": 1}, "sain.iter.Iter": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "c": {"docs": {"sain.Iter": {"tf": 1.4142135623730951}, "sain.iter.Iter": {"tf": 1.4142135623730951}}, "df": 2}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "~": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {"sain.Iter": {"tf": 1}, "sain.iter.Iter": {"tf": 1}}, "df": 2}}}}}}}}}, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "~": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {"sain.Iter": {"tf": 1}, "sain.iter.Iter": {"tf": 1}}, "df": 2}}}}}}}}}}, "[": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"sain.Iter": {"tf": 1}, "sain.iter.Iter": {"tf": 1}}, "df": 2}}}}}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "t": {"docs": {"sain.Iter": {"tf": 1}, "sain.iter.Iter": {"tf": 1}}, "df": 2}}}, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sain.Iter": {"tf": 1}, "sain.iter.Iter": {"tf": 1}}, "df": 2}}}}}}}, "doc": {"root": {"0": {"docs": {"sain.AsRef": {"tf": 2.23606797749979}, "sain.Some.map": {"tf": 1.7320508075688772}, "sain.Some.map_or": {"tf": 2}, "sain.Some.map_or_else": {"tf": 2}, "sain.Some.as_ref": {"tf": 1.7320508075688772}, "sain.Some.as_mut": {"tf": 1.4142135623730951}, "sain.Iter": {"tf": 1}, "sain.Iter.collect": {"tf": 1.4142135623730951}, "sain.Iter.to_vec": {"tf": 1.4142135623730951}, "sain.Iter.enumerate": {"tf": 1}, "sain.deprecated": {"tf": 2}, "sain.Ok.unwrap_or_else": {"tf": 1}, "sain.Ok.ok": {"tf": 1}, "sain.Ok.err": {"tf": 1}, "sain.Ok.map": {"tf": 1.4142135623730951}, "sain.Ok.map_err": {"tf": 1}, "sain.Ok.iter": {"tf": 1}, "sain.Vec.with_capacity": {"tf": 1}, "sain.Vec.get": {"tf": 1}, "sain.Vec.insert": {"tf": 1}, "sain.Vec.clear": {"tf": 1}, "sain.cfg": {"tf": 1}, "sain.iter.Iter": {"tf": 1}, "sain.iter.Iter.collect": {"tf": 1.4142135623730951}, "sain.iter.Iter.to_vec": {"tf": 1.4142135623730951}, "sain.iter.Iter.enumerate": {"tf": 1}, "sain.vec.Vec.with_capacity": {"tf": 1}, "sain.vec.Vec.get": {"tf": 1}, "sain.vec.Vec.insert": {"tf": 1}, "sain.vec.Vec.clear": {"tf": 1}}, "df": 30}, "1": {"0": {"docs": {"sain.Some": {"tf": 1.4142135623730951}, "sain.Some.unwrap_or": {"tf": 1.7320508075688772}, "sain.Some.unwrap_or_else": {"tf": 1}, "sain.Some.map": {"tf": 1}, "sain.Some.map_or": {"tf": 1}, "sain.Some.map_or_else": {"tf": 1}, "sain.Some.and_ok": {"tf": 1.7320508075688772}, "sain.Some.and_then": {"tf": 1.4142135623730951}, "sain.futures.spawn": {"tf": 1}}, "df": 9}, "1": {"docs": {"sain.cfg": {"tf": 1}}, "df": 1}, "docs": {"sain.AsRef": {"tf": 2}, "sain.Some.unwrap_unchecked": {"tf": 1.4142135623730951}, "sain.Some.map_or": {"tf": 1}, "sain.Some.map_or_else": {"tf": 1}, "sain.Some.filter": {"tf": 1.4142135623730951}, "sain.Iter": {"tf": 2}, "sain.Iter.collect": {"tf": 1.4142135623730951}, "sain.Iter.next": {"tf": 1.4142135623730951}, "sain.Iter.map": {"tf": 1.4142135623730951}, "sain.Iter.skip": {"tf": 1}, "sain.Iter.zip": {"tf": 1.4142135623730951}, "sain.Iter.all": {"tf": 1}, "sain.Iter.any": {"tf": 1}, "sain.Iter.sort": {"tf": 1.4142135623730951}, "sain.Iter.first": {"tf": 1}, "sain.Iter.last": {"tf": 1}, "sain.Iter.reversed": {"tf": 1.4142135623730951}, "sain.Iter.union": {"tf": 1.4142135623730951}, "sain.Iter.for_each": {"tf": 1.4142135623730951}, "sain.Iter.enumerate": {"tf": 1.7320508075688772}, "sain.deprecated": {"tf": 1}, "sain.Ok.map": {"tf": 1.4142135623730951}, "sain.Ok.map_err": {"tf": 1}, "sain.Vec": {"tf": 1.4142135623730951}, "sain.Vec.__init__": {"tf": 1}, "sain.Vec.with_capacity": {"tf": 1}, "sain.Vec.into_inner": {"tf": 1.4142135623730951}, "sain.Vec.len": {"tf": 1}, "sain.Vec.iter": {"tf": 1}, "sain.Vec.split_off": {"tf": 1.7320508075688772}, "sain.Vec.split_first": {"tf": 1.7320508075688772}, "sain.Vec.first": {"tf": 1.4142135623730951}, "sain.Vec.retain": {"tf": 1.4142135623730951}, "sain.Vec.push": {"tf": 1.4142135623730951}, "sain.Vec.get": {"tf": 1.4142135623730951}, "sain.Vec.insert": {"tf": 1.4142135623730951}, "sain.Vec.pop": {"tf": 1.4142135623730951}, "sain.Vec.extend": {"tf": 1.4142135623730951}, "sain.Vec.copy": {"tf": 1}, "sain.Vec.clear": {"tf": 1}, "sain.cfg": {"tf": 1}, "sain.iter.Iter": {"tf": 2}, "sain.iter.Iter.collect": {"tf": 1.4142135623730951}, "sain.iter.Iter.next": {"tf": 1.4142135623730951}, "sain.iter.Iter.map": {"tf": 1.4142135623730951}, "sain.iter.Iter.skip": {"tf": 1}, "sain.iter.Iter.zip": {"tf": 1.4142135623730951}, "sain.iter.Iter.all": {"tf": 1}, "sain.iter.Iter.any": {"tf": 1}, "sain.iter.Iter.sort": {"tf": 1.4142135623730951}, "sain.iter.Iter.first": {"tf": 1}, "sain.iter.Iter.last": {"tf": 1}, "sain.iter.Iter.reversed": {"tf": 1.4142135623730951}, "sain.iter.Iter.union": {"tf": 1.4142135623730951}, "sain.iter.Iter.for_each": {"tf": 1.4142135623730951}, "sain.iter.Iter.enumerate": {"tf": 1.7320508075688772}, "sain.iter.iter": {"tf": 1.4142135623730951}, "sain.iter.once": {"tf": 1.4142135623730951}, "sain.vec": {"tf": 1.4142135623730951}, "sain.vec.Vec": {"tf": 1.4142135623730951}, "sain.vec.Vec.__init__": {"tf": 1}, "sain.vec.Vec.with_capacity": {"tf": 1}, "sain.vec.Vec.into_inner": {"tf": 1.4142135623730951}, "sain.vec.Vec.len": {"tf": 1}, "sain.vec.Vec.iter": {"tf": 1}, "sain.vec.Vec.split_off": {"tf": 1.7320508075688772}, "sain.vec.Vec.split_first": {"tf": 1.7320508075688772}, "sain.vec.Vec.first": {"tf": 1.4142135623730951}, "sain.vec.Vec.retain": {"tf": 1.4142135623730951}, "sain.vec.Vec.push": {"tf": 1.4142135623730951}, "sain.vec.Vec.get": {"tf": 1.4142135623730951}, "sain.vec.Vec.insert": {"tf": 1.4142135623730951}, "sain.vec.Vec.pop": {"tf": 1.4142135623730951}, "sain.vec.Vec.extend": {"tf": 1.4142135623730951}, "sain.vec.Vec.copy": {"tf": 1}, "sain.vec.Vec.clear": {"tf": 1}}, "df": 76}, "2": {"docs": {"sain.AsRef": {"tf": 1}, "sain.Some.unwrap_unchecked": {"tf": 1.4142135623730951}, "sain.Some.map": {"tf": 1}, "sain.Some.filter": {"tf": 1.7320508075688772}, "sain.Some.and_then": {"tf": 1}, "sain.Iter": {"tf": 2.23606797749979}, "sain.Iter.collect": {"tf": 1.4142135623730951}, "sain.Iter.next": {"tf": 1.4142135623730951}, "sain.Iter.map": {"tf": 1.4142135623730951}, "sain.Iter.take": {"tf": 1}, "sain.Iter.zip": {"tf": 1.4142135623730951}, "sain.Iter.all": {"tf": 1}, "sain.Iter.any": {"tf": 1}, "sain.Iter.union": {"tf": 1.4142135623730951}, "sain.Iter.for_each": {"tf": 1.4142135623730951}, "sain.Iter.enumerate": {"tf": 1.7320508075688772}, "sain.Ok.map": {"tf": 1}, "sain.Ok.map_or_else": {"tf": 1.4142135623730951}, "sain.Vec": {"tf": 1.7320508075688772}, "sain.Vec.__init__": {"tf": 1.4142135623730951}, "sain.Vec.with_capacity": {"tf": 1}, "sain.Vec.into_inner": {"tf": 1.4142135623730951}, "sain.Vec.len": {"tf": 1}, "sain.Vec.iter": {"tf": 1}, "sain.Vec.split_off": {"tf": 1.4142135623730951}, "sain.Vec.split_first": {"tf": 1.4142135623730951}, "sain.Vec.first": {"tf": 1}, "sain.Vec.retain": {"tf": 1.4142135623730951}, "sain.Vec.get": {"tf": 1}, "sain.Vec.insert": {"tf": 1.4142135623730951}, "sain.Vec.pop": {"tf": 1.4142135623730951}, "sain.Vec.extend": {"tf": 1.4142135623730951}, "sain.Vec.copy": {"tf": 1}, "sain.Vec.clear": {"tf": 1}, "sain.iter.Iter": {"tf": 2.23606797749979}, "sain.iter.Iter.collect": {"tf": 1.4142135623730951}, "sain.iter.Iter.next": {"tf": 1.4142135623730951}, "sain.iter.Iter.map": {"tf": 1.4142135623730951}, "sain.iter.Iter.take": {"tf": 1}, "sain.iter.Iter.zip": {"tf": 1.4142135623730951}, "sain.iter.Iter.all": {"tf": 1}, "sain.iter.Iter.any": {"tf": 1}, "sain.iter.Iter.union": {"tf": 1.4142135623730951}, "sain.iter.Iter.for_each": {"tf": 1.4142135623730951}, "sain.iter.Iter.enumerate": {"tf": 1.7320508075688772}, "sain.iter.iter": {"tf": 1.4142135623730951}, "sain.vec": {"tf": 1.7320508075688772}, "sain.vec.Vec": {"tf": 1.7320508075688772}, "sain.vec.Vec.__init__": {"tf": 1.4142135623730951}, "sain.vec.Vec.with_capacity": {"tf": 1}, "sain.vec.Vec.into_inner": {"tf": 1.4142135623730951}, "sain.vec.Vec.len": {"tf": 1}, "sain.vec.Vec.iter": {"tf": 1}, "sain.vec.Vec.split_off": {"tf": 1.4142135623730951}, "sain.vec.Vec.split_first": {"tf": 1.4142135623730951}, "sain.vec.Vec.first": {"tf": 1}, "sain.vec.Vec.retain": {"tf": 1.4142135623730951}, "sain.vec.Vec.get": {"tf": 1}, "sain.vec.Vec.insert": {"tf": 1.4142135623730951}, "sain.vec.Vec.pop": {"tf": 1.4142135623730951}, "sain.vec.Vec.extend": {"tf": 1.4142135623730951}, "sain.vec.Vec.copy": {"tf": 1}, "sain.vec.Vec.clear": {"tf": 1}}, "df": 63}, "3": {"9": {"docs": {"sain.cfg_attr": {"tf": 1}, "sain.Iter.collect": {"tf": 2.8284271247461903}, "sain.Iter.take": {"tf": 3.7416573867739413}, "sain.Iter.take_while": {"tf": 2.8284271247461903}, "sain.Iter.drop_while": {"tf": 2.8284271247461903}, "sain.Iter.filter": {"tf": 2.8284271247461903}, "sain.Iter.async_for_each": {"tf": 2}, "sain.vec": {"tf": 2.8284271247461903}, "sain.Vec": {"tf": 2.8284271247461903}, "sain.Vec.__init__": {"tf": 2}, "sain.Vec.with_capacity": {"tf": 1}, "sain.Vec.remove": {"tf": 3.4641016151377544}, "sain.Vec.swap_remove": {"tf": 3.4641016151377544}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.iter.Iter.collect": {"tf": 2.8284271247461903}, "sain.iter.Iter.take": {"tf": 3.7416573867739413}, "sain.iter.Iter.take_while": {"tf": 2.8284271247461903}, "sain.iter.Iter.drop_while": {"tf": 2.8284271247461903}, "sain.iter.Iter.filter": {"tf": 2.8284271247461903}, "sain.iter.Iter.async_for_each": {"tf": 2}, "sain.vec.Vec": {"tf": 2.8284271247461903}, "sain.vec.Vec.__init__": {"tf": 2}, "sain.vec.Vec.with_capacity": {"tf": 1}, "sain.vec.Vec.remove": {"tf": 3.4641016151377544}, "sain.vec.Vec.swap_remove": {"tf": 3.4641016151377544}, "sain.vec.vec": {"tf": 2.8284271247461903}}, "df": 26}, "docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.Some.filter": {"tf": 1.7320508075688772}, "sain.Some.is_some_and": {"tf": 1.4142135623730951}, "sain.Iter": {"tf": 1.7320508075688772}, "sain.Iter.collect": {"tf": 1.7320508075688772}, "sain.Iter.by_ref": {"tf": 1}, "sain.Iter.map": {"tf": 1.4142135623730951}, "sain.Iter.zip": {"tf": 1.4142135623730951}, "sain.Iter.all": {"tf": 1}, "sain.Iter.any": {"tf": 1}, "sain.Iter.sort": {"tf": 1.7320508075688772}, "sain.Iter.first": {"tf": 1.4142135623730951}, "sain.Iter.last": {"tf": 1}, "sain.Iter.reversed": {"tf": 1.4142135623730951}, "sain.Iter.count": {"tf": 1.4142135623730951}, "sain.Iter.union": {"tf": 1.4142135623730951}, "sain.Iter.for_each": {"tf": 1.4142135623730951}, "sain.Iter.enumerate": {"tf": 1.4142135623730951}, "sain.deprecated": {"tf": 1}, "sain.Ok.map_or": {"tf": 1}, "sain.Ok.map_or_else": {"tf": 1}, "sain.Vec": {"tf": 1.4142135623730951}, "sain.Vec.__init__": {"tf": 1.4142135623730951}, "sain.Vec.with_capacity": {"tf": 2}, "sain.Vec.into_inner": {"tf": 1.4142135623730951}, "sain.Vec.len": {"tf": 1.4142135623730951}, "sain.Vec.iter": {"tf": 1}, "sain.Vec.split_off": {"tf": 1.4142135623730951}, "sain.Vec.split_first": {"tf": 1.4142135623730951}, "sain.Vec.first": {"tf": 1}, "sain.Vec.retain": {"tf": 1.4142135623730951}, "sain.Vec.get": {"tf": 1.4142135623730951}, "sain.Vec.insert": {"tf": 1.4142135623730951}, "sain.Vec.pop": {"tf": 1.4142135623730951}, "sain.Vec.extend": {"tf": 1.4142135623730951}, "sain.Vec.copy": {"tf": 1}, "sain.Vec.clear": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}, "sain.iter.Iter": {"tf": 1.7320508075688772}, "sain.iter.Iter.collect": {"tf": 1.7320508075688772}, "sain.iter.Iter.by_ref": {"tf": 1}, "sain.iter.Iter.map": {"tf": 1.4142135623730951}, "sain.iter.Iter.zip": {"tf": 1.4142135623730951}, "sain.iter.Iter.all": {"tf": 1}, "sain.iter.Iter.any": {"tf": 1}, "sain.iter.Iter.sort": {"tf": 1.7320508075688772}, "sain.iter.Iter.first": {"tf": 1.4142135623730951}, "sain.iter.Iter.last": {"tf": 1}, "sain.iter.Iter.reversed": {"tf": 1.4142135623730951}, "sain.iter.Iter.count": {"tf": 1.4142135623730951}, "sain.iter.Iter.union": {"tf": 1.4142135623730951}, "sain.iter.Iter.for_each": {"tf": 1.4142135623730951}, "sain.iter.Iter.enumerate": {"tf": 1.4142135623730951}, "sain.iter.iter": {"tf": 1.4142135623730951}, "sain.vec": {"tf": 1.4142135623730951}, "sain.vec.Vec": {"tf": 1.4142135623730951}, "sain.vec.Vec.__init__": {"tf": 1.4142135623730951}, "sain.vec.Vec.with_capacity": {"tf": 2}, "sain.vec.Vec.into_inner": {"tf": 1.4142135623730951}, "sain.vec.Vec.len": {"tf": 1.4142135623730951}, "sain.vec.Vec.iter": {"tf": 1}, "sain.vec.Vec.split_off": {"tf": 1.4142135623730951}, "sain.vec.Vec.split_first": {"tf": 1.4142135623730951}, "sain.vec.Vec.first": {"tf": 1}, "sain.vec.Vec.retain": {"tf": 1.4142135623730951}, "sain.vec.Vec.get": {"tf": 1.4142135623730951}, "sain.vec.Vec.insert": {"tf": 1.4142135623730951}, "sain.vec.Vec.pop": {"tf": 1.4142135623730951}, "sain.vec.Vec.extend": {"tf": 1.4142135623730951}, "sain.vec.Vec.copy": {"tf": 1}, "sain.vec.Vec.clear": {"tf": 1}}, "df": 73}, "4": {"2": {"docs": {"sain.Ok.map_or": {"tf": 1.7320508075688772}}, "df": 1}, "docs": {"sain.Iter.zip": {"tf": 1.4142135623730951}, "sain.Iter.union": {"tf": 1.4142135623730951}, "sain.Ok.unwrap_or_else": {"tf": 1.7320508075688772}, "sain.Vec.with_capacity": {"tf": 1}, "sain.Vec.extend": {"tf": 1.4142135623730951}, "sain.Vec.copy": {"tf": 1}, "sain.iter.Iter.zip": {"tf": 1.4142135623730951}, "sain.iter.Iter.union": {"tf": 1.4142135623730951}, "sain.vec.Vec.with_capacity": {"tf": 1}, "sain.vec.Vec.extend": {"tf": 1.4142135623730951}, "sain.vec.Vec.copy": {"tf": 1}}, "df": 11}, "5": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.Some.unwrap": {"tf": 1.4142135623730951}, "sain.Some.unwrap_or": {"tf": 1.4142135623730951}, "sain.Some.unwrap_or_else": {"tf": 1.4142135623730951}, "sain.Some.map": {"tf": 1}, "sain.Some.map_or": {"tf": 1.7320508075688772}, "sain.Some.map_or_else": {"tf": 1.7320508075688772}, "sain.Some.and_ok": {"tf": 1}, "sain.Some.and_then": {"tf": 1}, "sain.Some.as_ref": {"tf": 1.7320508075688772}, "sain.Some.as_mut": {"tf": 1}, "sain.Some.is_some": {"tf": 1}, "sain.Some.is_some_and": {"tf": 1}, "sain.Some.is_none": {"tf": 1}, "sain.Iter.zip": {"tf": 1.4142135623730951}, "sain.Iter.union": {"tf": 1.4142135623730951}, "sain.Ok.map_err": {"tf": 1.4142135623730951}, "sain.Vec.extend": {"tf": 1.4142135623730951}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}, "sain.iter.Iter.zip": {"tf": 1.4142135623730951}, "sain.iter.Iter.union": {"tf": 1.4142135623730951}, "sain.vec.Vec.extend": {"tf": 1.4142135623730951}}, "df": 24}, "6": {"docs": {"sain.Some.map_or": {"tf": 1}, "sain.Some.map_or_else": {"tf": 1}, "sain.Iter.zip": {"tf": 1.4142135623730951}, "sain.Iter.sort": {"tf": 1.4142135623730951}, "sain.Iter.first": {"tf": 1}, "sain.Iter.last": {"tf": 1}, "sain.Iter.reversed": {"tf": 1.4142135623730951}, "sain.Iter.union": {"tf": 1.4142135623730951}, "sain.Vec.extend": {"tf": 1.4142135623730951}, "sain.iter.Iter.zip": {"tf": 1.4142135623730951}, "sain.iter.Iter.sort": {"tf": 1.4142135623730951}, "sain.iter.Iter.first": {"tf": 1}, "sain.iter.Iter.last": {"tf": 1}, "sain.iter.Iter.reversed": {"tf": 1.4142135623730951}, "sain.iter.Iter.union": {"tf": 1.4142135623730951}, "sain.vec.Vec.extend": {"tf": 1.4142135623730951}}, "df": 16}, "7": {"docs": {"sain.Iter.sort": {"tf": 1.4142135623730951}, "sain.Iter.first": {"tf": 1}, "sain.Iter.last": {"tf": 1.4142135623730951}, "sain.Iter.reversed": {"tf": 1.4142135623730951}, "sain.iter.Iter.sort": {"tf": 1.4142135623730951}, "sain.iter.Iter.first": {"tf": 1}, "sain.iter.Iter.last": {"tf": 1.4142135623730951}, "sain.iter.Iter.reversed": {"tf": 1.4142135623730951}}, "df": 8}, "8": {"docs": {"sain.Ok.map_or_else": {"tf": 1}}, "df": 1}, "9": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 4}, "docs": {"sain": {"tf": 11.575836902790225}, "sain.cfg": {"tf": 18.49324200890693}, "sain.cfg_attr": {"tf": 16.55294535724685}, "sain.Default": {"tf": 10.954451150103322}, "sain.Default.__init__": {"tf": 1.7320508075688772}, "sain.Default.default": {"tf": 1.7320508075688772}, "sain.AsRef": {"tf": 15.524174696260024}, "sain.AsRef.__init__": {"tf": 1.7320508075688772}, "sain.AsRef.object": {"tf": 1.7320508075688772}, "sain.AsRef.copy": {"tf": 3.1622776601683795}, "sain.AsMut": {"tf": 1.7320508075688772}, "sain.AsMut.__init__": {"tf": 1.7320508075688772}, "sain.AsMut.object": {"tf": 1.7320508075688772}, "sain.AsMut.copy": {"tf": 3.1622776601683795}, "sain.Some": {"tf": 11.575836902790225}, "sain.Some.__init__": {"tf": 1.7320508075688772}, "sain.Some.default": {"tf": 2.6457513110645907}, "sain.Some.read": {"tf": 1.7320508075688772}, "sain.Some.unwrap": {"tf": 9.848857801796104}, "sain.Some.unwrap_or": {"tf": 10.14889156509222}, "sain.Some.unwrap_or_else": {"tf": 10.344080432788601}, "sain.Some.unwrap_unchecked": {"tf": 9.9498743710662}, "sain.Some.expect": {"tf": 10.344080432788601}, "sain.Some.map": {"tf": 10.295630140987}, "sain.Some.map_or": {"tf": 11.874342087037917}, "sain.Some.map_or_else": {"tf": 12.24744871391589}, "sain.Some.filter": {"tf": 12.165525060596439}, "sain.Some.take": {"tf": 8}, "sain.Some.replace": {"tf": 8.18535277187245}, "sain.Some.and_ok": {"tf": 11}, "sain.Some.and_then": {"tf": 11.704699910719626}, "sain.Some.iter": {"tf": 10.246950765959598}, "sain.Some.as_ref": {"tf": 14.52583904633395}, "sain.Some.as_mut": {"tf": 11.269427669584644}, "sain.Some.is_some": {"tf": 9.643650760992955}, "sain.Some.is_some_and": {"tf": 11.269427669584644}, "sain.Some.is_none": {"tf": 9.643650760992955}, "sain.Option": {"tf": 1.7320508075688772}, "sain.NOTHING": {"tf": 1.7320508075688772}, "sain.Iter": {"tf": 13.341664064126334}, "sain.Iter.__init__": {"tf": 1.7320508075688772}, "sain.Iter.default": {"tf": 7}, "sain.Iter.collect": {"tf": 9.38083151964686}, "sain.Iter.to_vec": {"tf": 8.366600265340756}, "sain.Iter.copied": {"tf": 9.433981132056603}, "sain.Iter.by_ref": {"tf": 9}, "sain.Iter.next": {"tf": 10.770329614269007}, "sain.Iter.map": {"tf": 10.63014581273465}, "sain.Iter.take": {"tf": 10.344080432788601}, "sain.Iter.take_while": {"tf": 10.908712114635714}, "sain.Iter.drop_while": {"tf": 11.135528725660043}, "sain.Iter.filter": {"tf": 9.848857801796104}, "sain.Iter.skip": {"tf": 9.433981132056603}, "sain.Iter.zip": {"tf": 13.711309200802088}, "sain.Iter.all": {"tf": 10.770329614269007}, "sain.Iter.any": {"tf": 10.723805294763608}, "sain.Iter.sort": {"tf": 11.135528725660043}, "sain.Iter.first": {"tf": 9.539392014169456}, "sain.Iter.last": {"tf": 9.746794344808963}, "sain.Iter.reversed": {"tf": 9.746794344808963}, "sain.Iter.count": {"tf": 7.211102550927978}, "sain.Iter.union": {"tf": 11.789826122551595}, "sain.Iter.for_each": {"tf": 9.433981132056603}, "sain.Iter.async_for_each": {"tf": 14.38749456993816}, "sain.Iter.enumerate": {"tf": 9.848857801796104}, "sain.todo": {"tf": 8.888194417315589}, "sain.deprecated": {"tf": 12.206555615733702}, "sain.unimplemented": {"tf": 8.48528137423857}, "sain.doc": {"tf": 9.695359714832659}, "sain.Once": {"tf": 16.401219466856727}, "sain.Once.__init__": {"tf": 1.7320508075688772}, "sain.Once.is_set": {"tf": 1.7320508075688772}, "sain.Once.get": {"tf": 3}, "sain.Once.set": {"tf": 4.358898943540674}, "sain.Once.clear": {"tf": 1.7320508075688772}, "sain.Once.get_or_init": {"tf": 2.8284271247461903}, "sain.Ok": {"tf": 2.449489742783178}, "sain.Ok.__init__": {"tf": 1.7320508075688772}, "sain.Ok.is_ok": {"tf": 8.48528137423857}, "sain.Ok.is_ok_and": {"tf": 9.273618495495704}, "sain.Ok.is_err": {"tf": 8.246211251235321}, "sain.Ok.is_err_and": {"tf": 9.273618495495704}, "sain.Ok.expect": {"tf": 11}, "sain.Ok.unwrap": {"tf": 10.295630140987}, "sain.Ok.unwrap_or": {"tf": 10.862780491200215}, "sain.Ok.unwrap_or_else": {"tf": 11.445523142259598}, "sain.Ok.unwrap_err": {"tf": 10.488088481701515}, "sain.Ok.ok": {"tf": 11.135528725660043}, "sain.Ok.err": {"tf": 11.135528725660043}, "sain.Ok.inspect": {"tf": 12.489995996796797}, "sain.Ok.inspect_err": {"tf": 12.449899597988733}, "sain.Ok.map": {"tf": 11.832159566199232}, "sain.Ok.map_or": {"tf": 12.609520212918492}, "sain.Ok.map_or_else": {"tf": 14.106735979665885}, "sain.Ok.map_err": {"tf": 11.269427669584644}, "sain.Ok.iter": {"tf": 12.041594578792296}, "sain.Err": {"tf": 2.23606797749979}, "sain.Err.__init__": {"tf": 1.7320508075688772}, "sain.Err.is_ok": {"tf": 8.366600265340756}, "sain.Err.is_ok_and": {"tf": 9.16515138991168}, "sain.Err.is_err": {"tf": 8.12403840463596}, "sain.Err.is_err_and": {"tf": 8.94427190999916}, "sain.Err.expect": {"tf": 1.7320508075688772}, "sain.Err.expect_err": {"tf": 1.7320508075688772}, "sain.Err.unwrap": {"tf": 1.7320508075688772}, "sain.Err.unwrap_or": {"tf": 1.7320508075688772}, "sain.Err.unwrap_or_else": {"tf": 1.7320508075688772}, "sain.Err.unwrap_err": {"tf": 1.7320508075688772}, "sain.Err.inspect": {"tf": 1.7320508075688772}, "sain.Err.inspect_err": {"tf": 1.7320508075688772}, "sain.Err.ok": {"tf": 1.7320508075688772}, "sain.Err.err": {"tf": 1.7320508075688772}, "sain.Err.map": {"tf": 1.7320508075688772}, "sain.Err.map_or": {"tf": 1.7320508075688772}, "sain.Err.map_or_else": {"tf": 1.7320508075688772}, "sain.Err.map_err": {"tf": 1.7320508075688772}, "sain.Err.iter": {"tf": 1.7320508075688772}, "sain.Result": {"tf": 1.7320508075688772}, "sain.vec": {"tf": 12.609520212918492}, "sain.Vec": {"tf": 12.609520212918492}, "sain.Vec.__init__": {"tf": 11}, "sain.Vec.with_capacity": {"tf": 12.24744871391589}, "sain.Vec.into_inner": {"tf": 8.366600265340756}, "sain.Vec.len": {"tf": 7.483314773547883}, "sain.Vec.capacity": {"tf": 4.242640687119285}, "sain.Vec.iter": {"tf": 9.219544457292887}, "sain.Vec.is_empty": {"tf": 1.7320508075688772}, "sain.Vec.split_off": {"tf": 8.774964387392123}, "sain.Vec.split_first": {"tf": 11.61895003862225}, "sain.Vec.first": {"tf": 8.246211251235321}, "sain.Vec.truncate": {"tf": 1.7320508075688772}, "sain.Vec.retain": {"tf": 9.797958971132712}, "sain.Vec.push": {"tf": 7.3484692283495345}, "sain.Vec.append": {"tf": 2.23606797749979}, "sain.Vec.get": {"tf": 9.746794344808963}, "sain.Vec.insert": {"tf": 8.94427190999916}, "sain.Vec.pop": {"tf": 9.327379053088816}, "sain.Vec.remove": {"tf": 9.327379053088816}, "sain.Vec.swap_remove": {"tf": 9.695359714832659}, "sain.Vec.extend": {"tf": 10.14889156509222}, "sain.Vec.copy": {"tf": 8.94427190999916}, "sain.Vec.clear": {"tf": 8.06225774829855}, "sain.cfg.cfg_attr": {"tf": 16.55294535724685}, "sain.cfg.cfg": {"tf": 13.92838827718412}, "sain.futures": {"tf": 1.7320508075688772}, "sain.futures.spawn": {"tf": 13.379088160259652}, "sain.futures.loop": {"tf": 3.872983346207417}, "sain.iter": {"tf": 1.7320508075688772}, "sain.iter.Iter": {"tf": 13.341664064126334}, "sain.iter.Iter.__init__": {"tf": 1.7320508075688772}, "sain.iter.Iter.default": {"tf": 7}, "sain.iter.Iter.collect": {"tf": 9.38083151964686}, "sain.iter.Iter.to_vec": {"tf": 8.366600265340756}, "sain.iter.Iter.copied": {"tf": 9.433981132056603}, "sain.iter.Iter.by_ref": {"tf": 9}, "sain.iter.Iter.next": {"tf": 10.770329614269007}, "sain.iter.Iter.map": {"tf": 10.63014581273465}, "sain.iter.Iter.take": {"tf": 10.344080432788601}, "sain.iter.Iter.take_while": {"tf": 10.908712114635714}, "sain.iter.Iter.drop_while": {"tf": 11.135528725660043}, "sain.iter.Iter.filter": {"tf": 9.848857801796104}, "sain.iter.Iter.skip": {"tf": 9.433981132056603}, "sain.iter.Iter.zip": {"tf": 13.711309200802088}, "sain.iter.Iter.all": {"tf": 10.770329614269007}, "sain.iter.Iter.any": {"tf": 10.723805294763608}, "sain.iter.Iter.sort": {"tf": 11.135528725660043}, "sain.iter.Iter.first": {"tf": 9.539392014169456}, "sain.iter.Iter.last": {"tf": 9.746794344808963}, "sain.iter.Iter.reversed": {"tf": 9.746794344808963}, "sain.iter.Iter.count": {"tf": 7.211102550927978}, "sain.iter.Iter.union": {"tf": 11.789826122551595}, "sain.iter.Iter.for_each": {"tf": 9.433981132056603}, "sain.iter.Iter.async_for_each": {"tf": 14.38749456993816}, "sain.iter.Iter.enumerate": {"tf": 9.848857801796104}, "sain.iter.iter": {"tf": 9.797958971132712}, "sain.iter.empty": {"tf": 7.280109889280518}, "sain.iter.once": {"tf": 9.327379053088816}, "sain.vec.Vec": {"tf": 12.609520212918492}, "sain.vec.Vec.__init__": {"tf": 11}, "sain.vec.Vec.with_capacity": {"tf": 12.24744871391589}, "sain.vec.Vec.into_inner": {"tf": 8.366600265340756}, "sain.vec.Vec.len": {"tf": 7.483314773547883}, "sain.vec.Vec.capacity": {"tf": 4.242640687119285}, "sain.vec.Vec.iter": {"tf": 9.219544457292887}, "sain.vec.Vec.is_empty": {"tf": 1.7320508075688772}, "sain.vec.Vec.split_off": {"tf": 8.774964387392123}, "sain.vec.Vec.split_first": {"tf": 11.61895003862225}, "sain.vec.Vec.first": {"tf": 8.246211251235321}, "sain.vec.Vec.truncate": {"tf": 1.7320508075688772}, "sain.vec.Vec.retain": {"tf": 9.797958971132712}, "sain.vec.Vec.push": {"tf": 7.3484692283495345}, "sain.vec.Vec.append": {"tf": 2.23606797749979}, "sain.vec.Vec.get": {"tf": 9.746794344808963}, "sain.vec.Vec.insert": {"tf": 8.94427190999916}, "sain.vec.Vec.pop": {"tf": 9.327379053088816}, "sain.vec.Vec.remove": {"tf": 9.327379053088816}, "sain.vec.Vec.swap_remove": {"tf": 9.695359714832659}, "sain.vec.Vec.extend": {"tf": 10.14889156509222}, "sain.vec.Vec.copy": {"tf": 8.94427190999916}, "sain.vec.Vec.clear": {"tf": 8.06225774829855}, "sain.vec.vec": {"tf": 8}}, "df": 201, "s": {"docs": {"sain.cfg_attr": {"tf": 1}, "sain.Some.and_then": {"tf": 1}, "sain.Iter.collect": {"tf": 1}, "sain.deprecated": {"tf": 1}, "sain.unimplemented": {"tf": 1}, "sain.doc": {"tf": 1}, "sain.Vec.first": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.iter.Iter.collect": {"tf": 1}, "sain.vec.Vec.first": {"tf": 1}}, "df": 10, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"sain": {"tf": 1}, "sain.iter": {"tf": 1}}, "df": 2}}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {"sain.Default": {"tf": 1}}, "df": 1}}}}}}}}}, "r": {"docs": {}, "df": 0, "t": {"docs": {"sain.Once": {"tf": 1}}, "df": 1, "s": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"sain.Iter.filter": {"tf": 1}, "sain.iter.Iter.filter": {"tf": 1}}, "df": 2}}}}}}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {"sain.Iter.skip": {"tf": 1.4142135623730951}, "sain.iter.Iter.skip": {"tf": 1.4142135623730951}}, "df": 2}}}}, "r": {"docs": {"sain.cfg": {"tf": 2}, "sain.cfg_attr": {"tf": 2}, "sain.Default": {"tf": 1.4142135623730951}, "sain.AsRef": {"tf": 1}, "sain.Some.expect": {"tf": 1}, "sain.Some.map_or": {"tf": 1.4142135623730951}, "sain.Some.map_or_else": {"tf": 1.4142135623730951}, "sain.Iter.collect": {"tf": 1}, "sain.Iter.next": {"tf": 1}, "sain.Iter.async_for_each": {"tf": 1.4142135623730951}, "sain.todo": {"tf": 1.4142135623730951}, "sain.deprecated": {"tf": 2}, "sain.unimplemented": {"tf": 1.4142135623730951}, "sain.Ok.is_ok": {"tf": 1}, "sain.Ok.is_ok_and": {"tf": 1}, "sain.Ok.is_err": {"tf": 1}, "sain.Ok.is_err_and": {"tf": 1}, "sain.Ok.expect": {"tf": 1.4142135623730951}, "sain.Ok.unwrap": {"tf": 1.4142135623730951}, "sain.Ok.unwrap_or": {"tf": 1.4142135623730951}, "sain.Ok.unwrap_or_else": {"tf": 1.4142135623730951}, "sain.Ok.unwrap_err": {"tf": 1.4142135623730951}, "sain.Ok.ok": {"tf": 1.4142135623730951}, "sain.Ok.err": {"tf": 1.4142135623730951}, "sain.Ok.inspect": {"tf": 2}, "sain.Ok.inspect_err": {"tf": 2}, "sain.Ok.map": {"tf": 1.7320508075688772}, "sain.Ok.map_or": {"tf": 2}, "sain.Ok.map_or_else": {"tf": 2}, "sain.Ok.map_err": {"tf": 1.4142135623730951}, "sain.Ok.iter": {"tf": 1.4142135623730951}, "sain.Err.is_ok": {"tf": 1}, "sain.Err.is_ok_and": {"tf": 1}, "sain.Err.is_err": {"tf": 1}, "sain.Err.is_err_and": {"tf": 1}, "sain.Vec.__init__": {"tf": 1}, "sain.Vec.iter": {"tf": 1.4142135623730951}, "sain.cfg.cfg_attr": {"tf": 2}, "sain.cfg.cfg": {"tf": 2}, "sain.futures.spawn": {"tf": 1.4142135623730951}, "sain.iter.Iter.collect": {"tf": 1}, "sain.iter.Iter.next": {"tf": 1}, "sain.iter.Iter.async_for_each": {"tf": 1.4142135623730951}, "sain.vec.Vec.__init__": {"tf": 1}, "sain.vec.Vec.iter": {"tf": 1.4142135623730951}}, "df": 45}, "u": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "f": {"docs": {"sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}}, "df": 2}}}, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.Iter.take_while": {"tf": 1}, "sain.Iter.drop_while": {"tf": 1}, "sain.Iter.zip": {"tf": 1}, "sain.Iter.all": {"tf": 1}, "sain.Iter.any": {"tf": 1}, "sain.Iter.sort": {"tf": 1}, "sain.Iter.first": {"tf": 1}, "sain.Iter.last": {"tf": 1}, "sain.Iter.reversed": {"tf": 1}, "sain.Iter.union": {"tf": 1}, "sain.Iter.enumerate": {"tf": 1}, "sain.iter.Iter.take_while": {"tf": 1}, "sain.iter.Iter.drop_while": {"tf": 1}, "sain.iter.Iter.zip": {"tf": 1}, "sain.iter.Iter.all": {"tf": 1}, "sain.iter.Iter.any": {"tf": 1}, "sain.iter.Iter.sort": {"tf": 1}, "sain.iter.Iter.first": {"tf": 1}, "sain.iter.Iter.last": {"tf": 1}, "sain.iter.Iter.reversed": {"tf": 1}, "sain.iter.Iter.union": {"tf": 1}, "sain.iter.Iter.enumerate": {"tf": 1}}, "df": 22}}}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.Once.get": {"tf": 1.4142135623730951}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {"sain.Iter.skip": {"tf": 1}, "sain.iter.Iter.skip": {"tf": 1}}, "df": 2}}}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"sain.Iter.all": {"tf": 1.4142135623730951}, "sain.iter.Iter.all": {"tf": 1.4142135623730951}}, "df": 2}}}}, "o": {"docs": {"sain.Some.map_or": {"tf": 1}, "sain.Some.map_or_else": {"tf": 1}}, "df": 2, "m": {"docs": {}, "df": 0, "e": {"docs": {"sain.Some": {"tf": 1.7320508075688772}, "sain.Some.default": {"tf": 1}, "sain.Some.unwrap": {"tf": 1.4142135623730951}, "sain.Some.unwrap_or": {"tf": 1.4142135623730951}, "sain.Some.unwrap_or_else": {"tf": 1.4142135623730951}, "sain.Some.unwrap_unchecked": {"tf": 1.4142135623730951}, "sain.Some.expect": {"tf": 1.4142135623730951}, "sain.Some.map": {"tf": 2}, "sain.Some.map_or": {"tf": 1.4142135623730951}, "sain.Some.map_or_else": {"tf": 1.4142135623730951}, "sain.Some.filter": {"tf": 1.7320508075688772}, "sain.Some.take": {"tf": 1.4142135623730951}, "sain.Some.replace": {"tf": 1.4142135623730951}, "sain.Some.and_ok": {"tf": 2.449489742783178}, "sain.Some.and_then": {"tf": 2}, "sain.Some.iter": {"tf": 2}, "sain.Some.as_ref": {"tf": 1.7320508075688772}, "sain.Some.as_mut": {"tf": 1.7320508075688772}, "sain.Some.is_some": {"tf": 2}, "sain.Some.is_some_and": {"tf": 2}, "sain.Some.is_none": {"tf": 1.4142135623730951}, "sain.Iter": {"tf": 1}, "sain.Iter.next": {"tf": 1.7320508075688772}, "sain.Iter.first": {"tf": 1}, "sain.Iter.last": {"tf": 1}, "sain.Once": {"tf": 1}, "sain.Ok.ok": {"tf": 1}, "sain.Ok.err": {"tf": 1}, "sain.Ok.iter": {"tf": 1.4142135623730951}, "sain.Vec.split_first": {"tf": 1.4142135623730951}, "sain.Vec.get": {"tf": 1.4142135623730951}, "sain.Vec.pop": {"tf": 1.4142135623730951}, "sain.cfg": {"tf": 1.4142135623730951}, "sain.iter.Iter": {"tf": 1}, "sain.iter.Iter.next": {"tf": 1.7320508075688772}, "sain.iter.Iter.first": {"tf": 1}, "sain.iter.Iter.last": {"tf": 1}, "sain.iter.once": {"tf": 1.4142135623730951}, "sain.vec.Vec.split_first": {"tf": 1.4142135623730951}, "sain.vec.Vec.get": {"tf": 1.4142135623730951}, "sain.vec.Vec.pop": {"tf": 1.4142135623730951}}, "df": 41, "[": {"docs": {}, "df": 0, "t": {"docs": {"sain": {"tf": 1}, "sain.Some.and_ok": {"tf": 1.4142135623730951}, "sain.Some.and_then": {"tf": 1}}, "df": 3}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"sain.Some.map": {"tf": 1}, "sain.Some.filter": {"tf": 1}, "sain.Some.and_ok": {"tf": 1}, "sain.Some.and_then": {"tf": 1}, "sain.Some.as_ref": {"tf": 1}, "sain.Some.as_mut": {"tf": 1}, "sain.Vec.split_first": {"tf": 1}, "sain.Vec.first": {"tf": 1}, "sain.Vec.get": {"tf": 1}, "sain.vec.Vec.split_first": {"tf": 1}, "sain.vec.Vec.first": {"tf": 1}, "sain.vec.Vec.get": {"tf": 1}}, "df": 12}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"sain.Some.filter": {"tf": 1}}, "df": 1}}}}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"sain.Some.as_ref": {"tf": 1}}, "df": 1}}}}}}}}}}, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"sain.Some.as_mut": {"tf": 1}}, "df": 1}}}}}}}}}}}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.cfg": {"tf": 1}, "sain.Ok.inspect": {"tf": 1}, "sain.Ok.inspect_err": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 4}}}}}}}, "l": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.Some": {"tf": 1}}, "df": 1}}}}}, "r": {"docs": {}, "df": 0, "t": {"docs": {"sain.Iter.sort": {"tf": 1.7320508075688772}, "sain.iter.Iter.sort": {"tf": 1.7320508075688772}}, "df": 2, "s": {"docs": {"sain.Iter.sort": {"tf": 1}, "sain.iter.Iter.sort": {"tf": 1}}, "df": 2}}}}, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"sain": {"tf": 2.449489742783178}, "sain.cfg": {"tf": 1.4142135623730951}, "sain.cfg_attr": {"tf": 2}, "sain.Default": {"tf": 1}, "sain.AsRef": {"tf": 1}, "sain.Some.iter": {"tf": 1}, "sain.Some.as_ref": {"tf": 1}, "sain.Iter.to_vec": {"tf": 1}, "sain.Iter.async_for_each": {"tf": 1}, "sain.todo": {"tf": 1}, "sain.deprecated": {"tf": 1}, "sain.unimplemented": {"tf": 1}, "sain.doc": {"tf": 1}, "sain.Once": {"tf": 1}, "sain.Vec.pop": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 2}, "sain.cfg.cfg": {"tf": 1.7320508075688772}, "sain.futures.spawn": {"tf": 1}, "sain.iter.Iter.to_vec": {"tf": 1}, "sain.iter.Iter.async_for_each": {"tf": 1}, "sain.iter.iter": {"tf": 1}, "sain.iter.empty": {"tf": 1}, "sain.iter.once": {"tf": 1}, "sain.vec.Vec.pop": {"tf": 1}}, "df": 24}}, "m": {"docs": {}, "df": 0, "e": {"docs": {"sain.AsRef": {"tf": 2}}, "df": 1}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"sain.Vec": {"tf": 1}, "sain.vec": {"tf": 1}, "sain.vec.Vec": {"tf": 1}}, "df": 3}}}}, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 4}}}}}}}}, "y": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 4}}}}, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.Once": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "f": {"docs": {"sain.cfg_attr": {"tf": 1}, "sain.Once": {"tf": 1}, "sain.cfg": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}}, "df": 4}}, "t": {"docs": {"sain.doc": {"tf": 1}, "sain.Once": {"tf": 1}, "sain.Once.set": {"tf": 1.7320508075688772}}, "df": 3, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.Some.take": {"tf": 1}, "sain.Once.get_or_init": {"tf": 1}}, "df": 2}}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sain.Iter.collect": {"tf": 1}, "sain.iter.Iter.collect": {"tf": 1}, "sain.iter.iter": {"tf": 1.4142135623730951}}, "df": 3}}}}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {"sain.Once": {"tf": 1.4142135623730951}}, "df": 1}}}, "u": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {"sain.AsRef": {"tf": 1}}, "df": 1}}}}, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.Iter": {"tf": 1}, "sain.Vec": {"tf": 1}, "sain.iter.Iter": {"tf": 1}, "sain.vec": {"tf": 1}, "sain.vec.Vec": {"tf": 1}}, "df": 5}}}}}}}, "c": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"sain.Ok": {"tf": 1}}, "df": 1}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sain.Some.map_or": {"tf": 1}, "sain.Some.map_or_else": {"tf": 1}, "sain.deprecated": {"tf": 1.4142135623730951}}, "df": 3}}, "k": {"docs": {"sain.Ok.inspect": {"tf": 1.7320508075688772}, "sain.Ok.inspect_err": {"tf": 1.7320508075688772}}, "df": 2}, "g": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sain.iter.once": {"tf": 1}}, "df": 1}}}}}, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {"sain.Iter.by_ref": {"tf": 1}, "sain.iter.Iter.by_ref": {"tf": 1}}, "df": 2}}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"sain.deprecated": {"tf": 1.4142135623730951}}, "df": 1}}}, "w": {"docs": {}, "df": 0, "n": {"docs": {"sain.unimplemented": {"tf": 1}}, "df": 1}}}}, "k": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {"sain.Iter.skip": {"tf": 1.4142135623730951}, "sain.iter.Iter.skip": {"tf": 1.4142135623730951}}, "df": 2, "s": {"docs": {"sain.Iter.skip": {"tf": 1}, "sain.iter.Iter.skip": {"tf": 1}}, "df": 2}}}}, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "n": {"docs": {"sain.Once": {"tf": 1.4142135623730951}, "sain.futures.spawn": {"tf": 1.4142135623730951}}, "df": 2}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.Vec.with_capacity": {"tf": 1}, "sain.Vec.split_off": {"tf": 1}, "sain.vec.Vec.with_capacity": {"tf": 1}, "sain.vec.Vec.split_off": {"tf": 1}}, "df": 4}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"sain.cfg": {"tf": 1}}, "df": 1}}}}}}}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"sain.Vec.split_off": {"tf": 2}, "sain.Vec.split_first": {"tf": 2.6457513110645907}, "sain.vec.Vec.split_off": {"tf": 2}, "sain.vec.Vec.split_first": {"tf": 2.6457513110645907}}, "df": 4}}}}}, "r": {"docs": {"sain.Iter.async_for_each": {"tf": 1.4142135623730951}, "sain.iter.Iter.async_for_each": {"tf": 1.4142135623730951}}, "df": 2, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"sain": {"tf": 1}}, "df": 1}}, "n": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1.4142135623730951}, "sain.Once": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1.4142135623730951}, "sain.cfg.cfg": {"tf": 1.4142135623730951}}, "df": 5, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"sain.cfg_attr": {"tf": 1}, "sain.deprecated": {"tf": 1.4142135623730951}, "sain.unimplemented": {"tf": 1}, "sain.cfg": {"tf": 1.4142135623730951}, "sain.cfg.cfg_attr": {"tf": 1}}, "df": 5, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"sain.cfg_attr": {"tf": 2.23606797749979}, "sain.Some.unwrap": {"tf": 1.7320508075688772}, "sain.Some.expect": {"tf": 1.4142135623730951}, "sain.Once.set": {"tf": 1}, "sain.Ok.expect": {"tf": 1.4142135623730951}, "sain.Ok.unwrap": {"tf": 1.4142135623730951}, "sain.Ok.unwrap_err": {"tf": 1}, "sain.cfg": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 2.23606797749979}}, "df": 9}}}}}}}}}, "s": {"docs": {"sain.cfg": {"tf": 1}}, "df": 1}}}, "e": {"docs": {"sain.Some.as_ref": {"tf": 1}}, "df": 1, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"sain": {"tf": 1}, "sain.Ok.is_ok": {"tf": 1}, "sain.Ok.is_ok_and": {"tf": 1}, "sain.Ok.is_err": {"tf": 1}, "sain.Ok.is_err_and": {"tf": 1}, "sain.Ok.expect": {"tf": 1.4142135623730951}, "sain.Ok.unwrap": {"tf": 1.4142135623730951}, "sain.Ok.unwrap_or": {"tf": 1.4142135623730951}, "sain.Ok.unwrap_or_else": {"tf": 1.4142135623730951}, "sain.Ok.unwrap_err": {"tf": 1.4142135623730951}, "sain.Ok.ok": {"tf": 1.4142135623730951}, "sain.Ok.err": {"tf": 1.4142135623730951}, "sain.Ok.inspect": {"tf": 1.4142135623730951}, "sain.Ok.inspect_err": {"tf": 1.4142135623730951}, "sain.Ok.map": {"tf": 1.4142135623730951}, "sain.Ok.map_or": {"tf": 1.4142135623730951}, "sain.Ok.map_or_else": {"tf": 1.4142135623730951}, "sain.Ok.map_err": {"tf": 1.4142135623730951}, "sain.Ok.iter": {"tf": 1.4142135623730951}, "sain.Err": {"tf": 1}, "sain.Err.is_ok": {"tf": 1}, "sain.Err.is_ok_and": {"tf": 1}, "sain.Err.is_err": {"tf": 1}, "sain.Err.is_err_and": {"tf": 1}}, "df": 24, "[": {"docs": {}, "df": 0, "t": {"docs": {"sain": {"tf": 1}, "sain.Ok": {"tf": 1}, "sain.Ok.map_err": {"tf": 1.4142135623730951}}, "df": 3}}, "s": {"docs": {"sain.Iter": {"tf": 1.4142135623730951}, "sain.Iter.async_for_each": {"tf": 1.4142135623730951}, "sain.iter.Iter": {"tf": 1.4142135623730951}, "sain.iter.Iter.async_for_each": {"tf": 1.4142135623730951}}, "df": 4}}}}, "t": {"docs": {"sain.Vec.split_first": {"tf": 1.4142135623730951}, "sain.vec.Vec.split_first": {"tf": 1.4142135623730951}}, "df": 2}}, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {"sain.cfg": {"tf": 1}, "sain.Default": {"tf": 1}, "sain.Default.default": {"tf": 1}, "sain.Some": {"tf": 1}, "sain.Some.map_or": {"tf": 1}, "sain.Some.map_or_else": {"tf": 1}, "sain.Some.and_ok": {"tf": 1}, "sain.Some.and_then": {"tf": 1}, "sain.Iter.default": {"tf": 1}, "sain.Iter.all": {"tf": 1}, "sain.Iter.count": {"tf": 1}, "sain.Iter.async_for_each": {"tf": 1}, "sain.Once": {"tf": 1}, "sain.Ok.expect": {"tf": 1}, "sain.Ok.unwrap": {"tf": 1}, "sain.Ok.unwrap_or": {"tf": 1}, "sain.Ok.unwrap_or_else": {"tf": 1}, "sain.Ok.unwrap_err": {"tf": 1}, "sain.Ok.iter": {"tf": 1.7320508075688772}, "sain.Vec.into_inner": {"tf": 1}, "sain.Vec.len": {"tf": 1}, "sain.Vec.capacity": {"tf": 1}, "sain.Vec.iter": {"tf": 1}, "sain.Vec.swap_remove": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}, "sain.futures.spawn": {"tf": 1}, "sain.iter.Iter.default": {"tf": 1}, "sain.iter.Iter.all": {"tf": 1}, "sain.iter.Iter.count": {"tf": 1}, "sain.iter.Iter.async_for_each": {"tf": 1}, "sain.vec.Vec.into_inner": {"tf": 1}, "sain.vec.Vec.len": {"tf": 1}, "sain.vec.Vec.capacity": {"tf": 1}, "sain.vec.Vec.iter": {"tf": 1}, "sain.vec.Vec.swap_remove": {"tf": 1}}, "df": 35, "s": {"docs": {"sain.cfg": {"tf": 1.4142135623730951}, "sain.cfg_attr": {"tf": 1.7320508075688772}, "sain.Some.default": {"tf": 1}, "sain.Some.expect": {"tf": 1}, "sain.Some.filter": {"tf": 1.7320508075688772}, "sain.Some.and_ok": {"tf": 1}, "sain.Some.and_then": {"tf": 1}, "sain.Some.iter": {"tf": 1}, "sain.Some.as_ref": {"tf": 1.4142135623730951}, "sain.Some.as_mut": {"tf": 1.4142135623730951}, "sain.Some.is_some": {"tf": 1.4142135623730951}, "sain.Some.is_some_and": {"tf": 1.7320508075688772}, "sain.Some.is_none": {"tf": 1.4142135623730951}, "sain.Iter.default": {"tf": 1}, "sain.Iter.next": {"tf": 1}, "sain.Iter.take_while": {"tf": 1}, "sain.Iter.drop_while": {"tf": 1}, "sain.Iter.zip": {"tf": 1}, "sain.Iter.first": {"tf": 1}, "sain.Iter.last": {"tf": 1}, "sain.Iter.reversed": {"tf": 1}, "sain.Iter.union": {"tf": 1}, "sain.Iter.enumerate": {"tf": 1}, "sain.Ok.is_ok": {"tf": 1}, "sain.Ok.is_ok_and": {"tf": 1.4142135623730951}, "sain.Ok.is_err": {"tf": 1}, "sain.Ok.is_err_and": {"tf": 1.4142135623730951}, "sain.Ok.map_or": {"tf": 1}, "sain.Ok.map_or_else": {"tf": 1}, "sain.Err.is_ok": {"tf": 1}, "sain.Err.is_ok_and": {"tf": 1.4142135623730951}, "sain.Err.is_err": {"tf": 1}, "sain.Err.is_err_and": {"tf": 1.4142135623730951}, "sain.Vec.is_empty": {"tf": 1}, "sain.Vec.retain": {"tf": 1}, "sain.Vec.pop": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1.7320508075688772}, "sain.cfg.cfg": {"tf": 1.4142135623730951}, "sain.futures.loop": {"tf": 1}, "sain.iter.Iter.default": {"tf": 1}, "sain.iter.Iter.next": {"tf": 1}, "sain.iter.Iter.take_while": {"tf": 1}, "sain.iter.Iter.drop_while": {"tf": 1}, "sain.iter.Iter.zip": {"tf": 1}, "sain.iter.Iter.first": {"tf": 1}, "sain.iter.Iter.last": {"tf": 1}, "sain.iter.Iter.reversed": {"tf": 1}, "sain.iter.Iter.union": {"tf": 1}, "sain.iter.Iter.enumerate": {"tf": 1}, "sain.iter.once": {"tf": 1}, "sain.vec.Vec.is_empty": {"tf": 1}, "sain.vec.Vec.retain": {"tf": 1}, "sain.vec.Vec.pop": {"tf": 1}}, "df": 53}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.Some.unwrap": {"tf": 1}, "sain.Some.unwrap_or": {"tf": 1.4142135623730951}, "sain.Some.unwrap_or_else": {"tf": 1}, "sain.Some.unwrap_unchecked": {"tf": 1}, "sain.Some.map": {"tf": 1}, "sain.Once.get_or_init": {"tf": 1}, "sain.Ok.unwrap_or": {"tf": 1}, "sain.Vec.first": {"tf": 1}, "sain.vec.Vec.first": {"tf": 1}}, "df": 9}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.Some.map_or": {"tf": 1}, "sain.Some.map_or_else": {"tf": 1}, "sain.Iter.collect": {"tf": 1}, "sain.Once.get": {"tf": 1}, "sain.Vec.split_first": {"tf": 1}, "sain.iter.Iter.collect": {"tf": 1}, "sain.vec.Vec.split_first": {"tf": 1}}, "df": 7}}}}}, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"sain.Vec.retain": {"tf": 1}, "sain.vec.Vec.retain": {"tf": 1}}, "df": 2}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 4, "s": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1.4142135623730951}, "sain.cfg.cfg_attr": {"tf": 1.4142135623730951}, "sain.cfg.cfg": {"tf": 1}}, "df": 4}, "d": {"docs": {"sain.cfg": {"tf": 1.4142135623730951}, "sain.cfg_attr": {"tf": 2.6457513110645907}, "sain.Some.unwrap_or": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 2.6457513110645907}, "sain.cfg.cfg": {"tf": 2.23606797749979}}, "df": 5}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"sain.Iter.async_for_each": {"tf": 1}, "sain.iter.Iter.async_for_each": {"tf": 1}}, "df": 2}}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"sain.Vec.retain": {"tf": 1}, "sain.Vec.remove": {"tf": 1.4142135623730951}, "sain.Vec.swap_remove": {"tf": 1.4142135623730951}, "sain.vec.Vec.retain": {"tf": 1}, "sain.vec.Vec.remove": {"tf": 1.4142135623730951}, "sain.vec.Vec.swap_remove": {"tf": 1.4142135623730951}}, "df": 6, "d": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.deprecated": {"tf": 1.7320508075688772}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 5}, "s": {"docs": {"sain.Vec.pop": {"tf": 1}, "sain.vec.Vec.pop": {"tf": 1}}, "df": 2}}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.unimplemented": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 5}}}}}, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"sain.AsRef": {"tf": 1}, "sain.AsMut": {"tf": 1}}, "df": 2}}}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sain.Some.replace": {"tf": 1.4142135623730951}}, "df": 1, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"sain.Some": {"tf": 1}}, "df": 1}}}}}}}}}, "f": {"docs": {"sain.AsRef": {"tf": 2.23606797749979}, "sain.Some.as_ref": {"tf": 1.4142135623730951}, "sain.Some.as_mut": {"tf": 1.4142135623730951}, "sain.Iter.copied": {"tf": 1}, "sain.Iter.by_ref": {"tf": 1.4142135623730951}, "sain.iter.Iter.copied": {"tf": 1}, "sain.iter.Iter.by_ref": {"tf": 1.4142135623730951}}, "df": 7, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sain.AsRef": {"tf": 1}, "sain.AsRef.copy": {"tf": 1}, "sain.AsMut": {"tf": 1}, "sain.AsMut.copy": {"tf": 1}, "sain.Iter.copied": {"tf": 1}, "sain.Iter.by_ref": {"tf": 1}, "sain.iter.Iter.copied": {"tf": 1}, "sain.iter.Iter.by_ref": {"tf": 1}}, "df": 8, "d": {"docs": {"sain.AsRef.object": {"tf": 1}, "sain.AsRef.copy": {"tf": 1.4142135623730951}, "sain.AsMut.object": {"tf": 1}, "sain.AsMut.copy": {"tf": 1.4142135623730951}}, "df": 4}}}}}}}}, "a": {"docs": {}, "df": 0, "d": {"docs": {"sain.Some.read": {"tf": 1}, "sain.doc": {"tf": 1}}, "df": 2, "m": {"docs": {}, "df": 0, "e": {"docs": {"sain.doc": {"tf": 1}}, "df": 1}}}, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.Iter.take": {"tf": 1}, "sain.iter.Iter.take": {"tf": 1}}, "df": 2}}}}}, "g": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"sain.Iter.take_while": {"tf": 1}, "sain.Iter.drop_while": {"tf": 1.4142135623730951}, "sain.iter.Iter.take_while": {"tf": 1}, "sain.iter.Iter.drop_while": {"tf": 1.4142135623730951}}, "df": 4}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"sain.Iter.sort": {"tf": 1.4142135623730951}, "sain.Iter.reversed": {"tf": 1}, "sain.iter.Iter.sort": {"tf": 1.4142135623730951}, "sain.iter.Iter.reversed": {"tf": 1}}, "df": 4, "d": {"docs": {"sain.Iter.reversed": {"tf": 1}, "sain.iter.Iter.reversed": {"tf": 1}, "sain.iter.iter": {"tf": 1}}, "df": 3}}}}}}}, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"sain.cfg": {"tf": 1}, "sain.Some": {"tf": 1}, "sain.todo": {"tf": 1}, "sain.Vec.swap_remove": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}, "sain.vec.Vec.swap_remove": {"tf": 1}}, "df": 6, "d": {"docs": {"sain.cfg_attr": {"tf": 1.7320508075688772}, "sain.todo": {"tf": 1}, "sain.Once.set": {"tf": 1}, "sain.cfg": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1.7320508075688772}}, "df": 5}, "s": {"docs": {"sain.cfg_attr": {"tf": 1}, "sain.Some.unwrap": {"tf": 1}, "sain.Some.expect": {"tf": 1}, "sain.Some.as_ref": {"tf": 1}, "sain.Iter.take_while": {"tf": 1}, "sain.Iter.drop_while": {"tf": 1}, "sain.Iter.zip": {"tf": 1}, "sain.Iter.all": {"tf": 1}, "sain.Iter.any": {"tf": 1}, "sain.Iter.sort": {"tf": 1}, "sain.Iter.first": {"tf": 1}, "sain.Iter.last": {"tf": 1}, "sain.Iter.reversed": {"tf": 1}, "sain.Iter.union": {"tf": 1}, "sain.Iter.enumerate": {"tf": 1}, "sain.Once.set": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.iter.Iter.take_while": {"tf": 1}, "sain.iter.Iter.drop_while": {"tf": 1}, "sain.iter.Iter.zip": {"tf": 1}, "sain.iter.Iter.all": {"tf": 1}, "sain.iter.Iter.any": {"tf": 1}, "sain.iter.Iter.sort": {"tf": 1}, "sain.iter.Iter.first": {"tf": 1}, "sain.iter.Iter.last": {"tf": 1}, "sain.iter.Iter.reversed": {"tf": 1}, "sain.iter.Iter.union": {"tf": 1}, "sain.iter.Iter.enumerate": {"tf": 1}}, "df": 28}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.Some.unwrap": {"tf": 1}, "sain.Ok.expect": {"tf": 1}, "sain.Ok.unwrap": {"tf": 1}, "sain.Ok.unwrap_err": {"tf": 1}}, "df": 4}}}}}, "n": {"docs": {"sain.cfg": {"tf": 2}, "sain.cfg.cfg": {"tf": 2}}, "df": 2, "g": {"docs": {}, "df": 0, "e": {"docs": {"sain.Iter.collect": {"tf": 1}, "sain.Iter.count": {"tf": 1}, "sain.futures.spawn": {"tf": 1}, "sain.iter.Iter.collect": {"tf": 1}, "sain.iter.Iter.count": {"tf": 1}}, "df": 5}}}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {"sain.cfg": {"tf": 1}}, "df": 1}}}}}, "c": {"docs": {"sain.Iter.take": {"tf": 1.7320508075688772}, "sain.Ok.map": {"tf": 1.4142135623730951}, "sain.Ok.map_or": {"tf": 2}, "sain.Ok.map_or_else": {"tf": 2}, "sain.Ok.iter": {"tf": 2}, "sain.Vec.remove": {"tf": 1.4142135623730951}, "sain.Vec.swap_remove": {"tf": 1.4142135623730951}, "sain.iter.Iter.take": {"tf": 1.7320508075688772}, "sain.vec.Vec.remove": {"tf": 1.4142135623730951}, "sain.vec.Vec.swap_remove": {"tf": 1.4142135623730951}}, "df": 10, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"sain": {"tf": 1}}, "df": 1}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"sain.Iter.async_for_each": {"tf": 1}, "sain.iter.Iter.async_for_each": {"tf": 1}}, "df": 2}}}}}}}}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {"sain.cfg": {"tf": 1}, "sain.todo": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 3}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 2, "a": {"docs": {}, "df": 0, "l": {"docs": {"sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}}, "df": 2}}}}}}}}, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.cfg_attr": {"tf": 1}, "sain.cfg": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}}, "df": 3}}}}}}}}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"sain.AsRef.copy": {"tf": 1}, "sain.AsMut.copy": {"tf": 1}, "sain.Ok": {"tf": 1}, "sain.Err": {"tf": 1}, "sain.Vec.is_empty": {"tf": 1}, "sain.iter": {"tf": 1}, "sain.vec.Vec.is_empty": {"tf": 1}}, "df": 7}, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.Some": {"tf": 1.4142135623730951}, "sain.Some.read": {"tf": 1}, "sain.Some.expect": {"tf": 1}, "sain.Some.filter": {"tf": 1}, "sain.Some.replace": {"tf": 1}, "sain.Some.and_ok": {"tf": 1}, "sain.Some.and_then": {"tf": 1}, "sain.Some.iter": {"tf": 1}, "sain.Some.as_ref": {"tf": 1.4142135623730951}, "sain.Some.as_mut": {"tf": 1}, "sain.Some.is_some": {"tf": 1}, "sain.Some.is_some_and": {"tf": 1}, "sain.Some.is_none": {"tf": 1}, "sain.Ok.is_ok": {"tf": 1}, "sain.Ok.is_ok_and": {"tf": 1}, "sain.Ok.is_err": {"tf": 1}, "sain.Ok.is_err_and": {"tf": 1}, "sain.Ok.unwrap_or_else": {"tf": 1}, "sain.Ok.unwrap_err": {"tf": 1}, "sain.Ok.ok": {"tf": 1}, "sain.Ok.err": {"tf": 1}, "sain.Ok.inspect": {"tf": 1}, "sain.Ok.inspect_err": {"tf": 1}, "sain.Ok.iter": {"tf": 1}, "sain.Err.is_ok": {"tf": 1}, "sain.Err.is_ok_and": {"tf": 1}, "sain.Err.is_err": {"tf": 1}, "sain.Err.is_err_and": {"tf": 1}}, "df": 28}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.vec": {"tf": 1}, "sain.vec.vec": {"tf": 1}}, "df": 2}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"sain.Iter.all": {"tf": 1}, "sain.iter.Iter.all": {"tf": 1}}, "df": 2}}}, "g": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {"sain.Vec": {"tf": 1}, "sain.vec": {"tf": 1}, "sain.vec.Vec": {"tf": 1}}, "df": 3}}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"sain.doc": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.Some.unwrap_unchecked": {"tf": 1}}, "df": 1}}}}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.Iter.by_ref": {"tf": 1}, "sain.iter.Iter.by_ref": {"tf": 1}}, "df": 2}}}}, "t": {"docs": {"sain.Once.set": {"tf": 1}}, "df": 1, "r": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"sain.vec": {"tf": 1}, "sain.vec.vec": {"tf": 1}}, "df": 2}}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"sain.Iter.to_vec": {"tf": 1}, "sain.Ok.ok": {"tf": 1}, "sain.Ok.err": {"tf": 1}, "sain.iter.Iter.to_vec": {"tf": 1}, "sain.iter.iter": {"tf": 1.4142135623730951}}, "df": 5}}}}, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"sain.Iter.async_for_each": {"tf": 1}, "sain.futures.spawn": {"tf": 1}, "sain.iter.Iter.async_for_each": {"tf": 1}}, "df": 3}}}}}}}}}}, "p": {"docs": {}, "df": 0, "y": {"docs": {"sain.AsRef": {"tf": 2}, "sain.AsRef.copy": {"tf": 1.4142135623730951}, "sain.AsMut.copy": {"tf": 1.4142135623730951}, "sain.Some.as_ref": {"tf": 2}, "sain.Iter.copied": {"tf": 1}, "sain.Vec.copy": {"tf": 1.7320508075688772}, "sain.iter.Iter.copied": {"tf": 1}, "sain.vec.Vec.copy": {"tf": 1.7320508075688772}}, "df": 8, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.AsRef": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"sain.Iter.copied": {"tf": 1}, "sain.Iter.by_ref": {"tf": 1}, "sain.Vec.copy": {"tf": 1}, "sain.iter.Iter.copied": {"tf": 1}, "sain.iter.Iter.by_ref": {"tf": 1}, "sain.vec.Vec.copy": {"tf": 1}}, "df": 6}, "d": {"docs": {"sain.Iter.copied": {"tf": 1.7320508075688772}, "sain.iter.Iter.copied": {"tf": 1.7320508075688772}}, "df": 2}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"sain.Iter.collect": {"tf": 1.7320508075688772}, "sain.Iter.copied": {"tf": 1.4142135623730951}, "sain.iter.Iter.collect": {"tf": 1.7320508075688772}, "sain.iter.Iter.copied": {"tf": 1.4142135623730951}}, "df": 4, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.AsRef": {"tf": 1}, "sain.AsRef.copy": {"tf": 1.4142135623730951}, "sain.AsMut.copy": {"tf": 1.4142135623730951}, "sain.Vec.into_inner": {"tf": 1}, "sain.vec.Vec.into_inner": {"tf": 1}}, "df": 5, "s": {"docs": {"sain.Iter.map": {"tf": 1}, "sain.Iter.take_while": {"tf": 1}, "sain.Iter.drop_while": {"tf": 1}, "sain.Iter.all": {"tf": 1}, "sain.Iter.any": {"tf": 1}, "sain.Iter.sort": {"tf": 1}, "sain.Iter.for_each": {"tf": 1}, "sain.Iter.async_for_each": {"tf": 1.4142135623730951}, "sain.futures.spawn": {"tf": 1}, "sain.iter.Iter.map": {"tf": 1}, "sain.iter.Iter.take_while": {"tf": 1}, "sain.iter.Iter.drop_while": {"tf": 1}, "sain.iter.Iter.all": {"tf": 1}, "sain.iter.Iter.any": {"tf": 1}, "sain.iter.Iter.sort": {"tf": 1}, "sain.iter.Iter.for_each": {"tf": 1}, "sain.iter.Iter.async_for_each": {"tf": 1.4142135623730951}}, "df": 17}}}}, "s": {"docs": {"sain.Iter.collect": {"tf": 1}, "sain.iter.Iter.collect": {"tf": 1}}, "df": 2}}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"sain.Iter": {"tf": 1}, "sain.Iter.by_ref": {"tf": 1}, "sain.Iter.count": {"tf": 1.4142135623730951}, "sain.iter.Iter": {"tf": 1}, "sain.iter.Iter.by_ref": {"tf": 1}, "sain.iter.Iter.count": {"tf": 1.4142135623730951}}, "df": 6}}}, "m": {"docs": {"sain.futures.spawn": {"tf": 1}}, "df": 1, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"sain.Ok.unwrap_or_else": {"tf": 1}}, "df": 1}}}}}}}, "f": {"docs": {}, "df": 0, "g": {"docs": {"sain": {"tf": 2}, "sain.cfg": {"tf": 2.6457513110645907}, "sain.cfg_attr": {"tf": 1.7320508075688772}, "sain.cfg.cfg_attr": {"tf": 1.7320508075688772}, "sain.cfg.cfg": {"tf": 1.7320508075688772}}, "df": 5}}, "p": {"docs": {}, "df": 0, "u": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 4}, "y": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.cfg": {"tf": 1}}, "df": 1}}}}}}, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {"sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 2}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.cfg": {"tf": 1}}, "df": 1}}}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"sain.Some.and_then": {"tf": 1}, "sain.Iter.for_each": {"tf": 1}, "sain.Iter.async_for_each": {"tf": 1}, "sain.deprecated": {"tf": 1}, "sain.unimplemented": {"tf": 1}, "sain.Once.get_or_init": {"tf": 1}, "sain.Ok.inspect": {"tf": 1}, "sain.Ok.inspect_err": {"tf": 1}, "sain.iter.Iter.for_each": {"tf": 1}, "sain.iter.Iter.async_for_each": {"tf": 1}}, "df": 10, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.cfg_attr": {"tf": 1}, "sain.unimplemented": {"tf": 1}, "sain.Ok.inspect": {"tf": 1.4142135623730951}, "sain.Ok.inspect_err": {"tf": 1.4142135623730951}, "sain.cfg.cfg_attr": {"tf": 1}}, "df": 5}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.Some.unwrap_or_else": {"tf": 1}, "sain.todo": {"tf": 1}}, "df": 2}}}, "s": {"docs": {"sain.Some.filter": {"tf": 1}, "sain.Iter.for_each": {"tf": 1}, "sain.Iter.async_for_each": {"tf": 1}, "sain.iter.Iter.for_each": {"tf": 1}, "sain.iter.Iter.async_for_each": {"tf": 1}}, "df": 5}, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {"sain.Iter.map": {"tf": 1}, "sain.Iter.take_while": {"tf": 1}, "sain.Iter.drop_while": {"tf": 1}, "sain.Iter.all": {"tf": 1}, "sain.Iter.any": {"tf": 1}, "sain.Iter.sort": {"tf": 1}, "sain.Iter.for_each": {"tf": 1}, "sain.Iter.async_for_each": {"tf": 1}, "sain.iter.Iter.map": {"tf": 1}, "sain.iter.Iter.take_while": {"tf": 1}, "sain.iter.Iter.drop_while": {"tf": 1}, "sain.iter.Iter.all": {"tf": 1}, "sain.iter.Iter.any": {"tf": 1}, "sain.iter.Iter.sort": {"tf": 1}, "sain.iter.Iter.for_each": {"tf": 1}, "sain.iter.Iter.async_for_each": {"tf": 1}}, "df": 16}}}}}}}}}}}, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"sain.cfg": {"tf": 1}}, "df": 1}}}}}}}, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {"sain.Default": {"tf": 2.23606797749979}, "sain.AsRef": {"tf": 2.23606797749979}}, "df": 2}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"sain.Iter.collect": {"tf": 1.7320508075688772}, "sain.iter.Iter.collect": {"tf": 1.7320508075688772}}, "df": 2}}, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"sain.deprecated": {"tf": 1.4142135623730951}, "sain.unimplemented": {"tf": 1}}, "df": 2}}}, "n": {"docs": {"sain.Once": {"tf": 1}}, "df": 1}, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"sain.Vec.with_capacity": {"tf": 2.23606797749979}, "sain.Vec.capacity": {"tf": 1}, "sain.vec.Vec.with_capacity": {"tf": 2.23606797749979}, "sain.vec.Vec.capacity": {"tf": 1}}, "df": 4}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}}, "df": 2}}}, "e": {"docs": {"sain.Some.as_ref": {"tf": 1.4142135623730951}, "sain.Vec.__init__": {"tf": 1}, "sain.Vec.with_capacity": {"tf": 1}, "sain.Vec.copy": {"tf": 1}, "sain.futures.loop": {"tf": 1}, "sain.iter.empty": {"tf": 1}, "sain.vec.Vec.__init__": {"tf": 1}, "sain.vec.Vec.with_capacity": {"tf": 1}, "sain.vec.Vec.copy": {"tf": 1}}, "df": 9, "d": {"docs": {"sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}}, "df": 2}, "s": {"docs": {"sain.Iter.copied": {"tf": 1}, "sain.Iter.by_ref": {"tf": 1}, "sain.iter.Iter.copied": {"tf": 1}, "sain.iter.Iter.by_ref": {"tf": 1}}, "df": 4}}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"sain.cfg_attr": {"tf": 1.4142135623730951}, "sain.Default": {"tf": 1}, "sain.AsRef": {"tf": 1}, "sain.deprecated": {"tf": 1}, "sain.unimplemented": {"tf": 1}, "sain.doc": {"tf": 1}, "sain.Once": {"tf": 1}, "sain.cfg": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1.4142135623730951}}, "df": 9}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"sain.Some.as_ref": {"tf": 1.7320508075688772}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"sain.Vec.clear": {"tf": 1.4142135623730951}, "sain.vec.Vec.clear": {"tf": 1.4142135623730951}}, "df": 2}}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"sain.futures.loop": {"tf": 1}}, "df": 1, "l": {"docs": {}, "df": 0, "y": {"docs": {"sain.cfg": {"tf": 1}}, "df": 1}}}}}}}}}, "t": {"docs": {"sain": {"tf": 2.6457513110645907}, "sain.Some": {"tf": 1}, "sain.Iter.default": {"tf": 1}, "sain.Iter.collect": {"tf": 1}, "sain.Ok.map": {"tf": 1}, "sain.Vec.__init__": {"tf": 1}, "sain.Vec.with_capacity": {"tf": 1}, "sain.iter.Iter.default": {"tf": 1}, "sain.iter.Iter.collect": {"tf": 1}, "sain.vec.Vec.__init__": {"tf": 1}, "sain.vec.Vec.with_capacity": {"tf": 1}}, "df": 11, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"sain.Some": {"tf": 1}, "sain.Some.unwrap_or": {"tf": 1}, "sain.Iter.default": {"tf": 1}, "sain.Iter.collect": {"tf": 1.4142135623730951}, "sain.cfg": {"tf": 1.4142135623730951}, "sain.iter.Iter.default": {"tf": 1}, "sain.iter.Iter.collect": {"tf": 1.4142135623730951}}, "df": 7, "s": {"docs": {"sain": {"tf": 1.4142135623730951}}, "df": 1}, "[": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"sain.doc": {"tf": 1}}, "df": 1}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {"sain.doc": {"tf": 1}}, "df": 1}}}, "b": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"sain.doc": {"tf": 1}}, "df": 1}}}}}, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {"sain.doc": {"tf": 1}}, "df": 1}}}, "b": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"sain.doc": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.Some": {"tf": 1}, "sain.Iter.for_each": {"tf": 1}, "sain.cfg": {"tf": 1.4142135623730951}, "sain.iter.Iter.for_each": {"tf": 1}}, "df": 4}}}}}, "o": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.AsRef": {"tf": 1.7320508075688772}, "sain.AsMut": {"tf": 1}, "sain.Some": {"tf": 1.4142135623730951}, "sain.Some.unwrap_or_else": {"tf": 1}, "sain.Some.map": {"tf": 1}, "sain.Some.map_or": {"tf": 1}, "sain.Some.map_or_else": {"tf": 1.4142135623730951}, "sain.Some.take": {"tf": 1}, "sain.Some.as_ref": {"tf": 1.4142135623730951}, "sain.Iter": {"tf": 1.4142135623730951}, "sain.Iter.collect": {"tf": 1}, "sain.Iter.to_vec": {"tf": 1.4142135623730951}, "sain.Iter.map": {"tf": 1.7320508075688772}, "sain.Iter.take": {"tf": 1}, "sain.Iter.take_while": {"tf": 1}, "sain.Iter.drop_while": {"tf": 1}, "sain.Iter.filter": {"tf": 1}, "sain.Iter.zip": {"tf": 1}, "sain.Iter.all": {"tf": 1}, "sain.Iter.any": {"tf": 1}, "sain.Iter.sort": {"tf": 1.4142135623730951}, "sain.Iter.union": {"tf": 1}, "sain.Iter.for_each": {"tf": 1}, "sain.Iter.async_for_each": {"tf": 1}, "sain.todo": {"tf": 1}, "sain.deprecated": {"tf": 1}, "sain.unimplemented": {"tf": 1.4142135623730951}, "sain.doc": {"tf": 1.4142135623730951}, "sain.Once": {"tf": 1}, "sain.Once.set": {"tf": 1}, "sain.Ok.expect": {"tf": 1}, "sain.Ok.ok": {"tf": 1}, "sain.Ok.err": {"tf": 1}, "sain.Ok.inspect": {"tf": 1}, "sain.Ok.inspect_err": {"tf": 1}, "sain.Ok.map": {"tf": 1.4142135623730951}, "sain.Ok.map_or": {"tf": 1}, "sain.Ok.map_or_else": {"tf": 1}, "sain.Ok.map_err": {"tf": 1}, "sain.Vec": {"tf": 1}, "sain.Vec.with_capacity": {"tf": 1}, "sain.Vec.iter": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 2.23606797749979}, "sain.futures.spawn": {"tf": 1}, "sain.iter.Iter": {"tf": 1.4142135623730951}, "sain.iter.Iter.collect": {"tf": 1}, "sain.iter.Iter.to_vec": {"tf": 1.4142135623730951}, "sain.iter.Iter.map": {"tf": 1.7320508075688772}, "sain.iter.Iter.take": {"tf": 1}, "sain.iter.Iter.take_while": {"tf": 1}, "sain.iter.Iter.drop_while": {"tf": 1}, "sain.iter.Iter.filter": {"tf": 1}, "sain.iter.Iter.zip": {"tf": 1}, "sain.iter.Iter.all": {"tf": 1}, "sain.iter.Iter.any": {"tf": 1}, "sain.iter.Iter.sort": {"tf": 1.4142135623730951}, "sain.iter.Iter.union": {"tf": 1}, "sain.iter.Iter.for_each": {"tf": 1}, "sain.iter.Iter.async_for_each": {"tf": 1}, "sain.iter.iter": {"tf": 1}, "sain.vec": {"tf": 1}, "sain.vec.Vec": {"tf": 1}, "sain.vec.Vec.with_capacity": {"tf": 1}, "sain.vec.Vec.iter": {"tf": 1}}, "df": 67, "d": {"docs": {}, "df": 0, "o": {"docs": {"sain": {"tf": 1.4142135623730951}, "sain.todo": {"tf": 1.4142135623730951}, "sain.Vec.capacity": {"tf": 1}, "sain.vec.Vec.capacity": {"tf": 1}}, "df": 4}}, "p": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 4}}, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {"sain": {"tf": 1}, "sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.AsRef.copy": {"tf": 1}, "sain.AsMut.copy": {"tf": 1}, "sain.Some": {"tf": 1.4142135623730951}, "sain.Some.map_or": {"tf": 1.4142135623730951}, "sain.Some.map_or_else": {"tf": 1.4142135623730951}, "sain.Iter": {"tf": 1}, "sain.Iter.default": {"tf": 1}, "sain.Iter.to_vec": {"tf": 1}, "sain.Iter.count": {"tf": 1}, "sain.todo": {"tf": 1}, "sain.deprecated": {"tf": 1.4142135623730951}, "sain.unimplemented": {"tf": 1.4142135623730951}, "sain.Once": {"tf": 1}, "sain.Once.get": {"tf": 1}, "sain.Once.set": {"tf": 1.4142135623730951}, "sain.Vec.__init__": {"tf": 1}, "sain.Vec.with_capacity": {"tf": 1.4142135623730951}, "sain.Vec.into_inner": {"tf": 1}, "sain.Vec.len": {"tf": 1}, "sain.Vec.capacity": {"tf": 1}, "sain.Vec.iter": {"tf": 1}, "sain.Vec.first": {"tf": 1}, "sain.Vec.retain": {"tf": 1.4142135623730951}, "sain.Vec.remove": {"tf": 1}, "sain.Vec.swap_remove": {"tf": 1.7320508075688772}, "sain.Vec.extend": {"tf": 1}, "sain.Vec.clear": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1.4142135623730951}, "sain.iter.Iter": {"tf": 1}, "sain.iter.Iter.default": {"tf": 1}, "sain.iter.Iter.to_vec": {"tf": 1}, "sain.iter.Iter.count": {"tf": 1}, "sain.vec.Vec.__init__": {"tf": 1}, "sain.vec.Vec.with_capacity": {"tf": 1.4142135623730951}, "sain.vec.Vec.into_inner": {"tf": 1}, "sain.vec.Vec.len": {"tf": 1}, "sain.vec.Vec.capacity": {"tf": 1}, "sain.vec.Vec.iter": {"tf": 1}, "sain.vec.Vec.first": {"tf": 1}, "sain.vec.Vec.retain": {"tf": 1.4142135623730951}, "sain.vec.Vec.remove": {"tf": 1}, "sain.vec.Vec.swap_remove": {"tf": 1.7320508075688772}, "sain.vec.Vec.extend": {"tf": 1}, "sain.vec.Vec.clear": {"tf": 1}}, "df": 48}}, "a": {"docs": {}, "df": 0, "t": {"docs": {"sain.cfg": {"tf": 1.7320508075688772}, "sain.Default": {"tf": 1}, "sain.AsRef.object": {"tf": 1}, "sain.AsMut.object": {"tf": 1}, "sain.Some": {"tf": 1}, "sain.Iter.filter": {"tf": 1}, "sain.Iter.reversed": {"tf": 1}, "sain.Iter.union": {"tf": 1}, "sain.Iter.enumerate": {"tf": 1}, "sain.todo": {"tf": 1}, "sain.deprecated": {"tf": 2}, "sain.unimplemented": {"tf": 1.4142135623730951}, "sain.Vec.copy": {"tf": 1}, "sain.cfg.cfg": {"tf": 1.7320508075688772}, "sain.iter.Iter.filter": {"tf": 1}, "sain.iter.Iter.reversed": {"tf": 1}, "sain.iter.Iter.union": {"tf": 1}, "sain.iter.Iter.enumerate": {"tf": 1}, "sain.iter.empty": {"tf": 1}, "sain.iter.once": {"tf": 1}, "sain.vec.Vec.copy": {"tf": 1}}, "df": 21, "s": {"docs": {"sain.cfg": {"tf": 2}, "sain.cfg_attr": {"tf": 2}, "sain.Some.as_ref": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 2}, "sain.cfg.cfg": {"tf": 2}}, "df": 5}}}, "e": {"docs": {"sain.cfg": {"tf": 2.23606797749979}, "sain.cfg_attr": {"tf": 4.358898943540674}, "sain.Default.default": {"tf": 1.4142135623730951}, "sain.AsRef": {"tf": 1.7320508075688772}, "sain.AsRef.object": {"tf": 1}, "sain.AsRef.copy": {"tf": 1.4142135623730951}, "sain.AsMut.object": {"tf": 1}, "sain.AsMut.copy": {"tf": 1.4142135623730951}, "sain.Some": {"tf": 2}, "sain.Some.read": {"tf": 1}, "sain.Some.unwrap": {"tf": 1.4142135623730951}, "sain.Some.unwrap_or": {"tf": 1}, "sain.Some.unwrap_or_else": {"tf": 1}, "sain.Some.unwrap_unchecked": {"tf": 1.4142135623730951}, "sain.Some.expect": {"tf": 1}, "sain.Some.map": {"tf": 1}, "sain.Some.map_or": {"tf": 1.7320508075688772}, "sain.Some.map_or_else": {"tf": 1.7320508075688772}, "sain.Some.filter": {"tf": 1.7320508075688772}, "sain.Some.take": {"tf": 1.4142135623730951}, "sain.Some.replace": {"tf": 1}, "sain.Some.and_ok": {"tf": 1}, "sain.Some.and_then": {"tf": 1}, "sain.Some.iter": {"tf": 1}, "sain.Some.as_ref": {"tf": 1.4142135623730951}, "sain.Some.as_mut": {"tf": 1}, "sain.Some.is_some": {"tf": 1}, "sain.Some.is_some_and": {"tf": 1.4142135623730951}, "sain.Some.is_none": {"tf": 1}, "sain.Iter": {"tf": 1.7320508075688772}, "sain.Iter.default": {"tf": 1}, "sain.Iter.collect": {"tf": 1.7320508075688772}, "sain.Iter.copied": {"tf": 1}, "sain.Iter.next": {"tf": 1.4142135623730951}, "sain.Iter.map": {"tf": 1.7320508075688772}, "sain.Iter.take": {"tf": 2.23606797749979}, "sain.Iter.take_while": {"tf": 2}, "sain.Iter.drop_while": {"tf": 2}, "sain.Iter.filter": {"tf": 1.4142135623730951}, "sain.Iter.skip": {"tf": 2}, "sain.Iter.zip": {"tf": 2}, "sain.Iter.all": {"tf": 2.23606797749979}, "sain.Iter.any": {"tf": 2.23606797749979}, "sain.Iter.sort": {"tf": 2}, "sain.Iter.first": {"tf": 1.7320508075688772}, "sain.Iter.last": {"tf": 1.7320508075688772}, "sain.Iter.reversed": {"tf": 1.7320508075688772}, "sain.Iter.count": {"tf": 1}, "sain.Iter.union": {"tf": 1.4142135623730951}, "sain.Iter.for_each": {"tf": 1.7320508075688772}, "sain.Iter.async_for_each": {"tf": 2}, "sain.Iter.enumerate": {"tf": 1.4142135623730951}, "sain.todo": {"tf": 1}, "sain.deprecated": {"tf": 2.449489742783178}, "sain.unimplemented": {"tf": 1.4142135623730951}, "sain.doc": {"tf": 1.7320508075688772}, "sain.Once": {"tf": 1}, "sain.Once.get": {"tf": 1}, "sain.Once.set": {"tf": 1.4142135623730951}, "sain.Once.get_or_init": {"tf": 1.4142135623730951}, "sain.Ok": {"tf": 1}, "sain.Ok.is_ok": {"tf": 1}, "sain.Ok.is_ok_and": {"tf": 1}, "sain.Ok.is_err": {"tf": 1}, "sain.Ok.is_err_and": {"tf": 1}, "sain.Ok.expect": {"tf": 1}, "sain.Ok.unwrap": {"tf": 1}, "sain.Ok.unwrap_or": {"tf": 1}, "sain.Ok.unwrap_or_else": {"tf": 1}, "sain.Ok.unwrap_err": {"tf": 1}, "sain.Ok.ok": {"tf": 1}, "sain.Ok.err": {"tf": 1}, "sain.Ok.inspect": {"tf": 1}, "sain.Ok.inspect_err": {"tf": 1}, "sain.Ok.map_or": {"tf": 1.4142135623730951}, "sain.Ok.map_or_else": {"tf": 1.4142135623730951}, "sain.Ok.iter": {"tf": 1}, "sain.Err": {"tf": 1}, "sain.Err.is_ok": {"tf": 1}, "sain.Err.is_ok_and": {"tf": 1}, "sain.Err.is_err": {"tf": 1}, "sain.Err.is_err_and": {"tf": 1}, "sain.Vec": {"tf": 1.4142135623730951}, "sain.Vec.__init__": {"tf": 1}, "sain.Vec.with_capacity": {"tf": 1}, "sain.Vec.len": {"tf": 1}, "sain.Vec.capacity": {"tf": 1}, "sain.Vec.is_empty": {"tf": 1}, "sain.Vec.split_off": {"tf": 1.4142135623730951}, "sain.Vec.split_first": {"tf": 1.7320508075688772}, "sain.Vec.first": {"tf": 1}, "sain.Vec.push": {"tf": 1.4142135623730951}, "sain.Vec.get": {"tf": 1.4142135623730951}, "sain.Vec.insert": {"tf": 1}, "sain.Vec.pop": {"tf": 1}, "sain.Vec.swap_remove": {"tf": 1}, "sain.Vec.copy": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 4.358898943540674}, "sain.cfg.cfg": {"tf": 4}, "sain.futures.spawn": {"tf": 1}, "sain.futures.loop": {"tf": 1}, "sain.iter.Iter": {"tf": 1.7320508075688772}, "sain.iter.Iter.default": {"tf": 1}, "sain.iter.Iter.collect": {"tf": 1.7320508075688772}, "sain.iter.Iter.copied": {"tf": 1}, "sain.iter.Iter.next": {"tf": 1.4142135623730951}, "sain.iter.Iter.map": {"tf": 1.7320508075688772}, "sain.iter.Iter.take": {"tf": 2.23606797749979}, "sain.iter.Iter.take_while": {"tf": 2}, "sain.iter.Iter.drop_while": {"tf": 2}, "sain.iter.Iter.filter": {"tf": 1.4142135623730951}, "sain.iter.Iter.skip": {"tf": 2}, "sain.iter.Iter.zip": {"tf": 2}, "sain.iter.Iter.all": {"tf": 2.23606797749979}, "sain.iter.Iter.any": {"tf": 2.23606797749979}, "sain.iter.Iter.sort": {"tf": 2}, "sain.iter.Iter.first": {"tf": 1.7320508075688772}, "sain.iter.Iter.last": {"tf": 1.7320508075688772}, "sain.iter.Iter.reversed": {"tf": 1.7320508075688772}, "sain.iter.Iter.count": {"tf": 1}, "sain.iter.Iter.union": {"tf": 1.4142135623730951}, "sain.iter.Iter.for_each": {"tf": 1.7320508075688772}, "sain.iter.Iter.async_for_each": {"tf": 2}, "sain.iter.Iter.enumerate": {"tf": 1.4142135623730951}, "sain.iter.iter": {"tf": 1}, "sain.vec": {"tf": 1.4142135623730951}, "sain.vec.Vec": {"tf": 1.4142135623730951}, "sain.vec.Vec.__init__": {"tf": 1}, "sain.vec.Vec.with_capacity": {"tf": 1}, "sain.vec.Vec.len": {"tf": 1}, "sain.vec.Vec.capacity": {"tf": 1}, "sain.vec.Vec.is_empty": {"tf": 1}, "sain.vec.Vec.split_off": {"tf": 1.4142135623730951}, "sain.vec.Vec.split_first": {"tf": 1.7320508075688772}, "sain.vec.Vec.first": {"tf": 1}, "sain.vec.Vec.push": {"tf": 1.4142135623730951}, "sain.vec.Vec.get": {"tf": 1.4142135623730951}, "sain.vec.Vec.insert": {"tf": 1}, "sain.vec.Vec.pop": {"tf": 1}, "sain.vec.Vec.swap_remove": {"tf": 1}, "sain.vec.Vec.copy": {"tf": 1}}, "df": 141, "n": {"docs": {"sain.AsRef.copy": {"tf": 1}, "sain.AsMut.copy": {"tf": 1}, "sain.Some.and_then": {"tf": 1.4142135623730951}, "sain.Ok.iter": {"tf": 1}}, "df": 4}, "r": {"docs": {}, "df": 0, "e": {"docs": {"sain.Vec.first": {"tf": 1}, "sain.vec.Vec.first": {"tf": 1}}, "df": 2}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {"sain.Once": {"tf": 1.7320508075688772}, "sain.Once.set": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.Once": {"tf": 1}}, "df": 1}}}}}}}}, "r": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"sain.cfg": {"tf": 1}, "sain.AsRef": {"tf": 1.4142135623730951}, "sain.Some.unwrap_or_else": {"tf": 1.4142135623730951}, "sain.Some.filter": {"tf": 1}, "sain.Some.is_some": {"tf": 1.4142135623730951}, "sain.Some.is_some_and": {"tf": 1.7320508075688772}, "sain.Some.is_none": {"tf": 1.4142135623730951}, "sain.Iter.take_while": {"tf": 1}, "sain.Iter.all": {"tf": 1}, "sain.Iter.any": {"tf": 1}, "sain.Once": {"tf": 1.4142135623730951}, "sain.Ok.is_ok": {"tf": 1.4142135623730951}, "sain.Ok.is_ok_and": {"tf": 1.7320508075688772}, "sain.Ok.is_err": {"tf": 1}, "sain.Ok.is_err_and": {"tf": 1.4142135623730951}, "sain.Ok.unwrap_err": {"tf": 1}, "sain.Ok.ok": {"tf": 1.4142135623730951}, "sain.Ok.err": {"tf": 1.4142135623730951}, "sain.Err.is_ok": {"tf": 1}, "sain.Err.is_ok_and": {"tf": 1.4142135623730951}, "sain.Err.is_err": {"tf": 1.4142135623730951}, "sain.Err.is_err_and": {"tf": 1.7320508075688772}, "sain.Vec": {"tf": 1}, "sain.Vec.is_empty": {"tf": 1}, "sain.Vec.retain": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}, "sain.iter.Iter.take_while": {"tf": 1}, "sain.iter.Iter.all": {"tf": 1}, "sain.iter.Iter.any": {"tf": 1}, "sain.vec": {"tf": 1}, "sain.vec.Vec": {"tf": 1}, "sain.vec.Vec.is_empty": {"tf": 1}, "sain.vec.Vec.retain": {"tf": 1}}, "df": 33}}, "y": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.Once.set": {"tf": 1}}, "df": 1}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"sain.cfg": {"tf": 2.23606797749979}, "sain.cfg_attr": {"tf": 2}, "sain.Once": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 2}, "sain.cfg.cfg": {"tf": 2}}, "df": 5, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.cfg": {"tf": 1.7320508075688772}, "sain.cfg_attr": {"tf": 1.7320508075688772}, "sain.cfg.cfg_attr": {"tf": 1.7320508075688772}, "sain.cfg.cfg": {"tf": 1.7320508075688772}}, "df": 4}}}}}}, "k": {"docs": {}, "df": 0, "e": {"docs": {"sain.Some.take": {"tf": 1.4142135623730951}, "sain.Iter": {"tf": 1}, "sain.Iter.take": {"tf": 1.7320508075688772}, "sain.Iter.take_while": {"tf": 1}, "sain.iter.Iter": {"tf": 1}, "sain.iter.Iter.take": {"tf": 1.7320508075688772}, "sain.iter.Iter.take_while": {"tf": 1}}, "df": 7}}, "s": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "s": {"docs": {"sain.futures.spawn": {"tf": 1.4142135623730951}}, "df": 1}}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 4}}}}, "s": {"docs": {"sain.Iter.enumerate": {"tf": 1}, "sain.iter.Iter.enumerate": {"tf": 1}}, "df": 2}}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"sain.Iter.all": {"tf": 1}, "sain.Iter.any": {"tf": 1}, "sain.iter.Iter.all": {"tf": 1}, "sain.iter.Iter.any": {"tf": 1}}, "df": 4}}, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"sain.cfg": {"tf": 1}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"sain.futures.spawn": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}, "i": {"docs": {"sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}}, "df": 2, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1.4142135623730951}, "sain.cfg.cfg_attr": {"tf": 1.4142135623730951}, "sain.cfg.cfg": {"tf": 1}}, "df": 4, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 2}, "sain.cfg.cfg_attr": {"tf": 2}, "sain.cfg.cfg": {"tf": 1}, "sain.iter": {"tf": 1}}, "df": 5, "s": {"docs": {"sain": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.unimplemented": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"sain.cfg": {"tf": 2.23606797749979}, "sain.cfg_attr": {"tf": 1.4142135623730951}, "sain.Default": {"tf": 1}, "sain.AsRef": {"tf": 1.4142135623730951}, "sain.Some.iter": {"tf": 1}, "sain.todo": {"tf": 1}, "sain.deprecated": {"tf": 1}, "sain.unimplemented": {"tf": 1}, "sain.doc": {"tf": 1.4142135623730951}, "sain.Once": {"tf": 1.4142135623730951}, "sain.cfg.cfg_attr": {"tf": 1.4142135623730951}, "sain.cfg.cfg": {"tf": 1.4142135623730951}, "sain.futures.spawn": {"tf": 1}}, "df": 13}}}}, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sain.AsRef": {"tf": 1}, "sain.Some.as_ref": {"tf": 1}, "sain.Iter.collect": {"tf": 1}, "sain.Vec.into_inner": {"tf": 1}, "sain.iter.Iter.collect": {"tf": 1}, "sain.vec.Vec.into_inner": {"tf": 1}}, "df": 6}}}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"sain.Some.unwrap_unchecked": {"tf": 1}}, "df": 1}}}}}}}}}}, "t": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.AsRef": {"tf": 1}, "sain.Some": {"tf": 1.7320508075688772}, "sain.Some.unwrap_unchecked": {"tf": 1}, "sain.Some.expect": {"tf": 1}, "sain.Some.take": {"tf": 1}, "sain.Some.and_then": {"tf": 1}, "sain.Iter.default": {"tf": 1.4142135623730951}, "sain.Iter.collect": {"tf": 1.4142135623730951}, "sain.Iter.to_vec": {"tf": 1.4142135623730951}, "sain.Iter.copied": {"tf": 1.7320508075688772}, "sain.Iter.by_ref": {"tf": 1.7320508075688772}, "sain.Iter.count": {"tf": 1.4142135623730951}, "sain.deprecated": {"tf": 1}, "sain.Once": {"tf": 1.4142135623730951}, "sain.Once.set": {"tf": 1}, "sain.Once.get_or_init": {"tf": 1}, "sain.Ok.is_ok": {"tf": 1}, "sain.Ok.expect": {"tf": 1.7320508075688772}, "sain.Ok.unwrap": {"tf": 1.4142135623730951}, "sain.Ok.unwrap_or": {"tf": 1.4142135623730951}, "sain.Ok.unwrap_or_else": {"tf": 1.4142135623730951}, "sain.Ok.unwrap_err": {"tf": 1}, "sain.Ok.ok": {"tf": 1}, "sain.Ok.err": {"tf": 1}, "sain.Ok.inspect": {"tf": 1.4142135623730951}, "sain.Ok.inspect_err": {"tf": 1.4142135623730951}, "sain.Ok.map_or": {"tf": 1}, "sain.Ok.map_or_else": {"tf": 1}, "sain.Ok.iter": {"tf": 1.7320508075688772}, "sain.Err.is_ok": {"tf": 1}, "sain.Vec": {"tf": 1}, "sain.Vec.__init__": {"tf": 1}, "sain.Vec.pop": {"tf": 1.4142135623730951}, "sain.Vec.swap_remove": {"tf": 1}, "sain.Vec.copy": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}, "sain.iter.Iter.default": {"tf": 1.4142135623730951}, "sain.iter.Iter.collect": {"tf": 1.4142135623730951}, "sain.iter.Iter.to_vec": {"tf": 1.4142135623730951}, "sain.iter.Iter.copied": {"tf": 1.7320508075688772}, "sain.iter.Iter.by_ref": {"tf": 1.7320508075688772}, "sain.iter.Iter.count": {"tf": 1.4142135623730951}, "sain.vec": {"tf": 1}, "sain.vec.Vec": {"tf": 1}, "sain.vec.Vec.__init__": {"tf": 1}, "sain.vec.Vec.pop": {"tf": 1.4142135623730951}, "sain.vec.Vec.swap_remove": {"tf": 1}, "sain.vec.Vec.copy": {"tf": 1}}, "df": 51, "e": {"docs": {}, "df": 0, "r": {"docs": {"sain": {"tf": 1}, "sain.Iter": {"tf": 1}, "sain.Iter.default": {"tf": 1}, "sain.Iter.collect": {"tf": 1}, "sain.Iter.to_vec": {"tf": 1}, "sain.Iter.copied": {"tf": 1}, "sain.Iter.by_ref": {"tf": 1}, "sain.Iter.next": {"tf": 1}, "sain.Iter.map": {"tf": 1.4142135623730951}, "sain.Iter.take": {"tf": 1.4142135623730951}, "sain.Iter.take_while": {"tf": 1}, "sain.Iter.drop_while": {"tf": 1}, "sain.Iter.filter": {"tf": 1}, "sain.Iter.skip": {"tf": 1.4142135623730951}, "sain.Iter.zip": {"tf": 1.7320508075688772}, "sain.Iter.all": {"tf": 1}, "sain.Iter.any": {"tf": 1}, "sain.Iter.sort": {"tf": 1}, "sain.Iter.first": {"tf": 1}, "sain.Iter.last": {"tf": 1}, "sain.Iter.reversed": {"tf": 1}, "sain.Iter.count": {"tf": 1}, "sain.Iter.union": {"tf": 1.4142135623730951}, "sain.Iter.for_each": {"tf": 1}, "sain.Iter.async_for_each": {"tf": 1}, "sain.Iter.enumerate": {"tf": 1}, "sain.Ok.iter": {"tf": 1.4142135623730951}, "sain.Vec.__init__": {"tf": 1.4142135623730951}, "sain.Vec.iter": {"tf": 1}, "sain.iter.Iter": {"tf": 1}, "sain.iter.Iter.default": {"tf": 1}, "sain.iter.Iter.collect": {"tf": 1}, "sain.iter.Iter.to_vec": {"tf": 1}, "sain.iter.Iter.copied": {"tf": 1}, "sain.iter.Iter.by_ref": {"tf": 1}, "sain.iter.Iter.next": {"tf": 1}, "sain.iter.Iter.map": {"tf": 1.4142135623730951}, "sain.iter.Iter.take": {"tf": 1.4142135623730951}, "sain.iter.Iter.take_while": {"tf": 1}, "sain.iter.Iter.drop_while": {"tf": 1}, "sain.iter.Iter.filter": {"tf": 1}, "sain.iter.Iter.skip": {"tf": 1.4142135623730951}, "sain.iter.Iter.zip": {"tf": 1.7320508075688772}, "sain.iter.Iter.all": {"tf": 1}, "sain.iter.Iter.any": {"tf": 1}, "sain.iter.Iter.sort": {"tf": 1}, "sain.iter.Iter.first": {"tf": 1}, "sain.iter.Iter.last": {"tf": 1}, "sain.iter.Iter.reversed": {"tf": 1}, "sain.iter.Iter.count": {"tf": 1}, "sain.iter.Iter.union": {"tf": 1.4142135623730951}, "sain.iter.Iter.for_each": {"tf": 1}, "sain.iter.Iter.async_for_each": {"tf": 1}, "sain.iter.Iter.enumerate": {"tf": 1}, "sain.iter.iter": {"tf": 1.4142135623730951}, "sain.iter.empty": {"tf": 1}, "sain.iter.once": {"tf": 1}, "sain.vec.Vec.__init__": {"tf": 1.4142135623730951}, "sain.vec.Vec.iter": {"tf": 1}}, "df": 59, "[": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {"sain": {"tf": 1}, "sain.Iter.union": {"tf": 1}, "sain.iter.Iter.union": {"tf": 1}}, "df": 3}}}}, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {"sain.Iter.zip": {"tf": 1}, "sain.iter.Iter.zip": {"tf": 1}}, "df": 2}}}}}}}}}, "t": {"docs": {"sain.Ok.iter": {"tf": 1}}, "df": 1, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {"sain.Iter.zip": {"tf": 1}, "sain.iter.Iter.zip": {"tf": 1}}, "df": 2}}}}}}}}}}, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sain.Ok.iter": {"tf": 1}}, "df": 1}}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"sain.Some.iter": {"tf": 1}, "sain.Iter": {"tf": 2.449489742783178}, "sain.Iter.default": {"tf": 1.4142135623730951}, "sain.Iter.collect": {"tf": 2}, "sain.Iter.to_vec": {"tf": 1}, "sain.Iter.copied": {"tf": 1}, "sain.Iter.by_ref": {"tf": 1}, "sain.Iter.next": {"tf": 2.23606797749979}, "sain.Iter.map": {"tf": 2}, "sain.Iter.take": {"tf": 1.7320508075688772}, "sain.Iter.take_while": {"tf": 2.23606797749979}, "sain.Iter.drop_while": {"tf": 2.23606797749979}, "sain.Iter.filter": {"tf": 1}, "sain.Iter.skip": {"tf": 2}, "sain.Iter.zip": {"tf": 2.23606797749979}, "sain.Iter.all": {"tf": 2.23606797749979}, "sain.Iter.any": {"tf": 2.23606797749979}, "sain.Iter.sort": {"tf": 2}, "sain.Iter.first": {"tf": 2}, "sain.Iter.last": {"tf": 2}, "sain.Iter.reversed": {"tf": 2.23606797749979}, "sain.Iter.count": {"tf": 1}, "sain.Iter.union": {"tf": 2}, "sain.Iter.for_each": {"tf": 2}, "sain.Iter.async_for_each": {"tf": 1.4142135623730951}, "sain.Iter.enumerate": {"tf": 2}, "sain.Ok.iter": {"tf": 1}, "sain.Vec.iter": {"tf": 1.7320508075688772}, "sain.iter": {"tf": 1}, "sain.iter.Iter": {"tf": 2.449489742783178}, "sain.iter.Iter.default": {"tf": 1.4142135623730951}, "sain.iter.Iter.collect": {"tf": 2}, "sain.iter.Iter.to_vec": {"tf": 1}, "sain.iter.Iter.copied": {"tf": 1}, "sain.iter.Iter.by_ref": {"tf": 1}, "sain.iter.Iter.next": {"tf": 2.23606797749979}, "sain.iter.Iter.map": {"tf": 2}, "sain.iter.Iter.take": {"tf": 1.7320508075688772}, "sain.iter.Iter.take_while": {"tf": 2.23606797749979}, "sain.iter.Iter.drop_while": {"tf": 2.23606797749979}, "sain.iter.Iter.filter": {"tf": 1}, "sain.iter.Iter.skip": {"tf": 2}, "sain.iter.Iter.zip": {"tf": 2.23606797749979}, "sain.iter.Iter.all": {"tf": 2.23606797749979}, "sain.iter.Iter.any": {"tf": 2.23606797749979}, "sain.iter.Iter.sort": {"tf": 2}, "sain.iter.Iter.first": {"tf": 2}, "sain.iter.Iter.last": {"tf": 2}, "sain.iter.Iter.reversed": {"tf": 2.23606797749979}, "sain.iter.Iter.count": {"tf": 1}, "sain.iter.Iter.union": {"tf": 2}, "sain.iter.Iter.for_each": {"tf": 2}, "sain.iter.Iter.async_for_each": {"tf": 1.4142135623730951}, "sain.iter.Iter.enumerate": {"tf": 2}, "sain.iter.empty": {"tf": 1}, "sain.iter.once": {"tf": 2}, "sain.vec.Vec.iter": {"tf": 1.7320508075688772}}, "df": 57, "s": {"docs": {"sain.Iter.union": {"tf": 1}, "sain.iter.Iter.union": {"tf": 1}}, "df": 2}}}, "e": {"docs": {"sain.Iter": {"tf": 1}, "sain.iter.Iter": {"tf": 1}}, "df": 2}}, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sain.Iter": {"tf": 1.4142135623730951}, "sain.Iter.zip": {"tf": 1.4142135623730951}, "sain.Iter.union": {"tf": 1}, "sain.Vec.__init__": {"tf": 1}, "sain.Vec.extend": {"tf": 1}, "sain.iter.Iter": {"tf": 1.4142135623730951}, "sain.iter.Iter.zip": {"tf": 1.4142135623730951}, "sain.iter.Iter.union": {"tf": 1}, "sain.iter.iter": {"tf": 1.7320508075688772}, "sain.vec.Vec.__init__": {"tf": 1}, "sain.vec.Vec.extend": {"tf": 1}}, "df": 11, "[": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {"sain.Iter": {"tf": 1}, "sain.iter.Iter": {"tf": 1}, "sain.iter.iter": {"tf": 1}}, "df": 3}}}}}}}}}}, "m": {"docs": {"sain": {"tf": 1}, "sain.Iter": {"tf": 2.449489742783178}, "sain.Iter.copied": {"tf": 1}, "sain.Iter.next": {"tf": 1}, "sain.Iter.map": {"tf": 2.23606797749979}, "sain.Iter.take_while": {"tf": 1}, "sain.Iter.drop_while": {"tf": 1}, "sain.Iter.skip": {"tf": 1}, "sain.Iter.zip": {"tf": 2}, "sain.Iter.all": {"tf": 1.7320508075688772}, "sain.Iter.any": {"tf": 2.23606797749979}, "sain.Iter.sort": {"tf": 2}, "sain.Iter.first": {"tf": 1}, "sain.Iter.last": {"tf": 1}, "sain.Iter.reversed": {"tf": 1.4142135623730951}, "sain.Iter.union": {"tf": 1.4142135623730951}, "sain.Iter.for_each": {"tf": 2}, "sain.Iter.async_for_each": {"tf": 1.4142135623730951}, "sain.Iter.enumerate": {"tf": 1.7320508075688772}, "sain.Vec.get": {"tf": 1}, "sain.Vec.remove": {"tf": 1}, "sain.Vec.swap_remove": {"tf": 1.4142135623730951}, "sain.iter.Iter": {"tf": 2.449489742783178}, "sain.iter.Iter.copied": {"tf": 1}, "sain.iter.Iter.next": {"tf": 1}, "sain.iter.Iter.map": {"tf": 2.23606797749979}, "sain.iter.Iter.take_while": {"tf": 1}, "sain.iter.Iter.drop_while": {"tf": 1}, "sain.iter.Iter.skip": {"tf": 1}, "sain.iter.Iter.zip": {"tf": 2}, "sain.iter.Iter.all": {"tf": 1.7320508075688772}, "sain.iter.Iter.any": {"tf": 2.23606797749979}, "sain.iter.Iter.sort": {"tf": 2}, "sain.iter.Iter.first": {"tf": 1}, "sain.iter.Iter.last": {"tf": 1}, "sain.iter.Iter.reversed": {"tf": 1.4142135623730951}, "sain.iter.Iter.union": {"tf": 1.4142135623730951}, "sain.iter.Iter.for_each": {"tf": 2}, "sain.iter.Iter.async_for_each": {"tf": 1.4142135623730951}, "sain.iter.Iter.enumerate": {"tf": 1.7320508075688772}, "sain.iter.iter": {"tf": 1.4142135623730951}, "sain.iter.once": {"tf": 1}, "sain.vec.Vec.get": {"tf": 1}, "sain.vec.Vec.remove": {"tf": 1}, "sain.vec.Vec.swap_remove": {"tf": 1.4142135623730951}}, "df": 45, "s": {"docs": {"sain.Iter": {"tf": 1.4142135623730951}, "sain.Iter.collect": {"tf": 1.7320508075688772}, "sain.Iter.next": {"tf": 1}, "sain.Iter.take": {"tf": 1.7320508075688772}, "sain.Iter.take_while": {"tf": 1}, "sain.Iter.drop_while": {"tf": 1}, "sain.Iter.filter": {"tf": 1}, "sain.Iter.skip": {"tf": 1}, "sain.Iter.all": {"tf": 1}, "sain.Iter.any": {"tf": 1}, "sain.Iter.reversed": {"tf": 1}, "sain.Iter.union": {"tf": 1}, "sain.Iter.async_for_each": {"tf": 1}, "sain.vec": {"tf": 1.4142135623730951}, "sain.iter.Iter": {"tf": 1.4142135623730951}, "sain.iter.Iter.collect": {"tf": 1.7320508075688772}, "sain.iter.Iter.next": {"tf": 1}, "sain.iter.Iter.take": {"tf": 1.7320508075688772}, "sain.iter.Iter.take_while": {"tf": 1}, "sain.iter.Iter.drop_while": {"tf": 1}, "sain.iter.Iter.filter": {"tf": 1}, "sain.iter.Iter.skip": {"tf": 1}, "sain.iter.Iter.all": {"tf": 1}, "sain.iter.Iter.any": {"tf": 1}, "sain.iter.Iter.reversed": {"tf": 1}, "sain.iter.Iter.union": {"tf": 1}, "sain.iter.Iter.async_for_each": {"tf": 1}, "sain.vec.vec": {"tf": 1.4142135623730951}}, "df": 28}}}, "s": {"docs": {"sain.AsRef.copy": {"tf": 1}, "sain.AsMut.copy": {"tf": 1}, "sain.Some.unwrap": {"tf": 1}, "sain.Some.unwrap_or": {"tf": 1}, "sain.Some.unwrap_or_else": {"tf": 1}, "sain.Some.unwrap_unchecked": {"tf": 1}, "sain.Some.map_or": {"tf": 1}, "sain.Some.map_or_else": {"tf": 1}, "sain.Iter.copied": {"tf": 1}, "sain.Iter.by_ref": {"tf": 1}, "sain.Iter.map": {"tf": 1.4142135623730951}, "sain.Once": {"tf": 1}, "sain.Once.set": {"tf": 1}, "sain.Once.get_or_init": {"tf": 1}, "sain.Vec.get": {"tf": 1}, "sain.Vec.copy": {"tf": 1}, "sain.iter.Iter.copied": {"tf": 1}, "sain.iter.Iter.by_ref": {"tf": 1}, "sain.iter.Iter.map": {"tf": 1.4142135623730951}, "sain.vec.Vec.get": {"tf": 1}, "sain.vec.Vec.copy": {"tf": 1}}, "df": 21}}, "s": {"docs": {"sain": {"tf": 1}, "sain.cfg": {"tf": 1.4142135623730951}, "sain.cfg_attr": {"tf": 1.7320508075688772}, "sain.AsRef": {"tf": 1}, "sain.AsRef.object": {"tf": 1}, "sain.AsRef.copy": {"tf": 1}, "sain.AsMut.object": {"tf": 1}, "sain.AsMut.copy": {"tf": 1}, "sain.Some": {"tf": 1.4142135623730951}, "sain.Some.unwrap": {"tf": 1}, "sain.Some.unwrap_or": {"tf": 1}, "sain.Some.unwrap_unchecked": {"tf": 1}, "sain.Some.expect": {"tf": 2}, "sain.Some.map": {"tf": 1}, "sain.Some.map_or": {"tf": 1.4142135623730951}, "sain.Some.map_or_else": {"tf": 1.4142135623730951}, "sain.Some.filter": {"tf": 1}, "sain.Some.and_ok": {"tf": 1.7320508075688772}, "sain.Some.and_then": {"tf": 1}, "sain.Some.iter": {"tf": 1}, "sain.Some.as_ref": {"tf": 1}, "sain.Some.as_mut": {"tf": 1}, "sain.Some.is_some": {"tf": 1.7320508075688772}, "sain.Some.is_some_and": {"tf": 1.7320508075688772}, "sain.Some.is_none": {"tf": 1.7320508075688772}, "sain.Iter": {"tf": 1}, "sain.Iter.default": {"tf": 1}, "sain.Iter.next": {"tf": 1}, "sain.Iter.take": {"tf": 1}, "sain.Iter.take_while": {"tf": 1}, "sain.Iter.drop_while": {"tf": 1}, "sain.Iter.any": {"tf": 1.4142135623730951}, "sain.Iter.first": {"tf": 1}, "sain.Iter.last": {"tf": 1}, "sain.unimplemented": {"tf": 1.4142135623730951}, "sain.Once": {"tf": 1.7320508075688772}, "sain.Once.get": {"tf": 1.4142135623730951}, "sain.Once.set": {"tf": 1.4142135623730951}, "sain.Ok.is_ok": {"tf": 1.4142135623730951}, "sain.Ok.is_ok_and": {"tf": 1.4142135623730951}, "sain.Ok.is_err": {"tf": 1.4142135623730951}, "sain.Ok.is_err_and": {"tf": 1.4142135623730951}, "sain.Ok.ok": {"tf": 1.4142135623730951}, "sain.Ok.err": {"tf": 1.4142135623730951}, "sain.Err.is_ok": {"tf": 1.4142135623730951}, "sain.Err.is_ok_and": {"tf": 1.4142135623730951}, "sain.Err.is_err": {"tf": 1.4142135623730951}, "sain.Err.is_err_and": {"tf": 1.7320508075688772}, "sain.Vec": {"tf": 1}, "sain.Vec.__init__": {"tf": 1}, "sain.Vec.split_first": {"tf": 1.4142135623730951}, "sain.Vec.pop": {"tf": 1}, "sain.Vec.swap_remove": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1.7320508075688772}, "sain.cfg.cfg": {"tf": 1.4142135623730951}, "sain.iter.Iter": {"tf": 1}, "sain.iter.Iter.default": {"tf": 1}, "sain.iter.Iter.next": {"tf": 1}, "sain.iter.Iter.take": {"tf": 1}, "sain.iter.Iter.take_while": {"tf": 1}, "sain.iter.Iter.drop_while": {"tf": 1}, "sain.iter.Iter.any": {"tf": 1.4142135623730951}, "sain.iter.Iter.first": {"tf": 1}, "sain.iter.Iter.last": {"tf": 1}, "sain.iter.empty": {"tf": 1}, "sain.vec": {"tf": 1}, "sain.vec.Vec": {"tf": 1}, "sain.vec.Vec.__init__": {"tf": 1}, "sain.vec.Vec.split_first": {"tf": 1.4142135623730951}, "sain.vec.Vec.pop": {"tf": 1}, "sain.vec.Vec.swap_remove": {"tf": 1}}, "df": 71, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sain.Default": {"tf": 1}, "sain.Iter.map": {"tf": 1}, "sain.Iter.all": {"tf": 1}, "sain.Iter.any": {"tf": 1}, "sain.iter.Iter.map": {"tf": 1}, "sain.iter.Iter.all": {"tf": 1}, "sain.iter.Iter.any": {"tf": 1}}, "df": 7}}}}}}}}}, "f": {"docs": {"sain.cfg": {"tf": 1.7320508075688772}, "sain.cfg_attr": {"tf": 2.449489742783178}, "sain.AsRef.copy": {"tf": 1}, "sain.AsMut.copy": {"tf": 1}, "sain.Some.unwrap": {"tf": 1.4142135623730951}, "sain.Some.unwrap_or": {"tf": 1}, "sain.Some.unwrap_or_else": {"tf": 1}, "sain.Some.expect": {"tf": 1}, "sain.Some.map": {"tf": 1}, "sain.Some.map_or": {"tf": 1}, "sain.Some.map_or_else": {"tf": 1}, "sain.Some.filter": {"tf": 1.4142135623730951}, "sain.Some.and_ok": {"tf": 1.4142135623730951}, "sain.Some.and_then": {"tf": 1.4142135623730951}, "sain.Some.as_ref": {"tf": 1.4142135623730951}, "sain.Some.as_mut": {"tf": 1}, "sain.Some.is_some": {"tf": 1}, "sain.Some.is_some_and": {"tf": 1}, "sain.Some.is_none": {"tf": 1}, "sain.Iter.collect": {"tf": 1}, "sain.Iter.copied": {"tf": 1}, "sain.Iter.next": {"tf": 1}, "sain.Iter.take_while": {"tf": 1}, "sain.Iter.drop_while": {"tf": 1}, "sain.Iter.zip": {"tf": 1}, "sain.Iter.all": {"tf": 1.4142135623730951}, "sain.Iter.any": {"tf": 1.7320508075688772}, "sain.Iter.sort": {"tf": 1}, "sain.Iter.first": {"tf": 1}, "sain.Iter.last": {"tf": 1}, "sain.Iter.reversed": {"tf": 1}, "sain.Iter.union": {"tf": 1}, "sain.Iter.enumerate": {"tf": 1}, "sain.todo": {"tf": 1}, "sain.deprecated": {"tf": 1.4142135623730951}, "sain.unimplemented": {"tf": 1}, "sain.Once": {"tf": 1.4142135623730951}, "sain.Once.get": {"tf": 1}, "sain.Once.set": {"tf": 1.7320508075688772}, "sain.Once.get_or_init": {"tf": 1}, "sain.Ok.is_ok": {"tf": 1.4142135623730951}, "sain.Ok.is_ok_and": {"tf": 1}, "sain.Ok.is_err": {"tf": 1}, "sain.Ok.is_err_and": {"tf": 1}, "sain.Ok.expect": {"tf": 1.4142135623730951}, "sain.Ok.unwrap": {"tf": 1.4142135623730951}, "sain.Ok.unwrap_or": {"tf": 1.4142135623730951}, "sain.Ok.unwrap_or_else": {"tf": 1}, "sain.Ok.unwrap_err": {"tf": 1}, "sain.Ok.ok": {"tf": 1.4142135623730951}, "sain.Ok.err": {"tf": 1.4142135623730951}, "sain.Ok.inspect": {"tf": 1.4142135623730951}, "sain.Ok.inspect_err": {"tf": 1.4142135623730951}, "sain.Ok.map_or": {"tf": 1}, "sain.Ok.map_or_else": {"tf": 1}, "sain.Ok.iter": {"tf": 1}, "sain.Err.is_ok": {"tf": 1.4142135623730951}, "sain.Err.is_ok_and": {"tf": 1}, "sain.Err.is_err": {"tf": 1}, "sain.Err.is_err_and": {"tf": 1}, "sain.Vec.with_capacity": {"tf": 1}, "sain.Vec.is_empty": {"tf": 1}, "sain.Vec.split_first": {"tf": 1}, "sain.Vec.first": {"tf": 1}, "sain.Vec.get": {"tf": 1}, "sain.Vec.pop": {"tf": 1}, "sain.Vec.swap_remove": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 2.449489742783178}, "sain.cfg.cfg": {"tf": 1.7320508075688772}, "sain.iter.Iter.collect": {"tf": 1}, "sain.iter.Iter.copied": {"tf": 1}, "sain.iter.Iter.next": {"tf": 1}, "sain.iter.Iter.take_while": {"tf": 1}, "sain.iter.Iter.drop_while": {"tf": 1}, "sain.iter.Iter.zip": {"tf": 1}, "sain.iter.Iter.all": {"tf": 1.4142135623730951}, "sain.iter.Iter.any": {"tf": 1.7320508075688772}, "sain.iter.Iter.sort": {"tf": 1}, "sain.iter.Iter.first": {"tf": 1}, "sain.iter.Iter.last": {"tf": 1}, "sain.iter.Iter.reversed": {"tf": 1}, "sain.iter.Iter.union": {"tf": 1}, "sain.iter.Iter.enumerate": {"tf": 1}, "sain.vec.Vec.with_capacity": {"tf": 1}, "sain.vec.Vec.is_empty": {"tf": 1}, "sain.vec.Vec.split_first": {"tf": 1}, "sain.vec.Vec.first": {"tf": 1}, "sain.vec.Vec.get": {"tf": 1}, "sain.vec.Vec.pop": {"tf": 1}, "sain.vec.Vec.swap_remove": {"tf": 1}}, "df": 90}, "n": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.Some": {"tf": 1}, "sain.Iter": {"tf": 1.7320508075688772}, "sain.Iter.collect": {"tf": 1}, "sain.Iter.by_ref": {"tf": 1}, "sain.Iter.next": {"tf": 1}, "sain.Iter.map": {"tf": 1.7320508075688772}, "sain.Iter.take": {"tf": 1.4142135623730951}, "sain.Iter.take_while": {"tf": 1.7320508075688772}, "sain.Iter.drop_while": {"tf": 1.7320508075688772}, "sain.Iter.filter": {"tf": 1}, "sain.Iter.skip": {"tf": 1.7320508075688772}, "sain.Iter.zip": {"tf": 1.4142135623730951}, "sain.Iter.all": {"tf": 1.7320508075688772}, "sain.Iter.any": {"tf": 1.7320508075688772}, "sain.Iter.sort": {"tf": 1.4142135623730951}, "sain.Iter.first": {"tf": 1.4142135623730951}, "sain.Iter.last": {"tf": 1.4142135623730951}, "sain.Iter.reversed": {"tf": 2}, "sain.Iter.count": {"tf": 1}, "sain.Iter.union": {"tf": 1.4142135623730951}, "sain.Iter.for_each": {"tf": 1.4142135623730951}, "sain.Iter.async_for_each": {"tf": 1.7320508075688772}, "sain.Iter.enumerate": {"tf": 1.4142135623730951}, "sain.deprecated": {"tf": 1.7320508075688772}, "sain.unimplemented": {"tf": 1}, "sain.Vec.len": {"tf": 1}, "sain.Vec.iter": {"tf": 1}, "sain.Vec.first": {"tf": 1}, "sain.Vec.retain": {"tf": 1}, "sain.Vec.swap_remove": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}, "sain.futures.spawn": {"tf": 1}, "sain.iter.Iter": {"tf": 1.7320508075688772}, "sain.iter.Iter.collect": {"tf": 1}, "sain.iter.Iter.by_ref": {"tf": 1}, "sain.iter.Iter.next": {"tf": 1}, "sain.iter.Iter.map": {"tf": 1.7320508075688772}, "sain.iter.Iter.take": {"tf": 1.4142135623730951}, "sain.iter.Iter.take_while": {"tf": 1.7320508075688772}, "sain.iter.Iter.drop_while": {"tf": 1.7320508075688772}, "sain.iter.Iter.filter": {"tf": 1}, "sain.iter.Iter.skip": {"tf": 1.7320508075688772}, "sain.iter.Iter.zip": {"tf": 1.4142135623730951}, "sain.iter.Iter.all": {"tf": 1.7320508075688772}, "sain.iter.Iter.any": {"tf": 1.7320508075688772}, "sain.iter.Iter.sort": {"tf": 1.4142135623730951}, "sain.iter.Iter.first": {"tf": 1.4142135623730951}, "sain.iter.Iter.last": {"tf": 1.4142135623730951}, "sain.iter.Iter.reversed": {"tf": 2}, "sain.iter.Iter.count": {"tf": 1}, "sain.iter.Iter.union": {"tf": 1.4142135623730951}, "sain.iter.Iter.for_each": {"tf": 1.4142135623730951}, "sain.iter.Iter.async_for_each": {"tf": 1.7320508075688772}, "sain.iter.Iter.enumerate": {"tf": 1.4142135623730951}, "sain.iter.iter": {"tf": 1}, "sain.vec.Vec.len": {"tf": 1}, "sain.vec.Vec.iter": {"tf": 1}, "sain.vec.Vec.first": {"tf": 1}, "sain.vec.Vec.retain": {"tf": 1}, "sain.vec.Vec.swap_remove": {"tf": 1}}, "df": 63, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {"sain.cfg": {"tf": 1.4142135623730951}, "sain.cfg_attr": {"tf": 1}, "sain.Iter.copied": {"tf": 1}, "sain.deprecated": {"tf": 1.7320508075688772}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1.4142135623730951}, "sain.iter.Iter.copied": {"tf": 1}}, "df": 7}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sain.cfg_attr": {"tf": 1.4142135623730951}, "sain.cfg.cfg_attr": {"tf": 1.4142135623730951}}, "df": 2}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"sain.cfg": {"tf": 1}}, "df": 1}}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"sain.Ok.inspect": {"tf": 1.4142135623730951}, "sain.Ok.inspect_err": {"tf": 1.4142135623730951}}, "df": 2}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"sain.Vec.insert": {"tf": 1.4142135623730951}, "sain.vec.Vec.insert": {"tf": 1.4142135623730951}}, "df": 2}}}}, "t": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1.4142135623730951}, "sain.AsRef": {"tf": 1}, "sain.Some.unwrap_or": {"tf": 1}, "sain.Some.filter": {"tf": 1}, "sain.Some.and_ok": {"tf": 1}, "sain.Some.and_then": {"tf": 1}, "sain.Some.iter": {"tf": 1}, "sain.Some.as_ref": {"tf": 1}, "sain.Some.as_mut": {"tf": 1}, "sain.Some.is_some": {"tf": 1}, "sain.Some.is_some_and": {"tf": 1}, "sain.Some.is_none": {"tf": 1}, "sain.Iter.map": {"tf": 1.4142135623730951}, "sain.Iter.take": {"tf": 1}, "sain.Iter.all": {"tf": 1}, "sain.Iter.any": {"tf": 1.7320508075688772}, "sain.todo": {"tf": 1.4142135623730951}, "sain.Ok.unwrap_or_else": {"tf": 1.4142135623730951}, "sain.Ok.ok": {"tf": 1}, "sain.Ok.err": {"tf": 1}, "sain.Ok.map": {"tf": 1.7320508075688772}, "sain.Ok.map_err": {"tf": 1.4142135623730951}, "sain.Ok.iter": {"tf": 1.4142135623730951}, "sain.cfg.cfg_attr": {"tf": 1.4142135623730951}, "sain.cfg.cfg": {"tf": 1.4142135623730951}, "sain.iter.Iter.map": {"tf": 1.4142135623730951}, "sain.iter.Iter.take": {"tf": 1}, "sain.iter.Iter.all": {"tf": 1}, "sain.iter.Iter.any": {"tf": 1.7320508075688772}}, "df": 30, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sain.Default": {"tf": 1}}, "df": 1}}}}, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"sain.Vec.__init__": {"tf": 1}, "sain.vec.Vec.__init__": {"tf": 1}}, "df": 2}}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"sain.Iter.all": {"tf": 1.4142135623730951}, "sain.iter.Iter.all": {"tf": 1.4142135623730951}}, "df": 2}}}}}, "o": {"docs": {"sain.Iter.collect": {"tf": 1.4142135623730951}, "sain.Iter.to_vec": {"tf": 1}, "sain.Iter.async_for_each": {"tf": 1}, "sain.Vec.__init__": {"tf": 1}, "sain.Vec.into_inner": {"tf": 1}, "sain.Vec.copy": {"tf": 1}, "sain.cfg": {"tf": 1}, "sain.iter.Iter.collect": {"tf": 1.4142135623730951}, "sain.iter.Iter.to_vec": {"tf": 1}, "sain.iter.Iter.async_for_each": {"tf": 1}, "sain.iter.iter": {"tf": 1}, "sain.vec.Vec.__init__": {"tf": 1}, "sain.vec.Vec.into_inner": {"tf": 1}, "sain.vec.Vec.copy": {"tf": 1}}, "df": 14}}, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}}, "df": 2}}}}}}, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sain.Some.unwrap": {"tf": 1.4142135623730951}, "sain.Some.unwrap_or": {"tf": 1}, "sain.Some.unwrap_or_else": {"tf": 1}, "sain.Some.unwrap_unchecked": {"tf": 1}, "sain.Some.map": {"tf": 1}, "sain.Some.map_or": {"tf": 1}, "sain.Some.map_or_else": {"tf": 1}, "sain.Ok.is_ok_and": {"tf": 1.4142135623730951}, "sain.Ok.is_err_and": {"tf": 1.4142135623730951}, "sain.Err.is_ok_and": {"tf": 1.4142135623730951}, "sain.Vec.into_inner": {"tf": 1}, "sain.vec.Vec.into_inner": {"tf": 1}}, "df": 12}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {"sain.Iter.enumerate": {"tf": 1.7320508075688772}, "sain.Vec.get": {"tf": 1}, "sain.Vec.insert": {"tf": 1}, "sain.iter.Iter.enumerate": {"tf": 1.7320508075688772}, "sain.vec.Vec.get": {"tf": 1}, "sain.vec.Vec.insert": {"tf": 1}}, "df": 6, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.Iter": {"tf": 1}, "sain.iter.Iter": {"tf": 1}}, "df": 2}}}}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"sain.todo": {"tf": 1}}, "df": 1}}}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {"sain.Once": {"tf": 1.4142135623730951}}, "df": 1, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"sain.Vec.__init__": {"tf": 1}, "sain.vec.Vec.__init__": {"tf": 1}}, "df": 2, "d": {"docs": {"sain.Once": {"tf": 1}}, "df": 1}, "s": {"docs": {"sain.Vec.__init__": {"tf": 1}, "sain.vec.Vec.__init__": {"tf": 1}}, "df": 2}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.Vec": {"tf": 1}, "sain.vec": {"tf": 1}, "sain.vec.Vec": {"tf": 1}}, "df": 3}}}}}}}}}}}, "d": {"docs": {"sain.AsRef": {"tf": 2.449489742783178}, "sain.Once": {"tf": 1}}, "df": 2}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.cfg": {"tf": 1}}, "df": 1}}}}}}}}}}, "f": {"docs": {"sain.Some.unwrap_or_else": {"tf": 1}, "sain.Some.and_then": {"tf": 1}, "sain.Once.get_or_init": {"tf": 1}, "sain.Ok.is_ok_and": {"tf": 1}, "sain.Ok.is_err_and": {"tf": 1}, "sain.Ok.unwrap_or_else": {"tf": 1}, "sain.Ok.map_or": {"tf": 1}, "sain.Ok.map_or_else": {"tf": 1}, "sain.Err.is_ok_and": {"tf": 1}, "sain.Err.is_err_and": {"tf": 1}, "sain.Vec.retain": {"tf": 1.4142135623730951}, "sain.vec.Vec.retain": {"tf": 1.4142135623730951}}, "df": 12, "o": {"docs": {}, "df": 0, "r": {"docs": {"sain": {"tf": 1}, "sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 2.23606797749979}, "sain.Default": {"tf": 1}, "sain.Some": {"tf": 1}, "sain.Some.default": {"tf": 1}, "sain.Iter": {"tf": 1.4142135623730951}, "sain.Iter.default": {"tf": 1}, "sain.Iter.by_ref": {"tf": 1}, "sain.Iter.map": {"tf": 1}, "sain.Iter.take": {"tf": 1}, "sain.Iter.take_while": {"tf": 1}, "sain.Iter.drop_while": {"tf": 1}, "sain.Iter.filter": {"tf": 1}, "sain.Iter.skip": {"tf": 1}, "sain.Iter.zip": {"tf": 1}, "sain.Iter.sort": {"tf": 1}, "sain.Iter.reversed": {"tf": 1}, "sain.Iter.union": {"tf": 1}, "sain.Iter.for_each": {"tf": 1}, "sain.Iter.async_for_each": {"tf": 1.4142135623730951}, "sain.Iter.enumerate": {"tf": 1}, "sain.deprecated": {"tf": 1.4142135623730951}, "sain.Vec.iter": {"tf": 1}, "sain.Vec.append": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 2.23606797749979}, "sain.cfg.cfg": {"tf": 2.23606797749979}, "sain.futures": {"tf": 1}, "sain.futures.spawn": {"tf": 1}, "sain.iter.Iter": {"tf": 1.4142135623730951}, "sain.iter.Iter.default": {"tf": 1}, "sain.iter.Iter.by_ref": {"tf": 1}, "sain.iter.Iter.map": {"tf": 1}, "sain.iter.Iter.take": {"tf": 1}, "sain.iter.Iter.take_while": {"tf": 1}, "sain.iter.Iter.drop_while": {"tf": 1}, "sain.iter.Iter.filter": {"tf": 1}, "sain.iter.Iter.skip": {"tf": 1}, "sain.iter.Iter.zip": {"tf": 1}, "sain.iter.Iter.sort": {"tf": 1}, "sain.iter.Iter.reversed": {"tf": 1}, "sain.iter.Iter.union": {"tf": 1}, "sain.iter.Iter.for_each": {"tf": 1}, "sain.iter.Iter.async_for_each": {"tf": 1.4142135623730951}, "sain.iter.Iter.enumerate": {"tf": 1}, "sain.iter.iter": {"tf": 1}, "sain.vec.Vec.iter": {"tf": 1}, "sain.vec.Vec.append": {"tf": 1}}, "df": 48, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 4}}}}, "o": {"docs": {"sain.Ok.map_or": {"tf": 1}, "sain.Vec": {"tf": 1.4142135623730951}, "sain.Vec.__init__": {"tf": 1}, "sain.vec": {"tf": 1.4142135623730951}, "sain.vec.Vec": {"tf": 1.4142135623730951}, "sain.vec.Vec.__init__": {"tf": 1}}, "df": 6}, "u": {"docs": {}, "df": 0, "r": {"docs": {"sain.Ok.map_or_else": {"tf": 1}}, "df": 1}}, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.cfg": {"tf": 1.7320508075688772}}, "df": 1}}}}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {"sain.Some.map_or_else": {"tf": 1}, "sain.Iter.for_each": {"tf": 1.4142135623730951}, "sain.Iter.async_for_each": {"tf": 1}, "sain.iter.Iter.for_each": {"tf": 1.4142135623730951}, "sain.iter.Iter.async_for_each": {"tf": 1}}, "df": 5, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.Iter.map": {"tf": 1}, "sain.Iter.take_while": {"tf": 1}, "sain.Iter.drop_while": {"tf": 1}, "sain.Iter.all": {"tf": 1}, "sain.Iter.any": {"tf": 1}, "sain.Iter.sort": {"tf": 1}, "sain.Iter.for_each": {"tf": 1}, "sain.Iter.async_for_each": {"tf": 1.4142135623730951}, "sain.todo": {"tf": 1}, "sain.deprecated": {"tf": 1.4142135623730951}, "sain.unimplemented": {"tf": 1}, "sain.Ok.inspect": {"tf": 1}, "sain.Ok.inspect_err": {"tf": 1}, "sain.Ok.map": {"tf": 1}, "sain.Ok.map_or_else": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 2}, "sain.iter.Iter.map": {"tf": 1}, "sain.iter.Iter.take_while": {"tf": 1}, "sain.iter.Iter.drop_while": {"tf": 1}, "sain.iter.Iter.all": {"tf": 1}, "sain.iter.Iter.any": {"tf": 1}, "sain.iter.Iter.sort": {"tf": 1}, "sain.iter.Iter.for_each": {"tf": 1}, "sain.iter.Iter.async_for_each": {"tf": 1.4142135623730951}}, "df": 27, "a": {"docs": {}, "df": 0, "l": {"docs": {"sain.iter": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"sain.Vec": {"tf": 1}, "sain.vec": {"tf": 1}, "sain.vec.Vec": {"tf": 1}}, "df": 3}}}}}}}}}}}}}, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 4, "s": {"docs": {"sain.cfg": {"tf": 1}, "sain.futures.spawn": {"tf": 1.4142135623730951}}, "df": 2}}}}}, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sain.Vec.with_capacity": {"tf": 1}, "sain.vec.Vec.with_capacity": {"tf": 1}}, "df": 2}}}}}}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 4}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sain.Some.filter": {"tf": 1.4142135623730951}, "sain.Iter": {"tf": 1.4142135623730951}, "sain.Iter.filter": {"tf": 1}, "sain.Vec.retain": {"tf": 1}, "sain.iter.Iter": {"tf": 1.4142135623730951}, "sain.iter.Iter.filter": {"tf": 1}, "sain.vec.Vec.retain": {"tf": 1}}, "df": 7, "s": {"docs": {"sain.Iter.filter": {"tf": 1}, "sain.iter.Iter.filter": {"tf": 1}}, "df": 2}}}}}, "n": {"docs": {}, "df": 0, "e": {"docs": {"sain.Some.as_ref": {"tf": 1}}, "df": 1}}, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"sain.Iter.take": {"tf": 1}, "sain.Iter.skip": {"tf": 1.4142135623730951}, "sain.Iter.first": {"tf": 1.4142135623730951}, "sain.Vec": {"tf": 1}, "sain.Vec.split_first": {"tf": 1.7320508075688772}, "sain.Vec.first": {"tf": 2}, "sain.Vec.swap_remove": {"tf": 1}, "sain.iter.Iter.take": {"tf": 1}, "sain.iter.Iter.skip": {"tf": 1.4142135623730951}, "sain.iter.Iter.first": {"tf": 1.4142135623730951}, "sain.vec": {"tf": 1}, "sain.vec.Vec": {"tf": 1}, "sain.vec.Vec.split_first": {"tf": 1.7320508075688772}, "sain.vec.Vec.first": {"tf": 2}, "sain.vec.Vec.swap_remove": {"tf": 1}}, "df": 15}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1.7320508075688772}, "sain.Some.as_ref": {"tf": 1}, "sain.Some.is_some": {"tf": 1.4142135623730951}, "sain.Some.is_some_and": {"tf": 1.4142135623730951}, "sain.Some.is_none": {"tf": 1.4142135623730951}, "sain.Iter.drop_while": {"tf": 1}, "sain.Ok.is_ok": {"tf": 1}, "sain.Ok.is_err": {"tf": 1}, "sain.Ok.is_err_and": {"tf": 1}, "sain.Err.is_ok": {"tf": 1.4142135623730951}, "sain.Err.is_ok_and": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1.7320508075688772}, "sain.cfg.cfg": {"tf": 1}, "sain.iter.Iter.drop_while": {"tf": 1}}, "df": 15}}}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1.4142135623730951}, "sain.cfg.cfg_attr": {"tf": 1.4142135623730951}, "sain.cfg.cfg": {"tf": 1}}, "df": 4}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"sain.Default": {"tf": 1}, "sain.AsRef": {"tf": 1.4142135623730951}, "sain.Some.take": {"tf": 1}, "sain.Some.iter": {"tf": 1}, "sain.Iter.take_while": {"tf": 1}, "sain.Iter.drop_while": {"tf": 1}, "sain.Iter.union": {"tf": 1}, "sain.todo": {"tf": 1.4142135623730951}, "sain.deprecated": {"tf": 1}, "sain.unimplemented": {"tf": 1}, "sain.doc": {"tf": 1.7320508075688772}, "sain.Once": {"tf": 1.4142135623730951}, "sain.Ok.unwrap_or_else": {"tf": 1}, "sain.Ok.map_or_else": {"tf": 1}, "sain.Vec.__init__": {"tf": 1.7320508075688772}, "sain.Vec.retain": {"tf": 1}, "sain.Vec.pop": {"tf": 1}, "sain.Vec.remove": {"tf": 1}, "sain.Vec.swap_remove": {"tf": 1}, "sain.Vec.extend": {"tf": 1}, "sain.cfg": {"tf": 1.7320508075688772}, "sain.futures.spawn": {"tf": 1}, "sain.iter.Iter.take_while": {"tf": 1}, "sain.iter.Iter.drop_while": {"tf": 1}, "sain.iter.Iter.union": {"tf": 1}, "sain.vec.Vec.__init__": {"tf": 1.7320508075688772}, "sain.vec.Vec.retain": {"tf": 1}, "sain.vec.Vec.pop": {"tf": 1}, "sain.vec.Vec.remove": {"tf": 1}, "sain.vec.Vec.swap_remove": {"tf": 1}, "sain.vec.Vec.extend": {"tf": 1}}, "df": 31}, "z": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"sain.Some.as_ref": {"tf": 1}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"sain.Some.as_ref": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"sain.Some.unwrap_unchecked": {"tf": 1.4142135623730951}, "sain.Ok.map_err": {"tf": 1}, "sain.cfg": {"tf": 1.7320508075688772}, "sain.futures.spawn": {"tf": 1}}, "df": 4}}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"sain.Iter.async_for_each": {"tf": 1.4142135623730951}, "sain.iter.Iter.async_for_each": {"tf": 1.4142135623730951}}, "df": 2}}}}}, "p": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain": {"tf": 1}, "sain.cfg": {"tf": 1.4142135623730951}, "sain.cfg_attr": {"tf": 2.23606797749979}, "sain.Iter": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 2.23606797749979}, "sain.cfg.cfg": {"tf": 1.7320508075688772}, "sain.iter.Iter": {"tf": 1}}, "df": 7}}}}, "p": {"docs": {}, "df": 0, "y": {"docs": {"sain.cfg_attr": {"tf": 1.7320508075688772}, "sain.cfg": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1.7320508075688772}}, "df": 3}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"sain.cfg": {"tf": 1}, "sain.Some.filter": {"tf": 1.4142135623730951}, "sain.Some.is_some_and": {"tf": 1}, "sain.Iter.map": {"tf": 1}, "sain.Iter.take_while": {"tf": 1.7320508075688772}, "sain.Iter.drop_while": {"tf": 1.7320508075688772}, "sain.Iter.filter": {"tf": 1}, "sain.Iter.all": {"tf": 1.4142135623730951}, "sain.Iter.any": {"tf": 1.4142135623730951}, "sain.cfg.cfg": {"tf": 1}, "sain.iter.Iter.map": {"tf": 1}, "sain.iter.Iter.take_while": {"tf": 1.7320508075688772}, "sain.iter.Iter.drop_while": {"tf": 1.7320508075688772}, "sain.iter.Iter.filter": {"tf": 1}, "sain.iter.Iter.all": {"tf": 1.4142135623730951}, "sain.iter.Iter.any": {"tf": 1.4142135623730951}}, "df": 16, "d": {"docs": {"sain.Iter.map": {"tf": 1.4142135623730951}, "sain.iter.Iter.map": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"sain.cfg": {"tf": 1.7320508075688772}, "sain.Default": {"tf": 1}, "sain.Some": {"tf": 1.7320508075688772}, "sain.Some.unwrap": {"tf": 1.4142135623730951}, "sain.Some.unwrap_or": {"tf": 1.4142135623730951}, "sain.Some.unwrap_or_else": {"tf": 1.4142135623730951}, "sain.Some.unwrap_unchecked": {"tf": 1}, "sain.Some.expect": {"tf": 1.4142135623730951}, "sain.Some.map": {"tf": 1.4142135623730951}, "sain.Some.map_or": {"tf": 1.4142135623730951}, "sain.Some.map_or_else": {"tf": 1.4142135623730951}, "sain.Some.filter": {"tf": 1.4142135623730951}, "sain.Some.take": {"tf": 1}, "sain.Some.replace": {"tf": 1}, "sain.Some.and_ok": {"tf": 1.4142135623730951}, "sain.Some.and_then": {"tf": 1.4142135623730951}, "sain.Some.as_ref": {"tf": 1.7320508075688772}, "sain.Some.as_mut": {"tf": 1.4142135623730951}, "sain.Some.is_some": {"tf": 1.4142135623730951}, "sain.Some.is_some_and": {"tf": 1.4142135623730951}, "sain.Some.is_none": {"tf": 1.4142135623730951}, "sain.Iter": {"tf": 2}, "sain.Iter.take_while": {"tf": 1}, "sain.Iter.drop_while": {"tf": 1}, "sain.Iter.filter": {"tf": 1}, "sain.Iter.skip": {"tf": 1}, "sain.Iter.all": {"tf": 1}, "sain.Iter.any": {"tf": 1}, "sain.Iter.sort": {"tf": 1}, "sain.Iter.reversed": {"tf": 1}, "sain.Iter.union": {"tf": 1}, "sain.Iter.for_each": {"tf": 1}, "sain.Iter.enumerate": {"tf": 1}, "sain.Ok.inspect": {"tf": 1}, "sain.Ok.inspect_err": {"tf": 1}, "sain.Vec": {"tf": 1}, "sain.Vec.with_capacity": {"tf": 1}, "sain.Vec.iter": {"tf": 1}, "sain.Vec.split_off": {"tf": 1}, "sain.Vec.copy": {"tf": 1}, "sain.cfg.cfg": {"tf": 1.7320508075688772}, "sain.futures.spawn": {"tf": 1}, "sain.iter.Iter": {"tf": 2}, "sain.iter.Iter.take_while": {"tf": 1}, "sain.iter.Iter.drop_while": {"tf": 1}, "sain.iter.Iter.filter": {"tf": 1}, "sain.iter.Iter.skip": {"tf": 1}, "sain.iter.Iter.all": {"tf": 1}, "sain.iter.Iter.any": {"tf": 1}, "sain.iter.Iter.sort": {"tf": 1}, "sain.iter.Iter.reversed": {"tf": 1}, "sain.iter.Iter.union": {"tf": 1}, "sain.iter.Iter.for_each": {"tf": 1}, "sain.iter.Iter.enumerate": {"tf": 1}, "sain.iter.iter": {"tf": 1}, "sain.vec": {"tf": 1}, "sain.vec.Vec": {"tf": 1}, "sain.vec.Vec.with_capacity": {"tf": 1}, "sain.vec.Vec.iter": {"tf": 1}, "sain.vec.Vec.split_off": {"tf": 1}, "sain.vec.Vec.copy": {"tf": 1}}, "df": 61}}, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"sain.Once": {"tf": 1}}, "df": 1}}}}}}}, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.cfg_attr": {"tf": 1}, "sain.Iter.collect": {"tf": 1}, "sain.deprecated": {"tf": 1.4142135623730951}, "sain.unimplemented": {"tf": 1}, "sain.Ok.map_or": {"tf": 1}, "sain.Ok.map_or_else": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.iter.Iter.collect": {"tf": 1}}, "df": 8}}}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sain.Some": {"tf": 1}}, "df": 1}}}, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.futures": {"tf": 1}}, "df": 1}}}}}}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 4, "s": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.Iter": {"tf": 1}, "sain.Iter.collect": {"tf": 1}, "sain.Iter.map": {"tf": 1}, "sain.Iter.take": {"tf": 1}, "sain.Iter.take_while": {"tf": 1}, "sain.Iter.drop_while": {"tf": 1}, "sain.Iter.zip": {"tf": 1}, "sain.Iter.all": {"tf": 1}, "sain.Iter.any": {"tf": 1}, "sain.Iter.union": {"tf": 1}, "sain.Iter.for_each": {"tf": 1}, "sain.Iter.async_for_each": {"tf": 1}, "sain.todo": {"tf": 1}, "sain.deprecated": {"tf": 1}, "sain.unimplemented": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}, "sain.futures.spawn": {"tf": 1}, "sain.iter.Iter": {"tf": 1}, "sain.iter.Iter.collect": {"tf": 1}, "sain.iter.Iter.map": {"tf": 1}, "sain.iter.Iter.take": {"tf": 1}, "sain.iter.Iter.take_while": {"tf": 1}, "sain.iter.Iter.drop_while": {"tf": 1}, "sain.iter.Iter.zip": {"tf": 1}, "sain.iter.Iter.all": {"tf": 1}, "sain.iter.Iter.any": {"tf": 1}, "sain.iter.Iter.union": {"tf": 1}, "sain.iter.Iter.for_each": {"tf": 1}, "sain.iter.Iter.async_for_each": {"tf": 1}, "sain.iter.iter": {"tf": 1}}, "df": 33}}}}}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {"sain.Iter.filter": {"tf": 1}, "sain.iter.Iter.filter": {"tf": 1}}, "df": 2}}}, "s": {"docs": {}, "df": 0, "s": {"docs": {"sain.todo": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.cfg_attr": {"tf": 1.4142135623730951}, "sain.Ok.expect": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1.4142135623730951}}, "df": 3}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.cfg": {"tf": 1}}, "df": 1}}}}}, "y": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {"sain.todo": {"tf": 1}}, "df": 1}}}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {"sain.doc": {"tf": 2.23606797749979}}, "df": 1, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {"sain.doc": {"tf": 1}}, "df": 1}}}}}}, "o": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"sain.AsRef": {"tf": 1}}, "df": 1, "s": {"docs": {"sain.AsRef": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.Vec.split_off": {"tf": 1}, "sain.Vec.insert": {"tf": 1}, "sain.vec.Vec.split_off": {"tf": 1}, "sain.vec.Vec.insert": {"tf": 1}}, "df": 4}}}}}}, "p": {"docs": {"sain.Vec.pop": {"tf": 1}, "sain.vec.Vec.pop": {"tf": 1}}, "df": 2}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sain.Iter.filter": {"tf": 2}, "sain.todo": {"tf": 1}, "sain.Vec.copy": {"tf": 1}, "sain.iter.Iter.filter": {"tf": 2}, "sain.vec.Vec.copy": {"tf": 1}}, "df": 5, "s": {"docs": {"sain.Iter.filter": {"tf": 1.4142135623730951}, "sain.iter.Iter.filter": {"tf": 1.4142135623730951}}, "df": 2}}}, "t": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {"sain.Iter.skip": {"tf": 1.4142135623730951}, "sain.iter.Iter.skip": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "h": {"docs": {"sain.vec": {"tf": 1.4142135623730951}, "sain.Vec": {"tf": 1.4142135623730951}, "sain.Vec.__init__": {"tf": 1.4142135623730951}, "sain.Vec.with_capacity": {"tf": 2.23606797749979}, "sain.Vec.push": {"tf": 1.4142135623730951}, "sain.Vec.append": {"tf": 1}, "sain.Vec.copy": {"tf": 1}, "sain.vec.Vec": {"tf": 1.4142135623730951}, "sain.vec.Vec.__init__": {"tf": 1.4142135623730951}, "sain.vec.Vec.with_capacity": {"tf": 2.23606797749979}, "sain.vec.Vec.push": {"tf": 1.4142135623730951}, "sain.vec.Vec.append": {"tf": 1}, "sain.vec.Vec.copy": {"tf": 1}, "sain.vec.vec": {"tf": 1}}, "df": 14, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.Vec": {"tf": 1}, "sain.vec": {"tf": 1}, "sain.vec.Vec": {"tf": 1}}, "df": 3}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.Vec.with_capacity": {"tf": 1}, "sain.vec.Vec.with_capacity": {"tf": 1}}, "df": 2}}}}}}}, "e": {"docs": {"sain": {"tf": 1.4142135623730951}, "sain.cfg_attr": {"tf": 1}, "sain.Ok.unwrap_or_else": {"tf": 1.7320508075688772}, "sain.Ok.map_err": {"tf": 1}, "sain.Err": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}}, "df": 6, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"sain": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"sain.Vec": {"tf": 1}, "sain.vec": {"tf": 1}, "sain.vec.Vec": {"tf": 1}}, "df": 3}}}}}}}, "x": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 2}}}}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.Default": {"tf": 1}, "sain.AsRef": {"tf": 1}, "sain.Some": {"tf": 1}, "sain.Some.unwrap": {"tf": 1}, "sain.Some.unwrap_or": {"tf": 1}, "sain.Some.unwrap_or_else": {"tf": 1}, "sain.Some.unwrap_unchecked": {"tf": 1}, "sain.Some.expect": {"tf": 1}, "sain.Some.map": {"tf": 1}, "sain.Some.map_or": {"tf": 1}, "sain.Some.map_or_else": {"tf": 1}, "sain.Some.filter": {"tf": 1}, "sain.Some.take": {"tf": 1}, "sain.Some.replace": {"tf": 1}, "sain.Some.and_ok": {"tf": 1}, "sain.Some.and_then": {"tf": 1}, "sain.Some.iter": {"tf": 1}, "sain.Some.as_ref": {"tf": 1}, "sain.Some.as_mut": {"tf": 1}, "sain.Some.is_some": {"tf": 1}, "sain.Some.is_some_and": {"tf": 1}, "sain.Some.is_none": {"tf": 1}, "sain.Iter": {"tf": 1}, "sain.Iter.default": {"tf": 1}, "sain.Iter.collect": {"tf": 1}, "sain.Iter.to_vec": {"tf": 1}, "sain.Iter.copied": {"tf": 1}, "sain.Iter.by_ref": {"tf": 1}, "sain.Iter.next": {"tf": 1}, "sain.Iter.map": {"tf": 1}, "sain.Iter.take": {"tf": 1}, "sain.Iter.take_while": {"tf": 1}, "sain.Iter.drop_while": {"tf": 1}, "sain.Iter.filter": {"tf": 1}, "sain.Iter.skip": {"tf": 1}, "sain.Iter.zip": {"tf": 1}, "sain.Iter.all": {"tf": 1}, "sain.Iter.any": {"tf": 1}, "sain.Iter.sort": {"tf": 1}, "sain.Iter.first": {"tf": 1}, "sain.Iter.last": {"tf": 1}, "sain.Iter.reversed": {"tf": 1}, "sain.Iter.count": {"tf": 1}, "sain.Iter.union": {"tf": 1}, "sain.Iter.for_each": {"tf": 1}, "sain.Iter.async_for_each": {"tf": 1}, "sain.Iter.enumerate": {"tf": 1}, "sain.todo": {"tf": 1}, "sain.deprecated": {"tf": 1}, "sain.unimplemented": {"tf": 1}, "sain.doc": {"tf": 1}, "sain.Once": {"tf": 1}, "sain.Ok.is_ok": {"tf": 1}, "sain.Ok.is_ok_and": {"tf": 1}, "sain.Ok.is_err": {"tf": 1}, "sain.Ok.is_err_and": {"tf": 1}, "sain.Ok.expect": {"tf": 1}, "sain.Ok.unwrap": {"tf": 1}, "sain.Ok.unwrap_or": {"tf": 1}, "sain.Ok.unwrap_or_else": {"tf": 1}, "sain.Ok.unwrap_err": {"tf": 1}, "sain.Ok.ok": {"tf": 1}, "sain.Ok.err": {"tf": 1}, "sain.Ok.inspect": {"tf": 1}, "sain.Ok.inspect_err": {"tf": 1}, "sain.Ok.map": {"tf": 1}, "sain.Ok.map_or": {"tf": 1}, "sain.Ok.map_or_else": {"tf": 1}, "sain.Ok.map_err": {"tf": 1}, "sain.Ok.iter": {"tf": 1}, "sain.Err.is_ok": {"tf": 1}, "sain.Err.is_ok_and": {"tf": 1}, "sain.Err.is_err": {"tf": 1}, "sain.Err.is_err_and": {"tf": 1}, "sain.vec": {"tf": 1}, "sain.Vec": {"tf": 1}, "sain.Vec.__init__": {"tf": 1}, "sain.Vec.with_capacity": {"tf": 1}, "sain.Vec.into_inner": {"tf": 1}, "sain.Vec.len": {"tf": 1}, "sain.Vec.capacity": {"tf": 1}, "sain.Vec.iter": {"tf": 1}, "sain.Vec.split_off": {"tf": 1}, "sain.Vec.split_first": {"tf": 1}, "sain.Vec.first": {"tf": 1}, "sain.Vec.retain": {"tf": 1}, "sain.Vec.push": {"tf": 1}, "sain.Vec.get": {"tf": 1}, "sain.Vec.insert": {"tf": 1}, "sain.Vec.pop": {"tf": 1}, "sain.Vec.remove": {"tf": 1}, "sain.Vec.swap_remove": {"tf": 1}, "sain.Vec.extend": {"tf": 1}, "sain.Vec.copy": {"tf": 1}, "sain.Vec.clear": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}, "sain.futures.spawn": {"tf": 1}, "sain.iter.Iter": {"tf": 1}, "sain.iter.Iter.default": {"tf": 1}, "sain.iter.Iter.collect": {"tf": 1}, "sain.iter.Iter.to_vec": {"tf": 1}, "sain.iter.Iter.copied": {"tf": 1}, "sain.iter.Iter.by_ref": {"tf": 1}, "sain.iter.Iter.next": {"tf": 1}, "sain.iter.Iter.map": {"tf": 1}, "sain.iter.Iter.take": {"tf": 1}, "sain.iter.Iter.take_while": {"tf": 1}, "sain.iter.Iter.drop_while": {"tf": 1}, "sain.iter.Iter.filter": {"tf": 1}, "sain.iter.Iter.skip": {"tf": 1}, "sain.iter.Iter.zip": {"tf": 1}, "sain.iter.Iter.all": {"tf": 1}, "sain.iter.Iter.any": {"tf": 1}, "sain.iter.Iter.sort": {"tf": 1}, "sain.iter.Iter.first": {"tf": 1}, "sain.iter.Iter.last": {"tf": 1}, "sain.iter.Iter.reversed": {"tf": 1}, "sain.iter.Iter.count": {"tf": 1}, "sain.iter.Iter.union": {"tf": 1}, "sain.iter.Iter.for_each": {"tf": 1}, "sain.iter.Iter.async_for_each": {"tf": 1}, "sain.iter.Iter.enumerate": {"tf": 1}, "sain.iter.iter": {"tf": 1}, "sain.iter.empty": {"tf": 1}, "sain.iter.once": {"tf": 1}, "sain.vec.Vec": {"tf": 1}, "sain.vec.Vec.__init__": {"tf": 1}, "sain.vec.Vec.with_capacity": {"tf": 1}, "sain.vec.Vec.into_inner": {"tf": 1}, "sain.vec.Vec.len": {"tf": 1}, "sain.vec.Vec.capacity": {"tf": 1}, "sain.vec.Vec.iter": {"tf": 1}, "sain.vec.Vec.split_off": {"tf": 1}, "sain.vec.Vec.split_first": {"tf": 1}, "sain.vec.Vec.first": {"tf": 1}, "sain.vec.Vec.retain": {"tf": 1}, "sain.vec.Vec.push": {"tf": 1}, "sain.vec.Vec.get": {"tf": 1}, "sain.vec.Vec.insert": {"tf": 1}, "sain.vec.Vec.pop": {"tf": 1}, "sain.vec.Vec.remove": {"tf": 1}, "sain.vec.Vec.swap_remove": {"tf": 1}, "sain.vec.Vec.extend": {"tf": 1}, "sain.vec.Vec.copy": {"tf": 1}, "sain.vec.Vec.clear": {"tf": 1}, "sain.vec.vec": {"tf": 1}}, "df": 149, "s": {"docs": {"sain.cfg": {"tf": 1}}, "df": 1}}}}}, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"sain.iter.once": {"tf": 1}}, "df": 1}}}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"sain.Some.expect": {"tf": 1.4142135623730951}, "sain.Ok.expect": {"tf": 1.4142135623730951}}, "df": 2}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {"sain.Vec": {"tf": 1}, "sain.vec": {"tf": 1}, "sain.vec.Vec": {"tf": 1}}, "df": 3, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"sain.Ok.map_or": {"tf": 1}, "sain.Ok.map_or_else": {"tf": 1}}, "df": 2}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"sain.Vec.extend": {"tf": 1.4142135623730951}, "sain.vec.Vec.extend": {"tf": 1.4142135623730951}}, "df": 2}}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 2}}, "s": {"docs": {}, "df": 0, "e": {"docs": {"sain.cfg": {"tf": 1.4142135623730951}, "sain.Some.unwrap_or_else": {"tf": 1.4142135623730951}, "sain.Some.map_or_else": {"tf": 1.4142135623730951}, "sain.Ok.unwrap_or_else": {"tf": 1.4142135623730951}, "sain.Ok.map_or_else": {"tf": 1.4142135623730951}, "sain.cfg.cfg": {"tf": 1.4142135623730951}}, "df": 6}}, "e": {"docs": {}, "df": 0, "m": {"docs": {"sain.Vec.retain": {"tf": 1.4142135623730951}, "sain.vec.Vec.retain": {"tf": 1.4142135623730951}}, "df": 2, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"sain.Iter.collect": {"tf": 1}, "sain.Vec": {"tf": 1}, "sain.Vec.__init__": {"tf": 1}, "sain.Vec.iter": {"tf": 1.7320508075688772}, "sain.Vec.first": {"tf": 1}, "sain.Vec.push": {"tf": 1}, "sain.Vec.insert": {"tf": 1}, "sain.Vec.pop": {"tf": 1}, "sain.iter.Iter.collect": {"tf": 1}, "sain.vec": {"tf": 1}, "sain.vec.Vec": {"tf": 1}, "sain.vec.Vec.__init__": {"tf": 1}, "sain.vec.Vec.iter": {"tf": 1.7320508075688772}, "sain.vec.Vec.first": {"tf": 1}, "sain.vec.Vec.push": {"tf": 1}, "sain.vec.Vec.insert": {"tf": 1}, "sain.vec.Vec.pop": {"tf": 1}}, "df": 17, "s": {"docs": {"sain.Iter.copied": {"tf": 1}, "sain.Iter.by_ref": {"tf": 1}, "sain.Iter.take_while": {"tf": 1}, "sain.Iter.drop_while": {"tf": 1}, "sain.Iter.zip": {"tf": 1}, "sain.Iter.all": {"tf": 1}, "sain.Iter.any": {"tf": 1}, "sain.Iter.sort": {"tf": 1}, "sain.Iter.first": {"tf": 1}, "sain.Iter.last": {"tf": 1}, "sain.Iter.reversed": {"tf": 1}, "sain.Iter.count": {"tf": 1}, "sain.Iter.union": {"tf": 1}, "sain.Iter.enumerate": {"tf": 1}, "sain.vec": {"tf": 1}, "sain.Vec.with_capacity": {"tf": 1}, "sain.Vec.into_inner": {"tf": 1}, "sain.Vec.len": {"tf": 1}, "sain.Vec.iter": {"tf": 1}, "sain.Vec.is_empty": {"tf": 1}, "sain.Vec.split_first": {"tf": 1}, "sain.Vec.retain": {"tf": 1}, "sain.Vec.copy": {"tf": 1}, "sain.Vec.clear": {"tf": 1}, "sain.iter.Iter.copied": {"tf": 1}, "sain.iter.Iter.by_ref": {"tf": 1}, "sain.iter.Iter.take_while": {"tf": 1}, "sain.iter.Iter.drop_while": {"tf": 1}, "sain.iter.Iter.zip": {"tf": 1}, "sain.iter.Iter.all": {"tf": 1}, "sain.iter.Iter.any": {"tf": 1}, "sain.iter.Iter.sort": {"tf": 1}, "sain.iter.Iter.first": {"tf": 1}, "sain.iter.Iter.last": {"tf": 1}, "sain.iter.Iter.reversed": {"tf": 1}, "sain.iter.Iter.count": {"tf": 1}, "sain.iter.Iter.union": {"tf": 1}, "sain.iter.Iter.enumerate": {"tf": 1}, "sain.vec.Vec.with_capacity": {"tf": 1}, "sain.vec.Vec.into_inner": {"tf": 1}, "sain.vec.Vec.len": {"tf": 1}, "sain.vec.Vec.iter": {"tf": 1}, "sain.vec.Vec.is_empty": {"tf": 1}, "sain.vec.Vec.split_first": {"tf": 1}, "sain.vec.Vec.retain": {"tf": 1}, "sain.vec.Vec.copy": {"tf": 1}, "sain.vec.Vec.clear": {"tf": 1}, "sain.vec.vec": {"tf": 1}}, "df": 48}}}}}}}, "r": {"docs": {}, "df": 0, "r": {"docs": {"sain.Ok.is_ok": {"tf": 1}, "sain.Ok.is_err": {"tf": 1.4142135623730951}, "sain.Ok.is_err_and": {"tf": 1}, "sain.Ok.expect": {"tf": 2.6457513110645907}, "sain.Ok.unwrap": {"tf": 2}, "sain.Ok.unwrap_or": {"tf": 2}, "sain.Ok.unwrap_or_else": {"tf": 2}, "sain.Ok.unwrap_err": {"tf": 2.449489742783178}, "sain.Ok.ok": {"tf": 1.4142135623730951}, "sain.Ok.err": {"tf": 2}, "sain.Ok.inspect": {"tf": 1.7320508075688772}, "sain.Ok.inspect_err": {"tf": 2.449489742783178}, "sain.Ok.map": {"tf": 2.23606797749979}, "sain.Ok.map_or": {"tf": 1.4142135623730951}, "sain.Ok.map_or_else": {"tf": 2.449489742783178}, "sain.Ok.map_err": {"tf": 2.449489742783178}, "sain.Ok.iter": {"tf": 1}, "sain.Err.is_ok": {"tf": 1.4142135623730951}, "sain.Err.is_ok_and": {"tf": 1}, "sain.Err.is_err": {"tf": 1.7320508075688772}, "sain.Err.is_err_and": {"tf": 2}}, "df": 21, "o": {"docs": {}, "df": 0, "r": {"docs": {"sain.Some": {"tf": 1}, "sain.todo": {"tf": 1.4142135623730951}, "sain.Err": {"tf": 1}}, "df": 3}}, "[": {"docs": {}, "df": 0, "t": {"docs": {"sain.Ok.err": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sain.Some.unwrap": {"tf": 1}, "sain.Some.unwrap_or": {"tf": 1}, "sain.Some.unwrap_or_else": {"tf": 1}, "sain.cfg": {"tf": 1}}, "df": 4}}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"sain.Iter.default": {"tf": 1}, "sain.Vec.split_first": {"tf": 1}, "sain.Vec.pop": {"tf": 1}, "sain.iter.Iter.default": {"tf": 1}, "sain.iter.empty": {"tf": 1}, "sain.vec.Vec.split_first": {"tf": 1}, "sain.vec.Vec.pop": {"tf": 1}}, "df": 7}}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"sain.Iter.collect": {"tf": 1}, "sain.Iter.map": {"tf": 1.4142135623730951}, "sain.Iter.take_while": {"tf": 1}, "sain.Iter.drop_while": {"tf": 1}, "sain.Iter.all": {"tf": 1}, "sain.Iter.any": {"tf": 1}, "sain.Iter.for_each": {"tf": 1.7320508075688772}, "sain.Iter.async_for_each": {"tf": 1.7320508075688772}, "sain.Vec.iter": {"tf": 1}, "sain.iter.Iter.collect": {"tf": 1}, "sain.iter.Iter.map": {"tf": 1.4142135623730951}, "sain.iter.Iter.take_while": {"tf": 1}, "sain.iter.Iter.drop_while": {"tf": 1}, "sain.iter.Iter.all": {"tf": 1}, "sain.iter.Iter.any": {"tf": 1}, "sain.iter.Iter.for_each": {"tf": 1.7320508075688772}, "sain.iter.Iter.async_for_each": {"tf": 1.7320508075688772}, "sain.vec.Vec.iter": {"tf": 1}}, "df": 18}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {"sain.Iter.take": {"tf": 1}, "sain.Vec.push": {"tf": 1}, "sain.iter.Iter.take": {"tf": 1}, "sain.vec.Vec.push": {"tf": 1}}, "df": 4}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"sain.Iter.enumerate": {"tf": 1}, "sain.iter.Iter.enumerate": {"tf": 1}}, "df": 2}}}}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"sain.futures.loop": {"tf": 1}}, "df": 1}}}}}, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain": {"tf": 1}, "sain.Some": {"tf": 1}, "sain.Some.unwrap_or": {"tf": 1}, "sain.Some.unwrap_or_else": {"tf": 1}, "sain.Some.unwrap_unchecked": {"tf": 1.4142135623730951}, "sain.Some.expect": {"tf": 1}, "sain.Some.map": {"tf": 1}, "sain.Some.map_or": {"tf": 1}, "sain.Some.map_or_else": {"tf": 1}, "sain.Some.filter": {"tf": 1}, "sain.Some.and_ok": {"tf": 1}, "sain.Some.and_then": {"tf": 1.7320508075688772}, "sain.Some.iter": {"tf": 1}, "sain.Some.as_ref": {"tf": 1}, "sain.Some.as_mut": {"tf": 1}, "sain.Some.is_some": {"tf": 1}, "sain.Some.is_some_and": {"tf": 1}, "sain.Some.is_none": {"tf": 1}, "sain.Once.get": {"tf": 1}, "sain.cfg": {"tf": 1.4142135623730951}}, "df": 20, "[": {"docs": {}, "df": 0, "t": {"docs": {"sain": {"tf": 1}, "sain.Ok.ok": {"tf": 1}, "sain.Ok.err": {"tf": 1}}, "df": 3}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"sain.Ok.ok": {"tf": 1}, "sain.Ok.err": {"tf": 1}}, "df": 2}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {"sain.Iter.collect": {"tf": 1}, "sain.todo": {"tf": 1}, "sain.deprecated": {"tf": 1}, "sain.unimplemented": {"tf": 1}, "sain.futures.spawn": {"tf": 1}, "sain.iter.Iter.collect": {"tf": 1}}, "df": 6, "[": {"docs": {}, "df": 0, "t": {"docs": {"sain.Some": {"tf": 1}}, "df": 1}}}}}}}, "b": {"docs": {"sain.Some.and_ok": {"tf": 1.7320508075688772}}, "df": 1}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 4}}}}}}}}, "n": {"docs": {"sain.cfg_attr": {"tf": 1}, "sain.Some.and_then": {"tf": 1}, "sain.Iter.for_each": {"tf": 1.4142135623730951}, "sain.Iter.async_for_each": {"tf": 1.4142135623730951}, "sain.Vec.retain": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.iter.Iter.for_each": {"tf": 1.4142135623730951}, "sain.iter.Iter.async_for_each": {"tf": 1.4142135623730951}, "sain.vec.Vec.retain": {"tf": 1}}, "df": 9, "c": {"docs": {}, "df": 0, "e": {"docs": {"sain.Iter.to_vec": {"tf": 1}, "sain.Once": {"tf": 2.23606797749979}, "sain.iter.Iter.to_vec": {"tf": 1}, "sain.iter.once": {"tf": 1}}, "df": 4, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {"sain": {"tf": 1}}, "df": 1}}}}, "[": {"docs": {}, "df": 0, "t": {"docs": {"sain": {"tf": 1}}, "df": 1}}}}, "l": {"docs": {}, "df": 0, "y": {"docs": {"sain.cfg": {"tf": 1.4142135623730951}, "sain.cfg_attr": {"tf": 1.7320508075688772}, "sain.Iter.copied": {"tf": 1}, "sain.Iter.filter": {"tf": 1}, "sain.Once": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1.7320508075688772}, "sain.cfg.cfg": {"tf": 1}, "sain.iter.Iter.copied": {"tf": 1}, "sain.iter.Iter.filter": {"tf": 1}}, "df": 9}}, "e": {"docs": {"sain.cfg_attr": {"tf": 1}, "sain.Iter.any": {"tf": 1.4142135623730951}, "sain.Vec.copy": {"tf": 1}, "sain.cfg": {"tf": 1.7320508075688772}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.futures.loop": {"tf": 1}, "sain.iter.Iter.any": {"tf": 1.4142135623730951}, "sain.vec.Vec.copy": {"tf": 1}}, "df": 8}}, "f": {"docs": {"sain.cfg": {"tf": 1.7320508075688772}, "sain.cfg_attr": {"tf": 1.7320508075688772}, "sain.Default.default": {"tf": 1}, "sain.Some.as_ref": {"tf": 1}, "sain.Iter.copied": {"tf": 1.4142135623730951}, "sain.Iter.take": {"tf": 2}, "sain.Iter.skip": {"tf": 1}, "sain.Iter.count": {"tf": 1}, "sain.Iter.enumerate": {"tf": 1}, "sain.Ok": {"tf": 1}, "sain.Err": {"tf": 1}, "sain.Vec": {"tf": 1}, "sain.Vec.len": {"tf": 1}, "sain.Vec.capacity": {"tf": 1}, "sain.Vec.split_first": {"tf": 1}, "sain.Vec.push": {"tf": 1}, "sain.Vec.get": {"tf": 1}, "sain.Vec.swap_remove": {"tf": 1}, "sain.Vec.copy": {"tf": 1}, "sain.Vec.clear": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1.7320508075688772}, "sain.cfg.cfg": {"tf": 1.4142135623730951}, "sain.iter.Iter.copied": {"tf": 1.4142135623730951}, "sain.iter.Iter.take": {"tf": 2}, "sain.iter.Iter.skip": {"tf": 1}, "sain.iter.Iter.count": {"tf": 1}, "sain.iter.Iter.enumerate": {"tf": 1}, "sain.vec": {"tf": 1}, "sain.vec.Vec": {"tf": 1}, "sain.vec.Vec.len": {"tf": 1}, "sain.vec.Vec.capacity": {"tf": 1}, "sain.vec.Vec.split_first": {"tf": 1}, "sain.vec.Vec.push": {"tf": 1}, "sain.vec.Vec.get": {"tf": 1}, "sain.vec.Vec.swap_remove": {"tf": 1}, "sain.vec.Vec.copy": {"tf": 1}, "sain.vec.Vec.clear": {"tf": 1}}, "df": 37, "f": {"docs": {"sain.Vec.split_off": {"tf": 1.4142135623730951}, "sain.vec.Vec.split_off": {"tf": 1.4142135623730951}}, "df": 2}}, "r": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1.4142135623730951}, "sain.AsRef.copy": {"tf": 1}, "sain.AsMut.copy": {"tf": 1}, "sain.Some": {"tf": 2}, "sain.Some.unwrap": {"tf": 1}, "sain.Some.unwrap_or": {"tf": 1.7320508075688772}, "sain.Some.unwrap_or_else": {"tf": 1.7320508075688772}, "sain.Some.map_or": {"tf": 1.7320508075688772}, "sain.Some.map_or_else": {"tf": 1.7320508075688772}, "sain.Some.as_ref": {"tf": 1}, "sain.Iter.take": {"tf": 1}, "sain.Once": {"tf": 1.4142135623730951}, "sain.Ok.unwrap_or": {"tf": 1.4142135623730951}, "sain.Ok.unwrap_or_else": {"tf": 1.7320508075688772}, "sain.Ok.map_or": {"tf": 1.4142135623730951}, "sain.Ok.map_or_else": {"tf": 1.4142135623730951}, "sain.Vec.get": {"tf": 1}, "sain.Vec.pop": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1.4142135623730951}, "sain.cfg.cfg": {"tf": 1}, "sain.futures.loop": {"tf": 1}, "sain.iter.Iter.take": {"tf": 1}, "sain.vec.Vec.get": {"tf": 1}, "sain.vec.Vec.pop": {"tf": 1}}, "df": 25, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"sain.Iter.collect": {"tf": 1}, "sain.Iter.by_ref": {"tf": 1}, "sain.Vec.copy": {"tf": 1.7320508075688772}, "sain.iter.Iter.collect": {"tf": 1}, "sain.iter.Iter.by_ref": {"tf": 1}, "sain.vec.Vec.copy": {"tf": 1.7320508075688772}}, "df": 6}}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sain.Iter.reversed": {"tf": 1}, "sain.iter.Iter.reversed": {"tf": 1}}, "df": 2}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"sain.vec": {"tf": 1}, "sain.vec.vec": {"tf": 1}}, "df": 2}}}}}, "s": {"docs": {"sain.cfg": {"tf": 1.7320508075688772}, "sain.cfg_attr": {"tf": 2}, "sain.cfg.cfg_attr": {"tf": 2}, "sain.cfg.cfg": {"tf": 1.7320508075688772}}, "df": 4}, "b": {"docs": {}, "df": 0, "j": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"sain.cfg": {"tf": 2.23606797749979}, "sain.cfg_attr": {"tf": 2.8284271247461903}, "sain.Default": {"tf": 1}, "sain.Default.default": {"tf": 1}, "sain.AsRef": {"tf": 2.6457513110645907}, "sain.AsRef.object": {"tf": 1}, "sain.AsRef.copy": {"tf": 1.4142135623730951}, "sain.AsMut": {"tf": 1}, "sain.AsMut.object": {"tf": 1}, "sain.AsMut.copy": {"tf": 1.4142135623730951}, "sain.Some": {"tf": 1}, "sain.Some.take": {"tf": 1}, "sain.Some.as_ref": {"tf": 2}, "sain.Some.as_mut": {"tf": 1.7320508075688772}, "sain.deprecated": {"tf": 1.7320508075688772}, "sain.unimplemented": {"tf": 2}, "sain.doc": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 2.8284271247461903}, "sain.cfg.cfg": {"tf": 2.23606797749979}}, "df": 19, "s": {"docs": {"sain.Some.as_ref": {"tf": 1}}, "df": 1}}}}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sain.Iter.zip": {"tf": 2.23606797749979}, "sain.Iter.union": {"tf": 1.7320508075688772}, "sain.Vec.retain": {"tf": 1}, "sain.iter.Iter.zip": {"tf": 2.23606797749979}, "sain.iter.Iter.union": {"tf": 1.7320508075688772}, "sain.vec.Vec.retain": {"tf": 1}}, "df": 6, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"sain.Some": {"tf": 1}, "sain.Some.expect": {"tf": 1}, "sain.Some.filter": {"tf": 1}, "sain.Some.and_ok": {"tf": 1}, "sain.Some.and_then": {"tf": 1}, "sain.Some.as_ref": {"tf": 1}, "sain.Some.as_mut": {"tf": 1}, "sain.Some.is_some": {"tf": 1}, "sain.Some.is_some_and": {"tf": 1}, "sain.Some.is_none": {"tf": 1}, "sain.unimplemented": {"tf": 1}, "sain.Once.get_or_init": {"tf": 1}, "sain.Ok.map_or": {"tf": 1}, "sain.Ok.map_or_else": {"tf": 1}, "sain.Ok.iter": {"tf": 1}}, "df": 15}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {"sain.Iter.zip": {"tf": 1}, "sain.iter.Iter.zip": {"tf": 1}}, "df": 2}}}}}}}}, "k": {"docs": {"sain.Some.and_ok": {"tf": 1.4142135623730951}, "sain.Ok.is_ok": {"tf": 1.7320508075688772}, "sain.Ok.is_ok_and": {"tf": 1.7320508075688772}, "sain.Ok.is_err": {"tf": 1}, "sain.Ok.is_err_and": {"tf": 1.4142135623730951}, "sain.Ok.expect": {"tf": 2}, "sain.Ok.unwrap": {"tf": 2}, "sain.Ok.unwrap_or": {"tf": 2}, "sain.Ok.unwrap_or_else": {"tf": 2}, "sain.Ok.unwrap_err": {"tf": 2}, "sain.Ok.ok": {"tf": 2}, "sain.Ok.err": {"tf": 1.4142135623730951}, "sain.Ok.inspect": {"tf": 2}, "sain.Ok.inspect_err": {"tf": 1.7320508075688772}, "sain.Ok.map": {"tf": 2}, "sain.Ok.map_or": {"tf": 1.4142135623730951}, "sain.Ok.map_or_else": {"tf": 1.4142135623730951}, "sain.Ok.map_err": {"tf": 1.4142135623730951}, "sain.Ok.iter": {"tf": 1}, "sain.Err.is_ok": {"tf": 1.4142135623730951}, "sain.Err.is_ok_and": {"tf": 1.4142135623730951}, "sain.Err.is_err_and": {"tf": 1}}, "df": 22, "[": {"docs": {}, "df": 0, "t": {"docs": {"sain.Ok.ok": {"tf": 1}, "sain.Ok.map": {"tf": 1}, "sain.Ok.map_err": {"tf": 1}, "sain.Ok.iter": {"tf": 1}}, "df": 4}, "u": {"docs": {"sain.Ok.map": {"tf": 1}}, "df": 1}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sain.Some.iter": {"tf": 1}, "sain.Iter": {"tf": 1.4142135623730951}, "sain.Ok.iter": {"tf": 1}, "sain.Vec.into_inner": {"tf": 1}, "sain.Vec.iter": {"tf": 1}, "sain.iter.Iter": {"tf": 1.4142135623730951}, "sain.vec.Vec.into_inner": {"tf": 1}, "sain.vec.Vec.iter": {"tf": 1}}, "df": 8}}}, "w": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.Some.as_ref": {"tf": 1.7320508075688772}}, "df": 1}}}, "o": {"docs": {"sain.Ok.expect": {"tf": 1.4142135623730951}, "sain.Ok.unwrap": {"tf": 1.4142135623730951}, "sain.Ok.unwrap_or": {"tf": 1.4142135623730951}}, "df": 3}}, "u": {"docs": {}, "df": 0, "t": {"docs": {"sain.Vec.get": {"tf": 1}, "sain.vec.Vec.get": {"tf": 1}}, "df": 2}}}, "l": {"docs": {"sain.Iter.filter": {"tf": 1}, "sain.iter.Iter.filter": {"tf": 1}}, "df": 2, "t": {"docs": {"sain": {"tf": 2.8284271247461903}, "sain.Iter.map": {"tf": 1}, "sain.Iter.take": {"tf": 1}, "sain.Iter.skip": {"tf": 1}, "sain.Iter.zip": {"tf": 1}, "sain.Iter.sort": {"tf": 1}, "sain.iter.Iter.map": {"tf": 1}, "sain.iter.Iter.take": {"tf": 1}, "sain.iter.Iter.skip": {"tf": 1}, "sain.iter.Iter.zip": {"tf": 1}, "sain.iter.Iter.sort": {"tf": 1}}, "df": 11}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "x": {"docs": {"sain.cfg": {"tf": 1.4142135623730951}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1.4142135623730951}}, "df": 4}}}, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"sain.Iter": {"tf": 1}, "sain.iter.Iter": {"tf": 1}}, "df": 2}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"sain.Vec": {"tf": 1.4142135623730951}, "sain.Vec.__init__": {"tf": 1}, "sain.vec": {"tf": 1.4142135623730951}, "sain.vec.Vec": {"tf": 1.4142135623730951}, "sain.vec.Vec.__init__": {"tf": 1}}, "df": 5}}, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sain.Vec": {"tf": 1}, "sain.vec": {"tf": 1}, "sain.vec.Vec": {"tf": 1}}, "df": 3}}}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.Some": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "r": {"docs": {"sain.AsRef": {"tf": 1}}, "df": 1}}}, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.Iter.filter": {"tf": 1.4142135623730951}, "sain.iter.Iter.filter": {"tf": 1.4142135623730951}}, "df": 2}}}}, "s": {"docs": {"sain.Iter.filter": {"tf": 1.4142135623730951}, "sain.iter.Iter.filter": {"tf": 1.4142135623730951}}, "df": 2}, "g": {"docs": {"sain.deprecated": {"tf": 1}}, "df": 1}, "o": {"docs": {}, "df": 0, "p": {"docs": {"sain.futures.loop": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {"sain.Some.unwrap_or_else": {"tf": 1.4142135623730951}, "sain.Some.map": {"tf": 1}, "sain.Some.map_or": {"tf": 1.4142135623730951}, "sain.Some.map_or_else": {"tf": 2}, "sain.Some.filter": {"tf": 1.4142135623730951}, "sain.Some.and_then": {"tf": 1.4142135623730951}, "sain.Some.is_some_and": {"tf": 1.4142135623730951}, "sain.Iter": {"tf": 1}, "sain.Iter.map": {"tf": 1}, "sain.Iter.take_while": {"tf": 1}, "sain.Iter.drop_while": {"tf": 1}, "sain.Iter.filter": {"tf": 1}, "sain.Iter.all": {"tf": 1}, "sain.Iter.any": {"tf": 1}, "sain.Iter.sort": {"tf": 1}, "sain.Iter.first": {"tf": 1}, "sain.Iter.last": {"tf": 1}, "sain.Iter.for_each": {"tf": 1}, "sain.Iter.async_for_each": {"tf": 1}, "sain.Ok.is_ok_and": {"tf": 1}, "sain.Ok.is_err_and": {"tf": 1}, "sain.Ok.unwrap_or_else": {"tf": 1.4142135623730951}, "sain.Ok.map": {"tf": 1}, "sain.Ok.map_or": {"tf": 1.4142135623730951}, "sain.Ok.map_or_else": {"tf": 2}, "sain.Ok.map_err": {"tf": 1}, "sain.Err.is_ok_and": {"tf": 1}, "sain.Err.is_err_and": {"tf": 1}, "sain.Vec.retain": {"tf": 1}, "sain.iter.Iter": {"tf": 1}, "sain.iter.Iter.map": {"tf": 1}, "sain.iter.Iter.take_while": {"tf": 1}, "sain.iter.Iter.drop_while": {"tf": 1}, "sain.iter.Iter.filter": {"tf": 1}, "sain.iter.Iter.all": {"tf": 1}, "sain.iter.Iter.any": {"tf": 1}, "sain.iter.Iter.sort": {"tf": 1}, "sain.iter.Iter.first": {"tf": 1}, "sain.iter.Iter.last": {"tf": 1}, "sain.iter.Iter.for_each": {"tf": 1}, "sain.iter.Iter.async_for_each": {"tf": 1}, "sain.vec.Vec.retain": {"tf": 1}}, "df": 42}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"sain.Iter.last": {"tf": 1.4142135623730951}, "sain.Vec.pop": {"tf": 1}, "sain.iter.Iter.last": {"tf": 1.4142135623730951}, "sain.vec.Vec.pop": {"tf": 1}}, "df": 4}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {"sain.Some.filter": {"tf": 1}, "sain.Ok.unwrap_or_else": {"tf": 1}, "sain.Ok.map_or": {"tf": 1.4142135623730951}, "sain.Ok.map_or_else": {"tf": 2}, "sain.Vec": {"tf": 1}, "sain.Vec.__init__": {"tf": 1.4142135623730951}, "sain.Vec.with_capacity": {"tf": 1.7320508075688772}, "sain.Vec.len": {"tf": 1}, "sain.Vec.clear": {"tf": 1}, "sain.vec": {"tf": 1}, "sain.vec.Vec": {"tf": 1}, "sain.vec.Vec.__init__": {"tf": 1.4142135623730951}, "sain.vec.Vec.with_capacity": {"tf": 1.7320508075688772}, "sain.vec.Vec.len": {"tf": 1}, "sain.vec.Vec.clear": {"tf": 1}}, "df": 15}, "f": {"docs": {}, "df": 0, "t": {"docs": {"sain.Iter.take_while": {"tf": 1}, "sain.Iter.drop_while": {"tf": 1}, "sain.Iter.zip": {"tf": 1}, "sain.Iter.all": {"tf": 1}, "sain.Iter.any": {"tf": 1}, "sain.Iter.sort": {"tf": 1}, "sain.Iter.first": {"tf": 1}, "sain.Iter.last": {"tf": 1}, "sain.Iter.reversed": {"tf": 1}, "sain.Iter.union": {"tf": 1}, "sain.Iter.enumerate": {"tf": 1}, "sain.cfg": {"tf": 1}, "sain.iter.Iter.take_while": {"tf": 1}, "sain.iter.Iter.drop_while": {"tf": 1}, "sain.iter.Iter.zip": {"tf": 1}, "sain.iter.Iter.all": {"tf": 1}, "sain.iter.Iter.any": {"tf": 1}, "sain.iter.Iter.sort": {"tf": 1}, "sain.iter.Iter.first": {"tf": 1}, "sain.iter.Iter.last": {"tf": 1}, "sain.iter.Iter.reversed": {"tf": 1}, "sain.iter.Iter.union": {"tf": 1}, "sain.iter.Iter.enumerate": {"tf": 1}}, "df": 23}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"sain.Iter.any": {"tf": 1.4142135623730951}, "sain.Vec.with_capacity": {"tf": 1}, "sain.iter.Iter.any": {"tf": 1.4142135623730951}, "sain.vec.Vec.with_capacity": {"tf": 1}}, "df": 4}}, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.Ok.map": {"tf": 1}, "sain.Ok.map_err": {"tf": 1}}, "df": 2}}}}}, "g": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {"sain.Iter.async_for_each": {"tf": 1}, "sain.iter.Iter.async_for_each": {"tf": 1}}, "df": 2}}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.vec": {"tf": 1}, "sain.vec.vec": {"tf": 1}}, "df": 2}}}}}, "g": {"docs": {}, "df": 0, "t": {"docs": {"sain": {"tf": 2.8284271247461903}, "sain.cfg_attr": {"tf": 1}, "sain.Default": {"tf": 1}, "sain.Some.filter": {"tf": 1.4142135623730951}, "sain.Some.is_some_and": {"tf": 1.4142135623730951}, "sain.Iter": {"tf": 1}, "sain.Iter.map": {"tf": 1}, "sain.Iter.take": {"tf": 1}, "sain.Iter.skip": {"tf": 1}, "sain.Iter.zip": {"tf": 1}, "sain.Iter.async_for_each": {"tf": 1}, "sain.todo": {"tf": 1}, "sain.doc": {"tf": 1}, "sain.Once": {"tf": 1.4142135623730951}, "sain.Ok.inspect": {"tf": 1}, "sain.Ok.inspect_err": {"tf": 1}, "sain.Vec.with_capacity": {"tf": 1}, "sain.Vec.retain": {"tf": 1}, "sain.cfg": {"tf": 1.7320508075688772}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.futures.spawn": {"tf": 1.4142135623730951}, "sain.iter.Iter": {"tf": 1}, "sain.iter.Iter.map": {"tf": 1}, "sain.iter.Iter.take": {"tf": 1}, "sain.iter.Iter.skip": {"tf": 1}, "sain.iter.Iter.zip": {"tf": 1}, "sain.iter.Iter.async_for_each": {"tf": 1}, "sain.vec.Vec.with_capacity": {"tf": 1}, "sain.vec.Vec.retain": {"tf": 1}}, "df": 29}, "e": {"docs": {}, "df": 0, "t": {"docs": {"sain.Some.unwrap_or_else": {"tf": 1}, "sain.Some.map_or": {"tf": 1}, "sain.Some.map_or_else": {"tf": 1}, "sain.Iter.async_for_each": {"tf": 1}, "sain.Once": {"tf": 1.7320508075688772}, "sain.Once.set": {"tf": 1}, "sain.Once.get_or_init": {"tf": 1}, "sain.Vec.first": {"tf": 1}, "sain.Vec.get": {"tf": 1.7320508075688772}, "sain.futures.spawn": {"tf": 1.7320508075688772}, "sain.futures.loop": {"tf": 1}, "sain.iter.Iter.async_for_each": {"tf": 1}, "sain.vec.Vec.first": {"tf": 1}, "sain.vec.Vec.get": {"tf": 1.7320508075688772}}, "df": 14, "s": {"docs": {"sain.cfg_attr": {"tf": 1}, "sain.Once.get": {"tf": 1}, "sain.Vec": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.vec": {"tf": 1}, "sain.vec.Vec": {"tf": 1}}, "df": 6}}}, "g": {"docs": {"sain.Some.iter": {"tf": 1.4142135623730951}}, "df": 1}, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"sain.Iter.take_while": {"tf": 1}, "sain.Iter.drop_while": {"tf": 1.4142135623730951}, "sain.iter.Iter.take_while": {"tf": 1}, "sain.iter.Iter.drop_while": {"tf": 1.4142135623730951}}, "df": 4}}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"sain.vec": {"tf": 1}, "sain.vec.vec": {"tf": 1}}, "df": 2}}}, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sain.Vec": {"tf": 1}, "sain.vec": {"tf": 1}, "sain.vec.Vec": {"tf": 1}}, "df": 3}}}}}}}, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"sain.Vec.get": {"tf": 1}, "sain.futures.spawn": {"tf": 1}, "sain.vec.Vec.get": {"tf": 1}}, "df": 3}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sain.futures.spawn": {"tf": 1}}, "df": 1}}}}}}, "v": {"docs": {"sain.Some.unwrap_unchecked": {"tf": 2}, "sain.Iter.async_for_each": {"tf": 1}, "sain.iter.Iter.async_for_each": {"tf": 1}}, "df": 3, "e": {"docs": {}, "df": 0, "c": {"docs": {"sain": {"tf": 1}, "sain.Iter.to_vec": {"tf": 1.4142135623730951}, "sain.vec": {"tf": 2.449489742783178}, "sain.Vec": {"tf": 2.449489742783178}, "sain.Vec.__init__": {"tf": 2}, "sain.Vec.with_capacity": {"tf": 3.4641016151377544}, "sain.Vec.into_inner": {"tf": 1.7320508075688772}, "sain.Vec.len": {"tf": 1.7320508075688772}, "sain.Vec.iter": {"tf": 1.7320508075688772}, "sain.Vec.split_off": {"tf": 2}, "sain.Vec.split_first": {"tf": 2.449489742783178}, "sain.Vec.first": {"tf": 2}, "sain.Vec.retain": {"tf": 2.23606797749979}, "sain.Vec.push": {"tf": 2}, "sain.Vec.append": {"tf": 1}, "sain.Vec.get": {"tf": 2}, "sain.Vec.insert": {"tf": 2}, "sain.Vec.pop": {"tf": 2}, "sain.Vec.remove": {"tf": 1.7320508075688772}, "sain.Vec.swap_remove": {"tf": 1.7320508075688772}, "sain.Vec.extend": {"tf": 2}, "sain.Vec.copy": {"tf": 1}, "sain.Vec.clear": {"tf": 2}, "sain.iter.Iter.to_vec": {"tf": 1.4142135623730951}, "sain.vec.Vec": {"tf": 2.449489742783178}, "sain.vec.Vec.__init__": {"tf": 2}, "sain.vec.Vec.with_capacity": {"tf": 3.4641016151377544}, "sain.vec.Vec.into_inner": {"tf": 1.7320508075688772}, "sain.vec.Vec.len": {"tf": 1.7320508075688772}, "sain.vec.Vec.iter": {"tf": 1.7320508075688772}, "sain.vec.Vec.split_off": {"tf": 2}, "sain.vec.Vec.split_first": {"tf": 2.449489742783178}, "sain.vec.Vec.first": {"tf": 2}, "sain.vec.Vec.retain": {"tf": 2.23606797749979}, "sain.vec.Vec.push": {"tf": 2}, "sain.vec.Vec.append": {"tf": 1}, "sain.vec.Vec.get": {"tf": 2}, "sain.vec.Vec.insert": {"tf": 2}, "sain.vec.Vec.pop": {"tf": 2}, "sain.vec.Vec.remove": {"tf": 1.7320508075688772}, "sain.vec.Vec.swap_remove": {"tf": 1.7320508075688772}, "sain.vec.Vec.extend": {"tf": 2}, "sain.vec.Vec.copy": {"tf": 1}, "sain.vec.Vec.clear": {"tf": 2}, "sain.vec.vec": {"tf": 1}}, "df": 45, "[": {"docs": {}, "df": 0, "t": {"docs": {"sain": {"tf": 1}, "sain.Iter.to_vec": {"tf": 1}, "sain.iter.Iter.to_vec": {"tf": 1}}, "df": 3}}, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"sain.vec": {"tf": 1}, "sain.Vec.into_inner": {"tf": 1}, "sain.Vec.len": {"tf": 1}, "sain.Vec.capacity": {"tf": 1}, "sain.Vec.iter": {"tf": 1}, "sain.Vec.is_empty": {"tf": 1}, "sain.Vec.split_off": {"tf": 1}, "sain.Vec.split_first": {"tf": 1}, "sain.Vec.retain": {"tf": 1}, "sain.Vec.push": {"tf": 1}, "sain.Vec.pop": {"tf": 1}, "sain.Vec.remove": {"tf": 1.4142135623730951}, "sain.Vec.swap_remove": {"tf": 1.7320508075688772}, "sain.Vec.extend": {"tf": 1}, "sain.Vec.copy": {"tf": 1}, "sain.Vec.clear": {"tf": 1}, "sain.vec.Vec.into_inner": {"tf": 1}, "sain.vec.Vec.len": {"tf": 1}, "sain.vec.Vec.capacity": {"tf": 1}, "sain.vec.Vec.iter": {"tf": 1}, "sain.vec.Vec.is_empty": {"tf": 1}, "sain.vec.Vec.split_off": {"tf": 1}, "sain.vec.Vec.split_first": {"tf": 1}, "sain.vec.Vec.retain": {"tf": 1}, "sain.vec.Vec.push": {"tf": 1}, "sain.vec.Vec.pop": {"tf": 1}, "sain.vec.Vec.remove": {"tf": 1.4142135623730951}, "sain.vec.Vec.swap_remove": {"tf": 1.7320508075688772}, "sain.vec.Vec.extend": {"tf": 1}, "sain.vec.Vec.copy": {"tf": 1}, "sain.vec.Vec.clear": {"tf": 1}, "sain.vec.vec": {"tf": 1}}, "df": 32}}}}, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1.4142135623730951}, "sain.deprecated": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1.4142135623730951}, "sain.cfg.cfg": {"tf": 1.4142135623730951}}, "df": 5}}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"sain.Default": {"tf": 1}, "sain.Default.default": {"tf": 1}, "sain.Some": {"tf": 3.1622776601683795}, "sain.Some.default": {"tf": 1}, "sain.Some.read": {"tf": 1}, "sain.Some.unwrap": {"tf": 2.449489742783178}, "sain.Some.unwrap_or": {"tf": 2.23606797749979}, "sain.Some.unwrap_or_else": {"tf": 2.449489742783178}, "sain.Some.unwrap_unchecked": {"tf": 1.4142135623730951}, "sain.Some.expect": {"tf": 2.8284271247461903}, "sain.Some.map": {"tf": 2.449489742783178}, "sain.Some.map_or": {"tf": 2.8284271247461903}, "sain.Some.map_or_else": {"tf": 2.6457513110645907}, "sain.Some.filter": {"tf": 2.23606797749979}, "sain.Some.take": {"tf": 2.23606797749979}, "sain.Some.replace": {"tf": 2.449489742783178}, "sain.Some.and_ok": {"tf": 2.23606797749979}, "sain.Some.and_then": {"tf": 2.449489742783178}, "sain.Some.iter": {"tf": 2.23606797749979}, "sain.Some.as_ref": {"tf": 2.8284271247461903}, "sain.Some.as_mut": {"tf": 2.449489742783178}, "sain.Some.is_some": {"tf": 2.23606797749979}, "sain.Some.is_some_and": {"tf": 2.23606797749979}, "sain.Some.is_none": {"tf": 2.23606797749979}, "sain.Iter.copied": {"tf": 1}, "sain.Iter.map": {"tf": 2}, "sain.Once.get": {"tf": 1}, "sain.Once.set": {"tf": 1.4142135623730951}, "sain.Once.get_or_init": {"tf": 1.4142135623730951}, "sain.Ok": {"tf": 1}, "sain.Ok.is_ok": {"tf": 2}, "sain.Ok.is_ok_and": {"tf": 2.23606797749979}, "sain.Ok.is_err": {"tf": 2}, "sain.Ok.is_err_and": {"tf": 2.23606797749979}, "sain.Ok.expect": {"tf": 1}, "sain.Ok.unwrap": {"tf": 1}, "sain.Ok.unwrap_or": {"tf": 1}, "sain.Ok.unwrap_or_else": {"tf": 1}, "sain.Ok.unwrap_err": {"tf": 1}, "sain.Ok.ok": {"tf": 2.23606797749979}, "sain.Ok.err": {"tf": 2.23606797749979}, "sain.Ok.inspect": {"tf": 2}, "sain.Ok.inspect_err": {"tf": 2}, "sain.Ok.map_or": {"tf": 1.4142135623730951}, "sain.Ok.map_or_else": {"tf": 1.4142135623730951}, "sain.Ok.iter": {"tf": 1}, "sain.Err": {"tf": 1}, "sain.Err.is_ok": {"tf": 1.7320508075688772}, "sain.Err.is_ok_and": {"tf": 2}, "sain.Err.is_err": {"tf": 1.7320508075688772}, "sain.Err.is_err_and": {"tf": 1.7320508075688772}, "sain.iter.Iter.copied": {"tf": 1}, "sain.iter.Iter.map": {"tf": 2}}, "df": 53, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"sain.cfg_attr": {"tf": 1}, "sain.Vec.swap_remove": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.vec.Vec.swap_remove": {"tf": 1}}, "df": 4}}}}}, "t": {"docs": {"sain.Some.map": {"tf": 1}, "sain.Some.and_then": {"tf": 1}}, "df": 2}}}}}, "c": {"docs": {"sain.Iter.to_vec": {"tf": 1}, "sain.iter.Iter.to_vec": {"tf": 1}}, "df": 2}, "i": {"docs": {}, "df": 0, "p": {"docs": {"sain.Iter.take_while": {"tf": 1.7320508075688772}, "sain.Iter.drop_while": {"tf": 1.4142135623730951}, "sain.iter.Iter.take_while": {"tf": 1.7320508075688772}, "sain.iter.Iter.drop_while": {"tf": 1.4142135623730951}}, "df": 4}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {"sain.cfg_attr": {"tf": 1.4142135623730951}, "sain.Default": {"tf": 1}, "sain.Iter.async_for_each": {"tf": 1.4142135623730951}, "sain.todo": {"tf": 1}, "sain.doc": {"tf": 1}, "sain.Once": {"tf": 1.7320508075688772}, "sain.Ok.inspect": {"tf": 1}, "sain.Ok.inspect_err": {"tf": 1}, "sain.cfg": {"tf": 1.7320508075688772}, "sain.cfg.cfg_attr": {"tf": 1.4142135623730951}, "sain.futures.spawn": {"tf": 1.4142135623730951}, "sain.iter.Iter.async_for_each": {"tf": 1.4142135623730951}}, "df": 12, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"sain": {"tf": 1}, "sain.Default": {"tf": 2.449489742783178}, "sain.Default.default": {"tf": 1}, "sain.Some": {"tf": 1}, "sain.Some.default": {"tf": 1}, "sain.Some.unwrap_or": {"tf": 1}, "sain.Some.unwrap_or_else": {"tf": 1}, "sain.Some.map_or": {"tf": 1.4142135623730951}, "sain.Some.map_or_else": {"tf": 1.7320508075688772}, "sain.Iter.default": {"tf": 1.4142135623730951}, "sain.unimplemented": {"tf": 1}, "sain.Ok.unwrap_or": {"tf": 1}, "sain.Ok.map_or": {"tf": 1}, "sain.Ok.map_or_else": {"tf": 1}, "sain.iter.Iter.default": {"tf": 1.4142135623730951}}, "df": 15, "[": {"docs": {}, "df": 0, "t": {"docs": {"sain": {"tf": 1}}, "df": 1}}}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"sain": {"tf": 1}, "sain.deprecated": {"tf": 1}, "sain.unimplemented": {"tf": 1}}, "df": 3, "s": {"docs": {"sain": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}}, "df": 2}}}}}}}, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain": {"tf": 1.4142135623730951}, "sain.deprecated": {"tf": 2}}, "df": 2}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 4}}}}}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.Some.as_ref": {"tf": 1}}, "df": 1}}}}}}, "o": {"docs": {"sain.cfg_attr": {"tf": 1}, "sain.Ok.inspect": {"tf": 1.4142135623730951}, "sain.Ok.inspect_err": {"tf": 1.4142135623730951}, "sain.cfg.cfg_attr": {"tf": 1}}, "df": 4, "c": {"docs": {"sain": {"tf": 1.4142135623730951}, "sain.doc": {"tf": 1.7320508075688772}}, "df": 2, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.doc": {"tf": 1}}, "df": 1}}}}}}}}}}, "s": {"docs": {"sain.doc": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 4}}}}}}, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 2}}}}}}}}, "c": {"docs": {}, "df": 0, "t": {"docs": {"sain.Default": {"tf": 1.4142135623730951}, "sain.Iter.async_for_each": {"tf": 1}, "sain.todo": {"tf": 1}, "sain.futures.spawn": {"tf": 1}, "sain.iter.Iter.async_for_each": {"tf": 1}}, "df": 5}}, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.unimplemented": {"tf": 1}}, "df": 1}}}}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"sain.AsRef": {"tf": 1.4142135623730951}}, "df": 1, "e": {"docs": {}, "df": 0, "s": {"docs": {"sain.AsRef": {"tf": 1}, "sain.Some.as_ref": {"tf": 1}}, "df": 2}}}}}}}}}, "n": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "y": {"docs": {"sain.Iter.async_for_each": {"tf": 1}, "sain.iter.Iter.async_for_each": {"tf": 1}}, "df": 2}}}, "r": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"sain.cfg": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {"sain.Some": {"tf": 1}, "sain.Iter.drop_while": {"tf": 1}, "sain.iter.Iter.drop_while": {"tf": 1}}, "df": 3}}}}, "a": {"docs": {"sain": {"tf": 1}, "sain.cfg": {"tf": 1.4142135623730951}, "sain.cfg_attr": {"tf": 1.4142135623730951}, "sain.Default": {"tf": 1}, "sain.AsRef": {"tf": 1}, "sain.AsRef.copy": {"tf": 1.4142135623730951}, "sain.AsMut": {"tf": 1}, "sain.AsMut.copy": {"tf": 1.4142135623730951}, "sain.Some": {"tf": 1.4142135623730951}, "sain.Some.unwrap": {"tf": 1}, "sain.Some.unwrap_or_else": {"tf": 1}, "sain.Some.expect": {"tf": 1}, "sain.Some.map": {"tf": 1}, "sain.Some.map_or": {"tf": 1}, "sain.Some.map_or_else": {"tf": 1}, "sain.Some.as_ref": {"tf": 1.4142135623730951}, "sain.Iter.copied": {"tf": 1}, "sain.Iter.reversed": {"tf": 1}, "sain.Iter.union": {"tf": 1}, "sain.Iter.enumerate": {"tf": 1}, "sain.todo": {"tf": 1}, "sain.deprecated": {"tf": 2}, "sain.unimplemented": {"tf": 1.4142135623730951}, "sain.Once": {"tf": 1}, "sain.Ok.inspect": {"tf": 1}, "sain.Ok.inspect_err": {"tf": 1}, "sain.Ok.map": {"tf": 1}, "sain.Ok.map_or_else": {"tf": 1}, "sain.Ok.map_err": {"tf": 1}, "sain.vec": {"tf": 1.7320508075688772}, "sain.Vec": {"tf": 1.7320508075688772}, "sain.Vec.__init__": {"tf": 1.4142135623730951}, "sain.Vec.with_capacity": {"tf": 1}, "sain.Vec.iter": {"tf": 1}, "sain.Vec.pop": {"tf": 1}, "sain.Vec.remove": {"tf": 1.4142135623730951}, "sain.Vec.swap_remove": {"tf": 1.7320508075688772}, "sain.Vec.copy": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1.4142135623730951}, "sain.cfg.cfg": {"tf": 1.7320508075688772}, "sain.futures.loop": {"tf": 1}, "sain.iter": {"tf": 1}, "sain.iter.Iter.copied": {"tf": 1}, "sain.iter.Iter.reversed": {"tf": 1}, "sain.iter.Iter.union": {"tf": 1}, "sain.iter.Iter.enumerate": {"tf": 1}, "sain.iter.once": {"tf": 1}, "sain.vec.Vec": {"tf": 1.7320508075688772}, "sain.vec.Vec.__init__": {"tf": 1.4142135623730951}, "sain.vec.Vec.with_capacity": {"tf": 1}, "sain.vec.Vec.iter": {"tf": 1}, "sain.vec.Vec.pop": {"tf": 1}, "sain.vec.Vec.remove": {"tf": 1.4142135623730951}, "sain.vec.Vec.swap_remove": {"tf": 1.7320508075688772}, "sain.vec.Vec.copy": {"tf": 1}, "sain.vec.vec": {"tf": 1}}, "df": 56, "s": {"docs": {"sain": {"tf": 1}, "sain.Some": {"tf": 1.4142135623730951}, "sain.Some.and_ok": {"tf": 1}, "sain.Some.as_ref": {"tf": 1.7320508075688772}, "sain.Some.as_mut": {"tf": 1.4142135623730951}, "sain.Iter.collect": {"tf": 1}, "sain.Iter.async_for_each": {"tf": 1}, "sain.deprecated": {"tf": 1}, "sain.unimplemented": {"tf": 1.4142135623730951}, "sain.iter.Iter.collect": {"tf": 1}, "sain.iter.Iter.async_for_each": {"tf": 1}}, "df": 11, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {"sain": {"tf": 1}, "sain.Some.as_ref": {"tf": 1.4142135623730951}}, "df": 2, "[": {"docs": {}, "df": 0, "t": {"docs": {"sain": {"tf": 1}}, "df": 1}}}}}, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"sain": {"tf": 1}, "sain.Some.as_mut": {"tf": 1}}, "df": 2, "[": {"docs": {}, "df": 0, "t": {"docs": {"sain": {"tf": 1}}, "df": 1}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"sain.Default": {"tf": 1}, "sain.AsRef": {"tf": 1.4142135623730951}, "sain.Iter.default": {"tf": 1}, "sain.Iter.to_vec": {"tf": 1}, "sain.Iter.copied": {"tf": 1}, "sain.Iter.by_ref": {"tf": 1}, "sain.Iter.next": {"tf": 1.7320508075688772}, "sain.Iter.map": {"tf": 1}, "sain.Iter.take": {"tf": 1}, "sain.Iter.zip": {"tf": 1}, "sain.Iter.count": {"tf": 1}, "sain.Ok.is_ok": {"tf": 1}, "sain.Ok.is_ok_and": {"tf": 1}, "sain.Ok.is_err": {"tf": 1}, "sain.Ok.is_err_and": {"tf": 1}, "sain.Ok.map_or": {"tf": 1.4142135623730951}, "sain.Ok.map_or_else": {"tf": 1.4142135623730951}, "sain.Err.is_ok": {"tf": 1}, "sain.Err.is_ok_and": {"tf": 1}, "sain.Err.is_err": {"tf": 1}, "sain.Err.is_err_and": {"tf": 1}, "sain.Vec": {"tf": 1}, "sain.Vec.__init__": {"tf": 1.4142135623730951}, "sain.Vec.with_capacity": {"tf": 1}, "sain.Vec.into_inner": {"tf": 1}, "sain.Vec.len": {"tf": 1}, "sain.Vec.split_first": {"tf": 1.4142135623730951}, "sain.Vec.first": {"tf": 1}, "sain.Vec.retain": {"tf": 1}, "sain.Vec.push": {"tf": 1}, "sain.Vec.insert": {"tf": 1}, "sain.Vec.pop": {"tf": 1.4142135623730951}, "sain.Vec.remove": {"tf": 1}, "sain.Vec.swap_remove": {"tf": 1}, "sain.Vec.extend": {"tf": 1}, "sain.Vec.clear": {"tf": 1}, "sain.iter.Iter.default": {"tf": 1}, "sain.iter.Iter.to_vec": {"tf": 1}, "sain.iter.Iter.copied": {"tf": 1}, "sain.iter.Iter.by_ref": {"tf": 1}, "sain.iter.Iter.next": {"tf": 1.7320508075688772}, "sain.iter.Iter.map": {"tf": 1}, "sain.iter.Iter.take": {"tf": 1}, "sain.iter.Iter.zip": {"tf": 1}, "sain.iter.Iter.count": {"tf": 1}, "sain.iter.empty": {"tf": 1}, "sain.iter.once": {"tf": 1.4142135623730951}, "sain.vec": {"tf": 1}, "sain.vec.Vec": {"tf": 1}, "sain.vec.Vec.__init__": {"tf": 1.4142135623730951}, "sain.vec.Vec.with_capacity": {"tf": 1}, "sain.vec.Vec.into_inner": {"tf": 1}, "sain.vec.Vec.len": {"tf": 1}, "sain.vec.Vec.split_first": {"tf": 1.4142135623730951}, "sain.vec.Vec.first": {"tf": 1}, "sain.vec.Vec.retain": {"tf": 1}, "sain.vec.Vec.push": {"tf": 1}, "sain.vec.Vec.insert": {"tf": 1}, "sain.vec.Vec.pop": {"tf": 1.4142135623730951}, "sain.vec.Vec.remove": {"tf": 1}, "sain.vec.Vec.swap_remove": {"tf": 1}, "sain.vec.Vec.extend": {"tf": 1}, "sain.vec.Vec.clear": {"tf": 1}}, "df": 63}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.cfg": {"tf": 1}}, "df": 1}}}}}, "y": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {"sain.Iter.async_for_each": {"tf": 2.449489742783178}, "sain.futures.spawn": {"tf": 1.4142135623730951}, "sain.iter.Iter.async_for_each": {"tf": 2.449489742783178}}, "df": 3, "h": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {"sain.futures": {"tf": 1}}, "df": 1}}}}}}}, "i": {"docs": {}, "df": 0, "o": {"docs": {"sain.futures.loop": {"tf": 1}}, "df": 1}}}}}}, "t": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.Iter.any": {"tf": 1.4142135623730951}, "sain.deprecated": {"tf": 1}, "sain.Vec.with_capacity": {"tf": 1}, "sain.Vec.split_off": {"tf": 1}, "sain.Vec.push": {"tf": 1}, "sain.Vec.get": {"tf": 1}, "sain.Vec.insert": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}, "sain.iter.Iter.any": {"tf": 1.4142135623730951}, "sain.vec.Vec.with_capacity": {"tf": 1}, "sain.vec.Vec.split_off": {"tf": 1}, "sain.vec.Vec.push": {"tf": 1}, "sain.vec.Vec.get": {"tf": 1}, "sain.vec.Vec.insert": {"tf": 1}}, "df": 17, "t": {"docs": {}, "df": 0, "r": {"docs": {"sain": {"tf": 1.4142135623730951}, "sain.cfg": {"tf": 2.449489742783178}, "sain.cfg_attr": {"tf": 1.7320508075688772}, "sain.cfg.cfg_attr": {"tf": 1.7320508075688772}, "sain.cfg.cfg": {"tf": 1}}, "df": 5, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"sain.cfg": {"tf": 1.4142135623730951}, "sain.cfg_attr": {"tf": 1.4142135623730951}, "sain.cfg.cfg_attr": {"tf": 1.4142135623730951}, "sain.cfg.cfg": {"tf": 1.4142135623730951}}, "df": 4}}}}}}}, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {"sain.deprecated": {"tf": 1}, "sain.unimplemented": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.Some.as_ref": {"tf": 1}}, "df": 1}}}}}}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"sain.cfg": {"tf": 1}, "sain.Iter.collect": {"tf": 1}, "sain.Iter.copied": {"tf": 1}, "sain.Iter.next": {"tf": 1}, "sain.Iter.all": {"tf": 2}, "sain.Iter.union": {"tf": 1}, "sain.Vec.copy": {"tf": 1}, "sain.Vec.clear": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}, "sain.futures.spawn": {"tf": 1}, "sain.iter.Iter.collect": {"tf": 1}, "sain.iter.Iter.copied": {"tf": 1}, "sain.iter.Iter.next": {"tf": 1}, "sain.iter.Iter.all": {"tf": 2}, "sain.iter.Iter.union": {"tf": 1}, "sain.vec.Vec.copy": {"tf": 1}, "sain.vec.Vec.clear": {"tf": 1}}, "df": 17}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"sain.deprecated": {"tf": 1}, "sain.Vec": {"tf": 1}, "sain.vec": {"tf": 1}, "sain.vec.Vec": {"tf": 1}}, "df": 4}}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "y": {"docs": {"sain.Once": {"tf": 1}, "sain.Once.set": {"tf": 1}}, "df": 2}}}}}, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {"sain.Vec.append": {"tf": 1}, "sain.vec.Vec.append": {"tf": 1}}, "df": 2}}}}, "n": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.Default": {"tf": 1.4142135623730951}, "sain.AsRef": {"tf": 1.4142135623730951}, "sain.AsMut": {"tf": 1}, "sain.Some": {"tf": 1.4142135623730951}, "sain.Some.iter": {"tf": 1}, "sain.Iter": {"tf": 1.4142135623730951}, "sain.Iter.default": {"tf": 1}, "sain.Iter.collect": {"tf": 1.4142135623730951}, "sain.Iter.copied": {"tf": 1}, "sain.Iter.by_ref": {"tf": 1}, "sain.Iter.any": {"tf": 1.4142135623730951}, "sain.deprecated": {"tf": 1.4142135623730951}, "sain.unimplemented": {"tf": 1.7320508075688772}, "sain.Ok.is_ok": {"tf": 1}, "sain.Ok.iter": {"tf": 1}, "sain.Err.is_ok": {"tf": 1}, "sain.Vec.__init__": {"tf": 1}, "sain.Vec.into_inner": {"tf": 1}, "sain.Vec.iter": {"tf": 1}, "sain.Vec.push": {"tf": 1}, "sain.Vec.append": {"tf": 1}, "sain.Vec.insert": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}, "sain.futures.spawn": {"tf": 1}, "sain.iter.Iter": {"tf": 1.4142135623730951}, "sain.iter.Iter.default": {"tf": 1}, "sain.iter.Iter.collect": {"tf": 1.4142135623730951}, "sain.iter.Iter.copied": {"tf": 1}, "sain.iter.Iter.by_ref": {"tf": 1}, "sain.iter.Iter.any": {"tf": 1.4142135623730951}, "sain.iter.iter": {"tf": 1}, "sain.iter.empty": {"tf": 1}, "sain.iter.once": {"tf": 1}, "sain.vec.Vec.__init__": {"tf": 1}, "sain.vec.Vec.into_inner": {"tf": 1}, "sain.vec.Vec.iter": {"tf": 1}, "sain.vec.Vec.push": {"tf": 1}, "sain.vec.Vec.append": {"tf": 1}, "sain.vec.Vec.insert": {"tf": 1}}, "df": 42, "d": {"docs": {"sain.cfg": {"tf": 1.7320508075688772}, "sain.cfg_attr": {"tf": 2.23606797749979}, "sain.Some.filter": {"tf": 1}, "sain.Some.and_ok": {"tf": 1.4142135623730951}, "sain.Some.and_then": {"tf": 1.7320508075688772}, "sain.Some.is_some_and": {"tf": 1.7320508075688772}, "sain.Iter.collect": {"tf": 1}, "sain.Iter.first": {"tf": 1}, "sain.Iter.last": {"tf": 1}, "sain.Iter.enumerate": {"tf": 1}, "sain.Once.get_or_init": {"tf": 1}, "sain.Ok.is_ok": {"tf": 1}, "sain.Ok.is_ok_and": {"tf": 1.4142135623730951}, "sain.Ok.is_err_and": {"tf": 1.4142135623730951}, "sain.Ok.ok": {"tf": 1}, "sain.Ok.err": {"tf": 1}, "sain.Ok.inspect": {"tf": 1}, "sain.Ok.inspect_err": {"tf": 1}, "sain.Ok.map_or": {"tf": 1}, "sain.Ok.map_or_else": {"tf": 1}, "sain.Err.is_ok": {"tf": 1}, "sain.Err.is_ok_and": {"tf": 1.4142135623730951}, "sain.Err.is_err_and": {"tf": 1.4142135623730951}, "sain.Vec": {"tf": 1}, "sain.Vec.with_capacity": {"tf": 1}, "sain.Vec.split_first": {"tf": 1}, "sain.Vec.pop": {"tf": 1}, "sain.Vec.swap_remove": {"tf": 1}, "sain.Vec.copy": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 2.23606797749979}, "sain.cfg.cfg": {"tf": 1.7320508075688772}, "sain.iter.Iter.collect": {"tf": 1}, "sain.iter.Iter.first": {"tf": 1}, "sain.iter.Iter.last": {"tf": 1}, "sain.iter.Iter.enumerate": {"tf": 1}, "sain.vec": {"tf": 1}, "sain.vec.Vec": {"tf": 1}, "sain.vec.Vec.with_capacity": {"tf": 1}, "sain.vec.Vec.split_first": {"tf": 1}, "sain.vec.Vec.pop": {"tf": 1}, "sain.vec.Vec.swap_remove": {"tf": 1}, "sain.vec.Vec.copy": {"tf": 1}}, "df": 42}, "y": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.Default": {"tf": 1.4142135623730951}, "sain.Iter.any": {"tf": 1.4142135623730951}, "sain.Iter.sort": {"tf": 1}, "sain.Iter.for_each": {"tf": 1}, "sain.Iter.async_for_each": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}, "sain.futures.spawn": {"tf": 1}, "sain.iter.Iter.any": {"tf": 1.4142135623730951}, "sain.iter.Iter.sort": {"tf": 1}, "sain.iter.Iter.for_each": {"tf": 1}, "sain.iter.Iter.async_for_each": {"tf": 1}}, "df": 14}, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sain.Some.replace": {"tf": 1}, "sain.Iter.zip": {"tf": 1}, "sain.Once.set": {"tf": 1}, "sain.Vec.__init__": {"tf": 1}, "sain.Vec.extend": {"tf": 1}, "sain.iter.Iter.zip": {"tf": 1}, "sain.vec.Vec.__init__": {"tf": 1}, "sain.vec.Vec.extend": {"tf": 1}}, "df": 8}}}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"sain.Iter.filter": {"tf": 1.4142135623730951}, "sain.iter.Iter.filter": {"tf": 1.4142135623730951}}, "df": 2}}}}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"sain.cfg": {"tf": 1}}, "df": 1}}}}}}}}}}, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 4, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 4}}}}}}}}}}, "g": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"sain.cfg_attr": {"tf": 1}, "sain.todo": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}}, "df": 3}}}}}}, "s": {"docs": {"sain.Once": {"tf": 1}}, "df": 1}}, "e": {"docs": {"sain.Iter.take": {"tf": 1}, "sain.Iter.take_while": {"tf": 1}, "sain.Iter.drop_while": {"tf": 1}, "sain.Iter.zip": {"tf": 1}, "sain.Iter.all": {"tf": 1}, "sain.Iter.any": {"tf": 1}, "sain.Iter.sort": {"tf": 1}, "sain.Iter.first": {"tf": 1}, "sain.Iter.last": {"tf": 1}, "sain.Iter.reversed": {"tf": 1}, "sain.Iter.union": {"tf": 1}, "sain.Iter.enumerate": {"tf": 1}, "sain.iter.Iter.take": {"tf": 1}, "sain.iter.Iter.take_while": {"tf": 1}, "sain.iter.Iter.drop_while": {"tf": 1}, "sain.iter.Iter.zip": {"tf": 1}, "sain.iter.Iter.all": {"tf": 1}, "sain.iter.Iter.any": {"tf": 1}, "sain.iter.Iter.sort": {"tf": 1}, "sain.iter.Iter.first": {"tf": 1}, "sain.iter.Iter.last": {"tf": 1}, "sain.iter.Iter.reversed": {"tf": 1}, "sain.iter.Iter.union": {"tf": 1}, "sain.iter.Iter.enumerate": {"tf": 1}}, "df": 24}, "m": {"6": {"4": {"docs": {"sain.cfg": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {"sain.cfg": {"tf": 1}}, "df": 1}}, "p": {"docs": {}, "df": 0, "i": {"docs": {"sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}}, "df": 2}, "p": {"docs": {"sain.Once": {"tf": 2.6457513110645907}}, "df": 1, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.Once": {"tf": 2}}, "df": 1}}}}}}}, "y": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.Ok.map": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {"sain.vec": {"tf": 1}, "sain.vec.vec": {"tf": 1}}, "df": 2}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.Vec.__init__": {"tf": 1}, "sain.vec.Vec.__init__": {"tf": 1}}, "df": 2}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sain.Vec.swap_remove": {"tf": 1}, "sain.vec.Vec.swap_remove": {"tf": 1}}, "df": 2}}}}}}}}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "p": {"docs": {"sain.Iter.async_for_each": {"tf": 1}, "sain.iter.Iter.async_for_each": {"tf": 1}}, "df": 2}}}}}}, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"sain.Iter.async_for_each": {"tf": 1.4142135623730951}, "sain.futures.spawn": {"tf": 1.4142135623730951}, "sain.iter.Iter.async_for_each": {"tf": 1.4142135623730951}}, "df": 3, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"sain.futures.spawn": {"tf": 1.4142135623730951}}, "df": 1}, "[": {"docs": {}, "df": 0, "t": {"docs": {"sain.futures.spawn": {"tf": 1}}, "df": 1}}}}}}}}}, "s": {"docs": {"sain.futures.spawn": {"tf": 1}}, "df": 1}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sain.unimplemented": {"tf": 1}}, "df": 1}}}}}}}}, "c": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"sain.Once.set": {"tf": 1}}, "df": 1}}}}, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"sain.Vec.__init__": {"tf": 1}, "sain.vec.Vec.__init__": {"tf": 1}}, "df": 2}}}}}}}, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sain.Vec.with_capacity": {"tf": 1}, "sain.vec.Vec.with_capacity": {"tf": 1}}, "df": 2}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"sain.futures": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {"sain.futures.loop": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.cfg": {"tf": 1}}, "df": 1}}}}}}}}, "m": {"docs": {"sain.Iter.take_while": {"tf": 1.4142135623730951}, "sain.Iter.drop_while": {"tf": 1.4142135623730951}, "sain.iter.Iter.take_while": {"tf": 1.4142135623730951}, "sain.iter.Iter.drop_while": {"tf": 1.4142135623730951}}, "df": 4, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {"sain": {"tf": 1}}, "df": 1}}}, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"sain.cfg": {"tf": 1}}, "df": 1}}}}}, "p": {"docs": {"sain.Some.map": {"tf": 1.4142135623730951}, "sain.Some.map_or": {"tf": 1.7320508075688772}, "sain.Some.map_or_else": {"tf": 1.7320508075688772}, "sain.Iter.collect": {"tf": 1}, "sain.Iter.map": {"tf": 1.4142135623730951}, "sain.Ok.map": {"tf": 1.7320508075688772}, "sain.Ok.map_or": {"tf": 1.4142135623730951}, "sain.Ok.map_or_else": {"tf": 1.4142135623730951}, "sain.Ok.map_err": {"tf": 1.4142135623730951}, "sain.Vec.iter": {"tf": 1.4142135623730951}, "sain.iter.Iter.collect": {"tf": 1}, "sain.iter.Iter.map": {"tf": 1.4142135623730951}, "sain.vec.Vec.iter": {"tf": 1.4142135623730951}}, "df": 13, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.Some.map_or": {"tf": 1}, "sain.Some.map_or_else": {"tf": 1}}, "df": 2}}}, "s": {"docs": {"sain.Some.map_or_else": {"tf": 1}, "sain.Iter.map": {"tf": 1}, "sain.Ok.map_or": {"tf": 1}, "sain.Ok.map_or_else": {"tf": 1}, "sain.Ok.map_err": {"tf": 1}, "sain.iter.Iter.map": {"tf": 1}}, "df": 6}}, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"sain.Iter.filter": {"tf": 1}, "sain.Iter.all": {"tf": 1}, "sain.Iter.any": {"tf": 1}, "sain.iter.Iter.filter": {"tf": 1}, "sain.iter.Iter.all": {"tf": 1}, "sain.iter.Iter.any": {"tf": 1}}, "df": 6}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {"sain.Iter.async_for_each": {"tf": 1}, "sain.futures.spawn": {"tf": 1}, "sain.iter.Iter.async_for_each": {"tf": 1}}, "df": 3}}, "r": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "s": {"docs": {"sain.deprecated": {"tf": 1}, "sain.unimplemented": {"tf": 1}}, "df": 2}, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.deprecated": {"tf": 1}, "sain.unimplemented": {"tf": 1}}, "df": 2}}}}, "y": {"docs": {"sain.Once.set": {"tf": 1}}, "df": 1}}, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1.4142135623730951}, "sain.cfg.cfg_attr": {"tf": 1.4142135623730951}, "sain.cfg.cfg": {"tf": 1}, "sain.iter": {"tf": 1}}, "df": 5, "s": {"docs": {"sain.cfg": {"tf": 1.4142135623730951}, "sain.cfg_attr": {"tf": 2}, "sain.cfg.cfg_attr": {"tf": 2}, "sain.cfg.cfg": {"tf": 1.4142135623730951}}, "df": 4}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "y": {"docs": {"sain.Some.as_ref": {"tf": 1}}, "df": 1}}}, "e": {"docs": {"sain.Iter.take": {"tf": 1.4142135623730951}, "sain.iter.Iter.take": {"tf": 1.4142135623730951}}, "df": 2}}}, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"sain.cfg": {"tf": 1.7320508075688772}, "sain.cfg_attr": {"tf": 1}, "sain.Iter": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}, "sain.iter.Iter": {"tf": 1}}, "df": 6}}, "t": {"docs": {"sain.cfg_attr": {"tf": 1}, "sain.Some.as_ref": {"tf": 1}, "sain.Some.as_mut": {"tf": 1.4142135623730951}, "sain.cfg.cfg_attr": {"tf": 1}}, "df": 4, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sain.AsMut": {"tf": 1}, "sain.Some.as_ref": {"tf": 1}, "sain.Some.as_mut": {"tf": 1}}, "df": 3}}}}}, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sain.todo": {"tf": 1}, "sain.cfg": {"tf": 1}}, "df": 2}}}}}}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {"sain.Some": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {"sain.Some": {"tf": 1}, "sain.Some.as_ref": {"tf": 1}, "sain.Once.get": {"tf": 1}, "sain.Once.set": {"tf": 1}, "sain.Vec.append": {"tf": 1}, "sain.vec.Vec.append": {"tf": 1}}, "df": 6, "s": {"docs": {"sain.Some": {"tf": 1}}, "df": 1}}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"sain.Iter": {"tf": 1}, "sain.Iter.count": {"tf": 1}, "sain.Vec": {"tf": 1}, "sain.iter.Iter": {"tf": 1}, "sain.iter.Iter.count": {"tf": 1}, "sain.vec": {"tf": 1}, "sain.vec.Vec": {"tf": 1}}, "df": 7}}}, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {"sain.Iter.take_while": {"tf": 1.4142135623730951}, "sain.Iter.drop_while": {"tf": 1.4142135623730951}, "sain.iter.Iter.take_while": {"tf": 1.4142135623730951}, "sain.iter.Iter.drop_while": {"tf": 1.4142135623730951}}, "df": 4, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"sain.Iter.skip": {"tf": 2.23606797749979}, "sain.iter.Iter.skip": {"tf": 2.23606797749979}}, "df": 2}}}}}}}}}}}}, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"sain.todo": {"tf": 1}, "sain.unimplemented": {"tf": 1.7320508075688772}, "sain.Ok.expect": {"tf": 1}}, "df": 3}}}}}}, "d": {"docs": {"sain.doc": {"tf": 1}}, "df": 1}}, "n": {"docs": {"sain.Iter.take": {"tf": 1}, "sain.iter.Iter.take": {"tf": 1}}, "df": 2, "o": {"docs": {"sain.AsRef": {"tf": 1}, "sain.Iter.take_while": {"tf": 1}, "sain.Iter.drop_while": {"tf": 1}, "sain.Iter.zip": {"tf": 1}, "sain.Iter.all": {"tf": 1}, "sain.Iter.any": {"tf": 1}, "sain.Iter.sort": {"tf": 1}, "sain.Iter.first": {"tf": 1}, "sain.Iter.last": {"tf": 1}, "sain.Iter.reversed": {"tf": 1}, "sain.Iter.union": {"tf": 1}, "sain.Iter.enumerate": {"tf": 1}, "sain.Vec.is_empty": {"tf": 1}, "sain.iter.Iter.take_while": {"tf": 1}, "sain.iter.Iter.drop_while": {"tf": 1}, "sain.iter.Iter.zip": {"tf": 1}, "sain.iter.Iter.all": {"tf": 1}, "sain.iter.Iter.any": {"tf": 1}, "sain.iter.Iter.sort": {"tf": 1}, "sain.iter.Iter.first": {"tf": 1}, "sain.iter.Iter.last": {"tf": 1}, "sain.iter.Iter.reversed": {"tf": 1}, "sain.iter.Iter.union": {"tf": 1}, "sain.iter.Iter.enumerate": {"tf": 1}, "sain.vec.Vec.is_empty": {"tf": 1}}, "df": 25, "t": {"docs": {"sain": {"tf": 1}, "sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1.7320508075688772}, "sain.Some": {"tf": 1}, "sain.Some.unwrap": {"tf": 1}, "sain.Some.unwrap_or": {"tf": 1}, "sain.Some.unwrap_or_else": {"tf": 1}, "sain.Some.expect": {"tf": 1}, "sain.Some.map_or": {"tf": 1}, "sain.Some.map_or_else": {"tf": 1}, "sain.Some.and_then": {"tf": 1}, "sain.Some.as_ref": {"tf": 1}, "sain.Some.as_mut": {"tf": 1}, "sain.Some.is_some": {"tf": 1}, "sain.Some.is_some_and": {"tf": 1}, "sain.Iter.collect": {"tf": 1}, "sain.Iter.by_ref": {"tf": 1}, "sain.Iter.drop_while": {"tf": 1}, "sain.unimplemented": {"tf": 1}, "sain.Once": {"tf": 1.4142135623730951}, "sain.Once.set": {"tf": 1}, "sain.Once.get_or_init": {"tf": 1}, "sain.Vec": {"tf": 1}, "sain.Vec.swap_remove": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1.7320508075688772}, "sain.cfg.cfg": {"tf": 1}, "sain.iter.Iter.collect": {"tf": 1}, "sain.iter.Iter.by_ref": {"tf": 1}, "sain.iter.Iter.drop_while": {"tf": 1}, "sain.vec": {"tf": 1}, "sain.vec.Vec": {"tf": 1}, "sain.vec.Vec.swap_remove": {"tf": 1}}, "df": 32, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.Once.get": {"tf": 1}, "sain.Ok.inspect": {"tf": 1}, "sain.Ok.inspect_err": {"tf": 1}, "sain.iter.empty": {"tf": 1}}, "df": 4}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {"sain.cfg": {"tf": 1}}, "df": 1}}}, "n": {"docs": {"sain.cfg": {"tf": 1}}, "df": 1, "e": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 2.449489742783178}, "sain.Some": {"tf": 2.449489742783178}, "sain.Some.default": {"tf": 1}, "sain.Some.unwrap": {"tf": 1.7320508075688772}, "sain.Some.unwrap_or": {"tf": 1.4142135623730951}, "sain.Some.unwrap_or_else": {"tf": 1.4142135623730951}, "sain.Some.unwrap_unchecked": {"tf": 1.4142135623730951}, "sain.Some.expect": {"tf": 2.23606797749979}, "sain.Some.map": {"tf": 1.7320508075688772}, "sain.Some.map_or": {"tf": 2}, "sain.Some.map_or_else": {"tf": 2}, "sain.Some.filter": {"tf": 1.7320508075688772}, "sain.Some.take": {"tf": 1.4142135623730951}, "sain.Some.and_ok": {"tf": 2.23606797749979}, "sain.Some.and_then": {"tf": 2}, "sain.Some.iter": {"tf": 1.4142135623730951}, "sain.Some.as_ref": {"tf": 2}, "sain.Some.as_mut": {"tf": 2}, "sain.Some.is_some": {"tf": 1.4142135623730951}, "sain.Some.is_some_and": {"tf": 1.4142135623730951}, "sain.Some.is_none": {"tf": 2}, "sain.Iter.default": {"tf": 1}, "sain.Iter.collect": {"tf": 1}, "sain.Iter.copied": {"tf": 1.7320508075688772}, "sain.Iter.by_ref": {"tf": 1.7320508075688772}, "sain.Iter.next": {"tf": 1.4142135623730951}, "sain.Iter.async_for_each": {"tf": 1.4142135623730951}, "sain.todo": {"tf": 1}, "sain.deprecated": {"tf": 1.4142135623730951}, "sain.unimplemented": {"tf": 1.4142135623730951}, "sain.doc": {"tf": 1}, "sain.Once": {"tf": 1.7320508075688772}, "sain.Once.get": {"tf": 1}, "sain.Once.get_or_init": {"tf": 1}, "sain.Ok.is_ok": {"tf": 1}, "sain.Ok.is_ok_and": {"tf": 1}, "sain.Ok.is_err": {"tf": 1}, "sain.Ok.is_err_and": {"tf": 1}, "sain.Ok.expect": {"tf": 1.7320508075688772}, "sain.Ok.unwrap": {"tf": 1.7320508075688772}, "sain.Ok.unwrap_or": {"tf": 1.7320508075688772}, "sain.Ok.unwrap_err": {"tf": 2}, "sain.Ok.ok": {"tf": 1.4142135623730951}, "sain.Ok.err": {"tf": 1.4142135623730951}, "sain.Ok.inspect": {"tf": 1.7320508075688772}, "sain.Ok.inspect_err": {"tf": 1.7320508075688772}, "sain.Ok.iter": {"tf": 1}, "sain.Err.is_ok": {"tf": 1.4142135623730951}, "sain.Err.is_ok_and": {"tf": 1.4142135623730951}, "sain.Err.is_err": {"tf": 1.4142135623730951}, "sain.Err.is_err_and": {"tf": 1.7320508075688772}, "sain.Vec.split_first": {"tf": 1}, "sain.Vec.first": {"tf": 1}, "sain.Vec.get": {"tf": 1}, "sain.Vec.pop": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 2.449489742783178}, "sain.cfg.cfg": {"tf": 2.23606797749979}, "sain.futures.spawn": {"tf": 1.4142135623730951}, "sain.iter.Iter.default": {"tf": 1}, "sain.iter.Iter.collect": {"tf": 1}, "sain.iter.Iter.copied": {"tf": 1.7320508075688772}, "sain.iter.Iter.by_ref": {"tf": 1.7320508075688772}, "sain.iter.Iter.next": {"tf": 1.4142135623730951}, "sain.iter.Iter.async_for_each": {"tf": 1.4142135623730951}, "sain.iter.empty": {"tf": 1}, "sain.iter.once": {"tf": 1}, "sain.vec.Vec.split_first": {"tf": 1}, "sain.vec.Vec.first": {"tf": 1}, "sain.vec.Vec.get": {"tf": 1}, "sain.vec.Vec.pop": {"tf": 1}}, "df": 71}}, "p": {"docs": {}, "df": 0, "e": {"docs": {"sain.iter.empty": {"tf": 1.4142135623730951}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"sain.AsRef": {"tf": 1}, "sain.deprecated": {"tf": 1}}, "df": 2, "s": {"docs": {"sain.Vec": {"tf": 2.23606797749979}, "sain.Vec.__init__": {"tf": 2}, "sain.vec": {"tf": 2.23606797749979}, "sain.vec.Vec": {"tf": 2.23606797749979}, "sain.vec.Vec.__init__": {"tf": 2}}, "df": 5}}}}, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sain.Some": {"tf": 1}, "sain.Once.get": {"tf": 1}}, "df": 2}}}, "w": {"docs": {"sain.Some.map": {"tf": 1}, "sain.Some.map_or": {"tf": 1}, "sain.Some.map_or_else": {"tf": 1}, "sain.Iter.reversed": {"tf": 1}, "sain.Iter.union": {"tf": 1}, "sain.Iter.enumerate": {"tf": 1}, "sain.Vec.__init__": {"tf": 1}, "sain.Vec.with_capacity": {"tf": 1}, "sain.Vec.copy": {"tf": 1}, "sain.futures.loop": {"tf": 1}, "sain.iter.Iter.reversed": {"tf": 1}, "sain.iter.Iter.union": {"tf": 1}, "sain.iter.Iter.enumerate": {"tf": 1}, "sain.vec.Vec.__init__": {"tf": 1}, "sain.vec.Vec.with_capacity": {"tf": 1}, "sain.vec.Vec.copy": {"tf": 1}}, "df": 16}, "x": {"docs": {}, "df": 0, "t": {"docs": {"sain.Some.iter": {"tf": 1.4142135623730951}, "sain.Iter.default": {"tf": 1}, "sain.Iter.next": {"tf": 2}, "sain.Ok.iter": {"tf": 1.4142135623730951}, "sain.iter.Iter.default": {"tf": 1}, "sain.iter.Iter.next": {"tf": 2}, "sain.iter.empty": {"tf": 1}, "sain.iter.once": {"tf": 1.4142135623730951}}, "df": 8}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.Iter.copied": {"tf": 1}, "sain.iter.Iter.copied": {"tf": 1}}, "df": 2}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sain.Iter.take": {"tf": 1.7320508075688772}, "sain.Iter.skip": {"tf": 1}, "sain.Vec.len": {"tf": 1}, "sain.iter.Iter.take": {"tf": 1.7320508075688772}, "sain.iter.Iter.skip": {"tf": 1}, "sain.vec.Vec.len": {"tf": 1}}, "df": 6}}}}}}, "u": {"docs": {"sain.Ok.map_err": {"tf": 1}}, "df": 1, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain": {"tf": 1.4142135623730951}, "sain.unimplemented": {"tf": 1.7320508075688772}}, "df": 2}}}}}}}}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.Iter.union": {"tf": 1.4142135623730951}, "sain.iter.Iter.union": {"tf": 1.4142135623730951}}, "df": 2}}, "x": {"docs": {"sain.cfg": {"tf": 1.4142135623730951}}, "df": 1}}, "k": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "n": {"docs": {"sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}}, "df": 2}}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"sain.AsRef": {"tf": 1}}, "df": 1}}}}, "w": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {"sain.Some": {"tf": 2.449489742783178}, "sain.Some.unwrap": {"tf": 1.7320508075688772}, "sain.Some.unwrap_or": {"tf": 1.7320508075688772}, "sain.Some.unwrap_or_else": {"tf": 1.7320508075688772}, "sain.Some.unwrap_unchecked": {"tf": 1.7320508075688772}, "sain.Some.as_ref": {"tf": 1}, "sain.Some.as_mut": {"tf": 1}, "sain.Iter.async_for_each": {"tf": 1}, "sain.Ok.unwrap": {"tf": 1.4142135623730951}, "sain.Ok.unwrap_or": {"tf": 1.4142135623730951}, "sain.Ok.unwrap_or_else": {"tf": 1.4142135623730951}, "sain.Ok.unwrap_err": {"tf": 1.4142135623730951}, "sain.iter.Iter.async_for_each": {"tf": 1}}, "df": 13, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.Some.unwrap_unchecked": {"tf": 1}}, "df": 1}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sain.Some": {"tf": 1}}, "df": 1}}}}}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.Some.unwrap_unchecked": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "r": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.Ok.expect": {"tf": 1}, "sain.Ok.unwrap": {"tf": 1}, "sain.Ok.unwrap_or": {"tf": 1}, "sain.Vec": {"tf": 1}, "sain.vec": {"tf": 1}, "sain.vec.Vec": {"tf": 1}}, "df": 6}}}}}}}}, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.Some.unwrap_unchecked": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {"sain.Iter.take": {"tf": 1}, "sain.Vec": {"tf": 1}, "sain.Vec.__init__": {"tf": 1}, "sain.iter.Iter.take": {"tf": 1}, "sain.vec": {"tf": 1}, "sain.vec.Vec": {"tf": 1}, "sain.vec.Vec.__init__": {"tf": 1}}, "df": 7}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.Ok.map": {"tf": 1}, "sain.Ok.map_err": {"tf": 1}}, "df": 2}}}}}}}, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.todo": {"tf": 1}}, "df": 1}}}}}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {"sain.Some.as_ref": {"tf": 1.4142135623730951}, "sain.Iter.copied": {"tf": 1}, "sain.deprecated": {"tf": 1.4142135623730951}, "sain.iter.Iter.copied": {"tf": 1}}, "df": 4, "r": {"docs": {"sain.AsRef": {"tf": 2.449489742783178}, "sain.deprecated": {"tf": 2}, "sain.unimplemented": {"tf": 1.4142135623730951}, "sain.doc": {"tf": 1}}, "df": 4, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"sain.Iter.async_for_each": {"tf": 1.7320508075688772}, "sain.iter.Iter.async_for_each": {"tf": 1.7320508075688772}}, "df": 2}}}}, "s": {"docs": {"sain.Iter.async_for_each": {"tf": 1.4142135623730951}, "sain.iter.Iter.async_for_each": {"tf": 1.4142135623730951}}, "df": 2}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {"sain.deprecated": {"tf": 1}}, "df": 1}}}}}, "d": {"docs": {"sain.deprecated": {"tf": 1}, "sain.unimplemented": {"tf": 1}}, "df": 2}}, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sain.futures.loop": {"tf": 1}}, "df": 1}}}}}, "x": {"docs": {"sain.deprecated": {"tf": 1}}, "df": 1}, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"4": {"docs": {"sain.Once": {"tf": 1.4142135623730951}}, "df": 1}, "docs": {"sain.Once": {"tf": 3}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "d": {"docs": {"sain.Once": {"tf": 1.4142135623730951}}, "df": 1}}, "w": {"docs": {}, "df": 0, "u": {"docs": {"sain.Ok.unwrap_or": {"tf": 1.7320508075688772}}, "df": 1}}, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sain.Ok.map": {"tf": 1}}, "df": 1}}}}, "v": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {"sain.cfg": {"tf": 2}}, "df": 1}}}}}, "r": {"docs": {}, "df": 0, "l": {"docs": {"sain.futures.spawn": {"tf": 1.7320508075688772}}, "df": 1}}}, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 2.23606797749979}, "sain.AsRef.copy": {"tf": 1}, "sain.AsMut.copy": {"tf": 1}, "sain.Some": {"tf": 1.4142135623730951}, "sain.Some.map_or": {"tf": 1.4142135623730951}, "sain.Some.map_or_else": {"tf": 1.4142135623730951}, "sain.Iter.collect": {"tf": 1}, "sain.todo": {"tf": 1}, "sain.deprecated": {"tf": 2.23606797749979}, "sain.unimplemented": {"tf": 1.7320508075688772}, "sain.Once": {"tf": 1}, "sain.Once.get": {"tf": 1}, "sain.Once.set": {"tf": 1}, "sain.Ok.iter": {"tf": 1.4142135623730951}, "sain.Vec": {"tf": 1}, "sain.Vec.with_capacity": {"tf": 1}, "sain.Vec.swap_remove": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 2.23606797749979}, "sain.cfg.cfg": {"tf": 2}, "sain.iter.Iter.collect": {"tf": 1}, "sain.vec": {"tf": 1}, "sain.vec.Vec": {"tf": 1}, "sain.vec.Vec.with_capacity": {"tf": 1}, "sain.vec.Vec.swap_remove": {"tf": 1}}, "df": 25}}, "n": {"3": {"2": {"docs": {"sain.cfg": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "s": {"docs": {"sain.cfg": {"tf": 2}, "sain.cfg_attr": {"tf": 2.23606797749979}, "sain.cfg.cfg_attr": {"tf": 2.23606797749979}, "sain.cfg.cfg": {"tf": 1.4142135623730951}}, "df": 4}}}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {"sain.cfg_attr": {"tf": 1}, "sain.Some": {"tf": 1}, "sain.Some.replace": {"tf": 1}, "sain.Some.as_ref": {"tf": 1}, "sain.Iter.zip": {"tf": 1.4142135623730951}, "sain.Iter.union": {"tf": 1}, "sain.Iter.async_for_each": {"tf": 1}, "sain.Ok.expect": {"tf": 1}, "sain.Ok.inspect": {"tf": 1}, "sain.Ok.inspect_err": {"tf": 1}, "sain.Vec": {"tf": 1}, "sain.Vec.with_capacity": {"tf": 1.4142135623730951}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.iter.Iter.zip": {"tf": 1.4142135623730951}, "sain.iter.Iter.union": {"tf": 1}, "sain.iter.Iter.async_for_each": {"tf": 1}, "sain.vec": {"tf": 1}, "sain.vec.Vec": {"tf": 1}, "sain.vec.Vec.with_capacity": {"tf": 1.4142135623730951}}, "df": 19, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"sain.Vec.with_capacity": {"tf": 1}, "sain.vec.Vec.with_capacity": {"tf": 1}}, "df": 2}}}}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.todo": {"tf": 1}, "sain.deprecated": {"tf": 1}, "sain.Ok.expect": {"tf": 1.4142135623730951}, "sain.Ok.unwrap": {"tf": 1.4142135623730951}, "sain.Ok.unwrap_or": {"tf": 1.4142135623730951}, "sain.Ok.unwrap_or_else": {"tf": 1}, "sain.Ok.unwrap_err": {"tf": 1}, "sain.Ok.ok": {"tf": 1.4142135623730951}, "sain.Ok.err": {"tf": 1.4142135623730951}, "sain.Ok.inspect": {"tf": 1.4142135623730951}, "sain.Ok.inspect_err": {"tf": 1.4142135623730951}, "sain.Ok.iter": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 16}, "r": {"docs": {}, "df": 0, "n": {"docs": {"sain.deprecated": {"tf": 1}, "sain.unimplemented": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.Some.unwrap_unchecked": {"tf": 1}, "sain.deprecated": {"tf": 1}, "sain.cfg": {"tf": 1}}, "df": 3}}}}}}, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"sain.cfg_attr": {"tf": 1}, "sain.Some.as_ref": {"tf": 1}, "sain.deprecated": {"tf": 1}, "sain.unimplemented": {"tf": 1}, "sain.Vec": {"tf": 1}, "sain.cfg": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.vec": {"tf": 1}, "sain.vec.Vec": {"tf": 1}}, "df": 9}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sain.Iter.sort": {"tf": 1}, "sain.iter.Iter.sort": {"tf": 1}}, "df": 2}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {"sain.unimplemented": {"tf": 1}}, "df": 1, "s": {"docs": {"sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}}, "df": 2}}}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sain.Some": {"tf": 1}, "sain.Iter.take_while": {"tf": 1.4142135623730951}, "sain.Iter.drop_while": {"tf": 1.4142135623730951}, "sain.Iter.all": {"tf": 1}, "sain.Vec.retain": {"tf": 1}, "sain.iter.Iter.take_while": {"tf": 1.4142135623730951}, "sain.iter.Iter.drop_while": {"tf": 1.4142135623730951}, "sain.iter.Iter.all": {"tf": 1}, "sain.vec.Vec.retain": {"tf": 1}}, "df": 9}}, "c": {"docs": {}, "df": 0, "h": {"docs": {"sain.Some.map_or_else": {"tf": 1}, "sain.Iter.copied": {"tf": 1}, "sain.Iter.by_ref": {"tf": 1}, "sain.Once": {"tf": 1}, "sain.Vec": {"tf": 1}, "sain.cfg": {"tf": 1}, "sain.iter.Iter.copied": {"tf": 1}, "sain.iter.Iter.by_ref": {"tf": 1}, "sain.vec": {"tf": 1}, "sain.vec.Vec": {"tf": 1}}, "df": 10}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"sain.Once": {"tf": 1}}, "df": 1}}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"sain.Ok.unwrap_or_else": {"tf": 1}}, "df": 1, "s": {"docs": {"sain.Vec.retain": {"tf": 1}, "sain.vec.Vec.retain": {"tf": 1}}, "df": 2}}}, "n": {"docs": {"sain.Vec.__init__": {"tf": 1}, "sain.Vec.with_capacity": {"tf": 1}, "sain.vec.Vec.__init__": {"tf": 1}, "sain.vec.Vec.with_capacity": {"tf": 1}}, "df": 4}}}, "b": {"docs": {"sain.Vec.remove": {"tf": 1.4142135623730951}, "sain.Vec.swap_remove": {"tf": 1.4142135623730951}, "sain.vec.Vec.remove": {"tf": 1.4142135623730951}, "sain.vec.Vec.swap_remove": {"tf": 1.4142135623730951}}, "df": 4, "u": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg_attr": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 4}}, "y": {"docs": {"sain.cfg": {"tf": 1}}, "df": 1}}}, "t": {"docs": {"sain.Some": {"tf": 1}}, "df": 1}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"sain.Vec": {"tf": 1}, "sain.vec": {"tf": 1}, "sain.vec.Vec": {"tf": 1}}, "df": 3, "s": {"docs": {"sain.Iter": {"tf": 1}, "sain.iter.Iter": {"tf": 1}}, "df": 2}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"sain.Vec": {"tf": 1}, "sain.vec": {"tf": 1}, "sain.vec.Vec": {"tf": 1}}, "df": 3}}}}}, "h": {"docs": {"sain.Ok.unwrap_err": {"tf": 1}, "sain.Ok.ok": {"tf": 1}, "sain.Ok.err": {"tf": 1}}, "df": 3}}, "e": {"docs": {"sain.cfg": {"tf": 2.23606797749979}, "sain.cfg_attr": {"tf": 2.449489742783178}, "sain.Some": {"tf": 1}, "sain.Some.map_or": {"tf": 1}, "sain.Some.map_or_else": {"tf": 1}, "sain.Iter": {"tf": 1}, "sain.Iter.collect": {"tf": 1}, "sain.deprecated": {"tf": 1.7320508075688772}, "sain.unimplemented": {"tf": 2}, "sain.doc": {"tf": 1}, "sain.Once": {"tf": 1}, "sain.Vec.with_capacity": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 2.449489742783178}, "sain.cfg.cfg": {"tf": 2.449489742783178}, "sain.iter.Iter": {"tf": 1}, "sain.iter.Iter.collect": {"tf": 1}, "sain.vec.Vec.with_capacity": {"tf": 1}}, "df": 17, "t": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"sain.cfg": {"tf": 1}, "sain.cfg.cfg": {"tf": 1}}, "df": 2}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.AsRef.object": {"tf": 1}, "sain.AsMut.object": {"tf": 1}}, "df": 2}}}, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"sain.Some.unwrap_unchecked": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"sain.cfg": {"tf": 1}, "sain.Some.unwrap_or_else": {"tf": 1}, "sain.Some.map": {"tf": 1}, "sain.Iter.take_while": {"tf": 1}, "sain.Iter.drop_while": {"tf": 1}, "sain.Iter.all": {"tf": 1}, "sain.Iter.any": {"tf": 1}, "sain.Iter.sort": {"tf": 1}, "sain.doc": {"tf": 1.4142135623730951}, "sain.cfg.cfg": {"tf": 1}, "sain.iter.Iter.take_while": {"tf": 1}, "sain.iter.Iter.drop_while": {"tf": 1}, "sain.iter.Iter.all": {"tf": 1}, "sain.iter.Iter.any": {"tf": 1}, "sain.iter.Iter.sort": {"tf": 1}}, "df": 15}}, "t": {"docs": {}, "df": 0, "h": {"docs": {"sain.AsRef": {"tf": 1}, "sain.Iter.union": {"tf": 1}, "sain.iter.Iter.union": {"tf": 1}}, "df": 3}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"sain.Vec.get": {"tf": 1}, "sain.vec.Vec.get": {"tf": 1}}, "df": 2}}}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.cfg_attr": {"tf": 1}, "sain.Vec.retain": {"tf": 1}, "sain.cfg.cfg_attr": {"tf": 1}, "sain.vec.Vec.retain": {"tf": 1}}, "df": 4}}}, "r": {"docs": {"sain.Ok.map_or": {"tf": 1}, "sain.Ok.map_or_else": {"tf": 1}, "sain.Vec": {"tf": 1.4142135623730951}, "sain.Vec.__init__": {"tf": 1}, "sain.vec": {"tf": 1.4142135623730951}, "sain.vec.Vec": {"tf": 1.4142135623730951}, "sain.vec.Vec.__init__": {"tf": 1}}, "df": 7, "k": {"docs": {"sain.cfg_attr": {"tf": 1.4142135623730951}, "sain.cfg.cfg_attr": {"tf": 1.4142135623730951}}, "df": 2}}}, "y": {"docs": {"sain.Iter.copied": {"tf": 1.4142135623730951}, "sain.Iter.by_ref": {"tf": 1.4142135623730951}, "sain.Iter.sort": {"tf": 1}, "sain.Ok.map": {"tf": 1}, "sain.cfg": {"tf": 1}, "sain.iter.Iter.copied": {"tf": 1.4142135623730951}, "sain.iter.Iter.by_ref": {"tf": 1.4142135623730951}, "sain.iter.Iter.sort": {"tf": 1}}, "df": 8}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {"sain.Once.get": {"tf": 1}, "sain.Once.set": {"tf": 1}}, "df": 2}}}, "u": {"docs": {}, "df": 0, "e": {"docs": {"sain.Ok.map_err": {"tf": 1.4142135623730951}, "sain.Ok.iter": {"tf": 1.4142135623730951}}, "df": 2}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {"sain.Vec": {"tf": 1}, "sain.vec": {"tf": 1}, "sain.vec.Vec": {"tf": 1}}, "df": 3}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {"sain.cfg": {"tf": 2.449489742783178}, "sain.cfg_attr": {"tf": 3}, "sain.AsRef": {"tf": 1.4142135623730951}, "sain.Some": {"tf": 2.449489742783178}, "sain.Some.expect": {"tf": 3.1622776601683795}, "sain.Some.map_or": {"tf": 2}, "sain.Some.map_or_else": {"tf": 2}, "sain.Some.take": {"tf": 1.4142135623730951}, "sain.Some.replace": {"tf": 2.449489742783178}, "sain.Some.iter": {"tf": 2}, "sain.Iter.next": {"tf": 2.8284271247461903}, "sain.Iter.map": {"tf": 2.449489742783178}, "sain.Iter.all": {"tf": 1.4142135623730951}, "sain.Iter.any": {"tf": 1.4142135623730951}, "sain.Iter.async_for_each": {"tf": 2}, "sain.deprecated": {"tf": 2.8284271247461903}, "sain.unimplemented": {"tf": 1.4142135623730951}, "sain.doc": {"tf": 2}, "sain.Ok.is_ok": {"tf": 1.4142135623730951}, "sain.Ok.is_ok_and": {"tf": 2}, "sain.Ok.is_err": {"tf": 1.4142135623730951}, "sain.Ok.is_err_and": {"tf": 2}, "sain.Ok.expect": {"tf": 2.8284271247461903}, "sain.Ok.unwrap": {"tf": 1.4142135623730951}, "sain.Ok.unwrap_or": {"tf": 2.449489742783178}, "sain.Ok.unwrap_or_else": {"tf": 1.4142135623730951}, "sain.Ok.unwrap_err": {"tf": 1.4142135623730951}, "sain.Ok.ok": {"tf": 1.4142135623730951}, "sain.Ok.err": {"tf": 1.4142135623730951}, "sain.Ok.inspect": {"tf": 2.8284271247461903}, "sain.Ok.inspect_err": {"tf": 2.449489742783178}, "sain.Ok.map": {"tf": 1.4142135623730951}, "sain.Ok.map_or": {"tf": 2}, "sain.Ok.map_or_else": {"tf": 2}, "sain.Ok.map_err": {"tf": 2}, "sain.Ok.iter": {"tf": 2}, "sain.Err.is_ok_and": {"tf": 1.4142135623730951}, "sain.cfg.cfg_attr": {"tf": 3}, "sain.cfg.cfg": {"tf": 3.1622776601683795}, "sain.futures.spawn": {"tf": 1.4142135623730951}, "sain.iter.Iter.next": {"tf": 2.8284271247461903}, "sain.iter.Iter.map": {"tf": 2.449489742783178}, "sain.iter.Iter.all": {"tf": 1.4142135623730951}, "sain.iter.Iter.any": {"tf": 1.4142135623730951}, "sain.iter.Iter.async_for_each": {"tf": 2}}, "df": 45}}}}, "z": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {"sain.cfg_attr": {"tf": 2.449489742783178}, "sain.cfg.cfg_attr": {"tf": 2.449489742783178}}, "df": 2}}, "i": {"docs": {}, "df": 0, "p": {"docs": {"sain.Iter.zip": {"tf": 1.4142135623730951}, "sain.iter.Iter.zip": {"tf": 1.4142135623730951}}, "df": 2, "s": {"docs": {"sain.Iter.zip": {"tf": 1}, "sain.iter.Iter.zip": {"tf": 1}}, "df": 2}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.Iter.zip": {"tf": 1}, "sain.iter.Iter.zip": {"tf": 1}}, "df": 2}}}}}}, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {"sain.Default": {"tf": 1}, "sain.Some": {"tf": 1}, "sain.Iter.count": {"tf": 1}, "sain.iter.Iter.count": {"tf": 1}}, "df": 4}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sain.Some": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {"sain.Some": {"tf": 1.7320508075688772}, "sain.Some.expect": {"tf": 1.4142135623730951}, "sain.Some.replace": {"tf": 1.4142135623730951}}, "df": 3}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {"sain.Some.unwrap_or": {"tf": 1}}, "df": 1}}}, "i": {"docs": {"sain.Some.take": {"tf": 1}, "sain.Some.replace": {"tf": 1}}, "df": 2, "n": {"docs": {}, "df": 0, "t": {"docs": {"sain.Some.unwrap_or": {"tf": 1}, "sain.deprecated": {"tf": 2}}, "df": 2, "s": {"docs": {"sain.cfg": {"tf": 1}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"sain.Vec.with_capacity": {"tf": 1}, "sain.vec.Vec.with_capacity": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "r": {"docs": {"sain.todo": {"tf": 1}}, "df": 1}}}}}, "t": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "l": {"docs": {"sain.doc": {"tf": 1}}, "df": 1}}, "t": {"docs": {}, "df": 0, "p": {"docs": {"sain.futures.spawn": {"tf": 1}}, "df": 1}}}}, "k": {"docs": {"sain.Iter.async_for_each": {"tf": 1}, "sain.iter.Iter.async_for_each": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "y": {"docs": {"sain.Iter.sort": {"tf": 1.4142135623730951}, "sain.iter.Iter.sort": {"tf": 1.4142135623730951}}, "df": 2, "s": {"docs": {"sain.AsRef": {"tf": 1}}, "df": 1}}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sain.Some.unwrap_unchecked": {"tf": 1}}, "df": 1}}}}}}}, "x": {"6": {"4": {"docs": {"sain.cfg": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "8": {"6": {"docs": {"sain.cfg": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {"sain.Some.map": {"tf": 1.4142135623730951}, "sain.Some.map_or": {"tf": 2}, "sain.Some.map_or_else": {"tf": 2}, "sain.Some.filter": {"tf": 2}, "sain.Some.and_then": {"tf": 1.7320508075688772}, "sain.Some.is_some_and": {"tf": 2}, "sain.Iter.take": {"tf": 1.7320508075688772}, "sain.Iter.first": {"tf": 1.4142135623730951}, "sain.Iter.last": {"tf": 1.4142135623730951}, "sain.Ok.inspect": {"tf": 2}, "sain.Ok.inspect_err": {"tf": 2}, "sain.Ok.map_or": {"tf": 2}, "sain.Ok.map_or_else": {"tf": 2}, "sain.Ok.map_err": {"tf": 2}, "sain.iter.Iter.take": {"tf": 1.7320508075688772}, "sain.iter.Iter.first": {"tf": 1.4142135623730951}, "sain.iter.Iter.last": {"tf": 1.4142135623730951}}, "df": 17, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "x": {"docs": {"sain.Iter.skip": {"tf": 1.4142135623730951}, "sain.iter.Iter.skip": {"tf": 1.4142135623730951}}, "df": 2}}}}, "j": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"sain.Some.as_ref": {"tf": 1}}, "df": 1}}}, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.Iter.async_for_each": {"tf": 1}, "sain.todo": {"tf": 1}, "sain.futures.spawn": {"tf": 1}, "sain.iter.Iter.async_for_each": {"tf": 1}}, "df": 4}}}, "y": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sain.cfg": {"tf": 1}}, "df": 1}}}}}}, "y": {"docs": {"sain.Iter.take": {"tf": 1}, "sain.iter.Iter.take": {"tf": 1}}, "df": 2, "o": {"docs": {}, "df": 0, "u": {"docs": {"sain.Some.as_ref": {"tf": 1}, "sain.Iter.copied": {"tf": 1}, "sain.iter.Iter.copied": {"tf": 1}}, "df": 3}}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"sain.Iter.filter": {"tf": 1}, "sain.iter.Iter.filter": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "d": {"docs": {"sain.Iter.next": {"tf": 1}, "sain.Iter.take": {"tf": 1}, "sain.iter.Iter.next": {"tf": 1}, "sain.iter.Iter.take": {"tf": 1}}, "df": 4}}, "s": {"docs": {"sain.Iter.take_while": {"tf": 1}, "sain.Iter.drop_while": {"tf": 1}, "sain.Iter.reversed": {"tf": 1}, "sain.Iter.union": {"tf": 1}, "sain.Iter.enumerate": {"tf": 1}, "sain.iter.Iter.take_while": {"tf": 1}, "sain.iter.Iter.drop_while": {"tf": 1}, "sain.iter.Iter.reversed": {"tf": 1}, "sain.iter.Iter.union": {"tf": 1}, "sain.iter.Iter.enumerate": {"tf": 1}, "sain.iter.empty": {"tf": 1}, "sain.iter.once": {"tf": 1}}, "df": 12}}}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {"sain.unimplemented": {"tf": 1}, "sain.Once": {"tf": 1}}, "df": 2}}}}}}, "pipeline": ["trimmer"], "_isPrebuiltIndex": true};

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();